{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u8fd9\u91cc\u662fAlikas\u7684\u5c0f\u7ad9 \u672c\u7ad9\u7684\u4e3b\u8981\u5185\u5bb9\u662fCTF Writeup\uff0c\u5404\u79cd\u5b66\u4e60\u8bb0\u5f55\uff0c\u5e76\u4f1a\u66f4\u65b0\u4e00\u4e9b\u5de5\u5177\u7684\u4f7f\u7528\u4ee5\u53ca\u5404\u79cd\u597d\u73a9\u7684\u4e1c\u897f\u3002 \u535a\u5ba2\u57fa\u4e8e Material for MkDocs \u642d\u5efa\uff0c\u8bc4\u8bba\u529f\u80fd\u4f7f\u7528\u4e86Gitalk\uff0c\u611f\u8c22 @domain \u5927\u4f6c\u7684\u5e2e\u52a9 \u5173\u4e8e\u6211 \u9006\u5411\u65b0\u624b\uff0c\u65e5\u5e38\u7206\u96f6 \u76ee\u524d\u5927\u4e00\uff0c\u65e5\u5e38\u5212\u6c34 \u8054\u7cfb\u6211 \u7535\u5b50\u90ae\u4ef6: l2674318405@gmail.com Color Palette \u8c03\u8272\u677f \u4f60\u53ef\u4ee5\u5728\u8fd9\u91cc\u66f4\u6539\u7f51\u7ad9\u4e3b\u9898\u7684\u989c\u8272\u3002 Primary Colors \u4e3b\u8272 \u9ed8\u8ba4\u662f White \u70b9\u6309\u8272\u5757\u4ee5\u66f4\u6539\u4e3b\u9898\u7684\u4e3b\u8272 Red Pink Purple Deep Purple Indigo Blue Light Blue Cyan Teal Green Light Green Lime Yellow Amber Orange Deep Orange Brown Grey Blue Grey White var buttons = document.querySelectorAll(\"button[data-md-color-primary]\"); Array.prototype.forEach.call(buttons, function(button) { button.addEventListener(\"click\", function() { document.body.dataset.mdColorPrimary = this.dataset.mdColorPrimary; localStorage.setItem(\"data-md-color-primary\", document.body.dataset.mdColorPrimary); }) }) Accent Colors \u8f85\u52a9\u8272 \u9ed8\u8ba4\u662f Lime \u70b9\u6309\u8272\u5757\u4ee5\u66f4\u6539\u4e3b\u9898\u7684\u8f85\u52a9\u8272 Red Pink Purple Deep Purple Indigo Blue Light Blue Cyan Teal Green Light Green Lime Yellow Amber Orange Deep Orange var buttons = document.querySelectorAll(\"button[data-md-color-accent]\"); Array.prototype.forEach.call(buttons, function(button) { button.addEventListener(\"click\", function() { document.body.dataset.mdColorAccent = this.dataset.mdColorAccent; localStorage.setItem(\"data-md-color-accent\", document.body.dataset.mdColorAccent); }) })","title":"\u4e3b\u9875"},{"location":"#_1","text":"\u9006\u5411\u65b0\u624b\uff0c\u65e5\u5e38\u7206\u96f6 \u76ee\u524d\u5927\u4e00\uff0c\u65e5\u5e38\u5212\u6c34","title":"\u5173\u4e8e\u6211"},{"location":"#_2","text":"\u7535\u5b50\u90ae\u4ef6: l2674318405@gmail.com","title":"\u8054\u7cfb\u6211"},{"location":"#color-palette","text":"\u4f60\u53ef\u4ee5\u5728\u8fd9\u91cc\u66f4\u6539\u7f51\u7ad9\u4e3b\u9898\u7684\u989c\u8272\u3002","title":"Color Palette \u8c03\u8272\u677f"},{"location":"#primary-colors","text":"\u9ed8\u8ba4\u662f White \u70b9\u6309\u8272\u5757\u4ee5\u66f4\u6539\u4e3b\u9898\u7684\u4e3b\u8272 Red Pink Purple Deep Purple Indigo Blue Light Blue Cyan Teal Green Light Green Lime Yellow Amber Orange Deep Orange Brown Grey Blue Grey White var buttons = document.querySelectorAll(\"button[data-md-color-primary]\"); Array.prototype.forEach.call(buttons, function(button) { button.addEventListener(\"click\", function() { document.body.dataset.mdColorPrimary = this.dataset.mdColorPrimary; localStorage.setItem(\"data-md-color-primary\", document.body.dataset.mdColorPrimary); }) })","title":"Primary Colors \u4e3b\u8272"},{"location":"#accent-colors","text":"\u9ed8\u8ba4\u662f Lime \u70b9\u6309\u8272\u5757\u4ee5\u66f4\u6539\u4e3b\u9898\u7684\u8f85\u52a9\u8272 Red Pink Purple Deep Purple Indigo Blue Light Blue Cyan Teal Green Light Green Lime Yellow Amber Orange Deep Orange var buttons = document.querySelectorAll(\"button[data-md-color-accent]\"); Array.prototype.forEach.call(buttons, function(button) { button.addEventListener(\"click\", function() { document.body.dataset.mdColorAccent = this.dataset.mdColorAccent; localStorage.setItem(\"data-md-color-accent\", document.body.dataset.mdColorAccent); }) })","title":"Accent Colors \u8f85\u52a9\u8272"},{"location":"links/","text":"\u53cb\u60c5\u94fe\u63a5 \u6392\u540d\u4e0d\u5206\u5148\u540e domain: https://blog.52szu.tech Apeng: https://apeng.fun obliviate: https://cp32.github.io wulidecade: https://wulidecade.cn Allison'notes: https://gardevoir.yoga Richard: https://blog.domineto.top","title":"\u53cb\u60c5\u94fe\u63a5"},{"location":"links/#_1","text":"\u6392\u540d\u4e0d\u5206\u5148\u540e domain: https://blog.52szu.tech Apeng: https://apeng.fun obliviate: https://cp32.github.io wulidecade: https://wulidecade.cn Allison'notes: https://gardevoir.yoga Richard: https://blog.domineto.top","title":"\u53cb\u60c5\u94fe\u63a5"},{"location":"ctf_tools/ida_python/","text":"IDApython\u5e38\u89c1\u51fd\u6570 \u4ecb\u7ecd\u8f6c\u8f7d\u81eahttps:// www.cnblogs.com/0xHack/p/9399321.html \u82f1\u6587\u6587\u6863: https://www.hex-rays.com/products/ida/support/idapython_docs/ \u4f8b\u5b50\u6301\u7eed\u66f4\u65b0\u3002 2019.7.25 \u66f4\u65b0\u4f8b\u5b50: *CTF 2019 Matr1x IDApython \u56e0\u4e3a\u7f51\u4e0a\u5bf9\u4e8eIDApython\u7684\u4ecb\u7ecd\u592a\u5c11\uff0c\u6240\u4ee5\u5728\u8fd9\u91cc\u5217\u4e3e\u4e86\u4e00\u4e9b\u5e38\u7528\u51fd\u6570\uff1a ScreenEA() \u83b7\u53d6 IDA \u8c03\u8bd5\u7a97\u53e3\u4e2d\uff0c\u5149\u6807\u6307\u5411\u4ee3\u7801\u7684\u5730\u5740\u3002\u901a\u8fc7\u8fd9\u4e2a\u51fd\u6570\uff0c\u6211\u4eec\u5c31\u80fd\u591f\u4ece\u4e00\u4e2a\u5df2\u77e5 \u7684\u70b9\u8fd0\u884c\u6211\u4eec\u7684\u811a\u672c\u3002 GetInputFileMD5() \u8fd4\u56de IDA \u52a0\u8f7d\u7684\u4e8c\u8fdb\u5236\u6587\u4ef6\u7684 MD5 \u503c\uff0c\u901a\u8fc7\u8fd9\u4e2a\u503c\u80fd\u591f\u5224\u65ad\u4e00\u4e2a\u6587\u4ef6\u7684\u4e0d\u540c\u7248\u672c\u662f\u5426 \u6709\u6539\u53d8\u3002 FirstSeg() \u8bbf\u95ee\u7a0b\u5e8f\u4e2d\u7684\u7b2c\u4e00\u4e2a\u6bb5\u3002 NextSeg() \u8bbf\u95ee\u4e0b\u4e00\u4e2a\u6bb5\uff0c\u5982\u679c\u6ca1\u6709\u5c31\u8fd4\u56de BADADDR\u3002 SegByName( string SegmentName ) \u901a\u8fc7\u6bb5\u540d\u5b57\u8fd4\u56de\u6bb5\u57fa\u5740\uff0c\u4e3e\u4e2a\u4f8b\u5b50\uff0c\u5982\u679c\u8c03\u7528.text \u4f5c\u4e3a\u53c2\u6570\uff0c\u5c31\u4f1a\u8fd4\u56de\u7a0b\u5e8f\u4e2d\u4ee3\u7801\u6bb5\u7684\u5f00\u59cb\u4f4d\u7f6e\u3002 SegEnd( long Address ) \u901a\u8fc7\u6bb5\u5185\u7684\u67d0\u4e2a\u5730\u5740\uff0c\u83b7\u5f97\u6bb5\u5c3e\u7684\u5730\u5740\u3002 SegStart( long Address ) \u901a\u8fc7\u6bb5\u5185\u7684\u67d0\u4e2a\u5730\u5740\uff0c\u83b7\u5f97\u6bb5\u5934\u7684\u5730\u5740\u3002 SegName( long Address ) \u901a\u8fc7\u6bb5\u5185\u7684\u67d0\u4e2a\u5730\u5740\uff0c\u83b7\u5f97\u6bb5\u540d\u3002 Segments() \u8fd4\u56de\u76ee\u6807\u7a0b\u5e8f\u4e2d\u7684\u6240\u6709\u6bb5\u7684\u5f00\u59cb\u5730\u5740\u3002 Functions( long StartAddress, long EndAddress ) \u8fd4\u56de\u4e00\u4e2a\u5217\u8868\uff0c\u5305\u542b\u4e86\u4ece StartAddress \u5230 EndAddress \u4e4b\u95f4\u7684\u6240\u6709\u51fd\u6570\u3002 Chunks( long FunctionAddress ) \u8fd4\u56de\u4e00\u4e2a\u5217\u8868\uff0c\u5305\u542b\u4e86\u51fd\u6570\u7247\u6bb5\u3002\u6bcf\u4e2a\u5217\u8868\u9879\u90fd\u662f\u4e00\u4e2a\u5143\u7ec4\uff08chunk start, chunk end\uff09 LocByName( string FunctionName ) \u901a\u8fc7\u51fd\u6570\u540d\u8fd4\u56de\u51fd\u6570\u7684\u5730\u5740\u3002 GetFuncOffset( long Address ) \u901a\u8fc7\u4efb\u610f\u4e00\u4e2a\u5730\u5740\uff0c\u7136\u540e\u5f97\u5230\u8fd9\u4e2a\u5730\u5740\u6240\u5c5e\u7684\u51fd\u6570\u540d\uff0c\u4ee5\u53ca\u7ed9\u5b9a\u5730\u5740\u548c\u51fd\u6570\u7684\u76f8\u5bf9\u4f4d\u79fb\u3002 \u7136\u540e\u628a\u8fd9\u4e9b\u4fe1\u606f\u7ec4\u6210\u5b57\u7b26\u4e32\u4ee5\"\u540d\u5b57+\u4f4d\u79fb\"\u7684\u5f62\u5f0f\u8fd4\u56de\u3002 GetFunctionName( long Address ) \u901a\u8fc7\u4e00\u4e2a\u5730\u5740\uff0c\u8fd4\u56de\u8fd9\u4e2a\u5730\u5740\u6240\u5c5e\u7684\u51fd\u6570\u3002 CodeRefsTo( long Address, bool Flow ) \u8fd4\u56de\u4e00\u4e2a\u5217\u8868\uff0c\u544a\u8bc9\u6211\u4eec Address \u5904\u4ee3\u7801\u88ab\u4ec0\u4e48\u5730\u65b9\u5f15\u7528\u4e86\uff0cFlow \u544a\u8bc9 IDAPython \u662f\u5426\u8981 \u8ddf\u8e2a\u8fd9\u4e9b\u4ee3\u7801\u3002 CodeRefsFrom( long Address, bool Flow ) \u8fd4\u56de\u4e00\u4e2a\u5217\u8868\uff0c\u544a\u8bc9\u6211\u4eec Address \u5730\u5740\u4e0a\u7684\u4ee3\u7801\u5f15\u7528\u4f55\u5904\u7684\u4ee3\u7801\u3002 DataRefsTo( long Address ) \u8fd4\u56de\u4e00\u4e2a\u5217\u8868\uff0c\u544a\u8bc9\u6211\u4eec Address \u5904\u6570\u636e\u88ab\u4ec0\u4e48\u5730\u65b9\u5f15\u7528\u4e86\u3002\u5e38\u7528\u4e8e\u8ddf\u8e2a\u5168\u5c40\u53d8\u91cf\u3002 DataRefsFrom( long Address ) \u8fd4\u56de\u4e00\u4e2a\u5217\u8868\uff0c\u544a\u8bc9\u6211\u4eec Address \u5730\u5740\u4e0a\u7684\u4ee3\u7801\u5f15\u7528\u4f55\u5904\u7684\u6570\u636e\u3002 Heads(start=None, end=None) \u5f97\u5230\u4e24\u4e2a\u5730\u5740\u4e4b\u95f4\u6240\u6709\u7684\u5143\u7d20 GetDisasm(addr) \u5f97\u5230addr\u7684\u53cd\u6c47\u7f16\u8bed\u53e5 GetMnem(addr) \u5f97\u5230addr\u5730\u5740\u7684\u64cd\u4f5c\u7801 BADADDR \u9a8c\u8bc1\u662f\u4e0d\u662f\u9519\u8bef\u5730\u5740 GetOpnd(addr\uff0clong n) \u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u5730\u5740\uff0c\u7b2c\u4e8c\u4e2along n\u662f\u64cd\u4f5c\u6570\u7d22\u5f15\u3002\u7b2c\u4e00\u4e2a\u64cd\u4f5c\u6570\u662f0\u548c\u7b2c\u4e8c\u4e2a\u662f1\u3002 idaapi.decode_insn(ea) \u5f97\u5230\u5f53\u524d\u5730\u5740\u6307\u4ee4\u7684\u957f\u5ea6 idc.FindFuncEnd(ea) \u627e\u5230\u5f53\u524d\u5730\u5740\u7684\u51fd\u6570\u7ed3\u675f\u5730\u5740 Entries() \u5165\u53e3\u70b9\u4fe1\u606f Structs() \u904d\u5386\u7ed3\u6784\u4f53 StructMembers(sid) \u904d\u5386\u7ed3\u6784\u4f53\u6210\u5458 DecodePrecedingInstruction(ea) DecodePreviousInstruction(ea) DecodeInstruction(ea) \u83b7\u53d6\u6307\u4ee4\u7ed3\u6784 Strings(object) \u83b7\u53d6\u5b57\u7b26\u4e32 GetIdbDir() \u83b7\u53d6idb\u76ee\u5f55 GetRegisterList() \u83b7\u53d6\u5bc4\u5b58\u5668\u540d\u8868 GetInstructionList \u83b7\u53d6\u6c47\u7f16\u6307\u4ee4\u8868 atoa(ea) \u83b7\u53d6\u6240\u5728\u6bb5 Jump(ea) \u79fb\u52a8\u5149\u6807 Eval(expr) \u8ba1\u7b97\u8868\u8fbe\u5f0f Exec(command) \u6267\u884c\u547d\u4ee4\u884c MakeCode(ea) \u5206\u6790\u4ee3\u7801\u533a MakeNameEx(ea, name, flags) \u91cd\u547d\u540d\u5730\u5740 MakeArray(ea, nitems) \u521b\u5efa\u6570\u7ec4 MakeStr(ea, endea) \u521b\u5efa\u5b57\u7b26\u4e32 MakeData(ea, flags, size, tid) \u521b\u5efa\u6570\u636e MakeByte(ea) MakeWord(ea) MakeDWord(ea) MakeQWord(ea) MakeOWord(ea) MakeYWord(ea) MakeFlot(ea) MakeDouble(ea) MakePackReal(ea) MakeTbyte(ea) MakeStructEx(ea) MakeCustomDataEx(ea) PatchByte(ea, value) PatchWord(ea, value) PatchDword(ea, value) PatchByte(ea, value) PatchByte(ea, value) \u4fee\u6539\u7a0b\u5e8f\u5b57\u8282 Byte(ea) \u5c06\u5730\u5740\u89e3\u91ca\u4e3aByte Word(ea) DWord(ea) QWord(ea) GetFloat(ea) GetDouble(ea) GetString(ea, length = -1, strtype = ASCSTR_C) \u83b7\u53d6\u5b57\u7b26\u4e32 GetCurrentLine() \u83b7\u53d6\u5149\u6807\u6240\u5728\u884c\u53cd\u6c47\u7f16 ItemSize(ea) \u83b7\u53d6\u6307\u4ee4\u6216\u6570\u636e\u957f\u5ea6 FindText(ea, flag, y, x, searchstr) \u67e5\u627e\u6587\u672c FindBinary(ea, flag, searchstr, radix=16) \u67e5\u627e16\u8fdb\u5236 GetEntryPointQty() \u83b7\u53d6\u5165\u53e3\u70b9\u4e2a\u6570 GetEntryOrdinal(index) \u83b7\u53d6\u5165\u53e3\u70b9\u5730\u5740 GetEntryName(ordinal) \u83b7\u5f97\u5165\u53e3\u540d \u5f97\u5230\u5f53\u524d\u5730\u5740\u6240\u5728\u51fd\u6570\u7684\u6570\u636e 1 2 3 4 5 6 7 8 9 10 11 12 13 idc . GetFunctionAttr ( ea , attr ) FUNCATTR_START = 0 # function start address FUNCATTR_END = 4 # function end address FUNCATTR_FLAGS = 8 # function flags FUNCATTR_FRAME = 10 # function frame id FUNCATTR_FRSIZE = 14 # size of local variables FUNCATTR_FRREGS = 18 # size of saved registers area FUNCATTR_ARGSIZE = 20 # number of bytes purged from the stack FUNCATTR_FPD = 24 # frame pointer delta FUNCATTR_COLOR = 28 # function color code FUNCATTR_OWNER = 10 # chunk owner (valid only for tail chunks) FUNCATTR_REFQTY = 14 # number of chunk parents (valid only for tail chunks) Note \u8fd9\u4e2a\u7c7b\u5305\u542b\u4e86\u6211\u4eec\u5728\u521b\u5efa\u8c03\u8bd5\u811a\u672c\u65f6\uff0c\u4f1a\u7ecf\u5e38\u7528\u5230\u7684\u51e0\u4e2a\u8c03\u8bd5\u4e8b\u4ef6\u5904\u7406\u51fd\u6570 1 2 3 4 5 6 7 8 9 10 11 12 class DbgHook ( DBG_Hooks ): \\ # Event handler for when the process starts def dbg_process_start ( self , pid , tid , ea , name , base , size ) return \\ # Event handler for process exit def dbg_process_exit ( self , pid , tid , ea , code ): return \\ # Event handler for when a shared library gets loaded def dbg_library_load(self, pid, tid, ea, name, base, size): return \\ # Breakpoint handler def dbg_bpt ( self , tid , ea ): return \u5b89\u88c5 hook \u7684\u65b9\u5f0f\u5982\u4e0b: 1 2 debugger = DbgHook () debugger . hook () \u73b0\u5728\u8fd0\u884c\u8c03\u8bd5\u5668\uff0chook \u4f1a\u6355\u6349\u6240\u6709\u7684\u8c03\u8bd5\u4e8b\u4ef6\uff0c\u8fd9\u6837\u5c31\u80fd\u975e\u5e38\u7cbe\u786e\u7684\u63a7\u5236 IDA \u8c03\u8bd5\u5668\u3002 \u4e0b\u9762\u7684\u51fd\u6570\u5728\u8c03\u8bd5\u7684\u65f6\u5019\u975e\u5e38\u6709\u7528: AddBpt( long Address ) \u5728\u6307\u5b9a\u7684\u5730\u70b9\u8bbe\u7f6e\u8f6f\u4ef6\u65ad\u70b9\u3002 GetBptQty() \u8fd4\u56de\u5f53\u524d\u8bbe\u7f6e\u7684\u65ad\u70b9\u6570\u91cf\u3002 GetRegValue( string Register ) \u901a\u8fc7\u5bc4\u5b58\u5668\u540d\u83b7\u5f97\u5bc4\u5b58\u5668\u503c\u3002 SetRegValue( long Value, string Register ) \u901a\u8fc7\u5bc4\u5b58\u5668\u540d\u8bbe\u7f6e\u5bc4\u5b58\u5668\u503c \u4f8b\u5b50 Xman-2018-re0 1 2 3 4 import ida_bytes buf = map ( ord , ida_bytes . get_bytes ( 0x600B00 , 182 )) buf = map ( lambda x : x ^ 0xC , buf ) ida_bytes . patch_bytes ( 0x600B00 , str ( bytearray ( buf ))) KCTF 2019 Q1 \u7b2c\u4e03\u9898 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 bg = 0x00401000 end = 0x004BBE00 addr = bg def patch_nop ( begin , end ): while ( end > begin ): PatchByte ( begin , 0x90 ) begin = begin + 1 def next_instr ( addr ): return addr + ItemSize ( addr ) while ( addr < end ): next = next_instr ( addr ) MakeCode ( next ) if 'j' in GetMnem ( addr ) and 'j' in GetMnem ( next ) : if GetOperandValue ( addr , 0 ) == GetOperandValue ( next , 0 ): print 'jmp %08x ' % addr dest_addr = GetOperandValue ( addr , 0 ) patch_nop ( addr , dest_addr ) addr = dest_addr MakeCode ( addr ) if 'clc' == GetMnem ( addr ) and 'jnb' in GetMnem ( next ) : print 'clc %08x ' % addr dest_addr = GetOperandValue ( next , 0 ) patch_nop ( addr , dest_addr ) addr = dest_addr MakeCode ( addr ) if 'stc' == GetMnem ( addr ) and 'jb' in GetMnem ( next ) : print 'clc %08x ' % addr dest_addr = GetOperandValue ( next , 0 ) patch_nop ( addr , dest_addr ) addr = dest_addr MakeCode ( addr ) if 'call' in GetMnem ( addr ): dest_addr = GetOperandValue ( addr , 0 ) idc . del_items ( next_instr ( addr )) MakeCode ( dest_addr ) if \"add esp, 4\" == GetDisasm ( dest_addr ): print 'call %08x ' % addr dest_addr = next_instr ( dest_addr ) patch_nop ( addr , dest_addr ) addr = dest_addr MakeCode ( addr ) addr = next_instr ( addr ) MakeCode ( addr ) *CTF 2019 Matr1x \u9898\u76ee\uff1a Matr1x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 bg = 0x00002620 end = 0x00011320 addr = bg index = 0 def patch_nop ( begin , end ): while end > begin : PatchByte ( begin , 0x90 ) begin += 1 def next_instr ( addr ): return addr + ItemSize ( addr ) def patch_global ( addr , eax ): flag = GetMnem ( addr ) ebx = GetOperandValue ( addr , 1 ) if flag == \"xor\" : eax ^= ebx elif flag == \"shl\" : eax <<= ebx elif flag == \"sub\" : eax -= ebx elif flag == \"add\" : eax += ebx elif flag == \"and\" : eax &= ebx elif flag == \"shr\" : eax >>= ebx elif flag == \"or\" : eax |= ebx return eax & 0xFFFFFFFF OperandValue = [ 'or' , 'shr' , 'and' , 'add' , 'sub' , 'shl' , 'xor' ] Register = [ 'ebx' , 'ecx' , 'edx' , 'eax' ] Patch_jnz = [ 'xor' , 'sub' ] dest_addr = 0 _addr = 0 while addr < end : next = next_instr ( addr ) MakeCode ( next ) if GetMnem ( addr ) in Patch_jnz and 'jnz' in GetMnem ( next ): if GetOperandValue ( addr , 0 ) == GetOperandValue ( addr , 1 ): print ( \"sucess_patch_jnz: %x \" % addr ) dest_addr = next_instr ( next ) patch_nop ( next , dest_addr ) if \"call $+5\" == GetDisasm ( addr ): if \"pop eax\" == GetDisasm ( next ): dest_addr = addr for i in range ( 4 ): dest_addr = next_instr ( dest_addr ) MakeCode ( dest_addr ) if \"jmp\" in GetMnem ( dest_addr ): print ( \"sucess_patch_call: %x \" % addr ) patch_nop ( addr , dest_addr ) PatchByte ( dest_addr , 0xE8 ) if \"xchg\" in GetMnem ( addr ): if GetOperandValue ( addr , 1 ) == GetOperandValue ( addr , 0 ): print ( \"sucess_patch_xchg: %x \" % addr ) patch_nop ( addr , next ) if \"jmp $+5\" == GetDisasm ( addr ): if \"leave\" in GetMnem ( next ): patch_nop ( addr , next ) print ( \"sucess_patch_jmp: %x \" % addr ) next = next_instr ( next ) addr = next next = next_instr ( next ) next = next_instr ( next ) patch_nop ( addr , next ) PatchByte ( addr , 0xC3 ) if \"[ebp\" in GetDisasm ( addr ) and GetOperandValue ( addr , 1 ) > 0x10000 and GetOperandValue ( addr , 1 ) < ( 0xFFFFFFFF - 0x10000 ): patch_nop ( addr , next ) print ( \"sucess_patch_ebp: %x \" % addr ) if 0x0001329C >= GetOperandValue ( addr , 1 ) >= 0x00013280 : print ( \"sucess: %x \" % addr ) eax = Dword ( GetOperandValue ( addr , 1 )) _addr = addr Reg = GetOperandValue ( addr , 0 ) while GetMnem ( next ) in OperandValue : eax = patch_global ( next , eax ) _addr = next next = next_instr ( next ) MakeCode ( _addr ) MakeCode ( next ) if GetOperandValue ( _addr , 0 ) != GetOperandValue ( next , 0 ): break elif GetOpnd ( next , 1 ) in Register : break if GetOpnd ( _addr , 0 ) == GetOpnd ( _addr , 1 ): Reg = - 1 if Reg != - 1 : addr = next_instr ( addr ) patch_nop ( addr , next ) if Reg == 3 : PatchByte ( addr , 0xBB ) PatchDword ( addr + 1 , eax ) elif Reg == 2 : PatchByte ( addr , 0xBA ) PatchDword ( addr + 1 , eax ) elif Reg == 1 : PatchByte ( addr , 0xB9 ) PatchDword ( addr + 1 , eax ) elif Reg == 0 : PatchByte ( addr , 0xB8 ) PatchDword ( addr + 1 , eax ) addr = next_instr ( addr ) MakeCode ( addr )","title":"IDA python"},{"location":"ctf_tools/ida_python/#idapython","text":"\u56e0\u4e3a\u7f51\u4e0a\u5bf9\u4e8eIDApython\u7684\u4ecb\u7ecd\u592a\u5c11\uff0c\u6240\u4ee5\u5728\u8fd9\u91cc\u5217\u4e3e\u4e86\u4e00\u4e9b\u5e38\u7528\u51fd\u6570\uff1a ScreenEA() \u83b7\u53d6 IDA \u8c03\u8bd5\u7a97\u53e3\u4e2d\uff0c\u5149\u6807\u6307\u5411\u4ee3\u7801\u7684\u5730\u5740\u3002\u901a\u8fc7\u8fd9\u4e2a\u51fd\u6570\uff0c\u6211\u4eec\u5c31\u80fd\u591f\u4ece\u4e00\u4e2a\u5df2\u77e5 \u7684\u70b9\u8fd0\u884c\u6211\u4eec\u7684\u811a\u672c\u3002 GetInputFileMD5() \u8fd4\u56de IDA \u52a0\u8f7d\u7684\u4e8c\u8fdb\u5236\u6587\u4ef6\u7684 MD5 \u503c\uff0c\u901a\u8fc7\u8fd9\u4e2a\u503c\u80fd\u591f\u5224\u65ad\u4e00\u4e2a\u6587\u4ef6\u7684\u4e0d\u540c\u7248\u672c\u662f\u5426 \u6709\u6539\u53d8\u3002 FirstSeg() \u8bbf\u95ee\u7a0b\u5e8f\u4e2d\u7684\u7b2c\u4e00\u4e2a\u6bb5\u3002 NextSeg() \u8bbf\u95ee\u4e0b\u4e00\u4e2a\u6bb5\uff0c\u5982\u679c\u6ca1\u6709\u5c31\u8fd4\u56de BADADDR\u3002 SegByName( string SegmentName ) \u901a\u8fc7\u6bb5\u540d\u5b57\u8fd4\u56de\u6bb5\u57fa\u5740\uff0c\u4e3e\u4e2a\u4f8b\u5b50\uff0c\u5982\u679c\u8c03\u7528.text \u4f5c\u4e3a\u53c2\u6570\uff0c\u5c31\u4f1a\u8fd4\u56de\u7a0b\u5e8f\u4e2d\u4ee3\u7801\u6bb5\u7684\u5f00\u59cb\u4f4d\u7f6e\u3002 SegEnd( long Address ) \u901a\u8fc7\u6bb5\u5185\u7684\u67d0\u4e2a\u5730\u5740\uff0c\u83b7\u5f97\u6bb5\u5c3e\u7684\u5730\u5740\u3002 SegStart( long Address ) \u901a\u8fc7\u6bb5\u5185\u7684\u67d0\u4e2a\u5730\u5740\uff0c\u83b7\u5f97\u6bb5\u5934\u7684\u5730\u5740\u3002 SegName( long Address ) \u901a\u8fc7\u6bb5\u5185\u7684\u67d0\u4e2a\u5730\u5740\uff0c\u83b7\u5f97\u6bb5\u540d\u3002 Segments() \u8fd4\u56de\u76ee\u6807\u7a0b\u5e8f\u4e2d\u7684\u6240\u6709\u6bb5\u7684\u5f00\u59cb\u5730\u5740\u3002 Functions( long StartAddress, long EndAddress ) \u8fd4\u56de\u4e00\u4e2a\u5217\u8868\uff0c\u5305\u542b\u4e86\u4ece StartAddress \u5230 EndAddress \u4e4b\u95f4\u7684\u6240\u6709\u51fd\u6570\u3002 Chunks( long FunctionAddress ) \u8fd4\u56de\u4e00\u4e2a\u5217\u8868\uff0c\u5305\u542b\u4e86\u51fd\u6570\u7247\u6bb5\u3002\u6bcf\u4e2a\u5217\u8868\u9879\u90fd\u662f\u4e00\u4e2a\u5143\u7ec4\uff08chunk start, chunk end\uff09 LocByName( string FunctionName ) \u901a\u8fc7\u51fd\u6570\u540d\u8fd4\u56de\u51fd\u6570\u7684\u5730\u5740\u3002 GetFuncOffset( long Address ) \u901a\u8fc7\u4efb\u610f\u4e00\u4e2a\u5730\u5740\uff0c\u7136\u540e\u5f97\u5230\u8fd9\u4e2a\u5730\u5740\u6240\u5c5e\u7684\u51fd\u6570\u540d\uff0c\u4ee5\u53ca\u7ed9\u5b9a\u5730\u5740\u548c\u51fd\u6570\u7684\u76f8\u5bf9\u4f4d\u79fb\u3002 \u7136\u540e\u628a\u8fd9\u4e9b\u4fe1\u606f\u7ec4\u6210\u5b57\u7b26\u4e32\u4ee5\"\u540d\u5b57+\u4f4d\u79fb\"\u7684\u5f62\u5f0f\u8fd4\u56de\u3002 GetFunctionName( long Address ) \u901a\u8fc7\u4e00\u4e2a\u5730\u5740\uff0c\u8fd4\u56de\u8fd9\u4e2a\u5730\u5740\u6240\u5c5e\u7684\u51fd\u6570\u3002 CodeRefsTo( long Address, bool Flow ) \u8fd4\u56de\u4e00\u4e2a\u5217\u8868\uff0c\u544a\u8bc9\u6211\u4eec Address \u5904\u4ee3\u7801\u88ab\u4ec0\u4e48\u5730\u65b9\u5f15\u7528\u4e86\uff0cFlow \u544a\u8bc9 IDAPython \u662f\u5426\u8981 \u8ddf\u8e2a\u8fd9\u4e9b\u4ee3\u7801\u3002 CodeRefsFrom( long Address, bool Flow ) \u8fd4\u56de\u4e00\u4e2a\u5217\u8868\uff0c\u544a\u8bc9\u6211\u4eec Address \u5730\u5740\u4e0a\u7684\u4ee3\u7801\u5f15\u7528\u4f55\u5904\u7684\u4ee3\u7801\u3002 DataRefsTo( long Address ) \u8fd4\u56de\u4e00\u4e2a\u5217\u8868\uff0c\u544a\u8bc9\u6211\u4eec Address \u5904\u6570\u636e\u88ab\u4ec0\u4e48\u5730\u65b9\u5f15\u7528\u4e86\u3002\u5e38\u7528\u4e8e\u8ddf\u8e2a\u5168\u5c40\u53d8\u91cf\u3002 DataRefsFrom( long Address ) \u8fd4\u56de\u4e00\u4e2a\u5217\u8868\uff0c\u544a\u8bc9\u6211\u4eec Address \u5730\u5740\u4e0a\u7684\u4ee3\u7801\u5f15\u7528\u4f55\u5904\u7684\u6570\u636e\u3002 Heads(start=None, end=None) \u5f97\u5230\u4e24\u4e2a\u5730\u5740\u4e4b\u95f4\u6240\u6709\u7684\u5143\u7d20 GetDisasm(addr) \u5f97\u5230addr\u7684\u53cd\u6c47\u7f16\u8bed\u53e5 GetMnem(addr) \u5f97\u5230addr\u5730\u5740\u7684\u64cd\u4f5c\u7801 BADADDR \u9a8c\u8bc1\u662f\u4e0d\u662f\u9519\u8bef\u5730\u5740 GetOpnd(addr\uff0clong n) \u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u5730\u5740\uff0c\u7b2c\u4e8c\u4e2along n\u662f\u64cd\u4f5c\u6570\u7d22\u5f15\u3002\u7b2c\u4e00\u4e2a\u64cd\u4f5c\u6570\u662f0\u548c\u7b2c\u4e8c\u4e2a\u662f1\u3002 idaapi.decode_insn(ea) \u5f97\u5230\u5f53\u524d\u5730\u5740\u6307\u4ee4\u7684\u957f\u5ea6 idc.FindFuncEnd(ea) \u627e\u5230\u5f53\u524d\u5730\u5740\u7684\u51fd\u6570\u7ed3\u675f\u5730\u5740 Entries() \u5165\u53e3\u70b9\u4fe1\u606f Structs() \u904d\u5386\u7ed3\u6784\u4f53 StructMembers(sid) \u904d\u5386\u7ed3\u6784\u4f53\u6210\u5458 DecodePrecedingInstruction(ea) DecodePreviousInstruction(ea) DecodeInstruction(ea) \u83b7\u53d6\u6307\u4ee4\u7ed3\u6784 Strings(object) \u83b7\u53d6\u5b57\u7b26\u4e32 GetIdbDir() \u83b7\u53d6idb\u76ee\u5f55 GetRegisterList() \u83b7\u53d6\u5bc4\u5b58\u5668\u540d\u8868 GetInstructionList \u83b7\u53d6\u6c47\u7f16\u6307\u4ee4\u8868 atoa(ea) \u83b7\u53d6\u6240\u5728\u6bb5 Jump(ea) \u79fb\u52a8\u5149\u6807 Eval(expr) \u8ba1\u7b97\u8868\u8fbe\u5f0f Exec(command) \u6267\u884c\u547d\u4ee4\u884c MakeCode(ea) \u5206\u6790\u4ee3\u7801\u533a MakeNameEx(ea, name, flags) \u91cd\u547d\u540d\u5730\u5740 MakeArray(ea, nitems) \u521b\u5efa\u6570\u7ec4 MakeStr(ea, endea) \u521b\u5efa\u5b57\u7b26\u4e32 MakeData(ea, flags, size, tid) \u521b\u5efa\u6570\u636e MakeByte(ea) MakeWord(ea) MakeDWord(ea) MakeQWord(ea) MakeOWord(ea) MakeYWord(ea) MakeFlot(ea) MakeDouble(ea) MakePackReal(ea) MakeTbyte(ea) MakeStructEx(ea) MakeCustomDataEx(ea) PatchByte(ea, value) PatchWord(ea, value) PatchDword(ea, value) PatchByte(ea, value) PatchByte(ea, value) \u4fee\u6539\u7a0b\u5e8f\u5b57\u8282 Byte(ea) \u5c06\u5730\u5740\u89e3\u91ca\u4e3aByte Word(ea) DWord(ea) QWord(ea) GetFloat(ea) GetDouble(ea) GetString(ea, length = -1, strtype = ASCSTR_C) \u83b7\u53d6\u5b57\u7b26\u4e32 GetCurrentLine() \u83b7\u53d6\u5149\u6807\u6240\u5728\u884c\u53cd\u6c47\u7f16 ItemSize(ea) \u83b7\u53d6\u6307\u4ee4\u6216\u6570\u636e\u957f\u5ea6 FindText(ea, flag, y, x, searchstr) \u67e5\u627e\u6587\u672c FindBinary(ea, flag, searchstr, radix=16) \u67e5\u627e16\u8fdb\u5236 GetEntryPointQty() \u83b7\u53d6\u5165\u53e3\u70b9\u4e2a\u6570 GetEntryOrdinal(index) \u83b7\u53d6\u5165\u53e3\u70b9\u5730\u5740 GetEntryName(ordinal) \u83b7\u5f97\u5165\u53e3\u540d \u5f97\u5230\u5f53\u524d\u5730\u5740\u6240\u5728\u51fd\u6570\u7684\u6570\u636e 1 2 3 4 5 6 7 8 9 10 11 12 13 idc . GetFunctionAttr ( ea , attr ) FUNCATTR_START = 0 # function start address FUNCATTR_END = 4 # function end address FUNCATTR_FLAGS = 8 # function flags FUNCATTR_FRAME = 10 # function frame id FUNCATTR_FRSIZE = 14 # size of local variables FUNCATTR_FRREGS = 18 # size of saved registers area FUNCATTR_ARGSIZE = 20 # number of bytes purged from the stack FUNCATTR_FPD = 24 # frame pointer delta FUNCATTR_COLOR = 28 # function color code FUNCATTR_OWNER = 10 # chunk owner (valid only for tail chunks) FUNCATTR_REFQTY = 14 # number of chunk parents (valid only for tail chunks) Note \u8fd9\u4e2a\u7c7b\u5305\u542b\u4e86\u6211\u4eec\u5728\u521b\u5efa\u8c03\u8bd5\u811a\u672c\u65f6\uff0c\u4f1a\u7ecf\u5e38\u7528\u5230\u7684\u51e0\u4e2a\u8c03\u8bd5\u4e8b\u4ef6\u5904\u7406\u51fd\u6570 1 2 3 4 5 6 7 8 9 10 11 12 class DbgHook ( DBG_Hooks ): \\ # Event handler for when the process starts def dbg_process_start ( self , pid , tid , ea , name , base , size ) return \\ # Event handler for process exit def dbg_process_exit ( self , pid , tid , ea , code ): return \\ # Event handler for when a shared library gets loaded def dbg_library_load(self, pid, tid, ea, name, base, size): return \\ # Breakpoint handler def dbg_bpt ( self , tid , ea ): return \u5b89\u88c5 hook \u7684\u65b9\u5f0f\u5982\u4e0b: 1 2 debugger = DbgHook () debugger . hook () \u73b0\u5728\u8fd0\u884c\u8c03\u8bd5\u5668\uff0chook \u4f1a\u6355\u6349\u6240\u6709\u7684\u8c03\u8bd5\u4e8b\u4ef6\uff0c\u8fd9\u6837\u5c31\u80fd\u975e\u5e38\u7cbe\u786e\u7684\u63a7\u5236 IDA \u8c03\u8bd5\u5668\u3002 \u4e0b\u9762\u7684\u51fd\u6570\u5728\u8c03\u8bd5\u7684\u65f6\u5019\u975e\u5e38\u6709\u7528: AddBpt( long Address ) \u5728\u6307\u5b9a\u7684\u5730\u70b9\u8bbe\u7f6e\u8f6f\u4ef6\u65ad\u70b9\u3002 GetBptQty() \u8fd4\u56de\u5f53\u524d\u8bbe\u7f6e\u7684\u65ad\u70b9\u6570\u91cf\u3002 GetRegValue( string Register ) \u901a\u8fc7\u5bc4\u5b58\u5668\u540d\u83b7\u5f97\u5bc4\u5b58\u5668\u503c\u3002 SetRegValue( long Value, string Register ) \u901a\u8fc7\u5bc4\u5b58\u5668\u540d\u8bbe\u7f6e\u5bc4\u5b58\u5668\u503c","title":"IDApython"},{"location":"ctf_tools/ida_python/#_1","text":"","title":"\u4f8b\u5b50"},{"location":"ctf_tools/ida_python/#xman-2018-re0","text":"1 2 3 4 import ida_bytes buf = map ( ord , ida_bytes . get_bytes ( 0x600B00 , 182 )) buf = map ( lambda x : x ^ 0xC , buf ) ida_bytes . patch_bytes ( 0x600B00 , str ( bytearray ( buf )))","title":"Xman-2018-re0"},{"location":"ctf_tools/ida_python/#kctf-2019-q1","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 bg = 0x00401000 end = 0x004BBE00 addr = bg def patch_nop ( begin , end ): while ( end > begin ): PatchByte ( begin , 0x90 ) begin = begin + 1 def next_instr ( addr ): return addr + ItemSize ( addr ) while ( addr < end ): next = next_instr ( addr ) MakeCode ( next ) if 'j' in GetMnem ( addr ) and 'j' in GetMnem ( next ) : if GetOperandValue ( addr , 0 ) == GetOperandValue ( next , 0 ): print 'jmp %08x ' % addr dest_addr = GetOperandValue ( addr , 0 ) patch_nop ( addr , dest_addr ) addr = dest_addr MakeCode ( addr ) if 'clc' == GetMnem ( addr ) and 'jnb' in GetMnem ( next ) : print 'clc %08x ' % addr dest_addr = GetOperandValue ( next , 0 ) patch_nop ( addr , dest_addr ) addr = dest_addr MakeCode ( addr ) if 'stc' == GetMnem ( addr ) and 'jb' in GetMnem ( next ) : print 'clc %08x ' % addr dest_addr = GetOperandValue ( next , 0 ) patch_nop ( addr , dest_addr ) addr = dest_addr MakeCode ( addr ) if 'call' in GetMnem ( addr ): dest_addr = GetOperandValue ( addr , 0 ) idc . del_items ( next_instr ( addr )) MakeCode ( dest_addr ) if \"add esp, 4\" == GetDisasm ( dest_addr ): print 'call %08x ' % addr dest_addr = next_instr ( dest_addr ) patch_nop ( addr , dest_addr ) addr = dest_addr MakeCode ( addr ) addr = next_instr ( addr ) MakeCode ( addr )","title":"KCTF 2019 Q1 \u7b2c\u4e03\u9898"},{"location":"ctf_tools/ida_python/#ctf-2019-matr1x","text":"\u9898\u76ee\uff1a Matr1x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 bg = 0x00002620 end = 0x00011320 addr = bg index = 0 def patch_nop ( begin , end ): while end > begin : PatchByte ( begin , 0x90 ) begin += 1 def next_instr ( addr ): return addr + ItemSize ( addr ) def patch_global ( addr , eax ): flag = GetMnem ( addr ) ebx = GetOperandValue ( addr , 1 ) if flag == \"xor\" : eax ^= ebx elif flag == \"shl\" : eax <<= ebx elif flag == \"sub\" : eax -= ebx elif flag == \"add\" : eax += ebx elif flag == \"and\" : eax &= ebx elif flag == \"shr\" : eax >>= ebx elif flag == \"or\" : eax |= ebx return eax & 0xFFFFFFFF OperandValue = [ 'or' , 'shr' , 'and' , 'add' , 'sub' , 'shl' , 'xor' ] Register = [ 'ebx' , 'ecx' , 'edx' , 'eax' ] Patch_jnz = [ 'xor' , 'sub' ] dest_addr = 0 _addr = 0 while addr < end : next = next_instr ( addr ) MakeCode ( next ) if GetMnem ( addr ) in Patch_jnz and 'jnz' in GetMnem ( next ): if GetOperandValue ( addr , 0 ) == GetOperandValue ( addr , 1 ): print ( \"sucess_patch_jnz: %x \" % addr ) dest_addr = next_instr ( next ) patch_nop ( next , dest_addr ) if \"call $+5\" == GetDisasm ( addr ): if \"pop eax\" == GetDisasm ( next ): dest_addr = addr for i in range ( 4 ): dest_addr = next_instr ( dest_addr ) MakeCode ( dest_addr ) if \"jmp\" in GetMnem ( dest_addr ): print ( \"sucess_patch_call: %x \" % addr ) patch_nop ( addr , dest_addr ) PatchByte ( dest_addr , 0xE8 ) if \"xchg\" in GetMnem ( addr ): if GetOperandValue ( addr , 1 ) == GetOperandValue ( addr , 0 ): print ( \"sucess_patch_xchg: %x \" % addr ) patch_nop ( addr , next ) if \"jmp $+5\" == GetDisasm ( addr ): if \"leave\" in GetMnem ( next ): patch_nop ( addr , next ) print ( \"sucess_patch_jmp: %x \" % addr ) next = next_instr ( next ) addr = next next = next_instr ( next ) next = next_instr ( next ) patch_nop ( addr , next ) PatchByte ( addr , 0xC3 ) if \"[ebp\" in GetDisasm ( addr ) and GetOperandValue ( addr , 1 ) > 0x10000 and GetOperandValue ( addr , 1 ) < ( 0xFFFFFFFF - 0x10000 ): patch_nop ( addr , next ) print ( \"sucess_patch_ebp: %x \" % addr ) if 0x0001329C >= GetOperandValue ( addr , 1 ) >= 0x00013280 : print ( \"sucess: %x \" % addr ) eax = Dword ( GetOperandValue ( addr , 1 )) _addr = addr Reg = GetOperandValue ( addr , 0 ) while GetMnem ( next ) in OperandValue : eax = patch_global ( next , eax ) _addr = next next = next_instr ( next ) MakeCode ( _addr ) MakeCode ( next ) if GetOperandValue ( _addr , 0 ) != GetOperandValue ( next , 0 ): break elif GetOpnd ( next , 1 ) in Register : break if GetOpnd ( _addr , 0 ) == GetOpnd ( _addr , 1 ): Reg = - 1 if Reg != - 1 : addr = next_instr ( addr ) patch_nop ( addr , next ) if Reg == 3 : PatchByte ( addr , 0xBB ) PatchDword ( addr + 1 , eax ) elif Reg == 2 : PatchByte ( addr , 0xBA ) PatchDword ( addr + 1 , eax ) elif Reg == 1 : PatchByte ( addr , 0xB9 ) PatchDword ( addr + 1 , eax ) elif Reg == 0 : PatchByte ( addr , 0xB8 ) PatchDword ( addr + 1 , eax ) addr = next_instr ( addr ) MakeCode ( addr )","title":"*CTF 2019 Matr1x"},{"location":"ctf_tools/xortool/","text":"\u7b80\u4ecb xortool.py\u662f\u57fa\u4e8epython\u7684\u811a\u672c\uff0c\u7528\u4e8e\u5b8c\u6210\u4e00\u4e9bxor\u5206\u6790\uff0c\u5305\u62ec: \u731c\u60f3key\u7684\u957f\u5ea6 \u731c\u60f3key\u7684\u503c \u89e3\u5bc6\u4e00\u4e9b\u7ecf\u8fc7xoe\u52a0\u5bc6\u7684\u6587\u4ef6 \u5b98\u65b9: https://github.com/hellman/xortools.git \u5b89\u88c5 xortool\u4f9d\u8d56\u4e8epython\u7684\u547d\u4ee4\u884c\u53c2\u6570\u89e3\u91ca\u5668docopt 1 2 3 4 5 $ sudo pip isntall docopt $ cd /data/src $ git clone https://github.com/hellman/xortools.git $ cd xortool $ sudo python setup.py install Options 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 $ xortool - h xortool A tool to do some xor analysis : - guess the key length ( based on count of equal chars ) - guess the key ( base on knowledge of most frequent char ) Usage : xortool [ - x ] [ - m MAX - LEN ] [ - f ] [ - t CHARSET ] [ FILE ] xortool [ - x ] [ - l LEN ] [ - c CHAR | - b | - o ] [ - f ] [ - t CHARSET ] [ FILE ] xortool [ - x ] [ - m MAX - LEN | - l LEN ] [ - c CHAR | - b | - o ] [ - f ] [ - t CHARSET ] [ FILE ] xortool [ - h | -- help ] xortool -- version Options : - x -- hex input is hex - encoded str - l LEN , -- key - length = LEN length of the key - m MAX - LEN , -- max - keylen = MAX - LEN maximum key length to probe [ default : 65 ] - c CHAR , -- char = CHAR most frequent char ( one char or hex code ) - b -- brute - chars brute force all possible most frequent chars - o -- brute - printable same as - b but will only check printable chars - f -- filter - output filter outputs based on the charset - t CHARSET -- text - charset = CHARSET target text character set [ default : printable ] - h -- help show this help Notes : Text character set : * Pre - defined sets : printable , base32 , base64 * Custom sets : - a : lowercase chars - A : uppercase chars - 1 : digits - ! : special chars - * : printable chars Examples : xortool file . bin xortool - l 11 - c 20 file . bin xortool - x - c ' ' file . hex xortool - b - f - l 23 - t base64 message . enc \u4f8b\u9898 \u653b\u9632\u4e16\u754c misc 5-1 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 $ xortool -c 20 cipher The most probable key lengths: 2 : 12 .2% 5 : 11 .9% 9 : 9 .8% 13 : 22 .2% 20 : 6 .8% 22 : 6 .2% 26 : 12 .8% 30 : 4 .6% 39 : 7 .8% 52 : 5 .7% Key-length can be 3 *n 1 possible key ( s ) of length 13 : Good \\t uckToYou Found 1 plaintexts with 95 .0%+ valid characters See files filename-key.csv, filename-char_used-perc_valid.csv","title":"Xortool"},{"location":"ctf_tools/xortool/#_1","text":"xortool.py\u662f\u57fa\u4e8epython\u7684\u811a\u672c\uff0c\u7528\u4e8e\u5b8c\u6210\u4e00\u4e9bxor\u5206\u6790\uff0c\u5305\u62ec: \u731c\u60f3key\u7684\u957f\u5ea6 \u731c\u60f3key\u7684\u503c \u89e3\u5bc6\u4e00\u4e9b\u7ecf\u8fc7xoe\u52a0\u5bc6\u7684\u6587\u4ef6 \u5b98\u65b9: https://github.com/hellman/xortools.git","title":"\u7b80\u4ecb"},{"location":"ctf_tools/xortool/#_2","text":"xortool\u4f9d\u8d56\u4e8epython\u7684\u547d\u4ee4\u884c\u53c2\u6570\u89e3\u91ca\u5668docopt 1 2 3 4 5 $ sudo pip isntall docopt $ cd /data/src $ git clone https://github.com/hellman/xortools.git $ cd xortool $ sudo python setup.py install","title":"\u5b89\u88c5"},{"location":"ctf_tools/xortool/#options","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 $ xortool - h xortool A tool to do some xor analysis : - guess the key length ( based on count of equal chars ) - guess the key ( base on knowledge of most frequent char ) Usage : xortool [ - x ] [ - m MAX - LEN ] [ - f ] [ - t CHARSET ] [ FILE ] xortool [ - x ] [ - l LEN ] [ - c CHAR | - b | - o ] [ - f ] [ - t CHARSET ] [ FILE ] xortool [ - x ] [ - m MAX - LEN | - l LEN ] [ - c CHAR | - b | - o ] [ - f ] [ - t CHARSET ] [ FILE ] xortool [ - h | -- help ] xortool -- version Options : - x -- hex input is hex - encoded str - l LEN , -- key - length = LEN length of the key - m MAX - LEN , -- max - keylen = MAX - LEN maximum key length to probe [ default : 65 ] - c CHAR , -- char = CHAR most frequent char ( one char or hex code ) - b -- brute - chars brute force all possible most frequent chars - o -- brute - printable same as - b but will only check printable chars - f -- filter - output filter outputs based on the charset - t CHARSET -- text - charset = CHARSET target text character set [ default : printable ] - h -- help show this help Notes : Text character set : * Pre - defined sets : printable , base32 , base64 * Custom sets : - a : lowercase chars - A : uppercase chars - 1 : digits - ! : special chars - * : printable chars Examples : xortool file . bin xortool - l 11 - c 20 file . bin xortool - x - c ' ' file . hex xortool - b - f - l 23 - t base64 message . enc","title":"Options"},{"location":"ctf_tools/xortool/#_3","text":"","title":"\u4f8b\u9898"},{"location":"ctf_tools/xortool/#misc-5-1","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 $ xortool -c 20 cipher The most probable key lengths: 2 : 12 .2% 5 : 11 .9% 9 : 9 .8% 13 : 22 .2% 20 : 6 .8% 22 : 6 .2% 26 : 12 .8% 30 : 4 .6% 39 : 7 .8% 52 : 5 .7% Key-length can be 3 *n 1 possible key ( s ) of length 13 : Good \\t uckToYou Found 1 plaintexts with 95 .0%+ valid characters See files filename-key.csv, filename-char_used-perc_valid.csv","title":"\u653b\u9632\u4e16\u754c misc 5-1"},{"location":"ctf_write_up/2018/2018rctf/","text":"0x00 magic \u9898\u76ee\uff1a magic \u672c\u9898\u5927\u6982\u6709\u4e09\u4e2a\u4efb\u52a1\uff1a 1.\u627e\u5230\u771f\u6b63\u7684main\u51fd\u6570 2.\u7b97\u51fa\u8fd0\u884c\u65f6\u95f4 3.RC4+VM\u9006\u5411\u8fd8\u539f \u5bfb\u627e\u771f\u6b63\u7684main\u51fd\u6570 \u62ff\u5230\u9898\uff0c\u8fd0\u884c\u4e00\u4e0b\uff0c\u8f93\u51fa\u5982\u4e0b\uff1a 1 2 3 D:\\Downloads>magic.exe flag only appears at a specific time, range [2018-05-19 09:00, 2018-05-21 09:00) Better luck next time :) \u7528IDA\u6253\u5f00\uff0c\u6839\u636e\u4ea4\u53c9\u5f15\u7528\u5373\u53ef\u627e\u5230\u771f\u6b63\u7684main\u51fd\u6570\uwrite access to const memory has been detected, the output may be wrong! int sub_4011B0 () { char * v0 ; // rdx signed __int64 v2 ; // rsi signed __int64 v3 ; // rax void * v4 ; // rsi signed int v5 ; // ebp __int64 v6 ; // rdx char v7 ; // cl char * v8 ; // rax char v9 ; // dl signed int v10 ; // eax int v11 ; // ebx signed __int64 v12 ; // r12 _QWORD * v13 ; // rax char * v14 ; // rdi size_t v15 ; // rbp __int64 v16 ; // rax __int64 v17 ; // rbx signed __int64 v18 ; // r13 __int64 v19 ; // rcx size_t v20 ; // rdx int result ; // eax char v24 ; // [rsp+20h] [rbp-A8h] char v25 ; // [rsp+5Ch] [rbp-6Ch] unsigned __int16 v26 ; // [rsp+60h] [rbp-68h] v0 = & v24 ; memset ( & v24 , 0 , 0x68uLL ); if ( unk_409670 ) GetStartupInfoA (( LPSTARTUPINFOA ) & unk_409670 ); _RBX = & unk_409AF8 ; v2 = * ( _QWORD * )( __readgsqword ( 0x30u ) + 8 ); while ( 1 ) { v3 = _InterlockedCompareExchange (( volatile signed __int64 * ) & unk_409AF8 , v2 , 0LL ); if ( ! v3 ) { v4 = & unk_409AF0 ; v5 = 0 ; if ( unk_409AF0 == 1 ) goto LABEL_42 ; goto LABEL_8 ; } if ( v2 == v3 ) break ; Sleep (( unsigned __int64 ) & unk_409670 ); } v4 = & unk_409AF0 ; v5 = 1 ; if ( unk_409AF0 == 1 ) { LABEL_42 : amsg_exit ( & unk_409670 , & unk_409AF0 , v0 , 31LL ); if ( unk_409AF0 == 1 ) goto LABEL_43 ; LABEL_11 : if ( v5 ) goto LABEL_12 ; goto LABEL_44 ; } LABEL_8 : if ( unk_409AF0 ) { dword_409004 = 1 ; } else { unk_409AF0 = 1 ; initterm ( & unk_409670 , & unk_409AF0 , & unk_40B030 , & unk_40B018 ); } if ( unk_409AF0 != 1 ) goto LABEL_11 ; LABEL_43 : initterm ( & unk_409670 , & unk_409AF0 , & unk_40B010 , & unk_40B000 ); unk_409AF0 = 2 ; if ( v5 ) goto LABEL_12 ; LABEL_44 : _RAX = 0LL ; __asm { xchg rax , [ rbx ] } LABEL_12 : if ( TlsCallback_0 ) TlsCallback_0 ( & unk_409670 , & unk_409AF0 , 2LL , 0LL , 0LL ); sub_403940 ( & unk_409670 , & unk_409AF0 , v0 ); qword_4096A0 = ( __int64 ) SetUnhandledExceptionFilter (( LPTOP_LEVEL_EXCEPTION_FILTER ) & unk_409670 ); sub_403DA0 (); sub_404850 ( & unk_409670 , & unk_409AF0 , v6 , nullsub_1 ); sub_403740 (); v7 = 0 ; qword_4099C8 = 0x400000LL ; v8 = ( char * ) acmdln ; if ( acmdln ) { while ( 1 ) { v9 = * v8 ; if ( * v8 <= 32 ) { if ( ! v9 || ! ( v7 & 1 ) ) { if ( v9 ) { do ++ v8 ; while ( * v8 && * v8 <= 32 ); } qword_4099C0 = ( __int64 ) v8 ; break ; } v7 = 1 ; } else if ( v9 == 34 ) { v7 ^= 1u ; } ++ v8 ; } } if ( unk_409670 ) { v10 = 10 ; if ( v25 & 1 ) v10 = v26 ; dword_405000 = v10 ; } v11 = dword_409020 ; v12 = 8LL * ( dword_409020 + 1 ); v13 = malloc (( size_t ) & unk_409670 ); v14 = ( char * ) Code ; v15 = ( size_t ) v13 ; if ( v11 > 0 ) { v16 = ( unsigned int )( v11 - 1 ); v17 = 0LL ; v18 = 8 * v16 + 8 ; do { v19 = * ( _QWORD * ) & v14 [ v17 ]; v4 = ( void * )( strlen ( v14 ) + 1 ); * ( _QWORD * )( v15 + v17 ) = malloc (( size_t ) v14 ); v20 = * ( _QWORD * ) & v14 [ v17 ]; v17 += 8LL ; memcpy ( v14 , v4 , v20 ); } while ( v18 != v17 ); v13 = ( _QWORD * )( v15 + v12 - 8 ); } * v13 = 0LL ; Code = v15 ; sub_403310 (( __int64 ) v14 , ( __int64 * ) v4 ); //real\u5165\u53e3\u70b90.0 _initenv = qword_409010 ; result = main (( int ) v14 , ( const char ** ) v4 , ( const char ** ) Code ); dword_40900C = result ; if ( ! dword_409008 ) exit (( int ) v14 ); if ( ! dword_409004 ) { cexit (); result = dword_40900C ; } return result ; } \u8fdb\u53bbsub_403310\u51fd\u6570\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 __int64 __fastcall sub_403310 ( __int64 a1 , __int64 * a2 ) { __int64 result ; // rax result = ( unsigned int ) dword_4090A0 ; if ( ! dword_4090A0 ) { dword_4090A0 = 1 ; result = sub_4032A0 ( a1 , a2 ); //\u8fd9\u91cc\u8fdb\u53bb } return result ; } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 __int64 __fastcall sub_4032A0 ( __int64 a1 , __int64 * a2 ) { __int64 v2 ; // rdx unsigned int i ; // eax __int64 * v4 ; // rbx v2 = qword_4049A0 [ 0 ]; i = qword_4049A0 [ 0 ]; if ( LODWORD ( qword_4049A0 [ 0 ]) == - 1 ) { for ( i = 0 ; ; i = v2 ) { v2 = i + 1 ; if ( ! qword_4049A0 [ v2 ] ) break ; } } if ( i ) { v4 = & qword_4049A0 [ i ]; a2 = & qword_4049A0 [ i - ( unsigned __int64 )( i - 1 ) - 1 ]; do { (( void ( __fastcall * )( __int64 , __int64 * )) * v4 )( a1 , a2 ); -- v4 ; } while ( v4 != a2 ); } return sub_403240 ( a1 , a2 , v2 , sub_403260 ); } qword_4049A0\u5b58\u653e\u4e86\u4e24\u4e2a\u51fd\u6570\u7684\u5730\u5740\uff1a 1 qword_4049A0 dq 0FFFFFFFFFFFFFFFFh, 402357h, 404990h, 0 \u8fdb\u53bbsub_402357 1 2 3 4 5 6 7 8 9 10 11 12 13 14 __int64 __fastcall sub_402357 ( const char * a1 , char ** a2 ) { __int64 result ; // rax unsigned int v3 ; // ST2C_4 Time (( __int64 ) a1 , ( __int64 ) a2 ); //\u7b2c\u4e00\u6b65\uff0c\u65f6\u95f4\u9a8c\u8bc1 result = dword_4099D0 [ 0 ]; if ( ! dword_4099D0 [ 0 ] ) { v3 = strtol ( a1 , a2 , 0 ) ^ 0xBADD1917 ; result = sub_402218 (( __int64 ) a1 , ( _DWORD ) a2 , 105 , ( unsigned __int64 ) & unk_405220 ); //\u8f93\u51faflag only..... } return result ; } Time\u6b63\u662f\u8fd9\u4e2a\u7a0b\u5e8f\u7684\u7b2c\u4e00\u6b65\u9a8c\u8bc1\uff1a\u65f6\u95f4\u9a8c\u8bc1 \u800csub_402218\u5219\u662f\u8f93\u51fa\u4fe1\u606f\u7684\u4f4d\u7f6e\u3002 \u4ee5\u4e0a\u7531\u8c03\u8bd5\u53ef\u77e5\uff0c\u5c31\u4e0d\u8d58\u8ff0\u4e86\u3002 \u65f6\u95f4\u9a8c\u8bc1 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 __int64 __fastcall Time ( __time64_t * a1 , __int64 a2 ) { __int64 result ; // rax unsigned int v3 ; // [rsp+20h] [rbp-10h] int v4 ; // [rsp+24h] [rbp-Ch] unsigned int v5 ; // [rsp+28h] [rbp-8h] int i ; // [rsp+2Ch] [rbp-4h] v5 = time64 ( a1 ); if ( v5 <= 0x5AFFE78F || v5 > 0x5B028A8F ) return 0LL ; srand (( unsigned int ) a1 ); for ( i = 0 ; i <= 255 ; ++ i ) byte_405020 [ i ] ^= rand (); v4 = 0 ; v3 = 0 ; sub_4027ED (( __int64 ) a1 , a2 , & v4 , ( __int64 ) byte_405020 , & v3 ); if ( v4 == 0x700 ) { dword_4099D0 [ 0 ] = v3 ; result = v3 ; } else { dword_4099D0 [ 0 ] = 0 ; result = 0LL ; } return result ; } time64\u51fd\u6570\u8fd4\u56de\u5f53\u524d\u65f6\u95f4\u6233\uff0c\u6839\u636e\u8fd9\u6bb5\u4ee3\u7801\uff0c\u8fd4\u56de\u7684\u65f6\u95f4\u6233\u5e94\u8be5\u5728(0x5AFFE78F,0x5B028A8F]\u8fd9\u4e2a\u8303\u56f4\u5185\u7a0b\u5e8f\u624d\u4f1a\u7ee7\u7eed\u6267\u884c\u3002 \u5176\u540e\u4ee5\u65f6\u95f4\u6233\u505a\u4e3a\u968f\u673a\u6570\u79cd\u5b50\uff0c\u53d6\u968f\u673a\u6570\u5bf9byte405020\u6570\u7ec4\u5f02\u6216\u8fd0\u7b97\uff0c\u518d\u901a\u8fc7sub4027ED\u8fd9\u4e2a\u51fd\u6570\u5bf9byte_405020\u6570\u7ec4\u8fdb\u884c\u4e00\u4e9b\u8fd0\u7b97\uff0c\u6700\u7ec8\u5f97\u5230v4\u7684\u503c\uff0c\u5e76\u5224\u65adv4\u7684\u503c\u662f\u5426\u7b49\u4e8e0x700. \u5728\u540e\u9762\u7684\u4ee3\u7801\u4e2d\u53ef\u77e5\uff0c\u5982\u679cresult ==0\uff0c\u90a3\u4e48\u7a0b\u5e8f\u5c06\u6253\u5370\u51fa 1 2 flag only appears at a specific time, range [2018-05-19 09:00, 2018-05-21 09:00) Better luck next time :) \u5e76\u9000\u51fa\u3002\u89c2\u5bdf\u52300x5B028A8F - 0x5AFFE78F = 0x2A300\uff0c\u6240\u4ee5time\u7684\u8303\u56f4\u7b97\u662f\u6bd4\u8f83\u5c0f\u7684\u4e86\uff0c\u6211\u4eec\u53ef\u4ee5\u4fee\u6539\u7a0b\u5e8f\u4ee3\u7801\uff0c\u8ba9\u7a0b\u5e8f\u81ea\u5df1\u8dd1\u51fatime\u3002 \u4fee\u6539\u5982\u4e0b\uff1a\uff08IDA\u4fee\u6539\u6307\u4ee4\u5feb\u6377\u952e\u4e3aCtrl+Alt+K\uff0c\u4fee\u6539\u540epatch\u4e0a\u53bb\u5373\u53ef\u3002\u5269\u4e0b\u7684\u5c31\u770b\u5404\u4f4d\u7684\u6c47\u7f16\u529f\u5e95\u4e86\uff01\uff09 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 __int64 __fastcall sub_402268 ( __int64 a1 , __int64 a2 ) { unsigned int v3 ; // edx int v4 ; // [rsp+24h] [rbp-Ch] int v5 ; // [rsp+28h] [rbp-8h] int i ; // [rsp+2Ch] [rbp-4h] v5 = 0x5AFFE790 ; do { if ( ( unsigned int ) ++ v5 > 0x5B028A8F ) return 0LL ; srand ( a1 ); for ( i = 0 ; i <= 255 ; ++ i ) byte_405120 [ i ] = rand () ^ byte_405020 [ i ]; //\u8fd9\u91cc\u6211\u53d6\u7528\u4e86byte_405120\u6765\u5b58\u653e\u6bcf\u6b21\u5f02\u6216\u7684\u503c\uff0c\u6240\u4ee5\u8fd9\u4e2a\u4fee\u6539\u5427\uff0c\u662f\u6c38\u4e45\u76840.0\uff0c\u8981\u4e48\u53e6\u8d77\u4e00\u4e2a\u7a0b\u5e8f\u8981\u4e48\u8bb0\u5f97\u8fd9\u91cc\u6539\u56de\u67650.0 v4 = 0 ; sub_4027ED ( a1 , a2 , ( __int64 ) & v4 ); } while ( v4 != 1792 ); dword_4099D0 [ 0 ] = v3 ; return 0LL ; } \u5728dword_4099D0[0] = v3;\u5904\u4e0b\u65ad\uff0c\u5373\u53ef\u8dd1\u51fa\u65f6\u95f4\uff1a0x5b00e398 \u4e3a\u4e86\u63a5\u4e0b\u6765\u65b9\u4fbf\u8c03\u8bd5\uff0c\u76f4\u63a5\u5c06v5\u8bbe\u7f6e\u4e3a0x5b00e398\uff0c\u5373\u53ef\u8fdb\u5165\u7b2c\u4e8c\u6b65\u9a8c\u8bc1\uff1a\u8f93\u5165\u9a8c\u8bc1 \u8f93\u5165\u9a8c\u8bc1 \u7ecf\u8fc7\u8c03\u8bd5\uff0c\u627e\u5230\u8f93\u5165\u9a8c\u8bc1\u7684\u51fd\u6570 __ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 int64 __fastcall sub_4023B1 ( const char * a1 , __int64 a2 ) { __int64 v3 ; // [rsp+20h] [rbp-30h] __int64 v4 ; // [rsp+28h] [rbp-28h] __int64 v5 ; // [rsp+30h] [rbp-20h] __int64 v6 ; // [rsp+38h] [rbp-18h] unsigned int v7 ; // [rsp+43h] [rbp-Dh] char v8 ; // [rsp+47h] [rbp-9h] __int64 * Count ; // [rsp+48h] [rbp-8h] if ( ! dword_4099D0 [ 0 ] ) exit (( int ) a1 ) ; v8 = 0 ; v7 = dword_4099D0 [ 0 ] ; sub_402218 ( a1 , a2 , 49 , ( __int64 ) & unk_4052A0 , dword_4099D0 [ 0 ] ) ; v3 = 0 LL ; v4 = 0 LL ; v5 = 0 LL ; v6 = 0 LL ; Count = ( __int64 * )(( char * ) & v3 + 4 ) ; scanf ( a1 , a2 , ( char * ) & v3 + 4 , \" %26s \" ) ; RC4 (( __int64 ) a1 , a2 , 26 LL , ( __int64 ) Count , ( unsigned __int64 ) & v7 ) ; if ( ! ( unsigned int ) check (( size_t ) a1 ) ) return sub_402218 ( a1 , a2 , 6 , ( __int64 ) aC , dword_4099D0 [ 0 ] ) ; RC4 (( __int64 ) a1 , a2 , 26 LL , ( __int64 ) Count , ( unsigned __int64 ) & v7 ) ; sub_401FFB ( a1 ) ; sub_402218 ( a1 , a2 , 35 , ( __int64 ) & unk_4052E0 , dword_4099D0 [ 0 ] ) ; puts ( a1 ) ; return sub_402218 ( a1 , a2 , 35 , ( __int64 ) & unk_4052E0 , dword_4099D0 [ 0 ] ) ; } RC4 RC4\u7684\u8fa8\u8bc6\u5ea6\u8f83\u9ad8\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 __int64 __fastcall RC4 ( __int64 a1 , __int64 a2 , __int64 a3 , __int64 a4 , __int64 a5 , unsigned int a6 ) { _QWORD * v6 ; // rdi __int64 v8 ; // [rsp+0h] [rbp-80h] char v9 ; // [rsp+20h] [rbp-60h] __int64 v10 ; // [rsp+140h] [rbp+C0h] v10 = a4 ; memset ( & v8 + 4 , 0 , 0x100uLL ); v6 = & v8 + 36 ; sub_401C67 (( __int64 ) v6 , a2 , a5 , ( __int64 ) & v9 , a6 ); return sub_401E02 (( __int64 ) v6 , a2 , v10 ); } \u5728sub_401C67\u4e2d\u5bc6\u94a5\u6269\u5c55\uff1a 1 2 3 4 5 6 for ( i = 0 ; ( signed int ) i <= 255 ; ++ i ) { * ( _BYTE * )(( signed int ) i + a4 ) = i ; //\u8fd9\u91cc\u6bcf\u4e00\u4f4d\u90fd\u8d4b\u503c\u4f4d\u6570 result = ( signed int ) i ; v7 [ i ] = * ( _BYTE * )( i % a5 + a3 ); } \u5728sub_401E02\u4e2d\u7684\u52a0\u5bc6\u8fd0\u7b97\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 __int64 __fastcall sub_401E02 ( __int64 a1 , __int64 a2 , __int64 a3 , __int64 a4 , unsigned int a5 ) { unsigned int v5 ; // eax char v6 ; // ST0F_1 __int64 result ; // rax unsigned int i ; // [rsp+14h] [rbp-Ch] int v9 ; // [rsp+18h] [rbp-8h] signed int v10 ; // [rsp+1Ch] [rbp-4h] v10 = 0 ; v9 = 0 ; for ( i = 0 ; ; ++ i ) { result = i ; if ( i >= a5 ) break ; v10 = ( unsigned __int8 )((( unsigned int )(( v10 + 1 ) >> 31 ) >> 24 ) + v10 + 1 ) - (( unsigned int )(( v10 + 1 ) >> 31 ) >> 24 ); v5 = ( unsigned int )(( v9 + * ( unsigned __int8 * )( v10 + a4 )) >> 31 ) >> 24 ; v9 = ( unsigned __int8 )( v5 + v9 + * ( _BYTE * )( v10 + a4 )) - v5 ; v6 = * ( _BYTE * )( v10 + a4 ); * ( _BYTE * )( v10 + a4 ) = * ( _BYTE * )( v9 + a4 ); * ( _BYTE * )( a4 + v9 ) = v6 ; * ( _BYTE * )( i + a3 ) ^= * ( _BYTE * )(( unsigned __int8 )( * ( _BYTE * )( v10 + a4 ) + * ( _BYTE * )( v9 + a4 )) + a4 ); //\u8fd9\u91cc\u6bcf\u4e00\u4f4d\u90fd\u5f02\u6216\u8fd0\u7b97\u540e\u7684\u5bc6\u94a5\uff0c\u6240\u4ee5RC4\u751a\u81f3\u53ef\u4ee5\u76f4\u63a5\u5bfc\u51fa\u8fd9\u91cc\u7684\u5f02\u6216\u6570\u7ec4 } return result ; } check 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 __int64 __fastcall check ( size_t Count , char * a2 , __int64 a3 , size_t input ) { int v4 ; // eax __int64 v5 ; // rdx int v6 ; // ST12C_4 unsigned int v8 ; // [rsp+124h] [rbp-Ch] signed int v9 ; // [rsp+128h] [rbp-8h] int v10 ; // [rsp+12Ch] [rbp-4h] strncpy (( char * ) Count , a2 , input ); signal ( Count , ( void ( __cdecl * )( int )) a2 ); v10 = 0 ; v9 = 1 ; v8 = 0 ; r1 = ( unsigned __int64 ) & byte_405320 ; //const\u5e38\u91cf LODWORD ( r2 ) = ( unsigned __int64 ) & input_RC4 ; //RC4\u540e\u7684\u8f93\u5165 while ( v9 ) { v4 = setjmp (( _JBTYPE * ) Count ); if ( v4 == 0xA8 ) { * ( & r0 + ( opcode [ v10 ] >> 4 )) -= * ( & r0 + ( opcode [ v10 ] & 0xF )); // A8 ++ v10 ; } else if ( v4 > 0xA8 ) { if ( v4 == 0xAC ) { * ( & r0 + ( opcode [ v10 ] >> 4 )) &= * ( & r0 + ( opcode [ v10 ] & 0xF )); ++ v10 ; } else if ( v4 > 0xAC ) { if ( v4 == 0xAE ) { * ( & r0 + ( opcode [ v10 ] >> 4 )) ^= * ( & r0 + ( opcode [ v10 ] & 0xF )); ++ v10 ; } else if ( v4 < 0xAE ) // AD { * ( & r0 + opcode [ v10 ]) = ( unsigned __int8 ) ~* (( _BYTE * ) & r0 + 4 * opcode [ v10 ]); ++ v10 ; } else { if ( v4 != 0xAF ) goto LABEL_43 ; cmp_0 = opcode [ v10 ] >> 4 ; cmp_1 = opcode [ v10 ] & 0xF ; if ( ! setjmp (( _JBTYPE * ) Count ) ) opcode [ v10 ] = cmp_0 / opcode [ v10 + 1 ]; v10 += 2 ; } } else if ( v4 == 0xAA ) { * ( & r0 + opcode [ v10 ]) = * ( & r0 + opcode [ v10 + 1 ]); v10 += 2 ; } else if ( v4 > 0xAA ) { * ( & r0 + opcode [ v10 ]) = opcode [ v10 + 1 ]; v10 += 2 ; } else { * ( & r0 + ( opcode [ v10 ] >> 4 )) += * ( & r0 + ( opcode [ v10 ] & 0xF )); ++ v10 ; } } else if ( v4 == 0xA3 ) { * ( & r0 + ( opcode [ v10 ] >> 4 )) |= * ( & r0 + ( opcode [ v10 ] & 0xF )); ++ v10 ; } else if ( v4 > 0xA3 ) { if ( v4 == 0xA6 ) { if ( ! r5 ) v10 += ( char ) opcode [ v10 ]; ++ v10 ; } else if ( v4 > 0xA6 ) { if ( r5 ) v10 += ( char ) opcode [ v10 ]; ++ v10 ; } else { if ( v4 != 0xA5 ) goto LABEL_43 ; v10 += opcode [ v10 ] + 1 ; } } else if ( v4 == 0xA0 ) { * ( & r0 + opcode [ v10 ]) = * ( unsigned __int8 * )( signed int ) * ( & r0 + opcode [ v10 ]); ++ v10 ; } else if ( v4 == 0xA2 ) { v6 = v10 + 1 ; * ( & r0 + opcode [ v6 ]) >>= * ( & r0 + opcode [ v6 ]); v10 = v6 + 1 ; } else { if ( ! v4 ) { v5 = opcode [ v10 ]; longjmp_0 (( _JBTYPE * ) Count , ( int ) a2 ); } LABEL_43 : v9 = 0 ; v8 = r5 ; } } return v8 ; } \u5219\u8c03\u8bd5\u5206\u6790\uff0c\u5982\u4e0b\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 .bss:0000000000409040 r0 dd ? ; DATA XREF: sub_402930+32\u2191o .bss:0000000000409040 ; sub_402930+4C\u2191o ... .bss:0000000000409044 r1 dd ? ; DATA XREF: check+52\u2191w .bss:0000000000409048 ; _DWORD *r2 .bss:0000000000409048 r2 dd ? ; DATA XREF: check+5F\u2191w .bss:000000000040904C r3 dd ? .bss:0000000000409050 r4 dd ? .bss:0000000000409054 r5 dd ? ; DATA XREF: check:loc_403073\u2191r .bss:0000000000409054 ; check:loc_40309A\u2191r ... .bss:0000000000409058 r6 dd ? .bss:000000000040905C dd ? .bss:0000000000409060 cmp_0 dd ? ; DATA XREF: sub_402930+22\u2191r .bss:0000000000409060 ; sub_402930+5B\u2191r ... .bss:0000000000409064 cmp_1 dd ? ; DATA XREF: sub_402930+3C\u2191r .bss:0000000000409064 ; check+35A\u2191w AF\u7684\u64cd\u4f5c\u5e76\u4e0d\u57280xAF\u4e2d,\u56e0\u4e3a\u8fd9\u91cc\u7684\u9664\u6570\u6c38\u8fdc\u7b49\u4e8e0\uff0c\u6240\u4ee5AF\u7684\u64cd\u4f5c\u5728\u524d\u9762\u7684\u96640\u5f02\u5e38\u5904\u7406signal\u4e2d\uff0c\u8fd9\u91cc\u6709\u70b9\u5751\uff0cIDA\u5206\u6790\u51fa\u6765\u7684\u548c\u5b9e\u9645\u6c47\u7f16\u4ee3\u7801\u770b\u7740\u4e0d\u592a\u4e00\u6837\u3002 1 2 3 4 5 6 7 8 9 10 else { if ( v4 != 0xAF ) goto LABEL_43 ; cmp_0 = opcode [ v10 ] >> 4 ; cmp_1 = opcode [ v10 ] & 0xF ; if ( ! setjmp (( _JBTYPE * ) Count ) ) opcode [ v10 ] = cmp_0 / opcode [ v10 + 1 ]; v10 += 2 ; } 1 2 3 .text: 00000000004029 EC lea rdx , sub_402930 .text: 00000000004029 F3 mov ecx , 8 .text: 00000000004029 F8 call signal \u5728sub_402930\u4e2d\uff1a 1 2 3 4 5 6 7 8 9 10 void __fastcall __noreturn sub_402930 ( _JBTYPE * a1 , void ( __cdecl * a2 )( int ), __int64 a3 , int a4 ) { if ( a4 == 8 ) { signal (( int ) a1 , a2 ); * ( & r0 + cmp_0 ) = * ( & r0 + cmp_0 ) == * ( & r0 + cmp_1 ); longjmp_0 ( a1 , ( int ) a2 ); } exit (( int ) a1 ); } \u6700\u7ec8\uff0copcode\u4e3a\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 3 AB 03 00 : mov r3 , 0x00 3 AB 04 1 A : mov r4 , 0x1A 3 AB 00 66 : mov r0 , 0x66 s1 : 3 AA 05 02 : mov r5 , r2 2 A9 53 : add r5 , r3 2 A0 05 : mov r5 , [ r5 ] 3 AB 06 CC : mov r6 , 0xCC 2 A9 56 : add r5 , r6 3 AB 06 FF : mov r6 , 0xFF 2 AC 56 : and r5 , r6 2 AE 50 : xor r5 , r0 2 AD 00 : r0 = ~ r0 3 AA 06 05 : mov r6 , r5 3 AA 05 01 : mov r5 , r1 2 A9 53 : add r5 , r3 2 A0 05 : mov r5 , [ r5 ] 3 AF 56 00 : cmp r5 , r6 3 A7 01 : jz s2 1 CC s2 : 2 A9 35 : add r3 , r5 3 AA 05 03 : mov r5 , r3 3 AF 54 00 : cmp r5 , r4 3 A6 D1 : jnz s1 1 CC \u5199\u6210python\u5927\u6982\u662f\u8fd9\u6837\uff1a 1 2 3 4 5 6 7 8 9 10 11 for r3 in range ( 26 ): r5 += 0xCC r5 &= 0xFF r5 ^= r0 r0 = ( ~ r0 ) & 0xFF r6 = r5 r5 = const [ r3 ] if r5 != r6 : break r3 += 1 r5 = input [ r3 ] \u5219\u6c42\u51faRC4\u4e4b\u540e\u7684\u8f93\u5165\u4e3a\uff1a 1 2 3 4 5 6 7 8 9 10 11 const = [ 0x89 , 0xC1 , 0xEC , 0x50 , 0x97 , 0x3A , 0x57 , 0x59 , 0xE4 , 0xE6 , 0xE4 , 0x42 , 0xCB , 0xD9 , 0x08 , 0x22 , 0xAE , 0x9D , 0x7C , 0x07 , 0x80 , 0x8F , 0x1B , 0x45 , 0x04 , 0xE8 ] r0 = 0x66 for i in range ( 0 , 26 ): r5 = const [ i ] r5 ^= r0 r5 = ( r5 - 0xCC ) & 0xFF r0 = ( ~ r0 ) & 0xFF print ( ' \\\\ x' + hex ( r5 )[ 2 :], end = '' ) RC4\u89e3\u5bc6\uff1a 1 2 3 4 5 6 7 8 from Crypto.Cipher import ARC4 key = b ' \\xA4\\xE7\\x2C\\x32 ' * 4 obj = ARC4 . new ( key ) input = b \" \\x23\\x8c\\xbe\\xfd\\x25\\xd7\\x65\\xf4\\xb6\\xb3\\xb6\\x0f\\xe1\\x74\\xa2\\xef\\xfc\\x38\\x4e\\xd2\\x1a\\x4a\\xb1\\x10\\x96\\xa5 \" print ( obj . decrypt ( input )) \u5f97\u5230\u8f93\u5165\uff1a@ck For fun 02508iO2 2iOR}\uff0c\u8f93\u5165\u540e\u8f93\u51fa\u4ee5\u4e0b\u4fe1\u606f\uff0c\u6458\u6389\u773c\u955c\u6253\u5f00\u9ad8\u6e05\u89c6\u754c0.0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 the part of flag was protected by a magic spell! @ck_For_fun_02508iO2_2iOR} .843fFDCb52bc573DA7e336b4BCC97C6E. .1adC4b19FEBA1Bf9D182FAe8Eac1AeBF. .CB7EEFeD2B2D6dd76f bE D0 ec92. .DD1C36EDBaf56 63b6 ad83 f5D a60D. .28CCE56eaBbcF 0Bb9 ed7F 669 aff7. . dC 83 4 bf a01 . . DAB 2a0 CBD eB74 9eF6 0De 1Bf . . E15 d55A276 7A4c fA7 eE72 dc7 . . afB bE0fa2e 7Bf9 Eb14 6A5 891 . . DCf c907BF9 aFBB 28eA 4dE aB1 . . B25 c5B 16d d90f 0cb0 D78 Edd . . aEA7 eDaD 07 743A 935 27d . .D38f5b1FacEaBDeFBEEcbA4 0b9D0A0f. .ce1A5DFCe012a0a62A5e2D8 8e38C9A. .CC1b26fF12fC01f8aeB7cAC06c65FCbe. .e663471A878EcE289bee7c11d7f8CF7b. .--------------------------------. @ck_For_fun_02508iO2_2iOR} .--------------------------------. \u6700\u7ec8flag\u4e3a\uff1arctf{h@ck For fun 02508iO2 2iOR}","title":"2018 RCTF"},{"location":"ctf_write_up/2018/2018rctf/#0x00-magic","text":"\u9898\u76ee\uff1a magic \u672c\u9898\u5927\u6982\u6709\u4e09\u4e2a\u4efb\u52a1\uff1a 1.\u627e\u5230\u771f\u6b63\u7684main\u51fd\u6570 2.\u7b97\u51fa\u8fd0\u884c\u65f6\u95f4 3.RC4+VM\u9006\u5411\u8fd8\u539f \u5bfb\u627e\u771f\u6b63\u7684main\u51fd\u6570 \u62ff\u5230\u9898\uff0c\u8fd0\u884c\u4e00\u4e0b\uff0c\u8f93\u51fa\u5982\u4e0b\uff1a 1 2 3 D:\\Downloads>magic.exe flag only appears at a specific time, range [2018-05-19 09:00, 2018-05-21 09:00) Better luck next time :) \u7528IDA\u6253\u5f00\uff0c\u6839\u636e\u4ea4\u53c9\u5f15\u7528\u5373\u53ef\u627e\u5230\u771f\u6b63\u7684main\u51fd\u6570\uwrite access to const memory has been detected, the output may be wrong! int sub_4011B0 () { char * v0 ; // rdx signed __int64 v2 ; // rsi signed __int64 v3 ; // rax void * v4 ; // rsi signed int v5 ; // ebp __int64 v6 ; // rdx char v7 ; // cl char * v8 ; // rax char v9 ; // dl signed int v10 ; // eax int v11 ; // ebx signed __int64 v12 ; // r12 _QWORD * v13 ; // rax char * v14 ; // rdi size_t v15 ; // rbp __int64 v16 ; // rax __int64 v17 ; // rbx signed __int64 v18 ; // r13 __int64 v19 ; // rcx size_t v20 ; // rdx int result ; // eax char v24 ; // [rsp+20h] [rbp-A8h] char v25 ; // [rsp+5Ch] [rbp-6Ch] unsigned __int16 v26 ; // [rsp+60h] [rbp-68h] v0 = & v24 ; memset ( & v24 , 0 , 0x68uLL ); if ( unk_409670 ) GetStartupInfoA (( LPSTARTUPINFOA ) & unk_409670 ); _RBX = & unk_409AF8 ; v2 = * ( _QWORD * )( __readgsqword ( 0x30u ) + 8 ); while ( 1 ) { v3 = _InterlockedCompareExchange (( volatile signed __int64 * ) & unk_409AF8 , v2 , 0LL ); if ( ! v3 ) { v4 = & unk_409AF0 ; v5 = 0 ; if ( unk_409AF0 == 1 ) goto LABEL_42 ; goto LABEL_8 ; } if ( v2 == v3 ) break ; Sleep (( unsigned __int64 ) & unk_409670 ); } v4 = & unk_409AF0 ; v5 = 1 ; if ( unk_409AF0 == 1 ) { LABEL_42 : amsg_exit ( & unk_409670 , & unk_409AF0 , v0 , 31LL ); if ( unk_409AF0 == 1 ) goto LABEL_43 ; LABEL_11 : if ( v5 ) goto LABEL_12 ; goto LABEL_44 ; } LABEL_8 : if ( unk_409AF0 ) { dword_409004 = 1 ; } else { unk_409AF0 = 1 ; initterm ( & unk_409670 , & unk_409AF0 , & unk_40B030 , & unk_40B018 ); } if ( unk_409AF0 != 1 ) goto LABEL_11 ; LABEL_43 : initterm ( & unk_409670 , & unk_409AF0 , & unk_40B010 , & unk_40B000 ); unk_409AF0 = 2 ; if ( v5 ) goto LABEL_12 ; LABEL_44 : _RAX = 0LL ; __asm { xchg rax , [ rbx ] } LABEL_12 : if ( TlsCallback_0 ) TlsCallback_0 ( & unk_409670 , & unk_409AF0 , 2LL , 0LL , 0LL ); sub_403940 ( & unk_409670 , & unk_409AF0 , v0 ); qword_4096A0 = ( __int64 ) SetUnhandledExceptionFilter (( LPTOP_LEVEL_EXCEPTION_FILTER ) & unk_409670 ); sub_403DA0 (); sub_404850 ( & unk_409670 , & unk_409AF0 , v6 , nullsub_1 ); sub_403740 (); v7 = 0 ; qword_4099C8 = 0x400000LL ; v8 = ( char * ) acmdln ; if ( acmdln ) { while ( 1 ) { v9 = * v8 ; if ( * v8 <= 32 ) { if ( ! v9 || ! ( v7 & 1 ) ) { if ( v9 ) { do ++ v8 ; while ( * v8 && * v8 <= 32 ); } qword_4099C0 = ( __int64 ) v8 ; break ; } v7 = 1 ; } else if ( v9 == 34 ) { v7 ^= 1u ; } ++ v8 ; } } if ( unk_409670 ) { v10 = 10 ; if ( v25 & 1 ) v10 = v26 ; dword_405000 = v10 ; } v11 = dword_409020 ; v12 = 8LL * ( dword_409020 + 1 ); v13 = malloc (( size_t ) & unk_409670 ); v14 = ( char * ) Code ; v15 = ( size_t ) v13 ; if ( v11 > 0 ) { v16 = ( unsigned int )( v11 - 1 ); v17 = 0LL ; v18 = 8 * v16 + 8 ; do { v19 = * ( _QWORD * ) & v14 [ v17 ]; v4 = ( void * )( strlen ( v14 ) + 1 ); * ( _QWORD * )( v15 + v17 ) = malloc (( size_t ) v14 ); v20 = * ( _QWORD * ) & v14 [ v17 ]; v17 += 8LL ; memcpy ( v14 , v4 , v20 ); } while ( v18 != v17 ); v13 = ( _QWORD * )( v15 + v12 - 8 ); } * v13 = 0LL ; Code = v15 ; sub_403310 (( __int64 ) v14 , ( __int64 * ) v4 ); //real\u5165\u53e3\u70b90.0 _initenv = qword_409010 ; result = main (( int ) v14 , ( const char ** ) v4 , ( const char ** ) Code ); dword_40900C = result ; if ( ! dword_409008 ) exit (( int ) v14 ); if ( ! dword_409004 ) { cexit (); result = dword_40900C ; } return result ; } \u8fdb\u53bbsub_403310\u51fd\u6570\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 __int64 __fastcall sub_403310 ( __int64 a1 , __int64 * a2 ) { __int64 result ; // rax result = ( unsigned int ) dword_4090A0 ; if ( ! dword_4090A0 ) { dword_4090A0 = 1 ; result = sub_4032A0 ( a1 , a2 ); //\u8fd9\u91cc\u8fdb\u53bb } return result ; } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 __int64 __fastcall sub_4032A0 ( __int64 a1 , __int64 * a2 ) { __int64 v2 ; // rdx unsigned int i ; // eax __int64 * v4 ; // rbx v2 = qword_4049A0 [ 0 ]; i = qword_4049A0 [ 0 ]; if ( LODWORD ( qword_4049A0 [ 0 ]) == - 1 ) { for ( i = 0 ; ; i = v2 ) { v2 = i + 1 ; if ( ! qword_4049A0 [ v2 ] ) break ; } } if ( i ) { v4 = & qword_4049A0 [ i ]; a2 = & qword_4049A0 [ i - ( unsigned __int64 )( i - 1 ) - 1 ]; do { (( void ( __fastcall * )( __int64 , __int64 * )) * v4 )( a1 , a2 ); -- v4 ; } while ( v4 != a2 ); } return sub_403240 ( a1 , a2 , v2 , sub_403260 ); } qword_4049A0\u5b58\u653e\u4e86\u4e24\u4e2a\u51fd\u6570\u7684\u5730\u5740\uff1a 1 qword_4049A0 dq 0FFFFFFFFFFFFFFFFh, 402357h, 404990h, 0 \u8fdb\u53bbsub_402357 1 2 3 4 5 6 7 8 9 10 11 12 13 14 __int64 __fastcall sub_402357 ( const char * a1 , char ** a2 ) { __int64 result ; // rax unsigned int v3 ; // ST2C_4 Time (( __int64 ) a1 , ( __int64 ) a2 ); //\u7b2c\u4e00\u6b65\uff0c\u65f6\u95f4\u9a8c\u8bc1 result = dword_4099D0 [ 0 ]; if ( ! dword_4099D0 [ 0 ] ) { v3 = strtol ( a1 , a2 , 0 ) ^ 0xBADD1917 ; result = sub_402218 (( __int64 ) a1 , ( _DWORD ) a2 , 105 , ( unsigned __int64 ) & unk_405220 ); //\u8f93\u51faflag only..... } return result ; } Time\u6b63\u662f\u8fd9\u4e2a\u7a0b\u5e8f\u7684\u7b2c\u4e00\u6b65\u9a8c\u8bc1\uff1a\u65f6\u95f4\u9a8c\u8bc1 \u800csub_402218\u5219\u662f\u8f93\u51fa\u4fe1\u606f\u7684\u4f4d\u7f6e\u3002 \u4ee5\u4e0a\u7531\u8c03\u8bd5\u53ef\u77e5\uff0c\u5c31\u4e0d\u8d58\u8ff0\u4e86\u3002 \u65f6\u95f4\u9a8c\u8bc1 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 __int64 __fastcall Time ( __time64_t * a1 , __int64 a2 ) { __int64 result ; // rax unsigned int v3 ; // [rsp+20h] [rbp-10h] int v4 ; // [rsp+24h] [rbp-Ch] unsigned int v5 ; // [rsp+28h] [rbp-8h] int i ; // [rsp+2Ch] [rbp-4h] v5 = time64 ( a1 ); if ( v5 <= 0x5AFFE78F || v5 > 0x5B028A8F ) return 0LL ; srand (( unsigned int ) a1 ); for ( i = 0 ; i <= 255 ; ++ i ) byte_405020 [ i ] ^= rand (); v4 = 0 ; v3 = 0 ; sub_4027ED (( __int64 ) a1 , a2 , & v4 , ( __int64 ) byte_405020 , & v3 ); if ( v4 == 0x700 ) { dword_4099D0 [ 0 ] = v3 ; result = v3 ; } else { dword_4099D0 [ 0 ] = 0 ; result = 0LL ; } return result ; } time64\u51fd\u6570\u8fd4\u56de\u5f53\u524d\u65f6\u95f4\u6233\uff0c\u6839\u636e\u8fd9\u6bb5\u4ee3\u7801\uff0c\u8fd4\u56de\u7684\u65f6\u95f4\u6233\u5e94\u8be5\u5728(0x5AFFE78F,0x5B028A8F]\u8fd9\u4e2a\u8303\u56f4\u5185\u7a0b\u5e8f\u624d\u4f1a\u7ee7\u7eed\u6267\u884c\u3002 \u5176\u540e\u4ee5\u65f6\u95f4\u6233\u505a\u4e3a\u968f\u673a\u6570\u79cd\u5b50\uff0c\u53d6\u968f\u673a\u6570\u5bf9byte405020\u6570\u7ec4\u5f02\u6216\u8fd0\u7b97\uff0c\u518d\u901a\u8fc7sub4027ED\u8fd9\u4e2a\u51fd\u6570\u5bf9byte_405020\u6570\u7ec4\u8fdb\u884c\u4e00\u4e9b\u8fd0\u7b97\uff0c\u6700\u7ec8\u5f97\u5230v4\u7684\u503c\uff0c\u5e76\u5224\u65adv4\u7684\u503c\u662f\u5426\u7b49\u4e8e0x700. \u5728\u540e\u9762\u7684\u4ee3\u7801\u4e2d\u53ef\u77e5\uff0c\u5982\u679cresult ==0\uff0c\u90a3\u4e48\u7a0b\u5e8f\u5c06\u6253\u5370\u51fa 1 2 flag only appears at a specific time, range [2018-05-19 09:00, 2018-05-21 09:00) Better luck next time :) \u5e76\u9000\u51fa\u3002\u89c2\u5bdf\u52300x5B028A8F - 0x5AFFE78F = 0x2A300\uff0c\u6240\u4ee5time\u7684\u8303\u56f4\u7b97\u662f\u6bd4\u8f83\u5c0f\u7684\u4e86\uff0c\u6211\u4eec\u53ef\u4ee5\u4fee\u6539\u7a0b\u5e8f\u4ee3\u7801\uff0c\u8ba9\u7a0b\u5e8f\u81ea\u5df1\u8dd1\u51fatime\u3002 \u4fee\u6539\u5982\u4e0b\uff1a\uff08IDA\u4fee\u6539\u6307\u4ee4\u5feb\u6377\u952e\u4e3aCtrl+Alt+K\uff0c\u4fee\u6539\u540epatch\u4e0a\u53bb\u5373\u53ef\u3002\u5269\u4e0b\u7684\u5c31\u770b\u5404\u4f4d\u7684\u6c47\u7f16\u529f\u5e95\u4e86\uff01\uff09 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 __int64 __fastcall sub_402268 ( __int64 a1 , __int64 a2 ) { unsigned int v3 ; // edx int v4 ; // [rsp+24h] [rbp-Ch] int v5 ; // [rsp+28h] [rbp-8h] int i ; // [rsp+2Ch] [rbp-4h] v5 = 0x5AFFE790 ; do { if ( ( unsigned int ) ++ v5 > 0x5B028A8F ) return 0LL ; srand ( a1 ); for ( i = 0 ; i <= 255 ; ++ i ) byte_405120 [ i ] = rand () ^ byte_405020 [ i ]; //\u8fd9\u91cc\u6211\u53d6\u7528\u4e86byte_405120\u6765\u5b58\u653e\u6bcf\u6b21\u5f02\u6216\u7684\u503c\uff0c\u6240\u4ee5\u8fd9\u4e2a\u4fee\u6539\u5427\uff0c\u662f\u6c38\u4e45\u76840.0\uff0c\u8981\u4e48\u53e6\u8d77\u4e00\u4e2a\u7a0b\u5e8f\u8981\u4e48\u8bb0\u5f97\u8fd9\u91cc\u6539\u56de\u67650.0 v4 = 0 ; sub_4027ED ( a1 , a2 , ( __int64 ) & v4 ); } while ( v4 != 1792 ); dword_4099D0 [ 0 ] = v3 ; return 0LL ; } \u5728dword_4099D0[0] = v3;\u5904\u4e0b\u65ad\uff0c\u5373\u53ef\u8dd1\u51fa\u65f6\u95f4\uff1a0x5b00e398 \u4e3a\u4e86\u63a5\u4e0b\u6765\u65b9\u4fbf\u8c03\u8bd5\uff0c\u76f4\u63a5\u5c06v5\u8bbe\u7f6e\u4e3a0x5b00e398\uff0c\u5373\u53ef\u8fdb\u5165\u7b2c\u4e8c\u6b65\u9a8c\u8bc1\uff1a\u8f93\u5165\u9a8c\u8bc1 \u8f93\u5165\u9a8c\u8bc1 \u7ecf\u8fc7\u8c03\u8bd5\uff0c\u627e\u5230\u8f93\u5165\u9a8c\u8bc1\u7684\u51fd\u6570 __ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 int64 __fastcall sub_4023B1 ( const char * a1 , __int64 a2 ) { __int64 v3 ; // [rsp+20h] [rbp-30h] __int64 v4 ; // [rsp+28h] [rbp-28h] __int64 v5 ; // [rsp+30h] [rbp-20h] __int64 v6 ; // [rsp+38h] [rbp-18h] unsigned int v7 ; // [rsp+43h] [rbp-Dh] char v8 ; // [rsp+47h] [rbp-9h] __int64 * Count ; // [rsp+48h] [rbp-8h] if ( ! dword_4099D0 [ 0 ] ) exit (( int ) a1 ) ; v8 = 0 ; v7 = dword_4099D0 [ 0 ] ; sub_402218 ( a1 , a2 , 49 , ( __int64 ) & unk_4052A0 , dword_4099D0 [ 0 ] ) ; v3 = 0 LL ; v4 = 0 LL ; v5 = 0 LL ; v6 = 0 LL ; Count = ( __int64 * )(( char * ) & v3 + 4 ) ; scanf ( a1 , a2 , ( char * ) & v3 + 4 , \" %26s \" ) ; RC4 (( __int64 ) a1 , a2 , 26 LL , ( __int64 ) Count , ( unsigned __int64 ) & v7 ) ; if ( ! ( unsigned int ) check (( size_t ) a1 ) ) return sub_402218 ( a1 , a2 , 6 , ( __int64 ) aC , dword_4099D0 [ 0 ] ) ; RC4 (( __int64 ) a1 , a2 , 26 LL , ( __int64 ) Count , ( unsigned __int64 ) & v7 ) ; sub_401FFB ( a1 ) ; sub_402218 ( a1 , a2 , 35 , ( __int64 ) & unk_4052E0 , dword_4099D0 [ 0 ] ) ; puts ( a1 ) ; return sub_402218 ( a1 , a2 , 35 , ( __int64 ) & unk_4052E0 , dword_4099D0 [ 0 ] ) ; }","title":"0x00 magic"},{"location":"ctf_write_up/2018/2018rctf/#rc4","text":"RC4\u7684\u8fa8\u8bc6\u5ea6\u8f83\u9ad8\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 __int64 __fastcall RC4 ( __int64 a1 , __int64 a2 , __int64 a3 , __int64 a4 , __int64 a5 , unsigned int a6 ) { _QWORD * v6 ; // rdi __int64 v8 ; // [rsp+0h] [rbp-80h] char v9 ; // [rsp+20h] [rbp-60h] __int64 v10 ; // [rsp+140h] [rbp+C0h] v10 = a4 ; memset ( & v8 + 4 , 0 , 0x100uLL ); v6 = & v8 + 36 ; sub_401C67 (( __int64 ) v6 , a2 , a5 , ( __int64 ) & v9 , a6 ); return sub_401E02 (( __int64 ) v6 , a2 , v10 ); } \u5728sub_401C67\u4e2d\u5bc6\u94a5\u6269\u5c55\uff1a 1 2 3 4 5 6 for ( i = 0 ; ( signed int ) i <= 255 ; ++ i ) { * ( _BYTE * )(( signed int ) i + a4 ) = i ; //\u8fd9\u91cc\u6bcf\u4e00\u4f4d\u90fd\u8d4b\u503c\u4f4d\u6570 result = ( signed int ) i ; v7 [ i ] = * ( _BYTE * )( i % a5 + a3 ); } \u5728sub_401E02\u4e2d\u7684\u52a0\u5bc6\u8fd0\u7b97\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 __int64 __fastcall sub_401E02 ( __int64 a1 , __int64 a2 , __int64 a3 , __int64 a4 , unsigned int a5 ) { unsigned int v5 ; // eax char v6 ; // ST0F_1 __int64 result ; // rax unsigned int i ; // [rsp+14h] [rbp-Ch] int v9 ; // [rsp+18h] [rbp-8h] signed int v10 ; // [rsp+1Ch] [rbp-4h] v10 = 0 ; v9 = 0 ; for ( i = 0 ; ; ++ i ) { result = i ; if ( i >= a5 ) break ; v10 = ( unsigned __int8 )((( unsigned int )(( v10 + 1 ) >> 31 ) >> 24 ) + v10 + 1 ) - (( unsigned int )(( v10 + 1 ) >> 31 ) >> 24 ); v5 = ( unsigned int )(( v9 + * ( unsigned __int8 * )( v10 + a4 )) >> 31 ) >> 24 ; v9 = ( unsigned __int8 )( v5 + v9 + * ( _BYTE * )( v10 + a4 )) - v5 ; v6 = * ( _BYTE * )( v10 + a4 ); * ( _BYTE * )( v10 + a4 ) = * ( _BYTE * )( v9 + a4 ); * ( _BYTE * )( a4 + v9 ) = v6 ; * ( _BYTE * )( i + a3 ) ^= * ( _BYTE * )(( unsigned __int8 )( * ( _BYTE * )( v10 + a4 ) + * ( _BYTE * )( v9 + a4 )) + a4 ); //\u8fd9\u91cc\u6bcf\u4e00\u4f4d\u90fd\u5f02\u6216\u8fd0\u7b97\u540e\u7684\u5bc6\u94a5\uff0c\u6240\u4ee5RC4\u751a\u81f3\u53ef\u4ee5\u76f4\u63a5\u5bfc\u51fa\u8fd9\u91cc\u7684\u5f02\u6216\u6570\u7ec4 } return result ; }","title":"RC4"},{"location":"ctf_write_up/2018/2018rctf/#check","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 __int64 __fastcall check ( size_t Count , char * a2 , __int64 a3 , size_t input ) { int v4 ; // eax __int64 v5 ; // rdx int v6 ; // ST12C_4 unsigned int v8 ; // [rsp+124h] [rbp-Ch] signed int v9 ; // [rsp+128h] [rbp-8h] int v10 ; // [rsp+12Ch] [rbp-4h] strncpy (( char * ) Count , a2 , input ); signal ( Count , ( void ( __cdecl * )( int )) a2 ); v10 = 0 ; v9 = 1 ; v8 = 0 ; r1 = ( unsigned __int64 ) & byte_405320 ; //const\u5e38\u91cf LODWORD ( r2 ) = ( unsigned __int64 ) & input_RC4 ; //RC4\u540e\u7684\u8f93\u5165 while ( v9 ) { v4 = setjmp (( _JBTYPE * ) Count ); if ( v4 == 0xA8 ) { * ( & r0 + ( opcode [ v10 ] >> 4 )) -= * ( & r0 + ( opcode [ v10 ] & 0xF )); // A8 ++ v10 ; } else if ( v4 > 0xA8 ) { if ( v4 == 0xAC ) { * ( & r0 + ( opcode [ v10 ] >> 4 )) &= * ( & r0 + ( opcode [ v10 ] & 0xF )); ++ v10 ; } else if ( v4 > 0xAC ) { if ( v4 == 0xAE ) { * ( & r0 + ( opcode [ v10 ] >> 4 )) ^= * ( & r0 + ( opcode [ v10 ] & 0xF )); ++ v10 ; } else if ( v4 < 0xAE ) // AD { * ( & r0 + opcode [ v10 ]) = ( unsigned __int8 ) ~* (( _BYTE * ) & r0 + 4 * opcode [ v10 ]); ++ v10 ; } else { if ( v4 != 0xAF ) goto LABEL_43 ; cmp_0 = opcode [ v10 ] >> 4 ; cmp_1 = opcode [ v10 ] & 0xF ; if ( ! setjmp (( _JBTYPE * ) Count ) ) opcode [ v10 ] = cmp_0 / opcode [ v10 + 1 ]; v10 += 2 ; } } else if ( v4 == 0xAA ) { * ( & r0 + opcode [ v10 ]) = * ( & r0 + opcode [ v10 + 1 ]); v10 += 2 ; } else if ( v4 > 0xAA ) { * ( & r0 + opcode [ v10 ]) = opcode [ v10 + 1 ]; v10 += 2 ; } else { * ( & r0 + ( opcode [ v10 ] >> 4 )) += * ( & r0 + ( opcode [ v10 ] & 0xF )); ++ v10 ; } } else if ( v4 == 0xA3 ) { * ( & r0 + ( opcode [ v10 ] >> 4 )) |= * ( & r0 + ( opcode [ v10 ] & 0xF )); ++ v10 ; } else if ( v4 > 0xA3 ) { if ( v4 == 0xA6 ) { if ( ! r5 ) v10 += ( char ) opcode [ v10 ]; ++ v10 ; } else if ( v4 > 0xA6 ) { if ( r5 ) v10 += ( char ) opcode [ v10 ]; ++ v10 ; } else { if ( v4 != 0xA5 ) goto LABEL_43 ; v10 += opcode [ v10 ] + 1 ; } } else if ( v4 == 0xA0 ) { * ( & r0 + opcode [ v10 ]) = * ( unsigned __int8 * )( signed int ) * ( & r0 + opcode [ v10 ]); ++ v10 ; } else if ( v4 == 0xA2 ) { v6 = v10 + 1 ; * ( & r0 + opcode [ v6 ]) >>= * ( & r0 + opcode [ v6 ]); v10 = v6 + 1 ; } else { if ( ! v4 ) { v5 = opcode [ v10 ]; longjmp_0 (( _JBTYPE * ) Count , ( int ) a2 ); } LABEL_43 : v9 = 0 ; v8 = r5 ; } } return v8 ; } \u5219\u8c03\u8bd5\u5206\u6790\uff0c\u5982\u4e0b\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 .bss:0000000000409040 r0 dd ? ; DATA XREF: sub_402930+32\u2191o .bss:0000000000409040 ; sub_402930+4C\u2191o ... .bss:0000000000409044 r1 dd ? ; DATA XREF: check+52\u2191w .bss:0000000000409048 ; _DWORD *r2 .bss:0000000000409048 r2 dd ? ; DATA XREF: check+5F\u2191w .bss:000000000040904C r3 dd ? .bss:0000000000409050 r4 dd ? .bss:0000000000409054 r5 dd ? ; DATA XREF: check:loc_403073\u2191r .bss:0000000000409054 ; check:loc_40309A\u2191r ... .bss:0000000000409058 r6 dd ? .bss:000000000040905C dd ? .bss:0000000000409060 cmp_0 dd ? ; DATA XREF: sub_402930+22\u2191r .bss:0000000000409060 ; sub_402930+5B\u2191r ... .bss:0000000000409064 cmp_1 dd ? ; DATA XREF: sub_402930+3C\u2191r .bss:0000000000409064 ; check+35A\u2191w AF\u7684\u64cd\u4f5c\u5e76\u4e0d\u57280xAF\u4e2d,\u56e0\u4e3a\u8fd9\u91cc\u7684\u9664\u6570\u6c38\u8fdc\u7b49\u4e8e0\uff0c\u6240\u4ee5AF\u7684\u64cd\u4f5c\u5728\u524d\u9762\u7684\u96640\u5f02\u5e38\u5904\u7406signal\u4e2d\uff0c\u8fd9\u91cc\u6709\u70b9\u5751\uff0cIDA\u5206\u6790\u51fa\u6765\u7684\u548c\u5b9e\u9645\u6c47\u7f16\u4ee3\u7801\u770b\u7740\u4e0d\u592a\u4e00\u6837\u3002 1 2 3 4 5 6 7 8 9 10 else { if ( v4 != 0xAF ) goto LABEL_43 ; cmp_0 = opcode [ v10 ] >> 4 ; cmp_1 = opcode [ v10 ] & 0xF ; if ( ! setjmp (( _JBTYPE * ) Count ) ) opcode [ v10 ] = cmp_0 / opcode [ v10 + 1 ]; v10 += 2 ; } 1 2 3 .text: 00000000004029 EC lea rdx , sub_402930 .text: 00000000004029 F3 mov ecx , 8 .text: 00000000004029 F8 call signal \u5728sub_402930\u4e2d\uff1a 1 2 3 4 5 6 7 8 9 10 void __fastcall __noreturn sub_402930 ( _JBTYPE * a1 , void ( __cdecl * a2 )( int ), __int64 a3 , int a4 ) { if ( a4 == 8 ) { signal (( int ) a1 , a2 ); * ( & r0 + cmp_0 ) = * ( & r0 + cmp_0 ) == * ( & r0 + cmp_1 ); longjmp_0 ( a1 , ( int ) a2 ); } exit (( int ) a1 ); } \u6700\u7ec8\uff0copcode\u4e3a\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 3 AB 03 00 : mov r3 , 0x00 3 AB 04 1 A : mov r4 , 0x1A 3 AB 00 66 : mov r0 , 0x66 s1 : 3 AA 05 02 : mov r5 , r2 2 A9 53 : add r5 , r3 2 A0 05 : mov r5 , [ r5 ] 3 AB 06 CC : mov r6 , 0xCC 2 A9 56 : add r5 , r6 3 AB 06 FF : mov r6 , 0xFF 2 AC 56 : and r5 , r6 2 AE 50 : xor r5 , r0 2 AD 00 : r0 = ~ r0 3 AA 06 05 : mov r6 , r5 3 AA 05 01 : mov r5 , r1 2 A9 53 : add r5 , r3 2 A0 05 : mov r5 , [ r5 ] 3 AF 56 00 : cmp r5 , r6 3 A7 01 : jz s2 1 CC s2 : 2 A9 35 : add r3 , r5 3 AA 05 03 : mov r5 , r3 3 AF 54 00 : cmp r5 , r4 3 A6 D1 : jnz s1 1 CC \u5199\u6210python\u5927\u6982\u662f\u8fd9\u6837\uff1a 1 2 3 4 5 6 7 8 9 10 11 for r3 in range ( 26 ): r5 += 0xCC r5 &= 0xFF r5 ^= r0 r0 = ( ~ r0 ) & 0xFF r6 = r5 r5 = const [ r3 ] if r5 != r6 : break r3 += 1 r5 = input [ r3 ] \u5219\u6c42\u51faRC4\u4e4b\u540e\u7684\u8f93\u5165\u4e3a\uff1a 1 2 3 4 5 6 7 8 9 10 11 const = [ 0x89 , 0xC1 , 0xEC , 0x50 , 0x97 , 0x3A , 0x57 , 0x59 , 0xE4 , 0xE6 , 0xE4 , 0x42 , 0xCB , 0xD9 , 0x08 , 0x22 , 0xAE , 0x9D , 0x7C , 0x07 , 0x80 , 0x8F , 0x1B , 0x45 , 0x04 , 0xE8 ] r0 = 0x66 for i in range ( 0 , 26 ): r5 = const [ i ] r5 ^= r0 r5 = ( r5 - 0xCC ) & 0xFF r0 = ( ~ r0 ) & 0xFF print ( ' \\\\ x' + hex ( r5 )[ 2 :], end = '' ) RC4\u89e3\u5bc6\uff1a 1 2 3 4 5 6 7 8 from Crypto.Cipher import ARC4 key = b ' \\xA4\\xE7\\x2C\\x32 ' * 4 obj = ARC4 . new ( key ) input = b \" \\x23\\x8c\\xbe\\xfd\\x25\\xd7\\x65\\xf4\\xb6\\xb3\\xb6\\x0f\\xe1\\x74\\xa2\\xef\\xfc\\x38\\x4e\\xd2\\x1a\\x4a\\xb1\\x10\\x96\\xa5 \" print ( obj . decrypt ( input )) \u5f97\u5230\u8f93\u5165\uff1a@ck For fun 02508iO2 2iOR}\uff0c\u8f93\u5165\u540e\u8f93\u51fa\u4ee5\u4e0b\u4fe1\u606f\uff0c\u6458\u6389\u773c\u955c\u6253\u5f00\u9ad8\u6e05\u89c6\u754c0.0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 the part of flag was protected by a magic spell! @ck_For_fun_02508iO2_2iOR} .843fFDCb52bc573DA7e336b4BCC97C6E. .1adC4b19FEBA1Bf9D182FAe8Eac1AeBF. .CB7EEFeD2B2D6dd76f bE D0 ec92. .DD1C36EDBaf56 63b6 ad83 f5D a60D. .28CCE56eaBbcF 0Bb9 ed7F 669 aff7. . dC 83 4 bf a01 . . DAB 2a0 CBD eB74 9eF6 0De 1Bf . . E15 d55A276 7A4c fA7 eE72 dc7 . . afB bE0fa2e 7Bf9 Eb14 6A5 891 . . DCf c907BF9 aFBB 28eA 4dE aB1 . . B25 c5B 16d d90f 0cb0 D78 Edd . . aEA7 eDaD 07 743A 935 27d . .D38f5b1FacEaBDeFBEEcbA4 0b9D0A0f. .ce1A5DFCe012a0a62A5e2D8 8e38C9A. .CC1b26fF12fC01f8aeB7cAC06c65FCbe. .e663471A878EcE289bee7c11d7f8CF7b. .--------------------------------. @ck_For_fun_02508iO2_2iOR} .--------------------------------. \u6700\u7ec8flag\u4e3a\uff1arctf{h@ck For fun 02508iO2 2iOR}","title":"check"},{"location":"ctf_write_up/2019/2019aurora/","text":"\u8bb0\u5f55\u4e00\u6b21\u5185\u90e8\u8d5b\u7684writeup0.0 Climb \u9898\u76ee: Climb \u53ef\u4ee5\u76f4\u63a5\u627e\u5230main\u51fd\u6570\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 __int64 __fastcall main ( __int64 a1 , char ** a2 , char ** a3 ) { __int64 result ; // rax char v4 ; // [rsp+Fh] [rbp-91h] int i ; // [rsp+10h] [rbp-90h] signed int j ; // [rsp+14h] [rbp-8Ch] signed int k ; // [rsp+18h] [rbp-88h] __int64 v8 ; // [rsp+1Ch] [rbp-84h] void * dest ; // [rsp+20h] [rbp-80h] void * s1 ; // [rsp+28h] [rbp-78h] char s ; // [rsp+30h] [rbp-70h] int v12 ; // [rsp+90h] [rbp-10h] unsigned __int64 v13 ; // [rsp+98h] [rbp-8h] v13 = __readfsqword ( 0x28u ); memset ( & s , 0 , 0x60uLL ); v12 = 0 ; puts ( \"Check up:\" ); __isoc99_scanf ( \"%s\" , & s ); v8 = ( unsigned int ) strlen ( & s ); if ( ( signed int ) v8 <= 100 ) { if ( ( signed int ) v8 % 7 ) { puts ( \"Invalid lenth!\" ); result = 0LL ; } else { dest = malloc (( signed int ) v8 ); s1 = malloc (( signed int ) v8 ); memcpy ( dest , & s , ( signed int ) v8 ); memset ( s1 , 0 , ( signed int ) v8 ); for ( i = 0 ; i < ( signed int ) v8 / 7 ; ++ i ) { for ( j = 0 ; j <= 6 ; ++ j ) { v4 = 0 ; for ( k = 0 ; k <= 6 ; ++ k ) v4 += * (( _BYTE * ) dest + 7 * i + k ) * climb [ 7 * j + k ]; // \u8f93\u5165\u7684\u6bcf7\u4e2a\u4e3a\u4e00\u7ec4\uff0c\u6bcf\u4e2a\u548ckey\u5f02\u6216 // \u7c7b\u4f3c\u7ebf\u6027\u4ee3\u6570\u7684\u77e9\u9635\u76f8\u4e58 * (( _BYTE * ) s1 + 7 * i + j ) = v4 ; } } if ( ! memcmp ( s1 , & key , 70uLL ) ) // \u8f93\u5165\u957f\u5ea6\u731c\u6d4b\u4e3a70 puts ( \"OK!\" ); else puts ( \"Nope.\" ); free ( dest ); free ( s1 ); result = 0LL ; } } else { puts ( \"Too long!\" ); result = 0LL ; } return result ; } \u90a3\u9996\u5148\u5c06climb\u548ckey\u8f6c\u5316\u4e3a\u4e24\u4e2a\u77e9\u9635\u3002\u7136\u540e\u7528\u6269\u5c55\u6b27\u51e0\u91cc\u5f97\u7b97\u6cd5\u6c42\u51fa\uff0cclimb\u884c\u5217\u5f0f\u7684\u503c\u7684\u9006\u5143\uff0c\u4ee5\u6c42\u51faclimb\u7684\u9006\u77e9\u9635\uff0c\u76f8\u4e58\u5373\u5f97\u7b54\u6848\u3002 [\u5e0c\u5c14\u5bc6\u7801\u6c42\u89e3\u65b9\u6cd5] \u811a\u672c\u5982\u4e0b\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 from numpy import * import numpy key = [[ 18 , 245 , 75 , 32 , 157 , 232 , 99 ], [ 165 , 54 , 146 , 18 , 221 , 244 , 196 ], [ 157 , 89 , 115 , 88 , 100 , 184 , 103 ], [ 91 , 38 , 206 , 47 , 46 , 82 , 135 ], [ 200 , 200 , 64 , 21 , 82 , 20 , 156 ], [ 202 , 165 , 27 , 33 , 69 , 217 , 235 ], [ 49 , 48 , 196 , 231 , 173 , 145 , 174 ], [ 250 , 104 , 42 , 189 , 118 , 127 , 243 ], [ 134 , 197 , 174 , 127 , 20 , 104 , 70 ], [ 170 , 221 , 232 , 219 , 251 , 132 , 231 ]] climb = [[ 65 , 108 , 109 , 111 , 115 , 116 , 32 ], [ 104 , 101 , 97 , 118 , 101 , 110 , 32 ], [ 119 , 101 , 115 , 116 , 32 , 118 , 105 ], [ 114 , 103 , 105 , 110 , 105 , 97 , 44 ], [ 32 , 98 , 108 , 117 , 101 , 32 , 114 ], [ 105 , 100 , 103 , 101 , 32 , 109 , 111 ], [ 117 , 110 , 116 , 97 , 105 , 110 , 115 ]] climb = numpy . array ( climb ) key = mat ( key ) #\u6269\u5c55\u6b27\u51e0\u91cc\u5f97\u7b97\u6cd5 def exgcd ( m , n , x , y ): if n == 0 : x = 1 y = 0 return ( m , x , y ) a1 = b = 1 a = b1 = 0 c = m d = n q = int ( c / d ) r = c % d while r : c = d d = r t = a1 a1 = a a = t - q * a t = b1 b1 = b b = t - q * b q = int ( c / d ) r = c % d x = a y = b return ( d , x , y ) #\u6c42\u51fa\u9006\u5143x #print numpy.linalg.det(climb) #print exgcd(-512070636337,256,0,0) x = 47 a = numpy . dot ( numpy . linalg . det ( climb ), numpy . linalg . inv ( climb )) #\u6c42\u51fa\u9006\u77e9\u9635 #\u7ea6\u7b49\u4e8e\u53d6\u6574\u6570 for i in xrange ( 7 ): for j in xrange ( 7 ): a [ i ][ j ] = round ( a [ i ][ j ]) a = a + 0x100 * 1000000000 #print a % 256 #print ((((47 * a) % 256) * key.T )% 256).T #\u6c42\u89e3\u51fa\u4e0b\u65b9\u7684s s = [ 65 , 117 , 114 , 111 , 114 , 97 , 123 , 55 , 104 , 51 , 110 , 95 , 102 , 52 , 114 , 51 , 95 , 117 , 95 , 119 , 51 , 108 , 108 , 95 , 53 , 119 , 51 , 51 , 55 , 95 , 99 , 114 , 52 , 103 , 49 , 51 , 95 , 72 , 73 , 76 , 76 , 95 , 119 , 104 , 51 , 114 , 51 , 95 , 48 , 102 , 51 , 110 , 95 , 55 , 49 , 109 , 51 , 53 , 95 , 49 , 95 , 118 , 51 , 95 , 114 , 48 , 118 , 51 , 100 , 125 ] flag = \"\" for j in xrange ( 70 ): flag += chr ( s [ j ]) print flag flag : Aurora{7h3n f4r3 u w3ll 5w337 cr4g13 HILL wh3r3 0f3n 71m35 1 v3 r0v3d} baby_transform \u9898\u76ee\uff1a baby_transform main\u51fd\u6570\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 int __cdecl main ( int argc , const char ** argv , const char ** envp ) { unsigned int n ; // ST0C_4 void * s ; // ST20_8 const void * v6 ; // ST28_8 FILE * n_4 ; // [rsp+10h] [rbp-90h] FILE * v8 ; // [rsp+18h] [rbp-88h] char ptr ; // [rsp+30h] [rbp-70h] int v10 ; // [rsp+90h] [rbp-10h] unsigned __int64 v11 ; // [rsp+98h] [rbp-8h] v11 = __readfsqword ( 0x28u ); memset ( & ptr , 0 , 0x60uLL ); v10 = 0 ; n_4 = fopen ( \"./flag\" , \"rb\" ); v8 = fopen ( \"./enc\" , \"wb\" ); if ( n_4 ) { fread ( & ptr , 1uLL , 0x64uLL , n_4 ); n = strlen ( & ptr ); s = malloc ( n + 1 ); memset ( s , 0 , n + 1 ); memcpy ( s , & ptr , n ); v6 = malloc ( 16 * n ); Fourier_transform (( __int64 ) s , ( __int64 ) v6 , n ); //\u5927\u4f6c\u5fd8\u8bb0\u53bb\u7b26\u53f7\u8868\u4e86 fwrite ( v6 , 0x10uLL , n , v8 ); puts ( \"Transfrom completed!\" ); } else { puts ( \"Cannot open the file! Please put the file \\\" flag \\\" in the current directory.\" ); } return 0 ; } \u5206\u6790\u53ef\u5f97\u8fc7\u7a0b\u4e3a\uff1a\u8bfb\u53d6flag\u6587\u4ef6->\u5085\u91cc\u53f6\u53d8\u6362->\u8f93\u51fa\u5230enc\u6587\u4ef6 Fourier_transform\u51fd\u6570\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 __int64 __fastcall Fourier_transform ( __int64 a1 , __int64 enc , signed int a3 ) { double v3 ; // ST10_8 double * v4 ; // rax __int64 result ; // rax signed int v6 ; // [rsp+1Ch] [rbp-44h] unsigned int i ; // [rsp+38h] [rbp-28h] signed int v8 ; // [rsp+3Ch] [rbp-24h] double v9 ; // [rsp+40h] [rbp-20h] double v10 ; // [rsp+48h] [rbp-18h] v6 = a3 ; for ( i = 0 ; ; ++ i ) { result = i ; if ( i >= v6 ) break ; v8 = 0 ; v10 = 0.0 ; v9 = 0.0 ; while ( v8 < ( unsigned int ) v6 ) { v3 = ( double ) * ( unsigned __int8 * )(( unsigned int ) v8 + a1 ); cexp (); v9 = - 0.0 * ( double )( signed int ) i * ( double ) v8 / ( double ) v6 * v3 + v9 ; v10 = v3 * (( double )( signed int ) i * - 6.283185307179586 * ( double ) v8 ++ / ( double ) v6 ) + v10 ; } v4 = ( double * )( 16LL * i + enc ); * v4 = v9 ; v4 [ 1 ] = v10 ; } return result ; } \u89e3\u5bc6\u811a\u672c\u5982\u4e0b\uff1a \u5c06enc\u4e2d\u6570\u636e\u8f6c\u5316\u4e3a\u590d\u6570\u8868\u8fbe\u5f62\u5f0f\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 #include <stdio.h> #include <stdlib.h> #include <math.h> double HexToDouble ( const unsigned char * buf ); int main () { long long int n [] = { 0x40b2400000000000 , 0x0000000000000000 , 0x404f14f61c1d8082 , 0xc04745c5d3974762 , 0x405dbbb4eed9353f , 0xc0661492505818d6 , 0x40637853935dff27 , 0xc072ad04d63916c6 , 0x40627964dd51b260 , 0xc06ad4140051d3ca , 0xbfff086d44939f40 , 0x404e81b48b3ed997 , 0xc052349e55c8ee6c , 0xc041f7be0a48876a , 0x40569865a98b702a , 0xc0556a972993328d , 0xc05b35f7edc25b1f , 0x4050a5114652c156 , 0x404086e0bd49eb72 , 0x40703e0c8dd77064 , 0xc05194822ef54a76 , 0x4050f21dc0ae9df8 , 0x404883219d48105b , 0xc071ce21c901b4d2 , 0x40540064b3432d32 , 0x40403b07b4d9833e , 0xc078a662057caa2e , 0xc06a3e337c31fc3f , 0xc0437ffffffffeb4 , 0x404d800000000064 , 0x406f521c1a036884 , 0x406b1d468d5aa047 , 0xc033bbc2d0f22fac , 0xc058e4382458343f , 0xc046713c446616d8 , 0x4068bb2f9708025b , 0x405188584417c0f1 , 0xc040b6b095bd67a8 , 0xc06c47d2cb1f4146 , 0xc06806b49d729f9c , 0x4050ecd192196d91 , 0x3fd2812924060600 , 0x406833cd2b3a48f8 , 0x40608ab46b36670a , 0xc059b2169dff4b86 , 0x40685d70be3f0920 , 0xc064f6d60ace941c , 0x40515023314bbeab , 0xc072bec5d78045d3 , 0x406385e730b6f7f6 , 0x4057449810fd4454 , 0x4047572706b145bf , 0xc071a235840cdc89 , 0x400a2c344742e698 , 0x4052e2a5f1fbdd8e , 0x40425611700b4c34 , 0xc075a00000000000 , 0xbd734621b3c001e4 , 0x4052e2a5f1fbdc91 , 0xc0425611700b4a36 , 0xc071a235840cdca5 , 0xc00a2c344742d9c0 , 0x4057449810fd4589 , 0xc047572706b14adb , 0xc072bec5d78045ca , 0xc06385e730b6f8fb , 0xc064f6d60ace9424 , 0xc0515023314bbe12 , 0xc059b2169dff4c45 , 0xc0685d70be3f0856 , 0x406833cd2b3a488a , 0xc0608ab46b36666d , 0x4050ecd192196be2 , 0xbfd2812924056700 , 0xc06c47d2cb1f41c0 , 0x406806b49d729f86 , 0x405188584417c1ca , 0x4040b6b095bd67d0 , 0xc046713c446617a5 , 0xc068bb2f97080274 , 0xc033bbc2d0f230ed , 0x4058e4382458336d , 0x406f521c1a036a9e , 0xc06b1d468d5a9f0e , 0xc0437ffffffff87a , 0xc04d7ffffffffde4 , 0xc078a662057caa54 , 0x406a3e337c31fb61 , 0x40540064b3432ed8 , 0xc0403b07b4d9823e , 0x404883219d48130a , 0x4071ce21c901b534 , 0xc05194822ef5490c , 0xc050f21dc0ae9df2 , 0x404086e0bd49e9e7 , 0xc0703e0c8dd770b0 , 0xc05b35f7edc259b4 , 0xc050a5114652c116 , 0x40569865a98b7096 , 0x40556a97299332c8 , 0xc052349e55c8ef33 , 0x4041f7be0a4886b8 , 0xbfff086d4493c3c0 , 0xc04e81b48b3ed8b6 , 0x40627964dd51b301 , 0x406ad4140051d2de , 0x40637853935dfed6 , 0x4072ad04d63916fe , 0x405dbbb4eed93b0e , 0x40661492505819c1 , 0x404f14f61c1d7ecc , 0x404745c5d3974575 }; // long long int n = 0x4050400000000000; // printf(\"%llf\", *(double *)&n); for ( int i = 0 ; i < 56 ; i ++ ) printf ( \"%llf+%llfj,\" , * ( double * ) & n [ 2 * i ], * ( double * ) & n [ 2 * i + 1 ]); return 0 ; } \u5feb\u901f\u5085\u91cc\u53f6\u53d8\u5316\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 # -*- coding: UTF-8 -*- import numpy as np from ctypes import * import struct import binascii ciphertext = open ( \"data.txt\" , \"rb\" ) key = [ 4672.000000 + 0.000000j , 62.163761 +- 46.545100j , 118.932918 +- 176.642861j , 155.760202 +- 298.813681j , 147.793563 +- 214.627442j , - 1.939557 + 61.013322j , - 72.822164 +- 35.935487j , 90.381205 +- 85.665476j , - 108.843257 + 66.579179j , 33.053734 + 259.878065j , - 70.320446 + 67.783066j , 49.024463 +- 284.883248j , 80.006146 + 32.461173j , - 394.398931 +- 209.943785j , - 39.000000 + 59.000000j , 250.565930 + 216.914862j , - 19.733441 +- 99.565927j , - 44.884652 + 197.849559j , 70.130387 +- 33.427264j , - 226.244482 +- 192.209548j , 67.700291 + 0.289133j , 193.618795 + 132.334524j , - 102.782630 + 194.920013j , - 167.713628 + 69.252148j , - 299.923301 + 156.184471j , 93.071781 + 46.680878j , - 282.138065 + 3.271584j , 75.541378 + 36.672407j , - 346.000000 +- 0.000000j , 75.541378 +- 36.672407j , - 282.138065 +- 3.271584j , 93.071781 +- 46.680878j , - 299.923301 +- 156.184471j , - 167.713628 +- 69.252148j , - 102.782630 +- 194.920013j , 193.618795 +- 132.334524j , 67.700291 +- 0.289133j , - 226.244482 + 192.209548j , 70.130387 + 33.427264j , - 44.884652 +- 197.849559j , - 19.733441 + 99.565927j , 250.565930 +- 216.914862j , - 39.000000 +- 59.000000j , - 394.398931 + 209.943785j , 80.006146 +- 32.461173j , 49.024463 + 284.883248j , - 70.320446 +- 67.783066j , 33.053734 +- 259.878065j , - 108.843257 +- 66.579179j , 90.381205 + 85.665476j , - 72.822164 + 35.935487j , - 1.939557 +- 61.013322j , 147.793563 + 214.627442j , 155.760202 + 298.813681j , 118.932918 + 176.642861j , 62.163761 + 46.545100j ] a = np . fft . ifft ( key ) #print a.real \u53d6\u5b9e\u90e8 s = [ 65. , 117.0000001 , 114.00000002 , 111.00000002 , 114.00000001 , 97.00000009 , 122.99999989 , 100.00000012 , 49.00000005 , 52.99999998 , 99.00000002 , 113.99999994 , 51.00000007 , 55.00000007 , 51.00000007 , 95.00000007 , 101.99999993 , 48.00000004 , 117. , 113.99999996 , 48.99999996 , 51. , 113.99999996 , 94.99999997 , 55.00000002 , 113.99999996 , 51.99999998 , 109.99999992 , 53.00000007 , 101.99999992 , 48.00000004 , 114.00000002 , 109.00000003 , 94.99999991 , 48.99999997 , 53.00000002 , 95.00000002 , 113.99999998 , 50.99999998 , 52. , 107.99999996 , 107.99999994 , 121. , 95.00000011 , 48.99999999 , 110.00000008 , 55. , 50.99999992 , 114.00000001 , 51. , 53. , 54.99999994 , 48.99999988 , 109.99999994 , 54.00000006 , 124.99999998 ] s = map ( int , map ( round , s )) #\u53d6\u6574 print '' . join ( map ( chr , s )) flag\uff1aAurora{d15cr373 f0ur13r 7r4n5f0rm 15 r34lly_1n73r3571n6} babypyobf \u9898\u76ee\uff1a babypyobf \u6253\u5f00\u6765\u662f\u4e2a.pyc\u6587\u4ef6\uff0c\u7528uncompyle6\u8f6c\u6210py\u6587\u4ef6\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 # uncompyle6 version 3.3.3 # Python bytecode 3.7 (3394) # Decompiled from: Python 3.6.8 (default, Jan 14 2019, 11:02:34) # [GCC 8.0.1 20180414 (experimental) [trunk revision 259383]] # Embedded file name: pyobf.py # Size of source mod 2**32: 11907 bytes \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud846\udcc9 = [] \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud848\ude4c = list \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\u0646\u062c\u0645 = map \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud802\udc27 = ord \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\u72ae = print \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud803\udf16 = input \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\u08b3 = len \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud802\udf8f = True \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\u0750 = 'the_flag_is_not_here' \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud802\udf1d = [ 199 , 191 , 168 , 72 , 189 , 125 , 226 , 235 , 210 , 126 , 156 , 247 , 93 , 137 , 42 , 138 , 76 , 23 , 139 , 151 , 29 , 39 , 31 , 136 , 143 , 129 , 0 , 242 , 73 , 19 , 236 , 61 , 235 , 70 , 18 , 27 , 250 , 135 , 60 , 112 , 48 ] \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\u0750 = \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud848\ude4c ( \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\u0646\u062c\u0645 ( \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud802\udc27 , \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud848\ude4c ( \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\u0750 ))) \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\u72ae ( 'Input:' , end = '' ) \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\u0642 = \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud803\udf16 () \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\u0642 = \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud848\ude4c ( \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\u0646\u062c\u0645 ( \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud802\udc27 , \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud848\ude4c ( \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\u0642 ))) \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\u7ee4 = \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\u08b3 ( \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\u0642 ) \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud859\uddf4 = - 1479559293 \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud855\udf9d = \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\u08b3 ( \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\u0750 ) \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ub278 = 0 while \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud802\udf8f : while \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud802\udf8f : while \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud802\udf8f : while \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud802\udf8f : while \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud802\udf8f : while \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud802\udf8f : while \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud802\udf8f : while \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud802\udf8f : while \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud859\uddf4 == - 2118257528 : \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud5a3 = 1939365939 if \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\u0633\u0645 < \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\u7ee4 : \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud5a3 = 1644783123 \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud859\uddf4 = \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud5a3 if \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud859\uddf4 != - 1889341384 : break \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud846\udcc9 [ \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ub278 ] = \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ub278 \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud859\uddf4 = - 798623831 if \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud859\uddf4 != - 1717721974 : break \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ub278 = 0 \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\u075c = 0 \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\u0633\u0645 = 0 \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud859\uddf4 = - 2118257528 if \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud859\uddf4 != - 1479559293 : break \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud859\ude22 = 1698955189 if \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ub278 < 256 : \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud859\ude22 = 1974196793 \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud859\uddf4 = \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud859\ude22 if \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud859\uddf4 != - 1443714681 : break \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\u075c = 0 \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ub278 = 0 \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud859\uddf4 = 2110390670 if \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud859\uddf4 != - 1288645142 : break \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud821\udd0c = \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\u0750 [( \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ub278 % \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud855\udf9d )] + \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud846\udcc9 [ \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ub278 ] + \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\u075c \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\u075c = \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud821\udd0c & ( \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud821\udd0c ^ 3840 ) \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud846\udcc9 [ \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ub278 ] = ( \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud846\udcc9 [ \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\u075c ] & 235 | ~ \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud846\udcc9 [ \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\u075c ] & 20 ) ^ ( \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud846\udcc9 [ \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ub278 ] & 235 | ~ \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud846\udcc9 [ \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ub278 ] & 20 ) \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud846\udcc9 [ \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\u075c ] = ~ \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud846\udcc9 [ \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ub278 ] & \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud846\udcc9 [ \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\u075c ] | ~ \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud846\udcc9 [ \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\u075c ] & \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud846\udcc9 [ \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ub278 ] \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud846\udcc9 [ \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ub278 ] = ( \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud846\udcc9 [ \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\u075c ] & 212 | ~ \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud846\udcc9 [ \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\u075c ] & 43 ) ^ ( \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud846\udcc9 [ \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ub278 ] & 212 | ~ \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud846\udcc9 [ \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ub278 ] & 43 ) \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud859\uddf4 = - 367188513 if \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud859\uddf4 != - 798623831 : break \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ub278 += 1 \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud859\uddf4 = 1405424855 if \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud859\uddf4 != - 606860395 : break \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\u0633\u0645 += 1 \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud859\uddf4 = - 2118257528 if \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud859\uddf4 == - 605967056 : break if \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud859\uddf4 == - 586318370 : \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud859\uddf4 = - 605967056 \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\u72ae ( 'Bad' ) if \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud859\uddf4 == - 367188513 : \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ub278 += 1 \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud859\uddf4 = 2110390670 if \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud859\uddf4 == 833744747 : \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ub278 += 1 \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud859\uddf4 = - 1479559293 if \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud859\uddf4 == 1405424855 : \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud873\ude1f = - 1443714681 if \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ub278 < 256 : \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud873\ude1f = - 1889341384 \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud859\uddf4 = \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud873\ude1f if \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud859\uddf4 == 1513289402 : \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud859\uddf4 = - 605967056 \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\u72ae ( 'Good!' ) if \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud859\uddf4 == 1644783123 : \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ub278 = \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ub278 + 1 & 255 \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\u075c = \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud846\udcc9 [ \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ub278 ] + \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\u075c & 255 \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud846\udcc9 [ \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ub278 ] = ~ \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud846\udcc9 [ \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\u075c ] & \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud846\udcc9 [ \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ub278 ] | \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud846\udcc9 [ \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\u075c ] & ~ \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud846\udcc9 [ \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ub278 ] \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud846\udcc9 [ \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\u075c ] = ( \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud846\udcc9 [ \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ub278 ] & 212 | ~ \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud846\udcc9 [ \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ub278 ] & 43 ) ^ ( \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud846\udcc9 [ \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\u075c ] & 212 | ~ \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud846\udcc9 [ \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\u075c ] & 43 ) \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud846\udcc9 [ \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ub278 ] = ~ \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud846\udcc9 [ \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\u075c ] & \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud846\udcc9 [ \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ub278 ] | \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud846\udcc9 [ \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\u075c ] & ~ \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud846\udcc9 [ \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ub278 ] \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\u0642 [ \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\u0633\u0645 ] ^= \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud846\udcc9 [( \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud846\udcc9 [ \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\u075c ] + \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud846\udcc9 [ \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ub278 ] & 255 )] \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud859\uddf4 = - 606860395 if \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud859\uddf4 == 1698955189 : \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ub278 = 0 \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud859\uddf4 = 1405424855 if \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud859\uddf4 == 1939365939 : \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\u067f = \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\u0642 == \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud802\udf1d \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud878\udff7 = 1513289402 if not \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\u067f : \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud878\udff7 = - 586318370 \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud859\uddf4 = \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud878\udff7 if \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud859\uddf4 == 1974196793 : \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud846\udcc9 . append ( 0 ) \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud859\uddf4 = 833744747 if \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud859\uddf4 == 2110390670 : \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\u0628\u062e = - 1717721974 if \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ub278 < 256 : \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\u0628\u062e = - 1288645142 \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud859\uddf4 = \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\u0628\u062e \u624b\u5de5\u53bb\u6df7\u6dc6\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 o = [] s = 'the_flag_is_not_here' b = [ 199 , 191 , 168 , 72 , 189 , 125 , 226 , 235 , 210 , 126 , 156 , 247 , 93 , 137 , 42 , 138 , 76 , 23 , 139 , 151 , 29 , 39 , 31 , 136 , 143 , 129 , 0 , 242 , 73 , 19 , 236 , 61 , 235 , 70 , 18 , 27 , 250 , 135 , 60 , 112 , 48 ] s = list ( map ( ord , list ( s ))) a = \"123456789\" a = list ( map ( ord , list ( a ))) length_flag = len ( a ) d = - 1479559293 f = len ( s ) g = 0 while True : while True : while True : while True : while True : while True : while True : while True : while d == - 2118257528 : h = 1939365939 if i < length_flag : h = 1644783123 d = h if d != - 1889341384 : break o [ g ] = g d = - 798623831 if d != - 1717721974 : break g = 0 p = 0 i = 0 d = - 2118257528 if d != - 1479559293 : break q = 1698955189 if g < 256 : q = 1974196793 d = q if d != - 1443714681 : break p = 0 g = 0 d = 2110390670 if d != - 1288645142 : break r = s [( g % f )] + o [ g ] + p p = r & ( r ^ 3840 ) o [ g ] = ( o [ p ] & 235 | ~ o [ p ] & 20 ) ^ ( o [ g ] & 235 | ~ o [ g ] & 20 ) o [ p ] = ~ o [ g ] & o [ p ] | ~ o [ p ] & o [ g ] o [ g ] = ( o [ p ] & 212 | ~ o [ p ] & 43 ) ^ ( o [ g ] & 212 | ~ o [ g ] & 43 ) d = - 367188513 if d != - 798623831 : break g += 1 d = 1405424855 if d != - 606860395 : break i += 1 d = - 2118257528 if d == - 605967056 : break if d == - 586318370 : d = - 605967056 print ( 'Bad' ) if d == - 367188513 : g += 1 d = 2110390670 if d == 833744747 : g += 1 d = - 1479559293 if d == 1405424855 : s = - 1443714681 if g < 256 : s = - 1889341384 d = s if d == 1513289402 : d = - 605967056 print ( 'Good!' ) if d == 1644783123 : g = g + 1 & 255 p = o [ g ] + p & 255 o [ g ] = ~ o [ p ] & o [ g ] | o [ p ] & ~ o [ g ] o [ p ] = ( o [ g ] & 212 | ~ o [ g ] & 43 ) ^ ( o [ p ] & 212 | ~ o [ p ] & 43 ) o [ g ] = ~ o [ p ] & o [ g ] | o [ p ] & ~ o [ g ] a [ i ] ^= o [( o [ p ] + o [ g ] & 255 )] d = - 606860395 if d == 1698955189 : g = 0 d = 1405424855 if d == 1939365939 : t = a == b u = 1513289402 if not t : u = - 586318370 d = u if d == 1974196793 : o . append ( 0 ) d = 833744747 if d == 2110390670 : w = - 1717721974 if g < 256 : w = - 1288645142 d = w RC4\u52a0\u5bc6\uff0cs_box\u53ef\u4ee5\u76f4\u63a5\u5bfc\u51fa\uff0c\u6700\u7ec8\u89e3\u5bc6\u811a\u672c\u5982\u4e0b\uff1a 1 2 3 4 5 6 7 8 9 10 b = [ 199 , 191 , 168 , 72 , 189 , 125 , 226 , 235 , 210 , 126 , 156 , 247 , 93 , 137 , 42 , 138 , 76 , 23 , 139 , 151 , 29 , 39 , 31 , 136 , 143 , 129 , 0 , 242 , 73 , 19 , 236 , 61 , 235 , 70 , 18 , 27 , 250 , 135 , 60 , 112 , 48 ] flag = \"\" output = [ 0 for i in xrange ( len ( b ))] s_box = [ 134 , 202 , 218 , 39 , 207 , 28 , 153 , 156 , 225 , 18 , 255 , 199 , 48 , 186 , 117 , 189 , 124 , 72 , 188 , 255 , 46 , 120 , 104 , 184 , 253 , 237 , 100 , 173 , 121 , 117 , 179 , 94 , 219 , 40 , 116 , 110 , 207 , 182 , 12 , 30 , 77 ] for i in xrange ( len ( b )): output [ i ] = s_box [ i ] ^ b [ i ] print \"\" . join ( map ( chr , output )) flag\uff1aAurora{w3lc0m3 70 7h3 w0rld 0f_c0nfu510n} cryyyyyyypto \u9898\u76ee\uff1a cryyyyyyypto \u6839\u636e\u5b57\u7b26\u4e32\u627e\u5230\u4e3b\u8981\u51fd\u6570\uff0c\u5e26\u4e866\u4e2a\u52a0\u5bc6\u7b97\u6cd5........ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 int __cdecl main ( int argc , const char ** argv , const char ** envp ) { char * v3 ; // rdi signed __int64 i ; // rcx char v6 ; // [ rsp + 0 h ] [ rbp - 30 h ] char Str ; // [ rsp + 40 h ] [ rbp + 10 h ] __int64 * Dst ; // [ rsp + C8h ] [ rbp + 98 h ] void * Memory ; // [ rsp + E8h ] [ rbp + B8h ] unsigned __int64 j ; // [ rsp + 108 h ] [ rbp + D8h ] v3 = & v6 ; for ( i = 122 i64 ; i ; -- i ) { * ( _DWORD * ) v3 = - 858993460 ; v3 += 4 ; } un_use (( __int64 ) & unk_7FF6D92E4002 ); memset ( & Str , 0 , 0x64 ui64 ); Dst = ( __int64 * ) malloc ( 0x100 ui64 ); Memory = malloc ( 0x100 ui64 ); printf ( \"SEIN CHECK:\" ); scanf ( \" %s \" , & Str ); LODWORD ( Size ) = j_strlen ( & Str ); j_memset ( Dst , 0 , 0x100 ui64 ); j_memset ( Memory , 0 , 0x100 ui64 ); j_memcpy ( Dst , & Str , ( unsigned int ) Size ); j_memcpy ( Memory , aABoringCryptoM , 32 ui64 ); RC5 (( __int64 ) Dst , ( __int64 ) Memory ); j_RC4 (( __int64 ) Dst , ( __int64 ) Memory ); AES (( __int64 ) Dst , ( __int64 ) Memory ); RubyDES (( __int64 ) Dst , ( __int64 ) Memory ); TEA (( __int64 ) Dst , ( __int64 ) Memory ); blowfish (( __int64 ) Dst , ( __int64 ) Memory ); if ( ! j_memcmp ( Dst , cmp_str , ( unsigned int ) Size ) ) // \u5224\u65ad\u51fd\u6570 { printf ( \"GOOD! \\n \" ); } else { CreateThread ( 0 i64 , 0 i64 , StartAddress , 0 i64 , 0 , 0 i64 ); WinExec ( CmdLine , 0 ); for ( j = 0 i64 ; j < 0xBB8 ; ++ j ) { printf ( \"NOPE!!! YOU HAVE BEEN HACKED BY DECADE!!! \\n \" ); Sleep ( 0x14 u ); } } free ( Dst ); free ( Memory ); system ( \"pause\" ); sub_7FF6D8931447 (( __int64 ) & v6 , ( __int64 ) & unk_7FF6D893F8F0 ); return 0 ; } RC5 \u4e00\u5f00\u59cb\u6ca1\u8ba4\u51fa\u6765\uff0c\u4eba\u5de5\u9006\u5411\u7834\u89e30.0... RC4 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 void __fastcall RC4 ( unsigned __int8 * plaing , __int64 a2 ) { __int64 * v2 ; // rdi signed __int64 i ; // rcx int v4 ; // edx __int64 v5 ; // [rsp+0h] [rbp-20h] _BYTE * cipher ; // [rsp+28h] [rbp+8h] unsigned int v7 ; // [rsp+44h] [rbp+24h] unsigned int v8 ; // [rsp+64h] [rbp+44h] unsigned int j ; // [rsp+84h] [rbp+64h] int v10 ; // [rsp+154h] [rbp+134h] unsigned __int8 * flag ; // [rsp+180h] [rbp+160h] __int64 key ; // [rsp+188h] [rbp+168h] key = a2 ; flag = plaing ; v2 = & v5 ; for ( i = 90 i64 ; i ; -- i ) { * ( _DWORD * ) v2 = - 858993460 ; v2 = ( __int64 * )(( char * ) v2 + 4 ); } un_use (( __int64 ) & unk_7FF6D92E4002 ); init_Sbox ( key ); cipher = malloc (( unsigned int ) Size ); j_memset ( cipher , 0 , ( unsigned int ) Size ); v7 = 0 ; v8 = 0 ; for ( j = 0 ; j < ( unsigned int ) Size ; ++ j ) { v7 = ( v7 + 1 ) % 256 ; v8 = ( S [ v7 ] + v8 ) % 256 ; S [ v7 ] ^= S [ v8 ]; S [ v8 ] ^= S [ v7 ]; S [ v7 ] ^= S [ v8 ]; v10 = flag [ j ]; v4 = ( S [ v8 ] + S [ v7 ]) >> 31 ; cipher [ j ] = S [( unsigned __int8 )( v4 + S [ v8 ] + S [ v7 ]) - ( unsigned __int8 ) v4 ] ^ v10 ; } j_memcpy ( flag , cipher , ( unsigned int ) Size ); free ( cipher ); } \u7279\u5f81\u662finit_Sbox()\u91cc: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 size_t __fastcall sub_7FF6D89332B0 ( char * a1 ) { __int64 * v1 ; // rdi signed __int64 i ; // rcx size_t result ; // rax int v4 ; // edx __int64 v5 ; // [rsp+0h] [rbp-20h] int j ; // [rsp+24h] [rbp+4h] int v7 ; // [rsp+44h] [rbp+24h] char v8 ; // [rsp+64h] [rbp+44h] unsigned int v9 ; // [rsp+84h] [rbp+64h] int v10 ; // [rsp+154h] [rbp+134h] const char * Str ; // [rsp+180h] [rbp+160h] Str = a1 ; v1 = & v5 ; for ( i = 90 i64 ; i ; -- i ) { * ( _DWORD * ) v1 = 0xCCCCCCCC ; v1 = ( __int64 * )(( char * ) v1 + 4 ); } un_use (( __int64 ) & unk_7FF6D92E4002 ); j = 0 ; v7 = 0 ; v8 = 0 ; result = j_strlen ( Str ); v9 = result ; for ( j = 0 ; j < 256 ; ++ j ) { S [ j ] = j ; //\u8d4b\u503c\u4f4d\u6570 result = ( unsigned int )( j + 1 ); } for ( j = 0 ; j < 256 ; ++ j ) //\u5bc6\u94a5\u6269\u5c55 { v10 = S [ j ] + v7 ; v4 = (( unsigned __int8 ) Str [ j % v9 ] + v10 ) >> 31 ; v7 = ( unsigned __int8 )( v4 + Str [ j % v9 ] + v10 ) - ( unsigned __int8 ) v4 ; S [ j ] ^= S [ v7 ]; S [ v7 ] ^= S [ j ]; S [ j ] ^= S [ v7 ]; result = ( unsigned int )( j + 1 ); } return result ; } AES 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 __int64 __fastcall sub_7FF6D8931970 ( __int64 * a1 , __int64 a2 ) { __int64 * v2 ; // rdi signed __int64 i ; // rcx __int64 result ; // rax __int64 v5 ; // [rsp+0h] [rbp-30h] unsigned int j ; // [rsp+34h] [rbp+4h] __int64 * input ; // [rsp+130h] [rbp+100h] __int64 key ; // [rsp+138h] [rbp+108h] key = a2 ; input = a1 ; v2 = & v5 ; for ( i = 70 i64 ; i ; -- i ) { * ( _DWORD * ) v2 = - 858993460 ; v2 = ( __int64 * )(( char * ) v2 + 4 ); } un_use (( __int64 ) & unk_7FF6D92E4002 ); pad (( __int64 ) input , ( unsigned int ) Size , 16 i64 ); for ( j = 0 ; ; ++ j ) { result = ( unsigned int ) Size / 16 ; if ( j >= ( unsigned int ) result ) break ; AES ( key , 16u , & input [ 2 * j ], & input [ 2 * j ], 16u ); } return result ; } \u8fdb\u53bbAES\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 __int64 __fastcall sub_7FF6D8934210 ( void * key , unsigned int num_16_1 , __int64 * a3 , __int64 * a4 , unsigned int num_16 ) { char * v5 ; // rdi signed __int64 i ; // rcx char v8 ; // [rsp+0h] [rbp-20h] char v9 ; // [rsp+30h] [rbp+10h] __int64 * v10 ; // [rsp+1B8h] [rbp+198h] char * v11 ; // [rsp+1D8h] [rbp+1B8h] char v12 ; // [rsp+1F8h] [rbp+1D8h] char Dst ; // [rsp+228h] [rbp+208h] char v14 ; // [rsp+258h] [rbp+238h] unsigned int j ; // [rsp+284h] [rbp+264h] int k ; // [rsp+2A4h] [rbp+284h] const void * Src ; // [rsp+460h] [rbp+440h] unsigned int Size ; // [rsp+468h] [rbp+448h] __int64 * input1 ; // [rsp+470h] [rbp+450h] __int64 * input2 ; // [rsp+478h] [rbp+458h] input2 = a4 ; input1 = a3 ; Size = num_16_1 ; Src = key ; v5 = & v8 ; for ( i = 274 i64 ; i ; -- i ) { * ( _DWORD * ) v5 = - 858993460 ; v5 += 4 ; } un_use (( __int64 ) & unk_7FF6D92E4002 ); v10 = input2 ; v11 = & v9 ; memset ( & v12 , 0 , 0x10u i64 ); memset ( & Dst , 0 , 0x10u i64 ); memset ( & v14 , 0 , 0x10u i64 ); j_memcpy ( & Dst , Src , Size ); sub_7FF6D8931244 (( __int64 ) & Dst , 16 i64 , ( __int64 ) & v9 ); //\u521d\u59cb\u7f6e\u6362 for ( j = 0 ; j < num_16 ; j += 16 ) { sub_7FF6D893129E (( __int64 ) & v14 , ( __int64 ) input1 ); sub_7FF6D8931037 (( __int64 ) & v14 , ( __int64 ) v11 ); for ( k = 1 ; k < 10 ; ++ k ) { v11 += 16 ; sub_7FF6D8931456 (( __int64 ) & v14 ); sub_7FF6D89313B6 (( __int64 ) & v14 ); sub_7FF6D8931438 ( & v14 ); sub_7FF6D8931037 (( __int64 ) & v14 , ( __int64 ) v11 ); } sub_7FF6D8931456 (( __int64 ) & v14 ); sub_7FF6D89313B6 (( __int64 ) & v14 ); sub_7FF6D8931037 (( __int64 ) & v14 , ( __int64 )( v11 + 16 )); sub_7FF6D8931460 (( __int64 ) & v14 , ( __int64 ) v10 ); v10 += 2 ; input1 += 2 ; v11 = & v9 ; } sub_7FF6D8931447 (( __int64 ) & v8 , ( __int64 ) & unk_7FF6D893EEC8 ); return 0 i64 ; } \u521d\u59cb\u7f6e\u6362\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 __int64 __fastcall sub_7FF6D89349E0 ( __int64 a1 , __int64 a2 , _DWORD * a3 ) { __int64 * v3 ; // rdi signed __int64 i ; // rcx __int64 v6 ; // [rsp+0h] [rbp-20h] _DWORD * v7 ; // [rsp+28h] [rbp+8h] _DWORD * v8 ; // [rsp+48h] [rbp+28h] int j ; // [rsp+64h] [rbp+44h] int k ; // [rsp+84h] [rbp+64h] int l ; // [rsp+A4h] [rbp+84h] int m ; // [rsp+C4h] [rbp+A4h] __int64 v13 ; // [rsp+1C0h] [rbp+1A0h] _DWORD * v14 ; // [rsp+1D0h] [rbp+1B0h] v14 = a3 ; v13 = a1 ; v3 = & v6 ; for ( i = 106 i64 ; i ; -- i ) { * ( _DWORD * ) v3 = - 858993460 ; v3 = ( __int64 * )(( char * ) v3 + 4 ); } un_use (( __int64 ) & unk_7FF6D92E4002 ); v7 = v14 ; v8 = v14 + 44 ; for ( j = 0 ; j < 4 ; ++ j ) v7 [ j ] = _byteswap_ulong ( * ( _DWORD * )( 4 * j + v13 )); for ( k = 0 ; k < 10 ; ++ k ) { v7 [ 4 ] = dword_7FF6D893EBB0 [ k ] ^ S_box [( unsigned __int16 )( v7 [ 3 ] >> 16 ) >> 16 ] ^ ( S_box [ v7 [ 3 ] & 0xFF ] << 8 ) & 0xFF00 ^ ( S_box [( v7 [ 3 ] >> 8 ) & 0xFF ] << 16 ) & 0xFF0000 ^ ( S_box [( v7 [ 3 ] >> 16 ) & 0xFF ] << 24 ) & 0xFF000000 ^ * v7 ; v7 [ 5 ] = v7 [ 4 ] ^ v7 [ 1 ]; v7 [ 6 ] = v7 [ 5 ] ^ v7 [ 2 ]; v7 [ 7 ] = v7 [ 6 ] ^ v7 [ 3 ]; v7 += 4 ; } v7 = v14 + 40 ; for ( l = 0 ; l < 11 ; ++ l ) { for ( m = 0 ; m < 4 ; ++ m ) v8 [ m ] = v7 [ m ]; v7 -= 4 ; v8 += 4 ; } return 0 i64 ; } \u7279\u5f81\uff1aAES\u7684S_box\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 .data: 00007 FF6D8942000 S_box db 63 h , 7 Ch , 77 h , 7 Bh , 0 F2h , 6 Bh , 6 Fh , 0 C5h , 30 h , 1 , 67 h .data: 00007 FF6D8942000 ; DATA XREF: sub_7FF6D89349E0+180\u2191o .data: 00007 FF6D8942000 ; sub_7FF6D89349E0+1B0\u2191o ... .data: 00007 FF6D8942000 db 2 Bh , 0 FEh , 0 D7h , 0 ABh , 76 h , 0 CAh , 82 h , 0 C9h , 7 Dh , 0 FAh .data: 00007 FF6D8942000 db 59 h , 47 h , 0 F0h , 0 ADh , 0 D4h , 0 A2h , 0 AFh , 9 Ch , 0 A4h , 72 h .data: 00007 FF6D8942000 db 0 C0h , 0 B7h , 0 FDh , 93 h , 26 h , 36 h , 3 Fh , 0 F7h , 0 CCh , 34 h .data: 00007 FF6D8942000 db 0 A5h , 0 E5h , 0 F1h , 71 h , 0 D8h , 31 h , 15 h , 4 , 0 C7h , 23 h .data: 00007 FF6D8942000 db 0 C3h , 18 h , 96 h , 5 , 9 Ah , 7 , 12 h , 80 h , 0 E2h , 0 EBh , 27 h .data: 00007 FF6D8942000 db 0 B2h , 75 h , 9 , 83 h , 2 Ch , 1 Ah , 1 Bh , 6 Eh , 5 Ah , 0 A0h , 52 h .data: 00007 FF6D8942000 db 3 Bh , 0 D6h , 0 B3h , 29 h , 0 E3h , 2 Fh , 84 h , 53 h , 0 D1h , 0 .data: 00007 FF6D8942000 db 0 EDh , 20 h , 0 FCh , 0 B1h , 5 Bh , 6 Ah , 0 CBh , 0 BEh , 39 h , 4 Ah .data: 00007 FF6D8942000 db 4 Ch , 58 h , 0 CFh , 0 D0h , 0 EFh , 0 AAh , 0 FBh , 43 h , 4 Dh , 33 h .data: 00007 FF6D8942000 db 85 h , 45 h , 0 F9h , 2 , 7 Fh , 50 h , 3 Ch , 9 Fh , 0 A8h , 51 h , 0 A3h .data: 00007 FF6D8942000 db 40 h , 8 Fh , 92 h , 9 Dh , 38 h , 0 F5h , 0 BCh , 0 B6h , 0 DAh , 21 h .data: 00007 FF6D8942000 db 10 h , 0 FFh , 0 F3h , 0 D2h , 0 CDh , 0 Ch , 13 h , 0 ECh , 5 Fh , 97 h .data: 00007 FF6D8942000 db 44 h , 17 h , 0 C4h , 0 A7h , 7 Eh , 3 Dh , 64 h , 5 Dh , 19 h , 73 h .data: 00007 FF6D8942000 db 60 h , 81 h , 4 Fh , 0 DCh , 22 h , 2 Ah , 90 h , 88 h , 46 h , 0 EEh .data: 00007 FF6D8942000 db 0 B8h , 14 h , 0 DEh , 5 Eh , 0 Bh , 0 DBh , 0 E0h , 32 h , 3 Ah , 0 Ah .data: 00007 FF6D8942000 db 49 h , 6 , 24 h , 5 Ch , 0 C2h , 0 D3h , 0 ACh , 62 h , 91 h , 95 h , 0 E4h .data: 00007 FF6D8942000 db 79 h , 0 E7h , 0 C8h , 37 h , 6 Dh , 8 Dh , 0 D5h , 4 Eh , 0 A9h , 6 Ch .data: 00007 FF6D8942000 db 56 h , 0 F4h , 0 EAh , 65 h , 7 Ah , 0 AEh , 8 , 0 BAh , 78 h , 25 h .data: 00007 FF6D8942000 db 2 Eh , 1 Ch , 0 A6h , 0 B4h , 0 C6h , 0 E8h , 0 DDh , 74 h , 1 Fh , 4 Bh .data: 00007 FF6D8942000 db 0 BDh , 8 Bh , 8 Ah , 70 h , 3 Eh , 0 B5h , 66 h , 48 h , 3 , 0 F6h , 0 Eh .data: 00007 FF6D8942000 db 61 h , 35 h , 57 h , 0 B9h , 86 h , 0 C1h , 1 Dh , 9 Eh , 0 E1h , 0 F8h .data: 00007 FF6D8942000 db 98 h , 11 h , 69 h , 0 D9h , 8 Eh , 94 h , 9 Bh , 1 Eh , 87 h , 0 E9h .data: 00007 FF6D8942000 db 0 CEh , 55 h , 28 h , 0 DFh , 8 Ch , 0 A1h , 89 h , 0 Dh , 0 BFh , 0 E6h .data: 00007 FF6D8942000 db 42 h , 68 h , 41 h , 99 h , 2 Dh , 0 Fh , 0 B0h , 54 h , 0 BBh , 16 h DES 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 __int64 __fastcall sub_7FF6D89324E0 ( __int64 a1 , __int64 a2 ) { char * v2 ; // rdi signed __int64 i ; // rcx char v5 ; // [rsp+0h] [rbp-20h] unsigned int j ; // [rsp+24h] [rbp+4h] char Dst ; // [rsp+48h] [rbp+28h] __int64 * input ; // [rsp+140h] [rbp+120h] __int64 key ; // [rsp+148h] [rbp+128h] key = a2 ; input = ( __int64 * ) a1 ; v2 = & v5 ; for ( i = 74 i64 ; i ; -- i ) { * ( _DWORD * ) v2 = - 858993460 ; v2 += 4 ; } un_use (( __int64 ) & unk_7FF6D92E4002 ); memset ( & Dst , 0 , 8u i64 ); pad (( __int64 ) input , ( unsigned int ) Size , 8 i64 ); for ( j = 0 ; j < ( unsigned int ) Size / 8 ; ++ j ) { j_memset ( & Dst , 0 , 8u i64 ); DES (( __int64 ) & input [ j ], key , ( __int64 ) & Dst ); j_memcpy ( & input [ j ], & Dst , 8u i64 ); } return sub_7FF6D8931447 (( __int64 ) & v5 , ( __int64 ) & unk_7FF6D893F6B0 ); } \u8fdb\u5165DES\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 __int64 __fastcall DES ( __int64 input_0 , __int64 key_0 , __int64 src ) { char * v3 ; // rdi signed __int64 i ; // rcx char v6 ; // [rsp+0h] [rbp-20h] int v7 [ 72 ] ; // [rsp+30h] [rbp+10h] int v8 [ 72 ] ; // [rsp+150h] [rbp+130h] char v9 [ 3104 ] ; // [rsp+270h] [rbp+250h] char v10 ; // [rsp+E90h] [rbp+E70h] char v11 ; // [rsp+FB0h] [rbp+F90h] char v12 [ 2208 ] ; // [rsp+10D0h] [rbp+10B0h] char v13 [ 2208 ] ; // [rsp+1970h] [rbp+1950h] int v14 [ 69 ] ; // [rsp+2210h] [rbp+21F0h] int j ; // [rsp+2324h] [rbp+2304h] int k ; // [rsp+2344h] [rbp+2324h] int l ; // [rsp+2364h] [rbp+2344h] int m ; // [rsp+2384h] [rbp+2364h] int n ; // [rsp+23A4h] [rbp+2384h] int ii ; // [rsp+23C4h] [rbp+23A4h] char * v21 ; // [rsp+29D8h] [rbp+29B8h] __int64 input ; // [rsp+2A10h] [rbp+29F0h] __int64 key ; // [rsp+2A18h] [rbp+29F8h] __int64 v24 ; // [rsp+2A20h] [rbp+2A00h] v24 = src ; key = key_0 ; input = input_0 ; v3 = & v6 ; for ( i = 2686 i64 ; i; --i ) { * ( _DWORD * ) v3 = - 858993460 ; v3 += 4 ; } un_use (( __int64 ) & unk_7FF6D92E4002 ) ; memset ( v7 , 0 , 0 x100ui64 ) ; memset ( v8 , 0 , 0 x100ui64 ) ; memset ( & v10 , 0 , 0 x100ui64 ) ; memset ( v14 , 0 , 0 x100ui64 ) ; sub_7FF6D8931087 ( input , ( __int64 ) & v10 , 8 i64 ) ; sub_7FF6D8931096 (( __int64 ) & v10 , ( __int64 ) v7 , ( __int64 ) DES_Sbox ) ; sub_7FF6D8931087 ( key , ( __int64 ) & v11 , 8 i64 ) ; sub_7FF6D893140B (( __int64 ) & v11 , ( __int64 ) v9 ) ; for ( j = 0 ; j < 32; ++j ) { * ( _DWORD * ) & v12 [ 4 * j ] = v7 [ j ] ; * ( _DWORD * ) & v13 [ 4 * j ] = v7 [ j + 32 ] ; } for ( k = 1 ; k < 16; ++k ) { for ( l = 0 ; l < 32; ++l ) * ( _DWORD * ) & v12 [ 128 * ( signed __int64 ) k + 4 * l ] = * ( _DWORD * ) & v13 [ 128 * ( signed __int64 )( k - 1 ) + 4 * l ] ; v21 = & v13 [ 128 * ( signed __int64 )( k - 1 ) ] ; sub_7FF6D89311D1 ( ( __int64 ) & v13 [ 128 * ( signed __int64 )( k - 1 ) ], ( __int64 ) & v13 [ 128 * ( signed __int64 ) k ], ( __int64 ) & v9 [ 192 * ( k - 1 ) ] ) ; sub_7FF6D893107D ( & v13 [ 128 * ( signed __int64 ) k ], & v12 [ 128 * ( signed __int64 )( k - 1 ) ], 32 i64 ) ; } for ( m = 0 ; m < 32; ++m ) * ( _DWORD * ) & v13 [ 4 * m + 2048 ] = * ( _DWORD * ) & v13 [ 4 * m + 1920 ] ; v21 = & v13 [ 1920 ] ; sub_7FF6D89311D1 (( __int64 ) & v13 [ 1920 ], ( __int64 ) & v12 [ 2048 ], ( __int64 ) & v9 [ 2880 ] ) ; sub_7FF6D893107D ( & v12 [ 2048 ], & v12 [ 1920 ], 32 i64 ) ; for ( m = 0 ; m < 32; ++m ) { v8 [ m ] = * ( _DWORD * ) & v12 [ 4 * m + 2048 ] ; v8 [ m + 32 ] = * ( _DWORD * ) & v13 [ 4 * m + 2048 ] ; } sub_7FF6D89313C0 ( v8 , v14 , & unk_7FF6D8942340 ) ; for ( n = 0 ; n < 8; ++n ) { for ( ii = 0 ; ii < 8; ++ii ) { v21 = ( char * )( ii + 8 * n ) ; * ( _BYTE * )( v24 + n ) |= LOBYTE ( v14 [ ( _QWORD ) v21 ] ) << ( 7 - ii ) ; } } return sub_7FF6D8931447 (( __int64 ) & v6 , ( __int64 ) & unk_7FF6D893F5D0 ) ; } DES\u7f6e\u6362\u89c4\u5219\uff1a 1 2 3 4 5 6 .data: 00007 FF6D8942100 DES_Sbox dd 58 , 50 , 42 , 34 , 26 , 18 , 10 , 2 , 60 , 52 , 44 , 36 , 28 , 20 .data: 00007 FF6D8942100 ; DATA XREF: DES+B9\u2191o .data: 00007 FF6D8942100 dd 12 , 4 , 62 , 54 , 46 , 38 , 30 , 22 , 14 , 6 , 64 , 56 , 48 , 40 .data: 00007 FF6D8942100 dd 32 , 24 , 16 , 8 , 57 , 49 , 41 , 33 , 25 , 17 , 9 , 1 , 59 , 51 .data: 00007 FF6D8942100 dd 43 , 35 , 27 , 19 , 11 , 3 , 61 , 53 , 45 , 37 , 29 , 21 , 13 , 5 .data: 00007 FF6D8942100 dd 63 , 55 , 47 , 39 , 31 , 23 , 15 , 7 TEA 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 __int64 __fastcall sub_7FF6D8934070 ( __int64 input_0 , __int64 key_1 ) { __int64 * v2 ; // rdi signed __int64 i ; // rcx __int64 result ; // rax __int64 v5 ; // [rsp+0h] [rbp-20h] unsigned int j ; // [rsp+24h] [rbp+4h] __int64 * input ; // [rsp+120h] [rbp+100h] __int64 key ; // [rsp+128h] [rbp+108h] key = key_1 ; input = ( __int64 * ) input_0 ; v2 = & v5 ; for ( i = 66 i64 ; i ; -- i ) { * ( _DWORD * ) v2 = - 858993460 ; v2 = ( __int64 * )(( char * ) v2 + 4 ); } un_use (( __int64 ) & unk_7FF6D92E4002 ); pad (( __int64 ) input , ( unsigned int ) Size , 8 i64 ); for ( j = 0 ; ; ++ j ) { result = ( unsigned int ) Size / 8 ; if ( j >= ( unsigned int ) result ) break ; TEA_0 (( __int64 ) & input [ j ], key ); } return result ; } \u8fdb\u5165TEA_0: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 signed __int64 __fastcall sub_7FF6D8934650 ( int * input_0 , int * key_0 ) { __int64 * v2 ; // rdi signed __int64 i ; // rcx double v4 ; // xmm0_8 signed __int64 result ; // rax __int64 v6 ; // [rsp+0h] [rbp-20h] unsigned int v7 ; // [rsp+24h] [rbp+4h] unsigned int v8 ; // [rsp+44h] [rbp+24h] int sum ; // [rsp+64h] [rbp+44h] unsigned int j ; // [rsp+84h] [rbp+64h] int delta ; // [rsp+A4h] [rbp+84h] double v12 ; // [rsp+C8h] [rbp+A8h] int k_0 ; // [rsp+E4h] [rbp+C4h] int k_1 ; // [rsp+104h] [rbp+E4h] int k_2 ; // [rsp+124h] [rbp+104h] int k_3 ; // [rsp+144h] [rbp+124h] int * input ; // [rsp+240h] [rbp+220h] int * key ; // [rsp+248h] [rbp+228h] key = key_0 ; input = input_0 ; v2 = & v6 ; for ( i = 138 i64 ; i ; -- i ) { * ( _DWORD * ) v2 = - 858993460 ; v2 = ( __int64 * )(( char * ) v2 + 4 ); } un_use (( __int64 ) & unk_7FF6D92E4002 ); v7 = * input ; v8 = input [ 1 ]; sum = 0 ; v4 = j_sqrt ( 5.0 ); v12 = floor (( v4 - 1.0 ) * 2147483648.0 ); // \u7279\u5f811\uff1a2654435769 delta = ( signed int ) v12 ; k_0 = * key ; k_1 = key [ 1 ]; k_2 = key [ 2 ]; k_3 = key [ 3 ]; for ( j = 0 ; j < 32 ; ++ j ) //\u7279\u5f812 { sum += delta ; v7 += ( k_1 + ( v8 >> 5 )) ^ ( sum + v8 ) ^ ( k_0 + 16 * v8 ); v8 += ( k_3 + ( v7 >> 5 )) ^ ( sum + v7 ) ^ ( k_2 + 16 * v7 ); } * input = v7 ; result = 4 i64 ; input [ 1 ] = v8 ; return result ; } blowfish 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 __int64 __fastcall blowfish_0 ( unsigned int * input_0 , __int64 key_1 ) { char * v2 ; // rdi signed __int64 i ; // rcx unsigned int v4 ; // eax unsigned int v5 ; // eax char v7 ; // [rsp+0h] [rbp-20h] int j ; // [rsp+24h] [rbp+4h] int v9 ; // [rsp+44h] [rbp+24h] unsigned int * v10 ; // [rsp+68h] [rbp+48h] unsigned int Long ; // [rsp+84h] [rbp+64h] unsigned int v12 ; // [rsp+A4h] [rbp+84h] unsigned int * input ; // [rsp+1A0h] [rbp+180h] __int64 key ; // [rsp+1A8h] [rbp+188h] key = key_1 ; input = input_0 ; v2 = & v7 ; for ( i = 98 i64 ; i ; -- i ) { * ( _DWORD * ) v2 = - 858993460 ; v2 += 4 ; } un_use (( __int64 ) & unk_7FF6D92E4002 ); v9 = ( unsigned int ) Size / 8 ; v10 = input ; sub_7FF6D893132A ( key , ( unsigned int ) Size % 8u i64 ); //\u5bc6\u94a5\u6269\u5c55 for ( j = 0 ; j < v9 ; ++ j ) { Long = j__byteswap_ulong ( * v10 ); v12 = j__byteswap_ulong ( v10 [ 1 ]); sub_7FF6D893145B (( __int64 ) & Long , ( __int64 ) & v12 ); v4 = j__byteswap_ulong ( Long ); * v10 = v4 ; v5 = j__byteswap_ulong ( v12 ); v10 [ 1 ] = v5 ; v10 += 2 ; } return sub_7FF6D8931447 (( __int64 ) & v7 , ( __int64 ) & unk_7FF6D893F860 ); } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 __int64 __fastcall sub_7FF6D8932710 ( char * a1 ) { char * v1 ; // rdi signed __int64 i ; // rcx unsigned int v3 ; // eax char v5 ; // [ rsp + 0 h ] [ rbp - 20 h ] int j ; // [ rsp + 24 h ] [ rbp + 4 h ] int k ; // [ rsp + 44 h ] [ rbp + 24 h ] int v8 ; // [ rsp + 64 h ] [ rbp + 44 h ] void * Dst ; // [ rsp + 88 h ] [ rbp + 68 h ] int v10 ; // [ rsp + A4h ] [ rbp + 84 h ] int v11 ; // [ rsp + C4h ] [ rbp + A4h ] __int64 v12 ; // [ rsp + 198 h ] [ rbp + 178 h ] const char * Str ; // [ rsp + 1 D0h ] [ rbp + 1 B0h ] Str = a1 ; v1 = & v5 ; for ( i = 110 i64 ; i ; -- i ) { * ( _DWORD * ) v1 = - 858993460 ; v1 += 4 ; } un_use (( __int64 ) & unk_7FF6D92E4002 ); v8 = j_strlen ( Str ); Dst = 0 i64 ; v10 = 0 ; v11 = 0 ; Dst = malloc ( v8 ); j_memset ( Dst , 0 , v8 ); v8 /= 4 ui64 ; for ( j = 0 ; j < v8 ; ++ j ) { v3 = j__byteswap_ulong ( * ( _DWORD * ) & Str [ 4 * j ]); * (( _DWORD * ) Dst + j ) = v3 ; } for ( j = 0 ; j < 18 ; ++ j ) { v12 = j ; dword_7FF6D8942DE0 [ j ] ^= * (( _DWORD * ) Dst + j % v8 ); } v11 = 0 ; v10 = 0 ; for ( j = 0 ; j < 18 ; j += 2 ) { sub_7FF6D893145B (( __int64 ) & v10 , ( __int64 ) & v11 ); dword_7FF6D8942DE0 [ j ] = v10 ; dword_7FF6D8942DE0 [ j + 1 ] = v11 ; } for ( j = 0 ; j < 4 ; ++ j ) { for ( k = 0 ; k < 256 ; k += 2 ) { sub_7FF6D893145B (( __int64 ) & v10 , ( __int64 ) & v11 ); dword_7FF6D8942E50 [ 256 * ( signed __int64 ) j + k ] = v10 ; dword_7FF6D8942E50 [ 256 * ( signed __int64 ) j + k + 1 ] = v11 ; } } free ( Dst ); return sub_7FF6D8931447 (( __int64 ) & v5 , ( __int64 ) & unk_7FF6D893F780 ); } \u7279\u5f81\uff1a 1 2 3 4 5 6 .data: 00007 FF6D8942DE0 dword_7FF6D8942DE0 dd 243 F6A88h , 85 A308D3h , 13198 A2Eh , 3707344 h , 0 A4093822h .data: 00007 FF6D8942DE0 ; DATA XREF: sub_7FF6D8931A70+5B\u2191o .data: 00007 FF6D8942DE0 ; sub_7FF6D8931A70+A6\u2191o ... .data: 00007 FF6D8942DE0 dd 299 F31D0h , 82 EFA98h , 0 EC4E6C89h , 452821 E6h , 38 D01377h .data: 00007 FF6D8942DE0 dd 0 BE5466CFh , 34 E90C6Ch , 0 C0AC29B7h , 0 C97C50DDh , 3 F84D5B5h .data: 00007 FF6D8942DE0 dd 0 B5470917h , 9216 D5D9h , 8979 FB1Bh TEA\u89e3\u5bc6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 #include <stdio.h> #include <math.h> #include <stdint.h> void decrypt ( uint32_t * v , uint32_t * k ) { uint32_t v0 = v [ 0 ], v1 = v [ 1 ], sum = 0xC6EF3720 , i ; /* set up */ uint32_t delta = 0x9e3779b9 ; /* a key schedule constant */ uint32_t k0 = k [ 0 ], k1 = k [ 1 ], k2 = k [ 2 ], k3 = k [ 3 ]; /* cache key */ for ( i = 0 ; i < 32 ; i ++ ) { /* basic cycle start */ v1 -= (( v0 << 4 ) + k2 ) ^ ( v0 + sum ) ^ (( v0 >> 5 ) + k3 ); v0 -= (( v1 << 4 ) + k0 ) ^ ( v1 + sum ) ^ (( v1 >> 5 ) + k1 ); sum -= delta ; } /* end cycle */ v [ 0 ] = v0 ; v [ 1 ] = v1 ; } void encrypt ( uint32_t * v , uint32_t * k ) { uint32_t v0 = v [ 0 ], v1 = v [ 1 ], sum = 0 , i ; /* set up */ uint32_t delta = 0x9e3779b9 ; /* a key schedule constant */ uint32_t k0 = k [ 0 ], k1 = k [ 1 ], k2 = k [ 2 ], k3 = k [ 3 ]; /* cache key */ for ( i = 0 ; i < 32 ; i ++ ) { /* basic cycle start */ sum += delta ; v0 += (( v1 << 4 ) + k0 ) ^ ( v1 + sum ) ^ (( v1 >> 5 ) + k1 ); v1 += (( v0 << 4 ) + k2 ) ^ ( v0 + sum ) ^ (( v0 >> 5 ) + k3 ); } /* end cycle */ v [ 0 ] = v0 ; v [ 1 ] = v1 ; } int main () { unsigned char cipher [ 80 ] = { 18 , 186 , 235 , 205 , 57 , 16 , 228 , 62 , 74 , 108 , 147 , 138 , 39 , 186 , 150 , 201 , 206 , 20 , 106 , 221 , 216 , 160 , 180 , 220 , 41 , 108 , 186 , 108 , 86 , 153 , 213 , 90 , 223 , 207 , 252 , 29 , 148 , 7 , 95 , 39 , 91 , 45 , 186 , 81 , 191 , 92 , 213 , 122 , 220 , 94 , 89 , 90 , 115 , 152 , 46 , 27 , 231 , 217 , 246 , 48 , 166 , 166 , 248 , 229 , 85 , 214 , 98 , 93 , 157 , 113 , 16 , 14 , 237 , 206 , 174 , 168 , 121 , 77 , 166 , 173 }; uint8_t key [] = \"A_boring_crypto_\" ; uint32_t b = 72 ; for ( int i = 0 ; i <= 80 ; i += 8 ) { decrypt (( uint32_t * ) & cipher [ i ], ( uint32_t * ) key ); } for ( int i = 0 ; i < 80 ; i += 1 ) { printf ( \" \\\\ x%02x\" , cipher [ i ]); } return 0 ; } \u6700\u7ec8\u89e3\u5bc6\u811a\u672c 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 from Crypto.Cipher import Blowfish from Crypto.Cipher import DES from Crypto.Cipher import AES , ARC4 cmp_str = [ 0x37 , 0x2A , 0x2F , 0x28 , 0x5A , 0xEF , 0x17 , 0x3F , 0xE7 , 0xD5 , 0x7C , 0xE5 , 0xA5 , 0xF7 , 0xA9 , 0xDA , 0xFF , 0xBC , 0x3B , 0xA9 , 0x68 , 0xDF , 0xDF , 0xF8 , 0x7C , 0x20 , 0x76 , 0x74 , 0x8F , 0xCC , 0xC4 , 0xD4 , 0xF2 , 0xAC , 0x52 , 0x4B , 0xD4 , 0xC6 , 0x87 , 0xE8 , 0x40 , 0xD6 , 0x9C , 0x3C , 0xCE , 0x05 , 0x09 , 0x7C , 0xD4 , 0xB1 , 0x6A , 0xA9 , 0x65 , 0xA3 , 0xC7 , 0xE7 , 0x23 , 0xD0 , 0x50 , 0xA7 , 0x7E , 0x40 , 0x71 , 0x30 , 0x7C , 0x59 , 0x21 , 0xCE , 0x9F , 0xE3 , 0x91 , 0xE0 , 0x0E , 0xF1 , 0x06 , 0x29 , 0xC7 , 0x94 , 0xCE , 0x7C , 0x21 , 0x20 , 0xD6 , 0x99 , 0xB0 , 0x6D , 0x2B , 0x71 , 0x21 , 0x20 , 0xD6 , 0x99 , 0xB0 , 0x6D , 0x2B , 0x71 ] key = b 'A_boring_crypto_makes_you_angry!' #Crypto6() = Blowfish obj = Blowfish . new ( key ) cipher = b \"\" for i in cmp_str : cipher += bytes ([ i ]) plain = obj . decrypt ( cipher [ 0 : 8 ]) plain = [ 18 , 186 , 235 , 205 , 57 , 16 , 228 , 62 , 74 , 108 , 147 , 138 , 39 , 186 , 150 , 201 , 206 , 20 , 106 , 221 , 216 , 160 , 180 , 220 , 41 , 108 , 186 , 108 , 86 , 153 , 213 , 90 , 223 , 207 , 252 , 29 , 148 , 7 , 95 , 39 , 91 , 45 , 186 , 81 , 191 , 92 , 213 , 122 , 220 , 94 , 89 , 90 , 115 , 152 , 46 , 27 , 231 , 217 , 246 , 48 , 166 , 166 , 248 , 229 , 85 , 214 , 98 , 93 , 157 , 113 , 16 , 14 , 237 , 206 , 174 , 168 , 121 , 77 , 166 , 173 ] #Crypto5() = TEA plain = b ' \\xaa\\x77\\x9f\\x62\\x8a\\x27\\x1c\\x36\\x81\\x7d\\xaa\\x1c\\x62\\xaa\\x03\\x51\\x97\\x57\\xde\\xf1\\x77\\x55\\x00\\x9d\\xbd\\xa6\\x28\\xab\\x12\\x9b\\xfc\\xfb\\x75\\x6e\\x0f\\x4d\\xaa\\xa0\\x97\\xa0\\x8c\\xf9\\x8a\\xdb\\xa8\\x7f\\xd0\\xe9\\x09\\x97\\x62\\xfa\\xa1\\xf1\\xed\\xd1\\x5b\\xb6\\x42\\x37\\xaf\\xab\\x9f\\x29\\x86\\x19\\x78\\x3c\\xda\\x46\\xc3\\xd1 ' #Crypto4() = DES obj = DES . new ( key [ 0 : 8 ]) plain = obj . decrypt ( plain )[ 0 : - 8 ] # print(plain) #Crypto3() = AES obj = AES . new ( key [ 0 : 16 ]) plain = obj . decrypt ( plain )[ 0 : - 16 ] #print(plain) #Crypto2() = ARC4 obj = ARC4 . new ( key ) plain = obj . decrypt ( plain ) #print(plain) #Crypto1() = RC5 def _ROL4_ ( x , y ): y &= 0xFF y %= 32 return (( x << y ) & 0xFFFFFFFF ) | ( x >> ( 32 - y )) def _ROR4_ ( x , y ): y &= 0xFF y %= 32 return ( x >> y ) | (( x << ( 32 - y )) & 0xFFFFFFFF ) def crypto1 ( flag_0 , num ): keybox_0 = [ 0xE4 , 0x6A , 0xED , 0x19 , 0xB6 , 0x5F , 0x79 , 0x82 , 0x68 , 0xFA , 0x1F , 0x4E , 0x4E , 0x7A , 0x64 , 0x18 , 0x2A , 0xE1 , 0x69 , 0xFB , 0xFE , 0xE3 , 0x0D , 0xD2 , 0xB0 , 0x0E , 0x9C , 0x61 , 0xB5 , 0xF8 , 0x7C , 0x8E , 0xFF , 0xEC , 0x70 , 0xC4 , 0xA1 , 0x3A , 0xF6 , 0x87 , 0x10 , 0x5F , 0xD0 , 0xCC , 0xD6 , 0x02 , 0x24 , 0xA1 , 0x97 , 0xB8 , 0xF3 , 0x9E , 0x87 , 0x1E , 0x85 , 0xF8 , 0x51 , 0x66 , 0x7E , 0xBB , 0x17 , 0xF1 , 0x3B , 0xC6 , 0x84 , 0x6C , 0x00 , 0x85 , 0xBE , 0x42 , 0xEB , 0x75 , 0xA4 , 0x4F , 0x73 , 0xEF , 0x6F , 0xED , 0x62 , 0xDC , 0xD1 , 0xA0 , 0xAA , 0x0F , 0x7E , 0x05 , 0xD5 , 0xF7 , 0xCF , 0xFA , 0x81 , 0xAC , 0xA0 , 0x7D , 0x7A , 0xE8 , 0xFB , 0xF4 , 0xC7 , 0x76 , 0x1C , 0xCF , 0x66 , 0x8F ] keybox = [ 0 for i in range ( 26 )] for i in range ( len ( keybox_0 ) // 4 ): keybox [ i ] = ( keybox_0 [ i * 4 + 3 ] << 24 ) + ( keybox_0 [ i * 4 + 2 ] << 16 ) + ( keybox_0 [ i * 4 + 1 ] << 8 ) + keybox_0 [ i * 4 + 0 ] if num == 1 : size = len ( flag_0 ) for i in range ( 8 - size % 8 ): flag_0 . append ( 8 - size % 8 ) size = len ( flag_0 ) flag = [ 0 for i in range ( len ( flag_0 ) // 4 )] for i in range ( len ( flag_0 ) // 4 ): flag [ i ] = ( flag_0 [ i * 4 + 3 ] << 24 ) + ( flag_0 [ i * 4 + 2 ] << 16 ) + ( flag_0 [ i * 4 + 1 ] << 8 ) + flag_0 [ i * 4 + 0 ] for i in range ( size // 8 ): v7 = keybox [ 0 ] + flag [ 2 * i ] v8 = keybox [ 1 ] + flag [ 2 * i + 1 ] for k in range ( 1 , 13 ): v7 = ( keybox [ 2 * k ] + _ROL4_ ( v8 ^ v7 , v8 )) & 0xFFFFFFFF v8 = ( keybox [ 2 * k + 1 ] + _ROL4_ ( v7 ^ v8 , v7 )) & 0xFFFFFFFF flag [ 2 * i ] = v7 flag [ 2 * i + 1 ] = v8 else : size = len ( flag_0 ) flag = [ 0 for i in range ( len ( flag_0 ) // 4 )] for i in range ( len ( flag_0 ) // 4 ): flag [ i ] = ( flag_0 [ i * 4 + 3 ] << 24 ) + ( flag_0 [ i * 4 + 2 ] << 16 ) + ( flag_0 [ i * 4 + 1 ] << 8 ) + flag_0 [ i * 4 + 0 ] for i in range ( size // 8 - 1 , - 1 , - 1 ): v7 = flag [ 2 * i ] v8 = flag [ 2 * i + 1 ] for k in range ( 12 , 0 , - 1 ): tmp = ( v8 - keybox [ 2 * k + 1 ]) & 0xFFFFFFFF v8 = _ROR4_ ( tmp , v7 ) ^ v7 tmp = ( v7 - keybox [ 2 * k ]) & 0xFFFFFFFF v7 = _ROR4_ ( tmp , v8 ) ^ v8 flag [ 2 * i ] = ( v7 - keybox [ 0 ]) & 0xFFFFFFFF flag [ 2 * i + 1 ] = ( v8 - keybox [ 1 ]) & 0xFFFFFFFF for i in range ( len ( flag_0 ) // 4 ): flag_0 [ i * 4 + 3 ] = ( flag [ i ] >> 24 ) & 0xFF flag_0 [ i * 4 + 2 ] = ( flag [ i ] >> 16 ) & 0xFF flag_0 [ i * 4 + 1 ] = ( flag [ i ] >> 8 ) & 0xFF flag_0 [ i * 4 + 0 ] = flag [ i ] & 0xFF return ( flag_0 ) flag = [] for i in plain : flag . append ( i ) flag = crypto1 ( map ( ord , flag ), 0 ) flag = \"\" . join ( list ( map ( chr , flag ))) print ( flag ) flag\uff1aAurora{wh47 d035n7 k1ll y0u m4k35 y0u 57r0n63r}","title":"2019 Aurora\u5185\u90e8\u8d5b"},{"location":"ctf_write_up/2019/2019aurora/#climb","text":"\u9898\u76ee: Climb \u53ef\u4ee5\u76f4\u63a5\u627e\u5230main\u51fd\u6570\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 __int64 __fastcall main ( __int64 a1 , char ** a2 , char ** a3 ) { __int64 result ; // rax char v4 ; // [rsp+Fh] [rbp-91h] int i ; // [rsp+10h] [rbp-90h] signed int j ; // [rsp+14h] [rbp-8Ch] signed int k ; // [rsp+18h] [rbp-88h] __int64 v8 ; // [rsp+1Ch] [rbp-84h] void * dest ; // [rsp+20h] [rbp-80h] void * s1 ; // [rsp+28h] [rbp-78h] char s ; // [rsp+30h] [rbp-70h] int v12 ; // [rsp+90h] [rbp-10h] unsigned __int64 v13 ; // [rsp+98h] [rbp-8h] v13 = __readfsqword ( 0x28u ); memset ( & s , 0 , 0x60uLL ); v12 = 0 ; puts ( \"Check up:\" ); __isoc99_scanf ( \"%s\" , & s ); v8 = ( unsigned int ) strlen ( & s ); if ( ( signed int ) v8 <= 100 ) { if ( ( signed int ) v8 % 7 ) { puts ( \"Invalid lenth!\" ); result = 0LL ; } else { dest = malloc (( signed int ) v8 ); s1 = malloc (( signed int ) v8 ); memcpy ( dest , & s , ( signed int ) v8 ); memset ( s1 , 0 , ( signed int ) v8 ); for ( i = 0 ; i < ( signed int ) v8 / 7 ; ++ i ) { for ( j = 0 ; j <= 6 ; ++ j ) { v4 = 0 ; for ( k = 0 ; k <= 6 ; ++ k ) v4 += * (( _BYTE * ) dest + 7 * i + k ) * climb [ 7 * j + k ]; // \u8f93\u5165\u7684\u6bcf7\u4e2a\u4e3a\u4e00\u7ec4\uff0c\u6bcf\u4e2a\u548ckey\u5f02\u6216 // \u7c7b\u4f3c\u7ebf\u6027\u4ee3\u6570\u7684\u77e9\u9635\u76f8\u4e58 * (( _BYTE * ) s1 + 7 * i + j ) = v4 ; } } if ( ! memcmp ( s1 , & key , 70uLL ) ) // \u8f93\u5165\u957f\u5ea6\u731c\u6d4b\u4e3a70 puts ( \"OK!\" ); else puts ( \"Nope.\" ); free ( dest ); free ( s1 ); result = 0LL ; } } else { puts ( \"Too long!\" ); result = 0LL ; } return result ; } \u90a3\u9996\u5148\u5c06climb\u548ckey\u8f6c\u5316\u4e3a\u4e24\u4e2a\u77e9\u9635\u3002\u7136\u540e\u7528\u6269\u5c55\u6b27\u51e0\u91cc\u5f97\u7b97\u6cd5\u6c42\u51fa\uff0cclimb\u884c\u5217\u5f0f\u7684\u503c\u7684\u9006\u5143\uff0c\u4ee5\u6c42\u51faclimb\u7684\u9006\u77e9\u9635\uff0c\u76f8\u4e58\u5373\u5f97\u7b54\u6848\u3002 [\u5e0c\u5c14\u5bc6\u7801\u6c42\u89e3\u65b9\u6cd5] \u811a\u672c\u5982\u4e0b\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 from numpy import * import numpy key = [[ 18 , 245 , 75 , 32 , 157 , 232 , 99 ], [ 165 , 54 , 146 , 18 , 221 , 244 , 196 ], [ 157 , 89 , 115 , 88 , 100 , 184 , 103 ], [ 91 , 38 , 206 , 47 , 46 , 82 , 135 ], [ 200 , 200 , 64 , 21 , 82 , 20 , 156 ], [ 202 , 165 , 27 , 33 , 69 , 217 , 235 ], [ 49 , 48 , 196 , 231 , 173 , 145 , 174 ], [ 250 , 104 , 42 , 189 , 118 , 127 , 243 ], [ 134 , 197 , 174 , 127 , 20 , 104 , 70 ], [ 170 , 221 , 232 , 219 , 251 , 132 , 231 ]] climb = [[ 65 , 108 , 109 , 111 , 115 , 116 , 32 ], [ 104 , 101 , 97 , 118 , 101 , 110 , 32 ], [ 119 , 101 , 115 , 116 , 32 , 118 , 105 ], [ 114 , 103 , 105 , 110 , 105 , 97 , 44 ], [ 32 , 98 , 108 , 117 , 101 , 32 , 114 ], [ 105 , 100 , 103 , 101 , 32 , 109 , 111 ], [ 117 , 110 , 116 , 97 , 105 , 110 , 115 ]] climb = numpy . array ( climb ) key = mat ( key ) #\u6269\u5c55\u6b27\u51e0\u91cc\u5f97\u7b97\u6cd5 def exgcd ( m , n , x , y ): if n == 0 : x = 1 y = 0 return ( m , x , y ) a1 = b = 1 a = b1 = 0 c = m d = n q = int ( c / d ) r = c % d while r : c = d d = r t = a1 a1 = a a = t - q * a t = b1 b1 = b b = t - q * b q = int ( c / d ) r = c % d x = a y = b return ( d , x , y ) #\u6c42\u51fa\u9006\u5143x #print numpy.linalg.det(climb) #print exgcd(-512070636337,256,0,0) x = 47 a = numpy . dot ( numpy . linalg . det ( climb ), numpy . linalg . inv ( climb )) #\u6c42\u51fa\u9006\u77e9\u9635 #\u7ea6\u7b49\u4e8e\u53d6\u6574\u6570 for i in xrange ( 7 ): for j in xrange ( 7 ): a [ i ][ j ] = round ( a [ i ][ j ]) a = a + 0x100 * 1000000000 #print a % 256 #print ((((47 * a) % 256) * key.T )% 256).T #\u6c42\u89e3\u51fa\u4e0b\u65b9\u7684s s = [ 65 , 117 , 114 , 111 , 114 , 97 , 123 , 55 , 104 , 51 , 110 , 95 , 102 , 52 , 114 , 51 , 95 , 117 , 95 , 119 , 51 , 108 , 108 , 95 , 53 , 119 , 51 , 51 , 55 , 95 , 99 , 114 , 52 , 103 , 49 , 51 , 95 , 72 , 73 , 76 , 76 , 95 , 119 , 104 , 51 , 114 , 51 , 95 , 48 , 102 , 51 , 110 , 95 , 55 , 49 , 109 , 51 , 53 , 95 , 49 , 95 , 118 , 51 , 95 , 114 , 48 , 118 , 51 , 100 , 125 ] flag = \"\" for j in xrange ( 70 ): flag += chr ( s [ j ]) print flag flag : Aurora{7h3n f4r3 u w3ll 5w337 cr4g13 HILL wh3r3 0f3n 71m35 1 v3 r0v3d}","title":"Climb"},{"location":"ctf_write_up/2019/2019aurora/#baby_transform","text":"\u9898\u76ee\uff1a baby_transform main\u51fd\u6570\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 int __cdecl main ( int argc , const char ** argv , const char ** envp ) { unsigned int n ; // ST0C_4 void * s ; // ST20_8 const void * v6 ; // ST28_8 FILE * n_4 ; // [rsp+10h] [rbp-90h] FILE * v8 ; // [rsp+18h] [rbp-88h] char ptr ; // [rsp+30h] [rbp-70h] int v10 ; // [rsp+90h] [rbp-10h] unsigned __int64 v11 ; // [rsp+98h] [rbp-8h] v11 = __readfsqword ( 0x28u ); memset ( & ptr , 0 , 0x60uLL ); v10 = 0 ; n_4 = fopen ( \"./flag\" , \"rb\" ); v8 = fopen ( \"./enc\" , \"wb\" ); if ( n_4 ) { fread ( & ptr , 1uLL , 0x64uLL , n_4 ); n = strlen ( & ptr ); s = malloc ( n + 1 ); memset ( s , 0 , n + 1 ); memcpy ( s , & ptr , n ); v6 = malloc ( 16 * n ); Fourier_transform (( __int64 ) s , ( __int64 ) v6 , n ); //\u5927\u4f6c\u5fd8\u8bb0\u53bb\u7b26\u53f7\u8868\u4e86 fwrite ( v6 , 0x10uLL , n , v8 ); puts ( \"Transfrom completed!\" ); } else { puts ( \"Cannot open the file! Please put the file \\\" flag \\\" in the current directory.\" ); } return 0 ; } \u5206\u6790\u53ef\u5f97\u8fc7\u7a0b\u4e3a\uff1a\u8bfb\u53d6flag\u6587\u4ef6->\u5085\u91cc\u53f6\u53d8\u6362->\u8f93\u51fa\u5230enc\u6587\u4ef6 Fourier_transform\u51fd\u6570\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 __int64 __fastcall Fourier_transform ( __int64 a1 , __int64 enc , signed int a3 ) { double v3 ; // ST10_8 double * v4 ; // rax __int64 result ; // rax signed int v6 ; // [rsp+1Ch] [rbp-44h] unsigned int i ; // [rsp+38h] [rbp-28h] signed int v8 ; // [rsp+3Ch] [rbp-24h] double v9 ; // [rsp+40h] [rbp-20h] double v10 ; // [rsp+48h] [rbp-18h] v6 = a3 ; for ( i = 0 ; ; ++ i ) { result = i ; if ( i >= v6 ) break ; v8 = 0 ; v10 = 0.0 ; v9 = 0.0 ; while ( v8 < ( unsigned int ) v6 ) { v3 = ( double ) * ( unsigned __int8 * )(( unsigned int ) v8 + a1 ); cexp (); v9 = - 0.0 * ( double )( signed int ) i * ( double ) v8 / ( double ) v6 * v3 + v9 ; v10 = v3 * (( double )( signed int ) i * - 6.283185307179586 * ( double ) v8 ++ / ( double ) v6 ) + v10 ; } v4 = ( double * )( 16LL * i + enc ); * v4 = v9 ; v4 [ 1 ] = v10 ; } return result ; } \u89e3\u5bc6\u811a\u672c\u5982\u4e0b\uff1a \u5c06enc\u4e2d\u6570\u636e\u8f6c\u5316\u4e3a\u590d\u6570\u8868\u8fbe\u5f62\u5f0f\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 #include <stdio.h> #include <stdlib.h> #include <math.h> double HexToDouble ( const unsigned char * buf ); int main () { long long int n [] = { 0x40b2400000000000 , 0x0000000000000000 , 0x404f14f61c1d8082 , 0xc04745c5d3974762 , 0x405dbbb4eed9353f , 0xc0661492505818d6 , 0x40637853935dff27 , 0xc072ad04d63916c6 , 0x40627964dd51b260 , 0xc06ad4140051d3ca , 0xbfff086d44939f40 , 0x404e81b48b3ed997 , 0xc052349e55c8ee6c , 0xc041f7be0a48876a , 0x40569865a98b702a , 0xc0556a972993328d , 0xc05b35f7edc25b1f , 0x4050a5114652c156 , 0x404086e0bd49eb72 , 0x40703e0c8dd77064 , 0xc05194822ef54a76 , 0x4050f21dc0ae9df8 , 0x404883219d48105b , 0xc071ce21c901b4d2 , 0x40540064b3432d32 , 0x40403b07b4d9833e , 0xc078a662057caa2e , 0xc06a3e337c31fc3f , 0xc0437ffffffffeb4 , 0x404d800000000064 , 0x406f521c1a036884 , 0x406b1d468d5aa047 , 0xc033bbc2d0f22fac , 0xc058e4382458343f , 0xc046713c446616d8 , 0x4068bb2f9708025b , 0x405188584417c0f1 , 0xc040b6b095bd67a8 , 0xc06c47d2cb1f4146 , 0xc06806b49d729f9c , 0x4050ecd192196d91 , 0x3fd2812924060600 , 0x406833cd2b3a48f8 , 0x40608ab46b36670a , 0xc059b2169dff4b86 , 0x40685d70be3f0920 , 0xc064f6d60ace941c , 0x40515023314bbeab , 0xc072bec5d78045d3 , 0x406385e730b6f7f6 , 0x4057449810fd4454 , 0x4047572706b145bf , 0xc071a235840cdc89 , 0x400a2c344742e698 , 0x4052e2a5f1fbdd8e , 0x40425611700b4c34 , 0xc075a00000000000 , 0xbd734621b3c001e4 , 0x4052e2a5f1fbdc91 , 0xc0425611700b4a36 , 0xc071a235840cdca5 , 0xc00a2c344742d9c0 , 0x4057449810fd4589 , 0xc047572706b14adb , 0xc072bec5d78045ca , 0xc06385e730b6f8fb , 0xc064f6d60ace9424 , 0xc0515023314bbe12 , 0xc059b2169dff4c45 , 0xc0685d70be3f0856 , 0x406833cd2b3a488a , 0xc0608ab46b36666d , 0x4050ecd192196be2 , 0xbfd2812924056700 , 0xc06c47d2cb1f41c0 , 0x406806b49d729f86 , 0x405188584417c1ca , 0x4040b6b095bd67d0 , 0xc046713c446617a5 , 0xc068bb2f97080274 , 0xc033bbc2d0f230ed , 0x4058e4382458336d , 0x406f521c1a036a9e , 0xc06b1d468d5a9f0e , 0xc0437ffffffff87a , 0xc04d7ffffffffde4 , 0xc078a662057caa54 , 0x406a3e337c31fb61 , 0x40540064b3432ed8 , 0xc0403b07b4d9823e , 0x404883219d48130a , 0x4071ce21c901b534 , 0xc05194822ef5490c , 0xc050f21dc0ae9df2 , 0x404086e0bd49e9e7 , 0xc0703e0c8dd770b0 , 0xc05b35f7edc259b4 , 0xc050a5114652c116 , 0x40569865a98b7096 , 0x40556a97299332c8 , 0xc052349e55c8ef33 , 0x4041f7be0a4886b8 , 0xbfff086d4493c3c0 , 0xc04e81b48b3ed8b6 , 0x40627964dd51b301 , 0x406ad4140051d2de , 0x40637853935dfed6 , 0x4072ad04d63916fe , 0x405dbbb4eed93b0e , 0x40661492505819c1 , 0x404f14f61c1d7ecc , 0x404745c5d3974575 }; // long long int n = 0x4050400000000000; // printf(\"%llf\", *(double *)&n); for ( int i = 0 ; i < 56 ; i ++ ) printf ( \"%llf+%llfj,\" , * ( double * ) & n [ 2 * i ], * ( double * ) & n [ 2 * i + 1 ]); return 0 ; } \u5feb\u901f\u5085\u91cc\u53f6\u53d8\u5316\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 # -*- coding: UTF-8 -*- import numpy as np from ctypes import * import struct import binascii ciphertext = open ( \"data.txt\" , \"rb\" ) key = [ 4672.000000 + 0.000000j , 62.163761 +- 46.545100j , 118.932918 +- 176.642861j , 155.760202 +- 298.813681j , 147.793563 +- 214.627442j , - 1.939557 + 61.013322j , - 72.822164 +- 35.935487j , 90.381205 +- 85.665476j , - 108.843257 + 66.579179j , 33.053734 + 259.878065j , - 70.320446 + 67.783066j , 49.024463 +- 284.883248j , 80.006146 + 32.461173j , - 394.398931 +- 209.943785j , - 39.000000 + 59.000000j , 250.565930 + 216.914862j , - 19.733441 +- 99.565927j , - 44.884652 + 197.849559j , 70.130387 +- 33.427264j , - 226.244482 +- 192.209548j , 67.700291 + 0.289133j , 193.618795 + 132.334524j , - 102.782630 + 194.920013j , - 167.713628 + 69.252148j , - 299.923301 + 156.184471j , 93.071781 + 46.680878j , - 282.138065 + 3.271584j , 75.541378 + 36.672407j , - 346.000000 +- 0.000000j , 75.541378 +- 36.672407j , - 282.138065 +- 3.271584j , 93.071781 +- 46.680878j , - 299.923301 +- 156.184471j , - 167.713628 +- 69.252148j , - 102.782630 +- 194.920013j , 193.618795 +- 132.334524j , 67.700291 +- 0.289133j , - 226.244482 + 192.209548j , 70.130387 + 33.427264j , - 44.884652 +- 197.849559j , - 19.733441 + 99.565927j , 250.565930 +- 216.914862j , - 39.000000 +- 59.000000j , - 394.398931 + 209.943785j , 80.006146 +- 32.461173j , 49.024463 + 284.883248j , - 70.320446 +- 67.783066j , 33.053734 +- 259.878065j , - 108.843257 +- 66.579179j , 90.381205 + 85.665476j , - 72.822164 + 35.935487j , - 1.939557 +- 61.013322j , 147.793563 + 214.627442j , 155.760202 + 298.813681j , 118.932918 + 176.642861j , 62.163761 + 46.545100j ] a = np . fft . ifft ( key ) #print a.real \u53d6\u5b9e\u90e8 s = [ 65. , 117.0000001 , 114.00000002 , 111.00000002 , 114.00000001 , 97.00000009 , 122.99999989 , 100.00000012 , 49.00000005 , 52.99999998 , 99.00000002 , 113.99999994 , 51.00000007 , 55.00000007 , 51.00000007 , 95.00000007 , 101.99999993 , 48.00000004 , 117. , 113.99999996 , 48.99999996 , 51. , 113.99999996 , 94.99999997 , 55.00000002 , 113.99999996 , 51.99999998 , 109.99999992 , 53.00000007 , 101.99999992 , 48.00000004 , 114.00000002 , 109.00000003 , 94.99999991 , 48.99999997 , 53.00000002 , 95.00000002 , 113.99999998 , 50.99999998 , 52. , 107.99999996 , 107.99999994 , 121. , 95.00000011 , 48.99999999 , 110.00000008 , 55. , 50.99999992 , 114.00000001 , 51. , 53. , 54.99999994 , 48.99999988 , 109.99999994 , 54.00000006 , 124.99999998 ] s = map ( int , map ( round , s )) #\u53d6\u6574 print '' . join ( map ( chr , s )) flag\uff1aAurora{d15cr373 f0ur13r 7r4n5f0rm 15 r34lly_1n73r3571n6}","title":"baby_transform"},{"location":"ctf_write_up/2019/2019aurora/#babypyobf","text":"\u9898\u76ee\uff1a babypyobf \u6253\u5f00\u6765\u662f\u4e2a.pyc\u6587\u4ef6\uff0c\u7528uncompyle6\u8f6c\u6210py\u6587\u4ef6\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 # uncompyle6 version 3.3.3 # Python bytecode 3.7 (3394) # Decompiled from: Python 3.6.8 (default, Jan 14 2019, 11:02:34) # [GCC 8.0.1 20180414 (experimental) [trunk revision 259383]] # Embedded file name: pyobf.py # Size of source mod 2**32: 11907 bytes \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud846\udcc9 = [] \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud848\ude4c = list \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\u0646\u062c\u0645 = map \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud802\udc27 = ord \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\u72ae = print \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud803\udf16 = input \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\u08b3 = len \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud802\udf8f = True \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\u0750 = 'the_flag_is_not_here' \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud802\udf1d = [ 199 , 191 , 168 , 72 , 189 , 125 , 226 , 235 , 210 , 126 , 156 , 247 , 93 , 137 , 42 , 138 , 76 , 23 , 139 , 151 , 29 , 39 , 31 , 136 , 143 , 129 , 0 , 242 , 73 , 19 , 236 , 61 , 235 , 70 , 18 , 27 , 250 , 135 , 60 , 112 , 48 ] \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\u0750 = \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud848\ude4c ( \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\u0646\u062c\u0645 ( \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud802\udc27 , \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud848\ude4c ( \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\u0750 ))) \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\u72ae ( 'Input:' , end = '' ) \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\u0642 = \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud803\udf16 () \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\u0642 = \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud848\ude4c ( \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\u0646\u062c\u0645 ( \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud802\udc27 , \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud848\ude4c ( \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\u0642 ))) \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\u7ee4 = \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\u08b3 ( \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\u0642 ) \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud859\uddf4 = - 1479559293 \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud855\udf9d = \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\u08b3 ( \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\u0750 ) \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ub278 = 0 while \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud802\udf8f : while \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud802\udf8f : while \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud802\udf8f : while \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud802\udf8f : while \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud802\udf8f : while \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud802\udf8f : while \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud802\udf8f : while \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud802\udf8f : while \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud859\uddf4 == - 2118257528 : \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud5a3 = 1939365939 if \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\u0633\u0645 < \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\u7ee4 : \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud5a3 = 1644783123 \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud859\uddf4 = \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud5a3 if \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud859\uddf4 != - 1889341384 : break \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud846\udcc9 [ \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ub278 ] = \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ub278 \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud859\uddf4 = - 798623831 if \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud859\uddf4 != - 1717721974 : break \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ub278 = 0 \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\u075c = 0 \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\u0633\u0645 = 0 \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud859\uddf4 = - 2118257528 if \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud859\uddf4 != - 1479559293 : break \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud859\ude22 = 1698955189 if \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ub278 < 256 : \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud859\ude22 = 1974196793 \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud859\uddf4 = \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud859\ude22 if \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud859\uddf4 != - 1443714681 : break \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\u075c = 0 \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ub278 = 0 \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud859\uddf4 = 2110390670 if \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud859\uddf4 != - 1288645142 : break \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud821\udd0c = \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\u0750 [( \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ub278 % \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud855\udf9d )] + \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud846\udcc9 [ \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ub278 ] + \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\u075c \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\u075c = \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud821\udd0c & ( \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud821\udd0c ^ 3840 ) \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud846\udcc9 [ \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ub278 ] = ( \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud846\udcc9 [ \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\u075c ] & 235 | ~ \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud846\udcc9 [ \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\u075c ] & 20 ) ^ ( \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud846\udcc9 [ \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ub278 ] & 235 | ~ \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud846\udcc9 [ \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ub278 ] & 20 ) \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud846\udcc9 [ \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\u075c ] = ~ \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud846\udcc9 [ \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ub278 ] & \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud846\udcc9 [ \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\u075c ] | ~ \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud846\udcc9 [ \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\u075c ] & \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud846\udcc9 [ \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ub278 ] \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud846\udcc9 [ \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ub278 ] = ( \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud846\udcc9 [ \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\u075c ] & 212 | ~ \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud846\udcc9 [ \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\u075c ] & 43 ) ^ ( \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud846\udcc9 [ \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ub278 ] & 212 | ~ \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud846\udcc9 [ \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ub278 ] & 43 ) \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud859\uddf4 = - 367188513 if \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud859\uddf4 != - 798623831 : break \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ub278 += 1 \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud859\uddf4 = 1405424855 if \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud859\uddf4 != - 606860395 : break \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\u0633\u0645 += 1 \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud859\uddf4 = - 2118257528 if \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud859\uddf4 == - 605967056 : break if \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud859\uddf4 == - 586318370 : \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud859\uddf4 = - 605967056 \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\u72ae ( 'Bad' ) if \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud859\uddf4 == - 367188513 : \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ub278 += 1 \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud859\uddf4 = 2110390670 if \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud859\uddf4 == 833744747 : \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ub278 += 1 \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud859\uddf4 = - 1479559293 if \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud859\uddf4 == 1405424855 : \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud873\ude1f = - 1443714681 if \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ub278 < 256 : \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud873\ude1f = - 1889341384 \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud859\uddf4 = \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud873\ude1f if \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud859\uddf4 == 1513289402 : \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud859\uddf4 = - 605967056 \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\u72ae ( 'Good!' ) if \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud859\uddf4 == 1644783123 : \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ub278 = \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ub278 + 1 & 255 \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\u075c = \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud846\udcc9 [ \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ub278 ] + \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\u075c & 255 \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud846\udcc9 [ \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ub278 ] = ~ \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud846\udcc9 [ \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\u075c ] & \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud846\udcc9 [ \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ub278 ] | \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud846\udcc9 [ \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\u075c ] & ~ \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud846\udcc9 [ \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ub278 ] \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud846\udcc9 [ \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\u075c ] = ( \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud846\udcc9 [ \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ub278 ] & 212 | ~ \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud846\udcc9 [ \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ub278 ] & 43 ) ^ ( \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud846\udcc9 [ \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\u075c ] & 212 | ~ \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud846\udcc9 [ \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\u075c ] & 43 ) \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud846\udcc9 [ \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ub278 ] = ~ \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud846\udcc9 [ \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\u075c ] & \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud846\udcc9 [ \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ub278 ] | \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud846\udcc9 [ \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\u075c ] & ~ \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud846\udcc9 [ \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ub278 ] \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\u0642 [ \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\u0633\u0645 ] ^= \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud846\udcc9 [( \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud846\udcc9 [ \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\u075c ] + \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud846\udcc9 [ \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ub278 ] & 255 )] \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud859\uddf4 = - 606860395 if \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud859\uddf4 == 1698955189 : \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ub278 = 0 \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud859\uddf4 = 1405424855 if \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud859\uddf4 == 1939365939 : \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\u067f = \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\u0642 == \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud802\udf1d \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud878\udff7 = 1513289402 if not \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\u067f : \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud878\udff7 = - 586318370 \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud859\uddf4 = \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud878\udff7 if \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud859\uddf4 == 1974196793 : \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud846\udcc9 . append ( 0 ) \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud859\uddf4 = 833744747 if \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud859\uddf4 == 2110390670 : \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\u0628\u062e = - 1717721974 if \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ub278 < 256 : \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\u0628\u062e = - 1288645142 \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\ud859\uddf4 = \ud851\udc15\u064a\u0645\u7d4e\ud867\ude28\u06c5\ud85c\udc46\u05ea\u05bc\u0637\ud44a\ud873\udd5d\u0646\u062d\u0645\u0645\u062d\u062c\u835c\u0864\u0628\u062e \u624b\u5de5\u53bb\u6df7\u6dc6\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 o = [] s = 'the_flag_is_not_here' b = [ 199 , 191 , 168 , 72 , 189 , 125 , 226 , 235 , 210 , 126 , 156 , 247 , 93 , 137 , 42 , 138 , 76 , 23 , 139 , 151 , 29 , 39 , 31 , 136 , 143 , 129 , 0 , 242 , 73 , 19 , 236 , 61 , 235 , 70 , 18 , 27 , 250 , 135 , 60 , 112 , 48 ] s = list ( map ( ord , list ( s ))) a = \"123456789\" a = list ( map ( ord , list ( a ))) length_flag = len ( a ) d = - 1479559293 f = len ( s ) g = 0 while True : while True : while True : while True : while True : while True : while True : while True : while d == - 2118257528 : h = 1939365939 if i < length_flag : h = 1644783123 d = h if d != - 1889341384 : break o [ g ] = g d = - 798623831 if d != - 1717721974 : break g = 0 p = 0 i = 0 d = - 2118257528 if d != - 1479559293 : break q = 1698955189 if g < 256 : q = 1974196793 d = q if d != - 1443714681 : break p = 0 g = 0 d = 2110390670 if d != - 1288645142 : break r = s [( g % f )] + o [ g ] + p p = r & ( r ^ 3840 ) o [ g ] = ( o [ p ] & 235 | ~ o [ p ] & 20 ) ^ ( o [ g ] & 235 | ~ o [ g ] & 20 ) o [ p ] = ~ o [ g ] & o [ p ] | ~ o [ p ] & o [ g ] o [ g ] = ( o [ p ] & 212 | ~ o [ p ] & 43 ) ^ ( o [ g ] & 212 | ~ o [ g ] & 43 ) d = - 367188513 if d != - 798623831 : break g += 1 d = 1405424855 if d != - 606860395 : break i += 1 d = - 2118257528 if d == - 605967056 : break if d == - 586318370 : d = - 605967056 print ( 'Bad' ) if d == - 367188513 : g += 1 d = 2110390670 if d == 833744747 : g += 1 d = - 1479559293 if d == 1405424855 : s = - 1443714681 if g < 256 : s = - 1889341384 d = s if d == 1513289402 : d = - 605967056 print ( 'Good!' ) if d == 1644783123 : g = g + 1 & 255 p = o [ g ] + p & 255 o [ g ] = ~ o [ p ] & o [ g ] | o [ p ] & ~ o [ g ] o [ p ] = ( o [ g ] & 212 | ~ o [ g ] & 43 ) ^ ( o [ p ] & 212 | ~ o [ p ] & 43 ) o [ g ] = ~ o [ p ] & o [ g ] | o [ p ] & ~ o [ g ] a [ i ] ^= o [( o [ p ] + o [ g ] & 255 )] d = - 606860395 if d == 1698955189 : g = 0 d = 1405424855 if d == 1939365939 : t = a == b u = 1513289402 if not t : u = - 586318370 d = u if d == 1974196793 : o . append ( 0 ) d = 833744747 if d == 2110390670 : w = - 1717721974 if g < 256 : w = - 1288645142 d = w RC4\u52a0\u5bc6\uff0cs_box\u53ef\u4ee5\u76f4\u63a5\u5bfc\u51fa\uff0c\u6700\u7ec8\u89e3\u5bc6\u811a\u672c\u5982\u4e0b\uff1a 1 2 3 4 5 6 7 8 9 10 b = [ 199 , 191 , 168 , 72 , 189 , 125 , 226 , 235 , 210 , 126 , 156 , 247 , 93 , 137 , 42 , 138 , 76 , 23 , 139 , 151 , 29 , 39 , 31 , 136 , 143 , 129 , 0 , 242 , 73 , 19 , 236 , 61 , 235 , 70 , 18 , 27 , 250 , 135 , 60 , 112 , 48 ] flag = \"\" output = [ 0 for i in xrange ( len ( b ))] s_box = [ 134 , 202 , 218 , 39 , 207 , 28 , 153 , 156 , 225 , 18 , 255 , 199 , 48 , 186 , 117 , 189 , 124 , 72 , 188 , 255 , 46 , 120 , 104 , 184 , 253 , 237 , 100 , 173 , 121 , 117 , 179 , 94 , 219 , 40 , 116 , 110 , 207 , 182 , 12 , 30 , 77 ] for i in xrange ( len ( b )): output [ i ] = s_box [ i ] ^ b [ i ] print \"\" . join ( map ( chr , output )) flag\uff1aAurora{w3lc0m3 70 7h3 w0rld 0f_c0nfu510n}","title":"babypyobf"},{"location":"ctf_write_up/2019/2019aurora/#cryyyyyyypto","text":"\u9898\u76ee\uff1a cryyyyyyypto \u6839\u636e\u5b57\u7b26\u4e32\u627e\u5230\u4e3b\u8981\u51fd\u6570\uff0c\u5e26\u4e866\u4e2a\u52a0\u5bc6\u7b97\u6cd5........ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 int __cdecl main ( int argc , const char ** argv , const char ** envp ) { char * v3 ; // rdi signed __int64 i ; // rcx char v6 ; // [ rsp + 0 h ] [ rbp - 30 h ] char Str ; // [ rsp + 40 h ] [ rbp + 10 h ] __int64 * Dst ; // [ rsp + C8h ] [ rbp + 98 h ] void * Memory ; // [ rsp + E8h ] [ rbp + B8h ] unsigned __int64 j ; // [ rsp + 108 h ] [ rbp + D8h ] v3 = & v6 ; for ( i = 122 i64 ; i ; -- i ) { * ( _DWORD * ) v3 = - 858993460 ; v3 += 4 ; } un_use (( __int64 ) & unk_7FF6D92E4002 ); memset ( & Str , 0 , 0x64 ui64 ); Dst = ( __int64 * ) malloc ( 0x100 ui64 ); Memory = malloc ( 0x100 ui64 ); printf ( \"SEIN CHECK:\" ); scanf ( \" %s \" , & Str ); LODWORD ( Size ) = j_strlen ( & Str ); j_memset ( Dst , 0 , 0x100 ui64 ); j_memset ( Memory , 0 , 0x100 ui64 ); j_memcpy ( Dst , & Str , ( unsigned int ) Size ); j_memcpy ( Memory , aABoringCryptoM , 32 ui64 ); RC5 (( __int64 ) Dst , ( __int64 ) Memory ); j_RC4 (( __int64 ) Dst , ( __int64 ) Memory ); AES (( __int64 ) Dst , ( __int64 ) Memory ); RubyDES (( __int64 ) Dst , ( __int64 ) Memory ); TEA (( __int64 ) Dst , ( __int64 ) Memory ); blowfish (( __int64 ) Dst , ( __int64 ) Memory ); if ( ! j_memcmp ( Dst , cmp_str , ( unsigned int ) Size ) ) // \u5224\u65ad\u51fd\u6570 { printf ( \"GOOD! \\n \" ); } else { CreateThread ( 0 i64 , 0 i64 , StartAddress , 0 i64 , 0 , 0 i64 ); WinExec ( CmdLine , 0 ); for ( j = 0 i64 ; j < 0xBB8 ; ++ j ) { printf ( \"NOPE!!! YOU HAVE BEEN HACKED BY DECADE!!! \\n \" ); Sleep ( 0x14 u ); } } free ( Dst ); free ( Memory ); system ( \"pause\" ); sub_7FF6D8931447 (( __int64 ) & v6 , ( __int64 ) & unk_7FF6D893F8F0 ); return 0 ; }","title":"cryyyyyyypto"},{"location":"ctf_write_up/2019/2019aurora/#rc5","text":"\u4e00\u5f00\u59cb\u6ca1\u8ba4\u51fa\u6765\uff0c\u4eba\u5de5\u9006\u5411\u7834\u89e30.0...","title":"RC5"},{"location":"ctf_write_up/2019/2019aurora/#rc4","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 void __fastcall RC4 ( unsigned __int8 * plaing , __int64 a2 ) { __int64 * v2 ; // rdi signed __int64 i ; // rcx int v4 ; // edx __int64 v5 ; // [rsp+0h] [rbp-20h] _BYTE * cipher ; // [rsp+28h] [rbp+8h] unsigned int v7 ; // [rsp+44h] [rbp+24h] unsigned int v8 ; // [rsp+64h] [rbp+44h] unsigned int j ; // [rsp+84h] [rbp+64h] int v10 ; // [rsp+154h] [rbp+134h] unsigned __int8 * flag ; // [rsp+180h] [rbp+160h] __int64 key ; // [rsp+188h] [rbp+168h] key = a2 ; flag = plaing ; v2 = & v5 ; for ( i = 90 i64 ; i ; -- i ) { * ( _DWORD * ) v2 = - 858993460 ; v2 = ( __int64 * )(( char * ) v2 + 4 ); } un_use (( __int64 ) & unk_7FF6D92E4002 ); init_Sbox ( key ); cipher = malloc (( unsigned int ) Size ); j_memset ( cipher , 0 , ( unsigned int ) Size ); v7 = 0 ; v8 = 0 ; for ( j = 0 ; j < ( unsigned int ) Size ; ++ j ) { v7 = ( v7 + 1 ) % 256 ; v8 = ( S [ v7 ] + v8 ) % 256 ; S [ v7 ] ^= S [ v8 ]; S [ v8 ] ^= S [ v7 ]; S [ v7 ] ^= S [ v8 ]; v10 = flag [ j ]; v4 = ( S [ v8 ] + S [ v7 ]) >> 31 ; cipher [ j ] = S [( unsigned __int8 )( v4 + S [ v8 ] + S [ v7 ]) - ( unsigned __int8 ) v4 ] ^ v10 ; } j_memcpy ( flag , cipher , ( unsigned int ) Size ); free ( cipher ); } \u7279\u5f81\u662finit_Sbox()\u91cc: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 size_t __fastcall sub_7FF6D89332B0 ( char * a1 ) { __int64 * v1 ; // rdi signed __int64 i ; // rcx size_t result ; // rax int v4 ; // edx __int64 v5 ; // [rsp+0h] [rbp-20h] int j ; // [rsp+24h] [rbp+4h] int v7 ; // [rsp+44h] [rbp+24h] char v8 ; // [rsp+64h] [rbp+44h] unsigned int v9 ; // [rsp+84h] [rbp+64h] int v10 ; // [rsp+154h] [rbp+134h] const char * Str ; // [rsp+180h] [rbp+160h] Str = a1 ; v1 = & v5 ; for ( i = 90 i64 ; i ; -- i ) { * ( _DWORD * ) v1 = 0xCCCCCCCC ; v1 = ( __int64 * )(( char * ) v1 + 4 ); } un_use (( __int64 ) & unk_7FF6D92E4002 ); j = 0 ; v7 = 0 ; v8 = 0 ; result = j_strlen ( Str ); v9 = result ; for ( j = 0 ; j < 256 ; ++ j ) { S [ j ] = j ; //\u8d4b\u503c\u4f4d\u6570 result = ( unsigned int )( j + 1 ); } for ( j = 0 ; j < 256 ; ++ j ) //\u5bc6\u94a5\u6269\u5c55 { v10 = S [ j ] + v7 ; v4 = (( unsigned __int8 ) Str [ j % v9 ] + v10 ) >> 31 ; v7 = ( unsigned __int8 )( v4 + Str [ j % v9 ] + v10 ) - ( unsigned __int8 ) v4 ; S [ j ] ^= S [ v7 ]; S [ v7 ] ^= S [ j ]; S [ j ] ^= S [ v7 ]; result = ( unsigned int )( j + 1 ); } return result ; }","title":"RC4"},{"location":"ctf_write_up/2019/2019aurora/#aes","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 __int64 __fastcall sub_7FF6D8931970 ( __int64 * a1 , __int64 a2 ) { __int64 * v2 ; // rdi signed __int64 i ; // rcx __int64 result ; // rax __int64 v5 ; // [rsp+0h] [rbp-30h] unsigned int j ; // [rsp+34h] [rbp+4h] __int64 * input ; // [rsp+130h] [rbp+100h] __int64 key ; // [rsp+138h] [rbp+108h] key = a2 ; input = a1 ; v2 = & v5 ; for ( i = 70 i64 ; i ; -- i ) { * ( _DWORD * ) v2 = - 858993460 ; v2 = ( __int64 * )(( char * ) v2 + 4 ); } un_use (( __int64 ) & unk_7FF6D92E4002 ); pad (( __int64 ) input , ( unsigned int ) Size , 16 i64 ); for ( j = 0 ; ; ++ j ) { result = ( unsigned int ) Size / 16 ; if ( j >= ( unsigned int ) result ) break ; AES ( key , 16u , & input [ 2 * j ], & input [ 2 * j ], 16u ); } return result ; } \u8fdb\u53bbAES\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 __int64 __fastcall sub_7FF6D8934210 ( void * key , unsigned int num_16_1 , __int64 * a3 , __int64 * a4 , unsigned int num_16 ) { char * v5 ; // rdi signed __int64 i ; // rcx char v8 ; // [rsp+0h] [rbp-20h] char v9 ; // [rsp+30h] [rbp+10h] __int64 * v10 ; // [rsp+1B8h] [rbp+198h] char * v11 ; // [rsp+1D8h] [rbp+1B8h] char v12 ; // [rsp+1F8h] [rbp+1D8h] char Dst ; // [rsp+228h] [rbp+208h] char v14 ; // [rsp+258h] [rbp+238h] unsigned int j ; // [rsp+284h] [rbp+264h] int k ; // [rsp+2A4h] [rbp+284h] const void * Src ; // [rsp+460h] [rbp+440h] unsigned int Size ; // [rsp+468h] [rbp+448h] __int64 * input1 ; // [rsp+470h] [rbp+450h] __int64 * input2 ; // [rsp+478h] [rbp+458h] input2 = a4 ; input1 = a3 ; Size = num_16_1 ; Src = key ; v5 = & v8 ; for ( i = 274 i64 ; i ; -- i ) { * ( _DWORD * ) v5 = - 858993460 ; v5 += 4 ; } un_use (( __int64 ) & unk_7FF6D92E4002 ); v10 = input2 ; v11 = & v9 ; memset ( & v12 , 0 , 0x10u i64 ); memset ( & Dst , 0 , 0x10u i64 ); memset ( & v14 , 0 , 0x10u i64 ); j_memcpy ( & Dst , Src , Size ); sub_7FF6D8931244 (( __int64 ) & Dst , 16 i64 , ( __int64 ) & v9 ); //\u521d\u59cb\u7f6e\u6362 for ( j = 0 ; j < num_16 ; j += 16 ) { sub_7FF6D893129E (( __int64 ) & v14 , ( __int64 ) input1 ); sub_7FF6D8931037 (( __int64 ) & v14 , ( __int64 ) v11 ); for ( k = 1 ; k < 10 ; ++ k ) { v11 += 16 ; sub_7FF6D8931456 (( __int64 ) & v14 ); sub_7FF6D89313B6 (( __int64 ) & v14 ); sub_7FF6D8931438 ( & v14 ); sub_7FF6D8931037 (( __int64 ) & v14 , ( __int64 ) v11 ); } sub_7FF6D8931456 (( __int64 ) & v14 ); sub_7FF6D89313B6 (( __int64 ) & v14 ); sub_7FF6D8931037 (( __int64 ) & v14 , ( __int64 )( v11 + 16 )); sub_7FF6D8931460 (( __int64 ) & v14 , ( __int64 ) v10 ); v10 += 2 ; input1 += 2 ; v11 = & v9 ; } sub_7FF6D8931447 (( __int64 ) & v8 , ( __int64 ) & unk_7FF6D893EEC8 ); return 0 i64 ; } \u521d\u59cb\u7f6e\u6362\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 __int64 __fastcall sub_7FF6D89349E0 ( __int64 a1 , __int64 a2 , _DWORD * a3 ) { __int64 * v3 ; // rdi signed __int64 i ; // rcx __int64 v6 ; // [rsp+0h] [rbp-20h] _DWORD * v7 ; // [rsp+28h] [rbp+8h] _DWORD * v8 ; // [rsp+48h] [rbp+28h] int j ; // [rsp+64h] [rbp+44h] int k ; // [rsp+84h] [rbp+64h] int l ; // [rsp+A4h] [rbp+84h] int m ; // [rsp+C4h] [rbp+A4h] __int64 v13 ; // [rsp+1C0h] [rbp+1A0h] _DWORD * v14 ; // [rsp+1D0h] [rbp+1B0h] v14 = a3 ; v13 = a1 ; v3 = & v6 ; for ( i = 106 i64 ; i ; -- i ) { * ( _DWORD * ) v3 = - 858993460 ; v3 = ( __int64 * )(( char * ) v3 + 4 ); } un_use (( __int64 ) & unk_7FF6D92E4002 ); v7 = v14 ; v8 = v14 + 44 ; for ( j = 0 ; j < 4 ; ++ j ) v7 [ j ] = _byteswap_ulong ( * ( _DWORD * )( 4 * j + v13 )); for ( k = 0 ; k < 10 ; ++ k ) { v7 [ 4 ] = dword_7FF6D893EBB0 [ k ] ^ S_box [( unsigned __int16 )( v7 [ 3 ] >> 16 ) >> 16 ] ^ ( S_box [ v7 [ 3 ] & 0xFF ] << 8 ) & 0xFF00 ^ ( S_box [( v7 [ 3 ] >> 8 ) & 0xFF ] << 16 ) & 0xFF0000 ^ ( S_box [( v7 [ 3 ] >> 16 ) & 0xFF ] << 24 ) & 0xFF000000 ^ * v7 ; v7 [ 5 ] = v7 [ 4 ] ^ v7 [ 1 ]; v7 [ 6 ] = v7 [ 5 ] ^ v7 [ 2 ]; v7 [ 7 ] = v7 [ 6 ] ^ v7 [ 3 ]; v7 += 4 ; } v7 = v14 + 40 ; for ( l = 0 ; l < 11 ; ++ l ) { for ( m = 0 ; m < 4 ; ++ m ) v8 [ m ] = v7 [ m ]; v7 -= 4 ; v8 += 4 ; } return 0 i64 ; } \u7279\u5f81\uff1aAES\u7684S_box\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 .data: 00007 FF6D8942000 S_box db 63 h , 7 Ch , 77 h , 7 Bh , 0 F2h , 6 Bh , 6 Fh , 0 C5h , 30 h , 1 , 67 h .data: 00007 FF6D8942000 ; DATA XREF: sub_7FF6D89349E0+180\u2191o .data: 00007 FF6D8942000 ; sub_7FF6D89349E0+1B0\u2191o ... .data: 00007 FF6D8942000 db 2 Bh , 0 FEh , 0 D7h , 0 ABh , 76 h , 0 CAh , 82 h , 0 C9h , 7 Dh , 0 FAh .data: 00007 FF6D8942000 db 59 h , 47 h , 0 F0h , 0 ADh , 0 D4h , 0 A2h , 0 AFh , 9 Ch , 0 A4h , 72 h .data: 00007 FF6D8942000 db 0 C0h , 0 B7h , 0 FDh , 93 h , 26 h , 36 h , 3 Fh , 0 F7h , 0 CCh , 34 h .data: 00007 FF6D8942000 db 0 A5h , 0 E5h , 0 F1h , 71 h , 0 D8h , 31 h , 15 h , 4 , 0 C7h , 23 h .data: 00007 FF6D8942000 db 0 C3h , 18 h , 96 h , 5 , 9 Ah , 7 , 12 h , 80 h , 0 E2h , 0 EBh , 27 h .data: 00007 FF6D8942000 db 0 B2h , 75 h , 9 , 83 h , 2 Ch , 1 Ah , 1 Bh , 6 Eh , 5 Ah , 0 A0h , 52 h .data: 00007 FF6D8942000 db 3 Bh , 0 D6h , 0 B3h , 29 h , 0 E3h , 2 Fh , 84 h , 53 h , 0 D1h , 0 .data: 00007 FF6D8942000 db 0 EDh , 20 h , 0 FCh , 0 B1h , 5 Bh , 6 Ah , 0 CBh , 0 BEh , 39 h , 4 Ah .data: 00007 FF6D8942000 db 4 Ch , 58 h , 0 CFh , 0 D0h , 0 EFh , 0 AAh , 0 FBh , 43 h , 4 Dh , 33 h .data: 00007 FF6D8942000 db 85 h , 45 h , 0 F9h , 2 , 7 Fh , 50 h , 3 Ch , 9 Fh , 0 A8h , 51 h , 0 A3h .data: 00007 FF6D8942000 db 40 h , 8 Fh , 92 h , 9 Dh , 38 h , 0 F5h , 0 BCh , 0 B6h , 0 DAh , 21 h .data: 00007 FF6D8942000 db 10 h , 0 FFh , 0 F3h , 0 D2h , 0 CDh , 0 Ch , 13 h , 0 ECh , 5 Fh , 97 h .data: 00007 FF6D8942000 db 44 h , 17 h , 0 C4h , 0 A7h , 7 Eh , 3 Dh , 64 h , 5 Dh , 19 h , 73 h .data: 00007 FF6D8942000 db 60 h , 81 h , 4 Fh , 0 DCh , 22 h , 2 Ah , 90 h , 88 h , 46 h , 0 EEh .data: 00007 FF6D8942000 db 0 B8h , 14 h , 0 DEh , 5 Eh , 0 Bh , 0 DBh , 0 E0h , 32 h , 3 Ah , 0 Ah .data: 00007 FF6D8942000 db 49 h , 6 , 24 h , 5 Ch , 0 C2h , 0 D3h , 0 ACh , 62 h , 91 h , 95 h , 0 E4h .data: 00007 FF6D8942000 db 79 h , 0 E7h , 0 C8h , 37 h , 6 Dh , 8 Dh , 0 D5h , 4 Eh , 0 A9h , 6 Ch .data: 00007 FF6D8942000 db 56 h , 0 F4h , 0 EAh , 65 h , 7 Ah , 0 AEh , 8 , 0 BAh , 78 h , 25 h .data: 00007 FF6D8942000 db 2 Eh , 1 Ch , 0 A6h , 0 B4h , 0 C6h , 0 E8h , 0 DDh , 74 h , 1 Fh , 4 Bh .data: 00007 FF6D8942000 db 0 BDh , 8 Bh , 8 Ah , 70 h , 3 Eh , 0 B5h , 66 h , 48 h , 3 , 0 F6h , 0 Eh .data: 00007 FF6D8942000 db 61 h , 35 h , 57 h , 0 B9h , 86 h , 0 C1h , 1 Dh , 9 Eh , 0 E1h , 0 F8h .data: 00007 FF6D8942000 db 98 h , 11 h , 69 h , 0 D9h , 8 Eh , 94 h , 9 Bh , 1 Eh , 87 h , 0 E9h .data: 00007 FF6D8942000 db 0 CEh , 55 h , 28 h , 0 DFh , 8 Ch , 0 A1h , 89 h , 0 Dh , 0 BFh , 0 E6h .data: 00007 FF6D8942000 db 42 h , 68 h , 41 h , 99 h , 2 Dh , 0 Fh , 0 B0h , 54 h , 0 BBh , 16 h","title":"AES"},{"location":"ctf_write_up/2019/2019aurora/#des","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 __int64 __fastcall sub_7FF6D89324E0 ( __int64 a1 , __int64 a2 ) { char * v2 ; // rdi signed __int64 i ; // rcx char v5 ; // [rsp+0h] [rbp-20h] unsigned int j ; // [rsp+24h] [rbp+4h] char Dst ; // [rsp+48h] [rbp+28h] __int64 * input ; // [rsp+140h] [rbp+120h] __int64 key ; // [rsp+148h] [rbp+128h] key = a2 ; input = ( __int64 * ) a1 ; v2 = & v5 ; for ( i = 74 i64 ; i ; -- i ) { * ( _DWORD * ) v2 = - 858993460 ; v2 += 4 ; } un_use (( __int64 ) & unk_7FF6D92E4002 ); memset ( & Dst , 0 , 8u i64 ); pad (( __int64 ) input , ( unsigned int ) Size , 8 i64 ); for ( j = 0 ; j < ( unsigned int ) Size / 8 ; ++ j ) { j_memset ( & Dst , 0 , 8u i64 ); DES (( __int64 ) & input [ j ], key , ( __int64 ) & Dst ); j_memcpy ( & input [ j ], & Dst , 8u i64 ); } return sub_7FF6D8931447 (( __int64 ) & v5 , ( __int64 ) & unk_7FF6D893F6B0 ); } \u8fdb\u5165DES\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 __int64 __fastcall DES ( __int64 input_0 , __int64 key_0 , __int64 src ) { char * v3 ; // rdi signed __int64 i ; // rcx char v6 ; // [rsp+0h] [rbp-20h] int v7 [ 72 ] ; // [rsp+30h] [rbp+10h] int v8 [ 72 ] ; // [rsp+150h] [rbp+130h] char v9 [ 3104 ] ; // [rsp+270h] [rbp+250h] char v10 ; // [rsp+E90h] [rbp+E70h] char v11 ; // [rsp+FB0h] [rbp+F90h] char v12 [ 2208 ] ; // [rsp+10D0h] [rbp+10B0h] char v13 [ 2208 ] ; // [rsp+1970h] [rbp+1950h] int v14 [ 69 ] ; // [rsp+2210h] [rbp+21F0h] int j ; // [rsp+2324h] [rbp+2304h] int k ; // [rsp+2344h] [rbp+2324h] int l ; // [rsp+2364h] [rbp+2344h] int m ; // [rsp+2384h] [rbp+2364h] int n ; // [rsp+23A4h] [rbp+2384h] int ii ; // [rsp+23C4h] [rbp+23A4h] char * v21 ; // [rsp+29D8h] [rbp+29B8h] __int64 input ; // [rsp+2A10h] [rbp+29F0h] __int64 key ; // [rsp+2A18h] [rbp+29F8h] __int64 v24 ; // [rsp+2A20h] [rbp+2A00h] v24 = src ; key = key_0 ; input = input_0 ; v3 = & v6 ; for ( i = 2686 i64 ; i; --i ) { * ( _DWORD * ) v3 = - 858993460 ; v3 += 4 ; } un_use (( __int64 ) & unk_7FF6D92E4002 ) ; memset ( v7 , 0 , 0 x100ui64 ) ; memset ( v8 , 0 , 0 x100ui64 ) ; memset ( & v10 , 0 , 0 x100ui64 ) ; memset ( v14 , 0 , 0 x100ui64 ) ; sub_7FF6D8931087 ( input , ( __int64 ) & v10 , 8 i64 ) ; sub_7FF6D8931096 (( __int64 ) & v10 , ( __int64 ) v7 , ( __int64 ) DES_Sbox ) ; sub_7FF6D8931087 ( key , ( __int64 ) & v11 , 8 i64 ) ; sub_7FF6D893140B (( __int64 ) & v11 , ( __int64 ) v9 ) ; for ( j = 0 ; j < 32; ++j ) { * ( _DWORD * ) & v12 [ 4 * j ] = v7 [ j ] ; * ( _DWORD * ) & v13 [ 4 * j ] = v7 [ j + 32 ] ; } for ( k = 1 ; k < 16; ++k ) { for ( l = 0 ; l < 32; ++l ) * ( _DWORD * ) & v12 [ 128 * ( signed __int64 ) k + 4 * l ] = * ( _DWORD * ) & v13 [ 128 * ( signed __int64 )( k - 1 ) + 4 * l ] ; v21 = & v13 [ 128 * ( signed __int64 )( k - 1 ) ] ; sub_7FF6D89311D1 ( ( __int64 ) & v13 [ 128 * ( signed __int64 )( k - 1 ) ], ( __int64 ) & v13 [ 128 * ( signed __int64 ) k ], ( __int64 ) & v9 [ 192 * ( k - 1 ) ] ) ; sub_7FF6D893107D ( & v13 [ 128 * ( signed __int64 ) k ], & v12 [ 128 * ( signed __int64 )( k - 1 ) ], 32 i64 ) ; } for ( m = 0 ; m < 32; ++m ) * ( _DWORD * ) & v13 [ 4 * m + 2048 ] = * ( _DWORD * ) & v13 [ 4 * m + 1920 ] ; v21 = & v13 [ 1920 ] ; sub_7FF6D89311D1 (( __int64 ) & v13 [ 1920 ], ( __int64 ) & v12 [ 2048 ], ( __int64 ) & v9 [ 2880 ] ) ; sub_7FF6D893107D ( & v12 [ 2048 ], & v12 [ 1920 ], 32 i64 ) ; for ( m = 0 ; m < 32; ++m ) { v8 [ m ] = * ( _DWORD * ) & v12 [ 4 * m + 2048 ] ; v8 [ m + 32 ] = * ( _DWORD * ) & v13 [ 4 * m + 2048 ] ; } sub_7FF6D89313C0 ( v8 , v14 , & unk_7FF6D8942340 ) ; for ( n = 0 ; n < 8; ++n ) { for ( ii = 0 ; ii < 8; ++ii ) { v21 = ( char * )( ii + 8 * n ) ; * ( _BYTE * )( v24 + n ) |= LOBYTE ( v14 [ ( _QWORD ) v21 ] ) << ( 7 - ii ) ; } } return sub_7FF6D8931447 (( __int64 ) & v6 , ( __int64 ) & unk_7FF6D893F5D0 ) ; } DES\u7f6e\u6362\u89c4\u5219\uff1a 1 2 3 4 5 6 .data: 00007 FF6D8942100 DES_Sbox dd 58 , 50 , 42 , 34 , 26 , 18 , 10 , 2 , 60 , 52 , 44 , 36 , 28 , 20 .data: 00007 FF6D8942100 ; DATA XREF: DES+B9\u2191o .data: 00007 FF6D8942100 dd 12 , 4 , 62 , 54 , 46 , 38 , 30 , 22 , 14 , 6 , 64 , 56 , 48 , 40 .data: 00007 FF6D8942100 dd 32 , 24 , 16 , 8 , 57 , 49 , 41 , 33 , 25 , 17 , 9 , 1 , 59 , 51 .data: 00007 FF6D8942100 dd 43 , 35 , 27 , 19 , 11 , 3 , 61 , 53 , 45 , 37 , 29 , 21 , 13 , 5 .data: 00007 FF6D8942100 dd 63 , 55 , 47 , 39 , 31 , 23 , 15 , 7","title":"DES"},{"location":"ctf_write_up/2019/2019aurora/#tea","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 __int64 __fastcall sub_7FF6D8934070 ( __int64 input_0 , __int64 key_1 ) { __int64 * v2 ; // rdi signed __int64 i ; // rcx __int64 result ; // rax __int64 v5 ; // [rsp+0h] [rbp-20h] unsigned int j ; // [rsp+24h] [rbp+4h] __int64 * input ; // [rsp+120h] [rbp+100h] __int64 key ; // [rsp+128h] [rbp+108h] key = key_1 ; input = ( __int64 * ) input_0 ; v2 = & v5 ; for ( i = 66 i64 ; i ; -- i ) { * ( _DWORD * ) v2 = - 858993460 ; v2 = ( __int64 * )(( char * ) v2 + 4 ); } un_use (( __int64 ) & unk_7FF6D92E4002 ); pad (( __int64 ) input , ( unsigned int ) Size , 8 i64 ); for ( j = 0 ; ; ++ j ) { result = ( unsigned int ) Size / 8 ; if ( j >= ( unsigned int ) result ) break ; TEA_0 (( __int64 ) & input [ j ], key ); } return result ; } \u8fdb\u5165TEA_0: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 signed __int64 __fastcall sub_7FF6D8934650 ( int * input_0 , int * key_0 ) { __int64 * v2 ; // rdi signed __int64 i ; // rcx double v4 ; // xmm0_8 signed __int64 result ; // rax __int64 v6 ; // [rsp+0h] [rbp-20h] unsigned int v7 ; // [rsp+24h] [rbp+4h] unsigned int v8 ; // [rsp+44h] [rbp+24h] int sum ; // [rsp+64h] [rbp+44h] unsigned int j ; // [rsp+84h] [rbp+64h] int delta ; // [rsp+A4h] [rbp+84h] double v12 ; // [rsp+C8h] [rbp+A8h] int k_0 ; // [rsp+E4h] [rbp+C4h] int k_1 ; // [rsp+104h] [rbp+E4h] int k_2 ; // [rsp+124h] [rbp+104h] int k_3 ; // [rsp+144h] [rbp+124h] int * input ; // [rsp+240h] [rbp+220h] int * key ; // [rsp+248h] [rbp+228h] key = key_0 ; input = input_0 ; v2 = & v6 ; for ( i = 138 i64 ; i ; -- i ) { * ( _DWORD * ) v2 = - 858993460 ; v2 = ( __int64 * )(( char * ) v2 + 4 ); } un_use (( __int64 ) & unk_7FF6D92E4002 ); v7 = * input ; v8 = input [ 1 ]; sum = 0 ; v4 = j_sqrt ( 5.0 ); v12 = floor (( v4 - 1.0 ) * 2147483648.0 ); // \u7279\u5f811\uff1a2654435769 delta = ( signed int ) v12 ; k_0 = * key ; k_1 = key [ 1 ]; k_2 = key [ 2 ]; k_3 = key [ 3 ]; for ( j = 0 ; j < 32 ; ++ j ) //\u7279\u5f812 { sum += delta ; v7 += ( k_1 + ( v8 >> 5 )) ^ ( sum + v8 ) ^ ( k_0 + 16 * v8 ); v8 += ( k_3 + ( v7 >> 5 )) ^ ( sum + v7 ) ^ ( k_2 + 16 * v7 ); } * input = v7 ; result = 4 i64 ; input [ 1 ] = v8 ; return result ; }","title":"TEA"},{"location":"ctf_write_up/2019/2019aurora/#blowfish","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 __int64 __fastcall blowfish_0 ( unsigned int * input_0 , __int64 key_1 ) { char * v2 ; // rdi signed __int64 i ; // rcx unsigned int v4 ; // eax unsigned int v5 ; // eax char v7 ; // [rsp+0h] [rbp-20h] int j ; // [rsp+24h] [rbp+4h] int v9 ; // [rsp+44h] [rbp+24h] unsigned int * v10 ; // [rsp+68h] [rbp+48h] unsigned int Long ; // [rsp+84h] [rbp+64h] unsigned int v12 ; // [rsp+A4h] [rbp+84h] unsigned int * input ; // [rsp+1A0h] [rbp+180h] __int64 key ; // [rsp+1A8h] [rbp+188h] key = key_1 ; input = input_0 ; v2 = & v7 ; for ( i = 98 i64 ; i ; -- i ) { * ( _DWORD * ) v2 = - 858993460 ; v2 += 4 ; } un_use (( __int64 ) & unk_7FF6D92E4002 ); v9 = ( unsigned int ) Size / 8 ; v10 = input ; sub_7FF6D893132A ( key , ( unsigned int ) Size % 8u i64 ); //\u5bc6\u94a5\u6269\u5c55 for ( j = 0 ; j < v9 ; ++ j ) { Long = j__byteswap_ulong ( * v10 ); v12 = j__byteswap_ulong ( v10 [ 1 ]); sub_7FF6D893145B (( __int64 ) & Long , ( __int64 ) & v12 ); v4 = j__byteswap_ulong ( Long ); * v10 = v4 ; v5 = j__byteswap_ulong ( v12 ); v10 [ 1 ] = v5 ; v10 += 2 ; } return sub_7FF6D8931447 (( __int64 ) & v7 , ( __int64 ) & unk_7FF6D893F860 ); } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 __int64 __fastcall sub_7FF6D8932710 ( char * a1 ) { char * v1 ; // rdi signed __int64 i ; // rcx unsigned int v3 ; // eax char v5 ; // [ rsp + 0 h ] [ rbp - 20 h ] int j ; // [ rsp + 24 h ] [ rbp + 4 h ] int k ; // [ rsp + 44 h ] [ rbp + 24 h ] int v8 ; // [ rsp + 64 h ] [ rbp + 44 h ] void * Dst ; // [ rsp + 88 h ] [ rbp + 68 h ] int v10 ; // [ rsp + A4h ] [ rbp + 84 h ] int v11 ; // [ rsp + C4h ] [ rbp + A4h ] __int64 v12 ; // [ rsp + 198 h ] [ rbp + 178 h ] const char * Str ; // [ rsp + 1 D0h ] [ rbp + 1 B0h ] Str = a1 ; v1 = & v5 ; for ( i = 110 i64 ; i ; -- i ) { * ( _DWORD * ) v1 = - 858993460 ; v1 += 4 ; } un_use (( __int64 ) & unk_7FF6D92E4002 ); v8 = j_strlen ( Str ); Dst = 0 i64 ; v10 = 0 ; v11 = 0 ; Dst = malloc ( v8 ); j_memset ( Dst , 0 , v8 ); v8 /= 4 ui64 ; for ( j = 0 ; j < v8 ; ++ j ) { v3 = j__byteswap_ulong ( * ( _DWORD * ) & Str [ 4 * j ]); * (( _DWORD * ) Dst + j ) = v3 ; } for ( j = 0 ; j < 18 ; ++ j ) { v12 = j ; dword_7FF6D8942DE0 [ j ] ^= * (( _DWORD * ) Dst + j % v8 ); } v11 = 0 ; v10 = 0 ; for ( j = 0 ; j < 18 ; j += 2 ) { sub_7FF6D893145B (( __int64 ) & v10 , ( __int64 ) & v11 ); dword_7FF6D8942DE0 [ j ] = v10 ; dword_7FF6D8942DE0 [ j + 1 ] = v11 ; } for ( j = 0 ; j < 4 ; ++ j ) { for ( k = 0 ; k < 256 ; k += 2 ) { sub_7FF6D893145B (( __int64 ) & v10 , ( __int64 ) & v11 ); dword_7FF6D8942E50 [ 256 * ( signed __int64 ) j + k ] = v10 ; dword_7FF6D8942E50 [ 256 * ( signed __int64 ) j + k + 1 ] = v11 ; } } free ( Dst ); return sub_7FF6D8931447 (( __int64 ) & v5 , ( __int64 ) & unk_7FF6D893F780 ); } \u7279\u5f81\uff1a 1 2 3 4 5 6 .data: 00007 FF6D8942DE0 dword_7FF6D8942DE0 dd 243 F6A88h , 85 A308D3h , 13198 A2Eh , 3707344 h , 0 A4093822h .data: 00007 FF6D8942DE0 ; DATA XREF: sub_7FF6D8931A70+5B\u2191o .data: 00007 FF6D8942DE0 ; sub_7FF6D8931A70+A6\u2191o ... .data: 00007 FF6D8942DE0 dd 299 F31D0h , 82 EFA98h , 0 EC4E6C89h , 452821 E6h , 38 D01377h .data: 00007 FF6D8942DE0 dd 0 BE5466CFh , 34 E90C6Ch , 0 C0AC29B7h , 0 C97C50DDh , 3 F84D5B5h .data: 00007 FF6D8942DE0 dd 0 B5470917h , 9216 D5D9h , 8979 FB1Bh","title":"blowfish"},{"location":"ctf_write_up/2019/2019aurora/#tea_1","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 #include <stdio.h> #include <math.h> #include <stdint.h> void decrypt ( uint32_t * v , uint32_t * k ) { uint32_t v0 = v [ 0 ], v1 = v [ 1 ], sum = 0xC6EF3720 , i ; /* set up */ uint32_t delta = 0x9e3779b9 ; /* a key schedule constant */ uint32_t k0 = k [ 0 ], k1 = k [ 1 ], k2 = k [ 2 ], k3 = k [ 3 ]; /* cache key */ for ( i = 0 ; i < 32 ; i ++ ) { /* basic cycle start */ v1 -= (( v0 << 4 ) + k2 ) ^ ( v0 + sum ) ^ (( v0 >> 5 ) + k3 ); v0 -= (( v1 << 4 ) + k0 ) ^ ( v1 + sum ) ^ (( v1 >> 5 ) + k1 ); sum -= delta ; } /* end cycle */ v [ 0 ] = v0 ; v [ 1 ] = v1 ; } void encrypt ( uint32_t * v , uint32_t * k ) { uint32_t v0 = v [ 0 ], v1 = v [ 1 ], sum = 0 , i ; /* set up */ uint32_t delta = 0x9e3779b9 ; /* a key schedule constant */ uint32_t k0 = k [ 0 ], k1 = k [ 1 ], k2 = k [ 2 ], k3 = k [ 3 ]; /* cache key */ for ( i = 0 ; i < 32 ; i ++ ) { /* basic cycle start */ sum += delta ; v0 += (( v1 << 4 ) + k0 ) ^ ( v1 + sum ) ^ (( v1 >> 5 ) + k1 ); v1 += (( v0 << 4 ) + k2 ) ^ ( v0 + sum ) ^ (( v0 >> 5 ) + k3 ); } /* end cycle */ v [ 0 ] = v0 ; v [ 1 ] = v1 ; } int main () { unsigned char cipher [ 80 ] = { 18 , 186 , 235 , 205 , 57 , 16 , 228 , 62 , 74 , 108 , 147 , 138 , 39 , 186 , 150 , 201 , 206 , 20 , 106 , 221 , 216 , 160 , 180 , 220 , 41 , 108 , 186 , 108 , 86 , 153 , 213 , 90 , 223 , 207 , 252 , 29 , 148 , 7 , 95 , 39 , 91 , 45 , 186 , 81 , 191 , 92 , 213 , 122 , 220 , 94 , 89 , 90 , 115 , 152 , 46 , 27 , 231 , 217 , 246 , 48 , 166 , 166 , 248 , 229 , 85 , 214 , 98 , 93 , 157 , 113 , 16 , 14 , 237 , 206 , 174 , 168 , 121 , 77 , 166 , 173 }; uint8_t key [] = \"A_boring_crypto_\" ; uint32_t b = 72 ; for ( int i = 0 ; i <= 80 ; i += 8 ) { decrypt (( uint32_t * ) & cipher [ i ], ( uint32_t * ) key ); } for ( int i = 0 ; i < 80 ; i += 1 ) { printf ( \" \\\\ x%02x\" , cipher [ i ]); } return 0 ; }","title":"TEA\u89e3\u5bc6"},{"location":"ctf_write_up/2019/2019aurora/#_1","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 from Crypto.Cipher import Blowfish from Crypto.Cipher import DES from Crypto.Cipher import AES , ARC4 cmp_str = [ 0x37 , 0x2A , 0x2F , 0x28 , 0x5A , 0xEF , 0x17 , 0x3F , 0xE7 , 0xD5 , 0x7C , 0xE5 , 0xA5 , 0xF7 , 0xA9 , 0xDA , 0xFF , 0xBC , 0x3B , 0xA9 , 0x68 , 0xDF , 0xDF , 0xF8 , 0x7C , 0x20 , 0x76 , 0x74 , 0x8F , 0xCC , 0xC4 , 0xD4 , 0xF2 , 0xAC , 0x52 , 0x4B , 0xD4 , 0xC6 , 0x87 , 0xE8 , 0x40 , 0xD6 , 0x9C , 0x3C , 0xCE , 0x05 , 0x09 , 0x7C , 0xD4 , 0xB1 , 0x6A , 0xA9 , 0x65 , 0xA3 , 0xC7 , 0xE7 , 0x23 , 0xD0 , 0x50 , 0xA7 , 0x7E , 0x40 , 0x71 , 0x30 , 0x7C , 0x59 , 0x21 , 0xCE , 0x9F , 0xE3 , 0x91 , 0xE0 , 0x0E , 0xF1 , 0x06 , 0x29 , 0xC7 , 0x94 , 0xCE , 0x7C , 0x21 , 0x20 , 0xD6 , 0x99 , 0xB0 , 0x6D , 0x2B , 0x71 , 0x21 , 0x20 , 0xD6 , 0x99 , 0xB0 , 0x6D , 0x2B , 0x71 ] key = b 'A_boring_crypto_makes_you_angry!' #Crypto6() = Blowfish obj = Blowfish . new ( key ) cipher = b \"\" for i in cmp_str : cipher += bytes ([ i ]) plain = obj . decrypt ( cipher [ 0 : 8 ]) plain = [ 18 , 186 , 235 , 205 , 57 , 16 , 228 , 62 , 74 , 108 , 147 , 138 , 39 , 186 , 150 , 201 , 206 , 20 , 106 , 221 , 216 , 160 , 180 , 220 , 41 , 108 , 186 , 108 , 86 , 153 , 213 , 90 , 223 , 207 , 252 , 29 , 148 , 7 , 95 , 39 , 91 , 45 , 186 , 81 , 191 , 92 , 213 , 122 , 220 , 94 , 89 , 90 , 115 , 152 , 46 , 27 , 231 , 217 , 246 , 48 , 166 , 166 , 248 , 229 , 85 , 214 , 98 , 93 , 157 , 113 , 16 , 14 , 237 , 206 , 174 , 168 , 121 , 77 , 166 , 173 ] #Crypto5() = TEA plain = b ' \\xaa\\x77\\x9f\\x62\\x8a\\x27\\x1c\\x36\\x81\\x7d\\xaa\\x1c\\x62\\xaa\\x03\\x51\\x97\\x57\\xde\\xf1\\x77\\x55\\x00\\x9d\\xbd\\xa6\\x28\\xab\\x12\\x9b\\xfc\\xfb\\x75\\x6e\\x0f\\x4d\\xaa\\xa0\\x97\\xa0\\x8c\\xf9\\x8a\\xdb\\xa8\\x7f\\xd0\\xe9\\x09\\x97\\x62\\xfa\\xa1\\xf1\\xed\\xd1\\x5b\\xb6\\x42\\x37\\xaf\\xab\\x9f\\x29\\x86\\x19\\x78\\x3c\\xda\\x46\\xc3\\xd1 ' #Crypto4() = DES obj = DES . new ( key [ 0 : 8 ]) plain = obj . decrypt ( plain )[ 0 : - 8 ] # print(plain) #Crypto3() = AES obj = AES . new ( key [ 0 : 16 ]) plain = obj . decrypt ( plain )[ 0 : - 16 ] #print(plain) #Crypto2() = ARC4 obj = ARC4 . new ( key ) plain = obj . decrypt ( plain ) #print(plain) #Crypto1() = RC5 def _ROL4_ ( x , y ): y &= 0xFF y %= 32 return (( x << y ) & 0xFFFFFFFF ) | ( x >> ( 32 - y )) def _ROR4_ ( x , y ): y &= 0xFF y %= 32 return ( x >> y ) | (( x << ( 32 - y )) & 0xFFFFFFFF ) def crypto1 ( flag_0 , num ): keybox_0 = [ 0xE4 , 0x6A , 0xED , 0x19 , 0xB6 , 0x5F , 0x79 , 0x82 , 0x68 , 0xFA , 0x1F , 0x4E , 0x4E , 0x7A , 0x64 , 0x18 , 0x2A , 0xE1 , 0x69 , 0xFB , 0xFE , 0xE3 , 0x0D , 0xD2 , 0xB0 , 0x0E , 0x9C , 0x61 , 0xB5 , 0xF8 , 0x7C , 0x8E , 0xFF , 0xEC , 0x70 , 0xC4 , 0xA1 , 0x3A , 0xF6 , 0x87 , 0x10 , 0x5F , 0xD0 , 0xCC , 0xD6 , 0x02 , 0x24 , 0xA1 , 0x97 , 0xB8 , 0xF3 , 0x9E , 0x87 , 0x1E , 0x85 , 0xF8 , 0x51 , 0x66 , 0x7E , 0xBB , 0x17 , 0xF1 , 0x3B , 0xC6 , 0x84 , 0x6C , 0x00 , 0x85 , 0xBE , 0x42 , 0xEB , 0x75 , 0xA4 , 0x4F , 0x73 , 0xEF , 0x6F , 0xED , 0x62 , 0xDC , 0xD1 , 0xA0 , 0xAA , 0x0F , 0x7E , 0x05 , 0xD5 , 0xF7 , 0xCF , 0xFA , 0x81 , 0xAC , 0xA0 , 0x7D , 0x7A , 0xE8 , 0xFB , 0xF4 , 0xC7 , 0x76 , 0x1C , 0xCF , 0x66 , 0x8F ] keybox = [ 0 for i in range ( 26 )] for i in range ( len ( keybox_0 ) // 4 ): keybox [ i ] = ( keybox_0 [ i * 4 + 3 ] << 24 ) + ( keybox_0 [ i * 4 + 2 ] << 16 ) + ( keybox_0 [ i * 4 + 1 ] << 8 ) + keybox_0 [ i * 4 + 0 ] if num == 1 : size = len ( flag_0 ) for i in range ( 8 - size % 8 ): flag_0 . append ( 8 - size % 8 ) size = len ( flag_0 ) flag = [ 0 for i in range ( len ( flag_0 ) // 4 )] for i in range ( len ( flag_0 ) // 4 ): flag [ i ] = ( flag_0 [ i * 4 + 3 ] << 24 ) + ( flag_0 [ i * 4 + 2 ] << 16 ) + ( flag_0 [ i * 4 + 1 ] << 8 ) + flag_0 [ i * 4 + 0 ] for i in range ( size // 8 ): v7 = keybox [ 0 ] + flag [ 2 * i ] v8 = keybox [ 1 ] + flag [ 2 * i + 1 ] for k in range ( 1 , 13 ): v7 = ( keybox [ 2 * k ] + _ROL4_ ( v8 ^ v7 , v8 )) & 0xFFFFFFFF v8 = ( keybox [ 2 * k + 1 ] + _ROL4_ ( v7 ^ v8 , v7 )) & 0xFFFFFFFF flag [ 2 * i ] = v7 flag [ 2 * i + 1 ] = v8 else : size = len ( flag_0 ) flag = [ 0 for i in range ( len ( flag_0 ) // 4 )] for i in range ( len ( flag_0 ) // 4 ): flag [ i ] = ( flag_0 [ i * 4 + 3 ] << 24 ) + ( flag_0 [ i * 4 + 2 ] << 16 ) + ( flag_0 [ i * 4 + 1 ] << 8 ) + flag_0 [ i * 4 + 0 ] for i in range ( size // 8 - 1 , - 1 , - 1 ): v7 = flag [ 2 * i ] v8 = flag [ 2 * i + 1 ] for k in range ( 12 , 0 , - 1 ): tmp = ( v8 - keybox [ 2 * k + 1 ]) & 0xFFFFFFFF v8 = _ROR4_ ( tmp , v7 ) ^ v7 tmp = ( v7 - keybox [ 2 * k ]) & 0xFFFFFFFF v7 = _ROR4_ ( tmp , v8 ) ^ v8 flag [ 2 * i ] = ( v7 - keybox [ 0 ]) & 0xFFFFFFFF flag [ 2 * i + 1 ] = ( v8 - keybox [ 1 ]) & 0xFFFFFFFF for i in range ( len ( flag_0 ) // 4 ): flag_0 [ i * 4 + 3 ] = ( flag [ i ] >> 24 ) & 0xFF flag_0 [ i * 4 + 2 ] = ( flag [ i ] >> 16 ) & 0xFF flag_0 [ i * 4 + 1 ] = ( flag [ i ] >> 8 ) & 0xFF flag_0 [ i * 4 + 0 ] = flag [ i ] & 0xFF return ( flag_0 ) flag = [] for i in plain : flag . append ( i ) flag = crypto1 ( map ( ord , flag ), 0 ) flag = \"\" . join ( list ( map ( chr , flag ))) print ( flag ) flag\uff1aAurora{wh47 d035n7 k1ll y0u m4k35 y0u 57r0n63r}","title":"\u6700\u7ec8\u89e3\u5bc6\u811a\u672c"},{"location":"ctf_write_up/2019/2019qwb/","text":"2019\u5f3a\u7f51\u676f\u7ebf\u4e0a\u8d5bRE-\u90e8\u5206write up \u8fd9\u7b97\u662f\u7b2c\u4e00\u6b21\u53c2\u52a0\u6b63\u5f0f\u6bd4\u8d5b\u5e76\u4e14\u505a\u51fa\u9898\u76ee\uff0c\u8bb0\u5f55\u4e00\u4e0b\uff01 \u867d\u7136\u53ea\u662f\u505a\u51fa\u4e86\u4e24\u9053\u5f88\u7b80\u5355\u7684\u9898\u76ee0.0..... \u6bd4\u8d5b\u540e\u5728Apeng\u5927\u4f6c\u7684\u5e2e\u52a9\u4e0b\u505a\u51fa\u4e86wasm\u3002 \u6211\u771f\u7684\u662f\uff0c\u592a\u83dc\u4e86........\u819c\u62dcApeng\u5927\u4f6c\uff01\u4eba\u53c8\u5e05\u53c8\u4f1a\u6253CTF\uff01 2019.6.15\u66f4\u65b0\uff0c\u4e0a\u4f20\u4e09\u9053\u9898\u7684\u539f\u9898 JustRe \u9898\u76ee\uff1a JustRe \u6253\u5f00\u6765\u662f\u8fd9\u4e2a\u6837\u5b50\uff0c\u62d6\u8fdbIDA\u901a\u8fc7\u5b57\u7b26\uff0c\u5b9a\u4f4d\u5230\u4e3b\u51fd\u6570 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 int sub_401BD0 () { char v1 ; // [esp+4h] [ebp-68h] puts ( \" # ###### \" ); puts ( \" # # # #### ##### # # ###### \" ); puts ( \" # # # # # # # # \" ); puts ( \" # # # #### # ###### ##### \" ); puts ( \"# # # # # # # # # \" ); puts ( \"# # # # # # # # # # \" ); puts ( \" ##### #### #### # # # ###### \" ); sub_401CE0 ( \"%s\" , ( unsigned int ) & v1 ); if ( sub_401610 ( & v1 ) ) sub_4018A0 ( & v1 ); puts ( \"sorry..\" ); return 0 ; } \u91cd\u70b9\u5728\u51fd\u6570sub_401610()\u4e2dsigned int __usercall sub_401610 @ < eax > ( int a1 @ < ecx > , int a2 @ < ebp > ) { int v2 ; // edi unsigned int v3 ; // eax int v4 ; // esi char v5 ; // dh unsigned __int8 v6 ; // dl int v7 ; // eax signed int v8 ; // ecx __m128i v9 ; // xmm5 char v10 ; // dl unsigned __int8 v11 ; // dh unsigned __int8 v12 ; // cl char v13 ; // ch unsigned __int8 v14 ; // ch char v15 ; // dl unsigned __int8 v16 ; // dh signed int v17 ; // esi __m128i v18 ; // xmm0 __m128i v19 ; // xmm0 signed int v20 ; // esi __m128i v21 ; // xmm4 int v22 ; // ecx unsigned __int64 v23 ; // rax HANDLE v24 ; // eax unsigned __int64 v26 ; // [esp-54h] [ebp-60h] __m128i v27 ; // [esp-20h] [ebp-2Ch] int v28 ; // [esp-8h] [ebp-14h] unsigned __int8 v29 ; // [esp-2h] [ebp-Eh] unsigned __int8 v30 ; // [esp-1h] [ebp-Dh] int v31 ; // [esp+0h] [ebp-Ch] int v32 ; // [esp+4h] [ebp-8h] int retaddr ; // [esp+Ch] [ebp+0h] v31 = a2 ; v32 = retaddr ; v2 = a1 ; v26 = __rdtsc (); v3 = 0 ; v4 = 0 ; while ( 1 ) { v5 = * ( _BYTE * )( v4 + a1 ); if ( v5 >= 48 && v5 <= 57 ) { v6 = v5 - 65 ; goto LABEL_6 ; } v6 = v5 - 65 ; if ( ( unsigned __int8 )( v5 - 65 ) > 0x19u ) break ; LABEL_6 : v3 *= 16 ; if ( ( unsigned __int8 )( v5 - 48 ) <= 9u ) { v7 = v3 - 48 ; LABEL_10 : v3 = v5 + v7 ; goto LABEL_11 ; } if ( v6 <= 0x19u ) { v7 = v3 - 55 ; goto LABEL_10 ; } LABEL_11 : if ( ++ v4 >= 8 ) { v8 = 1 ; goto LABEL_14 ; } } v8 = 0 ; LABEL_14 : v9 = _mm_shuffle_epi32 ( _mm_cvtsi32_si128 ( v3 ), 0 ); if ( ! v8 ) return 0 ; v10 = * ( _BYTE * )( v2 + 8 ); v11 = 0 ; if ( v10 >= 48 && v10 <= 57 ) { v12 = v10 - 65 ; v30 = v10 - 65 ; goto LABEL_19 ; } v12 = v10 - 65 ; v30 = v10 - 65 ; if ( ( unsigned __int8 )( v10 - 65 ) > 0x19u ) { LABEL_34 : v17 = 0 ; goto LABEL_35 ; } LABEL_19 : v13 = * ( _BYTE * )( v2 + 9 ); v29 = v12 ; if ( v13 < 48 ) { v12 = v29 ; } else if ( v13 <= 57 ) { v14 = v13 - 65 ; goto LABEL_24 ; } v14 = v13 - 65 ; v30 = v12 ; if ( v14 > 0x19u ) goto LABEL_34 ; LABEL_24 : if ( ( unsigned __int8 )( v10 - 48 ) > 9u ) { if ( v30 > 0x19u ) v15 = 0 ; else v15 = 16 * ( v10 - 7 ); } else { v15 = 16 * v10 ; } v16 = * ( _BYTE * )( v2 + 9 ) - 48 ; if ( v16 <= 9u ) goto LABEL_33 ; if ( v14 > 0x19u ) { v16 = 0 ; LABEL_33 : v11 = v15 + v16 ; v17 = 1 ; goto LABEL_35 ; } v17 = 1 ; v11 = v15 + * ( _BYTE * )( v2 + 9 ) - 55 ; LABEL_35 : v18 = _mm_cvtsi32_si128 (( char ) v11 ); v19 = _mm_unpacklo_epi8 ( v18 , v18 ); v27 = _mm_shuffle_epi32 ( _mm_unpacklo_epi16 ( v19 , v19 ), 0 ); if ( v17 ) { v20 = 0 ; if ( dword_4053C4 >= 2 ) { v20 = 16 ; v21 = _mm_mullo_epi32 ( _mm_cvtepu8_epi32 ( _mm_cvtsi32_si128 ( v27 . m128i_u32 [ 0 ])), ( __m128i ) xmmword_404380 ); xmmword_405018 = ( __int128 ) _mm_xor_si128 ( _mm_add_epi32 (( __m128i ) xmmword_404340 , v9 ), _mm_add_epi32 ( v21 , ( __m128i ) xmmword_405018 )); xmmword_405028 = ( __int128 ) _mm_xor_si128 ( _mm_add_epi32 ( _mm_add_epi32 (( __m128i ) xmmword_404350 , ( __m128i ) xmmword_404340 ), v9 ), _mm_add_epi32 ( v21 , ( __m128i ) xmmword_405028 )); xmmword_405038 = ( __int128 ) _mm_xor_si128 ( _mm_add_epi32 ( _mm_add_epi32 (( __m128i ) xmmword_404360 , ( __m128i ) xmmword_404340 ), v9 ), _mm_add_epi32 ( v21 , ( __m128i ) xmmword_405038 )); xmmword_405048 = ( __int128 ) _mm_xor_si128 ( _mm_add_epi32 ( _mm_add_epi32 (( __m128i ) xmmword_404370 , ( __m128i ) xmmword_404340 ), v9 ), _mm_add_epi32 ( v21 , ( __m128i ) xmmword_405048 )); } do { * (( _DWORD * ) & xmmword_405018 + v20 ) = ( v20 + v3 ) ^ ( 16843009 * v11 + * (( _DWORD * ) & xmmword_405018 + v20 )); ++ v20 ; } while ( v20 < 24 ); v22 = 0 ; while ( * (( _BYTE * ) & xmmword_405018 + v22 ) == * (( _BYTE * ) & loc_404148 + v22 ) ) { if ( ++ v22 >= 96 ) { v28 = 0 ; v23 = __rdtsc (); if ( HIDWORD ( v23 ) > HIDWORD ( v26 ) || ( v28 = v23 - v26 , ( unsigned int )( v23 - v26 ) >= 0xFFFFFF ) ) MEMORY [ 0 ] = 0 ; v24 = GetCurrentProcess (); WriteProcessMemory ( v24 , sub_4018A0 , & xmmword_405018 , 0x60u , 0 ); return 1 ; } } } return 0 ; } \u770b\u4e0d\u662f\u7279\u522b\u61c2\uff0c\u4f46\u4e5f\u80fd\u4ece\u4e2d\u8bfb\u5230\u4e00\u70b9\u4e1c\u897f\u3002 if ( ++v4 >= 8 ) \u53ef\u77e5\u8f93\u5165\u5b57\u7b26\u4e32\u81f3\u5c11\u4e3a8\u4f4d \u4e4b\u540e\u5c31\u76f4\u63a5\u52a8\u6001\u8c03\u8bd5\u4e86\uff0c\u8fd9\u91cc\u7528\u7684\u662fx32dbg 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 00401636 | 8 A343E | mov dh , byte ptr ds :[ esi + edi ] | 00401639 | 80 FE 30 | cmp dh , 30 | 30 : '0' 0040163 C | 7 C 0 C | jl justre . 40164 A | 0040163 E | 80 FE 39 | cmp dh , 39 | 39 : '9' 00401641 | 7 F 07 | jg justre . 40164 A | 00401643 | 8 AD6 | mov dl , dh | 00401645 | 80 EA 41 | sub dl , 41 | 00401648 | EB 0 A | jmp justre . 401654 | 0040164 A | 8 AD6 | mov dl , dh | 0040164 C | 80 EA 41 | sub dl , 41 | 0040164 F | 80 FA 19 | cmp dl , 19 | 00401652 | 77 2 C | ja justre . 401680 | 00401654 | 8 ACE | mov cl , dh | 00401656 | C1E0 04 | shl eax , 4 | 00401659 | 80 E9 30 | sub cl , 30 | 0040165 C | 80 F9 09 | cmp cl , 9 | 9 : '\\t' 0040165 F | 77 05 | ja justre . 401666 | 00401661 | 83 C0 D0 | add eax , FFFFFFD0 | 00401664 | EB 08 | jmp justre . 40166 E | 00401666 | 80 FA 19 | cmp dl , 19 | 00401669 | 77 08 | ja justre . 401673 | 0040166 B | 83 C0 C9 | add eax , FFFFFFC9 | 0040166 E | 0 FBECE | movsx ecx , dh | 00401671 | 03 C1 | add eax , ecx | 00401673 | 46 | inc esi | 00401674 | 83 FE 08 | cmp esi , 8 | 00401677 | 7 C BD | jl justre . 401636 | \u8fd9\u91cc\u662f\u5224\u65ad\u51fd\u6570\u7684\u7b2c\u4e00\u4e2a\u5faa\u73af\uff0c\u7528\u9ed1\u76d2\u76f4\u63a5\u731c\u6d4b\uff0c\u8fd9\u91cc\u662f\u8bfb\u53d6\u524d8\u4f4d\u5b57\u7b26\u5230eax 1 2 00401682 | 66 : 0 F6EC0 | movd xmm0 , eax | 00401686 | 66 : 0 F70E8 00 | pshufd xmm5 , xmm0 , 0 | \u8fd9\u4e24\u53e5\uff0c\u5c06\u524d\u516b\u4e3a\u6269\u5c55\u5230xmm5\u4e2d 1 xmm5 12345678123456781234567812345678 \u8fd9\u4e00\u53e5\uff0c\u8bfb\u53d6\u4e86\u540e\u4e24\u4f4d\uff0c\u6240\u4ee5\u4ece\u8fd9\u91cc\u53ef\u4ee5\u77e5\u9053\u8f93\u5165\u5b57\u7b26\u81f3\u5c1110\u4f4d 1 00401693 | 8 A57 08 | mov dl , byte ptr ds :[ edi + 8 ] | edi + 8 : \"AB\" \u7ee7\u7eed\u9ed1\u76d2\uff0c\u53ef\u77e5\uff0c\u5728\u8fd9\u51e0\u53e5\u4e4b\u524d\u7684\u8bed\u53e5\u90fd\u662f\u5728\u6267\u884c\u5c06\u540e\u4e24\u4f4d\u8bfb\u53d6\u5230ecx\u4e2d\uff0c\u800c\u8fd9\u51e0\u53e5\u5219\u662f\u5c06\u5176\u6269\u5c55\u5230xmm0\u4e2d 1 2 3 4 5 6 00401728 | 0 FBECE | movsx ecx , dh | 0040172 B | 66 : 0 F6EC1 | movd xmm0 , ecx | 0040172 F | 66 : 0 F60C0 | punpcklbw xmm0 , xmm0 | 00401733 | 66 : 0 F61C0 | punpcklwd xmm0 , xmm0 | 00401737 | 66 : 0 F70C0 00 | pshufd xmm0 , xmm0 , 0 | 0040173 C | 0 F2945 E0 | movaps xmmword ptr ss :[ ebp - 20 ], xmm0 | \u63a5\u4e0b\u6765\u7531\u5355\u6b65\u8c03\u8bd5\u5c31\u53ef\u77e5,\u5c06\u4e0b\u9762\uff0c\u6bcf\u6b21\u8bfb\u53d616\u4e2a16\u8fdb\u5236\u5b57\u7b26\u8fdb\u884c\u8fd0\u7b97(\u6700\u540e\u4e24\u7ec4\u662f\u5206\u522b\u8fdb\u884c\uff0c\u6bcf\u6b21\u8bfb\u53d64\u4e2a16\u8fdb\u5236\u5b57\u7b26)\uff1a \u5148\u5206\u522b\u52a0\u4e0a\u540e\u4e24\u4f4d\uff0c\u8fd9\u91cc\u5c31\u662f\u52a0\u4e0aAB\uff0c\u518d\u6bcf\u516b\u4f4d\uff0c\u548c\u524d\u516b\u4f4d\u52a0\u4e0ai\u7684\u6570\u5f02\u6216\u540e\u518d\u9001\u56de[00405018] \u4f8b\u5982\uff1a3E5F11D5FE0F0B1DEA90BD987BB39408\u52a0\u4e0aABABABABABABABABABABABABABABABAB\uff0c\u5728\u548c12345678123456781234567812345678\u52a0\u4e0a00000003000000020000000100000000\u540e\u76841234567B1234567A1234567912345678\u5f02\u6216\u540e\u5f97F83EEBFBBB8EE0B284083F3A356B69CB\uff0c\u7136\u540e\u9001\u56de[00405018] 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 00405010 08 94 B3 7 B 98 BD 90 EA / ......... \u00b3{ . \u00bd . \u00ea 00405020 1 D 0 B 0 F FE D5 11 5 F 3 E 37 FC CA 85 B4 F1 3 A FC ... \u00fe\u00d5 . _ > 7 \u00fc\u00ca . \u00b4\u00f1 : \u00fc 00405030 39 0 D 16 EE 35 75 50 3 E 3 B 6 D CF 3 D FC 0 C 5 D 07 9 .. \u00ee 5 uP > ; m\u00cf = \u00fc .]. 00405040 2 E 51 EB 29 EF BB 16 58 3 C 85 50 3 E 40 2 F 16 B0 . Q\u00eb ) \u00ef\u00bb . X < . P >@/ . \u00b0 00405050 FD F0 4 E 07 32 4 E 19 64 03 95 4 B 22 00 9 A 8 B 22 \u00fd\u00f0 N . 2 N . d .. K \"...\" 00405060 91 0 E 0 F FE 1 C 0 D 5 F 07 38 51 EB F9 A0 65 16 FE ... \u00fe .. _ . 8 Q\u00eb\u00f9 e . \u00fe 00405070 49 33 4 F 89 C6 F1 56 FC I3O . \u00c6\u00f1 V\u00fc _____________________________________________________________________________ 00405010 CB 69 6 B 35 3 A 3 F 08 84 / ....... \u00cb ik5 : ? .. 00405020 B2 E0 8 E BB FB EB 3 E F8 37 FC CA 85 B4 F1 3 A FC \u00b2\u00e0 . \u00bb\u00fb\u00eb > \u00f8 7 \u00fc\u00ca . \u00b4\u00f1 : \u00fc 00405030 39 0 D 16 EE 35 75 50 3 E 3 B 6 D CF 3 D FC 0 C 5 D 07 9 .. \u00ee 5 uP > ; m\u00cf = \u00fc .]. 00405040 2 E 51 EB 29 EF BB 16 58 3 C 85 50 3 E 40 2 F 16 B0 . Q\u00eb ) \u00ef\u00bb . X < . P >@/ . \u00b0 00405050 FD F0 4 E 07 32 4 E 19 64 03 95 4 B 22 00 9 A 8 B 22 \u00fd\u00f0 N . 2 N . d .. K \"...\" 00405060 91 0 E 0 F FE 1 C 0 D 5 F 07 38 51 EB F9 A0 65 16 FE ... \u00fe .. _ . 8 Q\u00eb\u00f9 e . \u00fe 00405070 49 33 4 F 89 C6 F1 56 FC I3O . \u00c6\u00f1 V\u00fc 1 2 3 4 5 6 00401831 | 8 A81 18504000 | mov al , byte ptr ds :[ ecx + 405018 ] | 00401837 | 3 A81 48414000 | cmp al , byte ptr ds :[ ecx + 404148 ] | 0040183 D | 75 4 F | jne justre . 40188 E | 0040183 F | 41 | inc ecx | 00401840 | 83 F9 60 | cmp ecx , 60 | 00401843 | 7 C EC | jl justre . 401831 | \u4e0a\u9762\u8fd9\u51e0\u53e5\u5219\u662f\u5c06\u8fd0\u7b97\u540e\u7684\u5b57\u7b26\u548c[404148]\u5904\u7684\u5b57\u7b26\u8fdb\u884c\u5bf9\u6bd4\uff0c\u5373\u662f\u4e3b\u51fd\u6570\u4e2d\u7684\uff08\u4e00\u5f00\u59cbIDA\u7ed9\u8bc6\u522b\u6210\u4e86\u8bed\u53e5\uff0c\u76f4\u63a5undifine\u5373\u53ef\uff09 1 2 3 4 5 6 7 8 9 10 11 12 13 14 ; _BYTE byte_404148 [ 96 ] . rdata : 00404148 byte_404148 db 55h , 8Bh , 0ECh , 83h , 0E4h , 0F0h , 81h , 0ECh , 78h , 2 . rdata : 00404148 ; DATA XREF : sub_401610 + 227 \u2191 r . rdata : 00404148 db 2 dup ( 0 ), 0A1h , 4 , 50h , 40h , 0 , 33h , 0C4h , 89h , 84h . rdata : 00404148 db 24h , 74h , 2 , 2 dup ( 0 ), 0Fh , 10h , 5 , 0A8h , 41h , 40h . rdata : 00404148 db 0 , 0A0h , 0C0h , 41h , 40h , 0 , 56h , 0Fh , 11h , 44h , 24h . rdata : 00404148 db 2Ch , 57h , 0F3h , 0Fh , 7Eh , 5 , 0B8h , 41h , 40h , 0 , 66h . rdata : 00404148 db 0Fh , 0D6h , 44h , 24h , 40h , 0Fh , 10h , 41h , 0Ah , 6Ah , 40h . rdata : 00404148 db 88h , 44h , 24h , 4Ch , 8Dh , 84h , 24h , 0FCh , 1 , 2 dup ( 0 ) . rdata : 00404148 db 6Ah , 0 , 50h , 0Fh , 11h , 44h , 24h , 1Ch , 0E8h , 58h , 0Fh . rdata : 00404148 db 2 dup ( 0 ), 6Ah , 40h , 8Dh , 84h , 24h , 48h , 2 . rdata : 004041A8 xmmword 4E434158435843594445434641534641h . rdata : 004041B8 dq 43585143444B4644h . rdata : 004041C0 db 0 \u77e5\u9053\u4e86\u8fd0\u7b97\u8fc7\u7a0b\uff0c\u90a3\u5c31\u53ef\u4ee5\u6765\u89e3\u51fa\u524d10\u4f4d\uff1a\u6211\u8fd9\u91cc\u901a\u8fc7\u5148\u6c42\u51fa\u524d\u516b\u4f4d,\u518d\u6c42\u51fa\u540e\u4e24\u4f4d\u7684\u65b9\u6cd5 \u56e0\u4e3a\u524d\u516b\u4f4d\uff0c\u5bf9\u76f8\u90bb\u76844\u4e2a16\u8fdb\u5236\u6570\u64cd\u4f5c\u76f8\u5dee\u4e3a1\uff0c\u5219\u53ef\u901a\u8fc7\u6700\u521d\u7684\u4e24\u4f4d\u6c42\u51fa\u6ee1\u8db3\u6761\u4ef6\u76848\u4f4d\u6570,\u518d\u76f8\u51cf\u6c42\u51fa\u6ee1\u8db3\u76f8\u5dee\u4e3a1\u7684\u4e14\u53c2\u4e0e\u8fd0\u7b97\u7684\u540e\u4e24\u4f4d\u662f\u76f8\u540c\u7684\u524d\u516b\u4f4d\uff0c\u518d\u901a\u8fc7\u5df2\u77e5\u524d\u516b\u4f4d\u6765\u7b97\u51fa\u540e\u4e24\u4f4d 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 s = [ 0x55 , 0x8B , 0xEC , 0x83 ] aa = [] key = ( s [ 3 ] << 24 ) + ( s [ 2 ] << 16 ) + ( s [ 1 ] << 8 ) + s [ 0 ] for i in xrange ( 0xFF ): s1 = [ 0x08 , 0x94 , 0xB3 , 0x7B ] for j in xrange ( 4 ): s1 [ j ] += i key2 = ( s1 [ 3 ] << 24 ) + ( s1 [ 2 ] << 16 ) + ( s1 [ 1 ] << 8 ) + s1 [ 0 ] if 0XFFFFFFF < ( key ^ key2 ) <= 0xFFFFFFFF : aa . append ( key ^ key2 ) else : aa . append ( 0 ) s = [ 0xE4 , 0xF0 , 0x81 , 0xEC ] bb = [] key = ( s [ 3 ] << 24 ) + ( s [ 2 ] << 16 ) + ( s [ 1 ] << 8 ) + s [ 0 ] for i in xrange ( 0xFF ): s1 = [ 0x98 , 0xBD , 0x90 , 0xEA ] for j in xrange ( 4 ): s1 [ j ] += i key2 = ( s1 [ 3 ] << 24 ) + ( s1 [ 2 ] << 16 ) + ( s1 [ 1 ] << 8 ) + s1 [ 0 ] if 0XFFFFFFF < ( key ^ key2 ) <= 0xFFFFFFFF : bb . append ( key ^ key2 ) else : bb . append ( 0 ) for i in xrange ( len ( aa )): if aa [ i ] != 0 and bb [ i ] != 0 : if bb [ i ] - aa [ i ] == 1 : print hex ( aa [ i ]) break s = [ 0xE4 , 0xF0 , 0x81 , 0xEC ] s1 = [ 0x98 , 0xBD , 0x90 , 0xEA ] key = ( s [ 3 ] << 24 ) + ( s [ 2 ] << 16 ) + ( s [ 1 ] << 8 ) + s [ 0 ] key2 = ( s1 [ 3 ] << 24 ) + ( s1 [ 2 ] << 16 ) + ( s1 [ 1 ] << 8 ) + s1 [ 0 ] print hex (( key ^ bb [ i ]) - key2 ) \u6700\u7ec8\u5f97\u5230\uff1a 1 2 0 x13242248L 0 x15151515L \u5373\u524d10\u4f4d\u4e3a 1324224815 \uff0c\u4f46\u8f93\u8fdb\u53bb\u8fd8\u662fsorry\uff0c\u90a3\u5c31\u662f\u540e\u9762\u8fd8\u6709\u4e00\u4e9b\u4e1c\u897f \u7ee7\u7eed\u8c03\u8bd5\uff1a 1 00401862 | 8900 | mov dword ptr ds : [ eax ] , eax | 1 2 if ( HIDWORD ( v23 ) > HIDWORD ( v26 ) || ( v28 = v23 - v26 , ( unsigned int )( v23 - v26 ) >= 0xFFFFFF ) ) MEMORY [ 0 ] = 0 ; \u8c03\u8bd5\u5230\u8fd9\u91cc\u7a0b\u5e8f\u4f1a\u5d29\u6e83\uff0c\u6839\u636eIDA\u8fd9\u91ccMEMORY[0] = 0\u4e5f\u662f\u5206\u6790\u4e0d\u51fa\u6765\u7684\uff0c\u76f4\u63a5\u8bbe\u4e0b\u4e00\u53e5\u4e3a\u65b0EIP\u5373\u53ef \u63a5\u7740\u5f00\u59cb\u778e\u731c\u6a21\u5f0f....... 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 00401949 | 8 B8424 F8010000 | mov eax , dword ptr ss :[ esp + 1 F8 ] | 00401950 | 8 D9424 70010000 | lea edx , dword ptr ss :[ esp + 170 ] | 00401957 | 83 C4 18 | add esp , 18 | 0040195 A | 898424 D8010000 | mov dword ptr ss :[ esp + 1 D8 ], eax | 00401961 | 8 B8424 E4010000 | mov eax , dword ptr ss :[ esp + 1 E4 ] | 00401968 | 8 D8C24 D8010000 | lea ecx , dword ptr ss :[ esp + 1 D8 ] | 0040196 F | 898424 DC010000 | mov dword ptr ss :[ esp + 1 DC ], eax | 00401976 | E8 85 F6FFFF | call < justre . sub_401000 > | 0040197 B | 8 B8424 E8010000 | mov eax , dword ptr ss :[ esp + 1 E8 ] | 00401982 | 8 D9424 D8000000 | lea edx , dword ptr ss :[ esp + D8 ] | 00401989 | 898424 D8010000 | mov dword ptr ss :[ esp + 1 D8 ], eax | 00401990 | 8 D8C24 D8010000 | lea ecx , dword ptr ss :[ esp + 1 D8 ] | 00401997 | 8 B8424 EC010000 | mov eax , dword ptr ss :[ esp + 1 EC ] | 0040199 E | 898424 DC010000 | mov dword ptr ss :[ esp + 1 DC ], eax | 004019 A5 | E8 56 F6FFFF | call < justre . sub_401000 > | 004019 AA | 8 B8424 F0010000 | mov eax , dword ptr ss :[ esp + 1 F0 ] | 004019 B1 | 8 D5424 58 | lea edx , dword ptr ss :[ esp + 58 ] | 004019 B5 | 898424 D8010000 | mov dword ptr ss :[ esp + 1 D8 ], eax | 004019 BC | 8 D8C24 D8010000 | lea ecx , dword ptr ss :[ esp + 1 D8 ] | 004019 C3 | 8 B8424 F4010000 | mov eax , dword ptr ss :[ esp + 1 F4 ] | 004019 CA | 898424 DC010000 | mov dword ptr ss :[ esp + 1 DC ], eax | 004019 D1 | E8 2 AF6FFFF | call < justre . sub_401000 > | 004019 D6 | 8 D7424 10 | lea esi , dword ptr ss :[ esp + 10 ] | 004019 DA | 8 D4E 01 | lea ecx , dword ptr ds :[ esi + 1 ] | \u901a\u8fc7\u8fd9\u51e0\u4e2a\u8bed\u53e5\uff0c\u5c06\u8bfb\u8fdb\u6765\u7684 AFSAFCEDYCXCXACNDFKDCQXC \u5206\u6210\u4e09\u90e8\u5206\uff0c\u5e76\u6bcf\u90e8\u5206\u90fd\u5f80\u524d\u586b\u5145\u6210\u4e00\u4e2a\u65b0\u7684\u5b57\u7b26\u4e32 1 2 3 \"AFSAFCEDAFSAFCEDYCXCXACNDFKDCQXC\" \"YCXCFACNAFSAFCEDYCXCXACNDFKDCQXC\" \"DFKDCQXCAFSAFCEDYCXCXACNDFKDCQXC\" \u4e2d\u95f4\u8fd9\u91cc\uff0c\u5728\u524d\u5341\u4f4d\u540e\u7531\u8bfb\u8fdb\u6765\u4e8616\u4e2a\u5b57\u7b26\uff0c\u5e76\u8f6c\u5316\u621016\u4e2a16\u8fdb\u5236\u6570\uff0c\u901a\u8fc7 call <justre.sub_401500> \u52a0\u5bc6\uff0c\u5e76\u4e14\u662f\u5206\u6210\u4e24\u5757\u8fdb\u884c\u52a0\u5bc6\uff0c\u6bcf\u6b21\u52a0\u5bc664\u4f4d\uff0c\u52a0\u5bc6\u8fd0\u7b97\u540e\u5b58\u50a8 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 00401 A50 | 0 FB68434 F9010000 | movzx eax , byte ptr ss :[ esp + esi + 1 F9 ] | 00401 A58 | 0 FB68C34 F8010000 | movzx ecx , byte ptr ss :[ esp + esi + 1 F8 ] | 00401 A60 | 0 FB69434 FC010000 | movzx edx , byte ptr ss :[ esp + esi + 1 FC ] | 00401 A68 | C1E0 08 | shl eax , 8 | 00401 A6B | 0 BC8 | or ecx , eax | 00401 A6D | 0 FB68434 FA010000 | movzx eax , byte ptr ss :[ esp + esi + 1 FA ] | 00401 A75 | C1E0 10 | shl eax , 10 | 00401 A78 | 0 BC8 | or ecx , eax | 00401 A7A | 0 FB68434 FB010000 | movzx eax , byte ptr ss :[ esp + esi + 1 FB ] | 00401 A82 | C1E0 18 | shl eax , 18 | 00401 A85 | 0 BC8 | or ecx , eax | 00401 A87 | 0 FB68434 FD010000 | movzx eax , byte ptr ss :[ esp + esi + 1 FD ] | 00401 A8F | 898 C24 D8010000 | mov dword ptr ss :[ esp + 1 D8 ], ecx | 00401 A96 | 0 FB68C34 FF010000 | movzx ecx , byte ptr ss :[ esp + esi + 1 FF ] | 00401 A9E | C1E0 08 | shl eax , 8 | 00401 AA1 | 0 BD0 | or edx , eax | 00401 AA3 | C1E1 08 | shl ecx , 8 | 00401 AA6 | 0 FB68434 FE010000 | movzx eax , byte ptr ss :[ esp + esi + 1 FE ] | 00401 AAE | 0 BC8 | or ecx , eax | 00401 AB0 | 8 D4424 58 | lea eax , dword ptr ss :[ esp + 58 ] | 00401 AB4 | C1E1 10 | shl ecx , 10 | 00401 AB7 | 0 BCA | or ecx , edx | 00401 AB9 | 8 D9424 58010000 | lea edx , dword ptr ss :[ esp + 158 ] | 00401 AC0 | 50 | push eax | 00401 AC1 | 8 D8424 DC000000 | lea eax , dword ptr ss :[ esp + DC ] | 00401 AC8 | 898 C24 E0010000 | mov dword ptr ss :[ esp + 1 E0 ], ecx | 00401 ACF | 50 | push eax | 00401 AD0 | 8 D8C24 E0010000 | lea ecx , dword ptr ss :[ esp + 1 E0 ] | 00401 AD7 | E8 24 FAFFFF | call < justre . sub_401500 > | \u524d\u9762\u662f\u53d6\uff0c\u540e\u9762\u662f\u5b58\u50a8\uff0c\u51fd\u6570\u7528\u6765\u52a0\u5bc6\u8fd0\u7b97 00401 ADC | 8 B8C24 E0010000 | mov ecx , dword ptr ss :[ esp + 1 E0 ] | 00401 AE3 | 83 C4 08 | add esp , 8 | 00401 AE6 | 888 C34 38020000 | mov byte ptr ss :[ esp + esi + 238 ], cl | 00401 AED | 8 BC1 | mov eax , ecx | 00401 AEF | C1E8 08 | shr eax , 8 | 00401 AF2 | 888434 39020000 | mov byte ptr ss :[ esp + esi + 239 ], al | 00401 AF9 | 8 BC1 | mov eax , ecx | 00401 AFB | C1E8 10 | shr eax , 10 | 00401 AFE | 888434 3 A020000 | mov byte ptr ss :[ esp + esi + 23 A ], al | 00401 B05 | C1E9 18 | shr ecx , 18 | 00401 B08 | 888 C34 3 B020000 | mov byte ptr ss :[ esp + esi + 23 B ], cl | 00401 B0F | 8 B8C24 DC010000 | mov ecx , dword ptr ss :[ esp + 1 DC ] | 00401 B16 | 8 BC1 | mov eax , ecx | 00401 B18 | 888 C34 3 C020000 | mov byte ptr ss :[ esp + esi + 23 C ], cl | 00401 B1F | C1E8 08 | shr eax , 8 | 00401 B22 | 888434 3 D020000 | mov byte ptr ss :[ esp + esi + 23 D ], al | 00401 B29 | 8 BC1 | mov eax , ecx | 00401 B2B | C1E8 10 | shr eax , 10 | 00401 B2E | C1E9 18 | shr ecx , 18 | 00401 B31 | 888434 3 E020000 | mov byte ptr ss :[ esp + esi + 23 E ], al | 00401 B38 | 888 C34 3 F020000 | mov byte ptr ss :[ esp + esi + 23 F ], cl | 00401 B3F | 83 C6 08 | add esi , 8 | 00401 B42 | 3 BF7 | cmp esi , edi | edi : & \"D:\\\\CTF\\\\Games\\\\2019\\\\QWB\\\\task_JustRe5\\\\JustRe5\\\\JustRe.exe\" 00401 B44 | 0 F8C 06 FFFFFF | jl justre . 401 A50 | \u6700\u540e\u8fd9\u4e00\u90e8\u5206\u662f\u5bf9\u6bd4\uff0c\u800c\u4e14\u5bf9\u6bd4\u7684\u53ea\u6709\u524d4\u7ec4\uff0c\u540e\u4e24\u7ec4\u6570\u662f\u56fa\u5b9a\u4e0d\u53d8\u7684 1 2 3 4 5 6 7 00401 B4A | C74424 10 507 CA9E6 | mov dword ptr ss :[ esp + 10 ], E6A97C50 | 00401 B52 | 33 C0 | xor eax , eax | 00401 B54 | C74424 14 8709 CEFA | mov dword ptr ss :[ esp + 14 ], FACE0987 | 00401 B5C | C74424 18 20 D50DCF | mov dword ptr ss :[ esp + 18 ], CF0DD520 | 00401 B64 | C74424 1 C 90 BB976C | mov dword ptr ss :[ esp + 1 C ], 6 C97BB90 | 00401 B6C | C74424 20 9090 F6B0 | mov dword ptr ss :[ esp + 20 ], B0F69090 | 00401 B74 | C74424 24 7 BA6A4E8 | mov dword ptr ss :[ esp + 24 ], E8A4A67B | 1 2 3 00401 B80 | 8 A4C04 10 | mov cl , byte ptr ss :[ esp + eax + 10 ] | 00401 B84 | 3 A8C04 38020000 | cmp cl , byte ptr ss :[ esp + eax + 238 ] | 00401 B8B | 75 1 F | jne justre . 401 BAC | \u6839\u636e\u4e0a\u9762\u7684\u5206\u6790\uff0c\u731c\u6d4b\u8fd9\u662f\u4e00\u4e2a64\u4f4d\u7684\u5206\u5757\u52a0\u5bc6\u7b97\u6cd5\uff0c\u67e5\u4e86\u4e00\u4e0b\u53d1\u73b0\u662fDES3 ``` \u4e09\u91cd DES \u7684\u52a0\u89e3\u5bc6\u65b9\u5f0f\u5982\u4e0b C=Ek3(Dk2(Ek1(P)))C=Ek3(Dk2(Ek1(P))) P=Dk1(Ek2(Dk3(C)))P=Dk1(Ek2(Dk3(C))) \u5728\u9009\u62e9\u5bc6\u94a5\u65f6\uff0c\u53ef\u4ee5\u6709\u4e24\u79cd\u65b9\u6cd5 3 \u4e2a\u4e0d\u540c\u7684\u5bc6\u94a5\uff0ck1\uff0ck2\uff0ck3 \u4e92\u76f8\u72ec\u7acb\uff0c\u4e00\u5171 168 \u6bd4\u7279\u3002 2 \u4e2a\u4e0d\u540c\u7684\u5bc6\u94a5\uff0ck1 \u4e0e k2 \u72ec\u7acb\uff0ck3=k1\uff0c112 \u6bd4\u7279\u3002 ``` \u6700\u540e\u76f4\u63a5\u901a\u8fc7pyCrypto\u6a21\u5757\u5bfc\u5165DES3\uff0c\u89e3\u51fa\u540e16\u4f4d\uff0c\u811a\u672c\u5982\u4e0b\u5982\u4e0b 1 2 3 4 5 6 7 key = \"AFSAFCEDYCXCXACNDFKDCQXC\" cipher = [ 0x50 , 0x7C , 0xA9 , 0xE6 , 0x87 , 0x09 , 0xCE , 0xFA , 0x20 , 0xD5 , 0x0D , 0xCF , 0x90 , 0xBB , 0x97 , 0x6C ] flag2 = '' . join ( map ( chr , cipher )) des3 = DES3 . new ( key ) print des3 . decrypt ( flag2 ) \u6700\u7ec8\u811a\u672c\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 from Crypto . Cipher import DES3 s = [ 0x55 , 0x8B , 0xEC , 0x83 ] aa = [] key = ( s [ 3 ] << 24 ) + ( s [ 2 ] << 16 ) + ( s [ 1 ] << 8 ) + s [ 0 ] for i in xrange ( 0xFF ) : s1 = [ 0x08 , 0x94 , 0xB3 , 0x7B ] for j in xrange ( 4 ) : s1 [ j ] += i key2 = ( s1 [ 3 ] << 24 ) + ( s1 [ 2 ] << 16 ) + ( s1 [ 1 ] << 8 ) + s1 [ 0 ] if 0 XFFFFFFF < ( key ^ key2 ) <= 0xFFFFFFFF : aa . append ( key ^ key2 ) else : aa . append ( 0 ) s = [ 0xE4 , 0xF0 , 0x81 , 0xEC ] bb = [] key = ( s [ 3 ] << 24 ) + ( s [ 2 ] << 16 ) + ( s [ 1 ] << 8 ) + s [ 0 ] for i in xrange ( 0xFF ) : s1 = [ 0x98 , 0xBD , 0x90 , 0xEA ] for j in xrange ( 4 ) : s1 [ j ] += i key2 = ( s1 [ 3 ] << 24 ) + ( s1 [ 2 ] << 16 ) + ( s1 [ 1 ] << 8 ) + s1 [ 0 ] if 0 XFFFFFFF < ( key ^ key2 ) <= 0xFFFFFFFF : bb . append ( key ^ key2 ) else : bb . append ( 0 ) for i in xrange ( len ( aa )) : if aa [ i ] != 0 and bb [ i ] != 0 : if bb [ i ] - aa [ i ] == 1 : print hex ( aa [ i ]) break s = [ 0xE4 , 0xF0 , 0x81 , 0xEC ] s1 = [ 0x98 , 0xBD , 0x90 , 0xEA ] key = ( s [ 3 ] << 24 ) + ( s [ 2 ] << 16 ) + ( s [ 1 ] << 8 ) + s [ 0 ] key2 = ( s1 [ 3 ] << 24 ) + ( s1 [ 2 ] << 16 ) + ( s1 [ 1 ] << 8 ) + s1 [ 0 ] print hex (( key ^ bb [ i ]) - key2 ) a = ( key ^ bb [ i ]) - key2 key = \"AFSAFCEDYCXCXACNDFKDCQXC\" cipher = [ 0x50 , 0x7C , 0xA9 , 0xE6 , 0x87 , 0x09 , 0xCE , 0xFA , 0x20 , 0xD5 , 0x0D , 0xCF , 0x90 , 0xBB , 0x97 , 0x6C ] flag2 = '' . join ( map ( chr , cipher )) des3 = DES3 . new ( key ) print hex ( aa [ i ])[ 2 : 10 ] + hex ( a )[ 2 : 4 ] + des3 . decrypt ( flag2 ) \u5f97flag{13242248150dcc509a6f75849b} \u5f3a\u7f51\u5148\u950b_AD \u9898\u76ee\uff1a \u5f3a\u7f51\u5148\u950b_AD \u8fd9\u9053\u9898\u5c31\u662f\u4e00\u9053\u6c34\u98980.0 \u4e0b\u8f7d\u540e\u62d6\u8fdbIDA\u91cc\u6253\u5f00\uff0c\u76f4\u63a5\u627e\u5230mian\u51fd\u6570 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 __int64 __fastcall main ( __int64 a1 , char ** a2 , char ** a3 ) { char v4 [ 128 ]; // [rsp+0h] [rbp-150h] char key [ 45 ]; // [rsp+80h] [rbp-D0h] __int64 v6 ; // [rsp+B0h] [rbp-A0h] __int64 v7 ; // [rsp+B8h] [rbp-98h] __int64 v8 ; // [rsp+C0h] [rbp-90h] __int16 v9 ; // [rsp+C8h] [rbp-88h] char v10 ; // [rsp+D0h] [rbp-80h] char * v11 ; // [rsp+140h] [rbp-10h] int i ; // [rsp+14Ch] [rbp-4h] puts ( \"=== Strong Network Pioneer === \\n\\n \" ); __isoc99_scanf ( \"%s\" , & v10 ); v6 = 7953769703030221169LL ; v7 = 7954876941086586983LL ; v8 = 7956005061827062375LL ; v9 = 105 ; key [ 0 ] = 0x5A ; key [ 1 ] = 0x6D ; key [ 2 ] = 0x78 ; key [ 3 ] = 104 ; key [ 4 ] = 90 ; key [ 5 ] = 51 ; key [ 6 ] = 116 ; key [ 7 ] = 116 ; key [ 8 ] = 89 ; key [ 9 ] = 87 ; key [ 10 ] = 90 ; key [ 11 ] = 104 ; key [ 12 ] = 97 ; key [ 13 ] = 51 ; key [ 14 ] = 86 ; key [ 15 ] = 104 ; key [ 16 ] = 97 ; key [ 17 ] = 87 ; key [ 18 ] = 120 ; key [ 19 ] = 104 ; key [ 20 ] = 97 ; key [ 21 ] = 88 ; key [ 22 ] = 70 ; key [ 23 ] = 112 ; key [ 24 ] = 89 ; key [ 25 ] = 87 ; key [ 26 ] = 53 ; key [ 27 ] = 107 ; key [ 28 ] = 89 ; key [ 29 ] = 87 ; key [ 30 ] = 57 ; key [ 31 ] = 105 ; key [ 32 ] = 102 ; key [ 33 ] = 81 ; key [ 34 ] = 61 ; key [ 35 ] = 61 ; v11 = & v10 ; sub_4005B7 ( & v10 , ( __int64 ) v4 ); for ( i = 0 ; i <= 44 ; ++ i ) { if ( v4 [ i ] != ( unsigned __int8 ) key [ i ] ) { puts ( \"you're not \\n \" ); return 0LL ; } } puts ( \"yes, you are! \\n \" ); return 0LL ; } \u6700\u4e0b\u9762\u7684\u5faa\u73af\u662f\u5224\u65ad\uff0c\u4e5f\u5c31\u662f\u8bf4\u6211\u4eec\u8f93\u5165\u7684v4\u8981\u548ckey\u76f8\u7b49 \u8fdb\u5165sub_4005B7 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 __int64 __fastcall sub_4005B7 ( const char * a1 , __int64 a2 ) { int v2 ; // eax int v3 ; // eax int v4 ; // eax int v5 ; // ST18_4 int v6 ; // eax int v7 ; // eax int v8 ; // eax int v10 ; // [rsp+10h] [rbp-10h] unsigned __int8 v11 ; // [rsp+17h] [rbp-9h] unsigned __int8 v12 ; // [rsp+17h] [rbp-9h] int v13 ; // [rsp+18h] [rbp-8h] int v14 ; // [rsp+18h] [rbp-8h] int v15 ; // [rsp+18h] [rbp-8h] int v16 ; // [rsp+1Ch] [rbp-4h] v16 = 0 ; v13 = 0 ; v10 = strlen ( a1 ); while ( v16 < v10 ) { v2 = v13 ; v14 = v13 + 1 ; * ( _BYTE * )( a2 + v2 ) = base64 [( const unsigned __int8 ) a1 [ v16 ] >> 2 ]; v11 = 16 * a1 [ v16 ] & 0x30 ; if ( v10 <= v16 + 1 ) { v4 = v14 ; v5 = v14 + 1 ; * ( _BYTE * )( a2 + v4 ) = base64 [ v11 ]; * ( _BYTE * )( v5 + a2 ) = 61 ; v6 = v5 + 1 ; v13 = v5 + 2 ; * ( _BYTE * )( v6 + a2 ) = 61 ; break ; } v3 = v14 ; v15 = v14 + 1 ; * ( _BYTE * )( a2 + v3 ) = base64 [(( const unsigned __int8 ) a1 [ v16 + 1 ] >> 4 ) | v11 ]; v12 = 4 * a1 [ v16 + 1 ] & 0x3C ; if ( v10 <= v16 + 2 ) { * ( _BYTE * )( a2 + v15 ) = base64 [ v12 ]; v8 = v15 + 1 ; v13 = v15 + 2 ; * ( _BYTE * )( v8 + a2 ) = 61 ; break ; } * ( _BYTE * )( a2 + v15 ) = base64 [(( const unsigned __int8 ) a1 [ v16 + 2 ] >> 6 ) | v12 ]; v7 = v15 + 1 ; v13 = v15 + 2 ; * ( _BYTE * )( a2 + v7 ) = base64 [ a1 [ v16 + 2 ] & 0x3F ]; v16 += 3 ; } * ( _BYTE * )( v13 + a2 ) = 0 ; return 0LL ; } \u770b\u7740\u5f88\u719f\u6089....\u76f4\u63a5\u5c31\u80fd\u627e\u5230base64\u52a0\u5bc6table\u8868 \u5199\u4e2a\u811a\u672c\u8dd1\u4e00\u4e0b\uff0cflag\u5373\u51fa 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 import base64 key = [ 0 for i in xrange ( 45 )] key [ 0 ] = 0x5A key [ 1 ] = 0x6D key [ 2 ] = 0x78 key [ 3 ] = 104 key [ 4 ] = 90 key [ 5 ] = 51 key [ 6 ] = 116 key [ 7 ] = 116 key [ 8 ] = 89 key [ 9 ] = 87 key [ 10 ] = 90 key [ 11 ] = 104 key [ 12 ] = 97 key [ 13 ] = 51 key [ 14 ] = 86 key [ 15 ] = 104 key [ 16 ] = 97 key [ 17 ] = 87 key [ 18 ] = 120 key [ 19 ] = 104 key [ 20 ] = 97 key [ 21 ] = 88 key [ 22 ] = 70 key [ 23 ] = 112 key [ 24 ] = 89 key [ 25 ] = 87 key [ 26 ] = 53 key [ 27 ] = 107 key [ 28 ] = 89 key [ 29 ] = 87 key [ 30 ] = 57 key [ 31 ] = 105 key [ 32 ] = 102 key [ 33 ] = 81 key [ 34 ] = 61 key [ 35 ] = 61 flag = \"\" for i in xrange ( len ( key )) : flag += chr ( key [ i ]) flag = base64 . b64decode ( flag ) print flag flag{mafakuailaiqiandaob} webassembly \u9898\u76ee\uff1a webassembly \u8fd9\u662f\u6211\u7b2c\u4e00\u6b21\u63a5\u89e6wasm\uff0c\u8bb0\u5f55\u4e00\u4e0b0.0 \u9898\u76ee\u4e0b\u4e0b\u6765\u53ea\u6709\u4e09\u4e2a\u6587\u4ef6\uff0c\u5206\u522b\u662f .js , .wasm , .html wasm\u4ecb\u7ecd\u5c31\u4e0d\u5728\u8fd9\u91cc\u4ecb\u7ecd\u4e86\uff0c\u6709\u5174\u8da3\u53ef\u4ee5\u5230\u8fd9\u91cc\u770b\u770b wasm\u5c31\u662f\u4e00\u5806\u4e8c\u8fdb\u5236\u6587\u4ef6\uff0c\u5c31\u5f88\u5934\u79c3\u3002\u4f46\u53ef\u4ee5\u7528 wabt\u5de5\u5177 \u8f6c\u6210 .c \u548c .h \u6587\u4ef6 1 $ . / wasm2c webassembly . wasm - o webassembly . c \u4e0d\u8fc7\u8fd8\u662f\u770b\u4e0d\u61c2\uff0c\u4ee3\u7801\u884c\u6570\u8d3c\u6050\u601618567\u884c..............\u540e\u6765Apeng\u5927\u4f6c\u63d0\u4f9b\u4e86\u4e00\u79cd\u4f18\u5316\u65b9\u6cd5\uff1a\u7528gcc\u7f16\u8bd1\u540e\u5728\u7528ida\u53cd\u7f16\u8bd1 \u5c06\u4e4b\u524d\u53cd\u7f16\u8bd1\u51fa\u6765\u7684wasm.c\uff0cwasm.h\uff0c\u4ee5\u53cawabt\u9879\u76ee\u5185\u7684wasm-rt.h\uff0cwasm-rt-impl.c\uff0cwasm-rt-impl.h\u4e09\u4e2a\u6587\u4ef6\u653e\u5230\u540c\u4e00\u4e2a\u6587\u4ef6\u5939\u3002 \u76f4\u63a5gcc wasm.c\u4f1a\u62a5\u9519\uff0c\u56e0\u4e3a\u5f88\u591awasm\u7684\u51fd\u6570\u6ca1\u6709\u5177\u4f53\u7684\u5b9e\u73b0\u3002\u4f46\u662f\u6211\u4eec\u53ef\u4ee5\u53ea\u7f16\u8bd1\u4e0d\u94fe\u63a5\uff0c\u6211\u4eec\u5173\u5fc3\u7684\u53ea\u662f\u7a0b\u5e8f\u672c\u8eab\u7684\u903b\u8f91\uff0c\u4e0d\u9700\u8981\u771f\u6b63\u7f16\u8bd1\u51fa\u80fd\u8fd0\u884c\u7684elf\u6765\u3002 1 $ gcc - c wasm . c - o wasm . o \u5f97\u5230\u7684\u8fd8\u672a\u8fde\u63a5\u7684elf\u6587\u4ef6wasm.o \u73b0\u5728\u5c31\u53ef\u4ee5\u4e22\u8fdbida\u6765\u5206\u6790\u4e86\uff0c\u6bd4\u4e4b\u524d\u7684wasm.c\u53cb\u597d\u5f88\u591a\u3002 \u5206\u6790\u51fa\u6765\u662f\uff0cXTEA\u52a0\u5bc6\uff0c\u89e3\u5bc6\u811a\u672c(Apeng\u5927\u4f6c\u592a\u5f3a\u4e860.0)\u5982\u4e0b\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 # include \" pch.h \" # include < iostream > using namespace std ; void encipher ( unsigned int num_rounds , uint32_t v [ 2 ], uint32_t const key [ 4 ] ) { unsigned int i ; uint32_t v0 = v [ 0 ], v1 = v [ 1 ], sum = 0 , delta = 0 x9E3779B9 ; for ( i = 0 ; i < num_rounds; i++) { v0 += ((( v1 << 4 ) ^ ( v1 >> 5 )) + v1 ) ^ ( sum + key [ sum & 3 ] ) ; sum += delta ; v1 += ((( v0 << 4 ) ^ ( v0 >> 5 )) + v0 ) ^ ( sum + key [ ( sum >> 11 ) & 3 ] ) ; } v [ 0 ] = v0 ; v[1] = v1; } void decipher ( unsigned int num_rounds , uint32_t v [ 2 ], uint32_t const key [ 4 ] ) { unsigned int i ; uint32_t v0 = v [ 0 ], v1 = v [ 1 ], delta = 0 x9E3779B9 , sum = delta * num_rounds ; for ( i = 0 ; i < num_rounds; i++) { v1 -= ((( v0 << 4 ) ^ ( v0 >> 5 )) + v0 ) ^ ( sum + key [ ( sum >> 11 ) & 3 ] ) ; sum -= delta ; v0 -= ((( v1 << 4 ) ^ ( v1 >> 5 )) + v1 ) ^ ( sum + key [ sum & 3 ] ) ; } v [ 0 ] = v0 ; v[1] = v1; } int main () { int i ; unsigned int v [ 10 ] = { 2586051617 L , 2764128737 L , 1835204653 , 2601945884 L , 95579550 , 993221996 , 1624609160 , 781843991 , 879125044 , 0 x7D61 } ; unsigned int k [ 4 ] = { 0 , 0 , 0 , 0 } ; for ( i = 0 ; i < 8; i += 2) decipher ( 32 , & v [ i ], k ) ; cout << ( char * ) v << endl ; }","title":"2019 \u5f3a\u7f51\u676f"},{"location":"ctf_write_up/2019/2019qwb/#justre","text":"\u9898\u76ee\uff1a JustRe \u6253\u5f00\u6765\u662f\u8fd9\u4e2a\u6837\u5b50\uff0c\u62d6\u8fdbIDA\u901a\u8fc7\u5b57\u7b26\uff0c\u5b9a\u4f4d\u5230\u4e3b\u51fd\u6570 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 int sub_401BD0 () { char v1 ; // [esp+4h] [ebp-68h] puts ( \" # ###### \" ); puts ( \" # # # #### ##### # # ###### \" ); puts ( \" # # # # # # # # \" ); puts ( \" # # # #### # ###### ##### \" ); puts ( \"# # # # # # # # # \" ); puts ( \"# # # # # # # # # # \" ); puts ( \" ##### #### #### # # # ###### \" ); sub_401CE0 ( \"%s\" , ( unsigned int ) & v1 ); if ( sub_401610 ( & v1 ) ) sub_4018A0 ( & v1 ); puts ( \"sorry..\" ); return 0 ; } \u91cd\u70b9\u5728\u51fd\u6570sub_401610()\u4e2d 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 signed int __usercall sub_401610 @ < eax > ( int a1 @ < ecx > , int a2 @ < ebp > ) { int v2 ; // edi unsigned int v3 ; // eax int v4 ; // esi char v5 ; // dh unsigned __int8 v6 ; // dl int v7 ; // eax signed int v8 ; // ecx __m128i v9 ; // xmm5 char v10 ; // dl unsigned __int8 v11 ; // dh unsigned __int8 v12 ; // cl char v13 ; // ch unsigned __int8 v14 ; // ch char v15 ; // dl unsigned __int8 v16 ; // dh signed int v17 ; // esi __m128i v18 ; // xmm0 __m128i v19 ; // xmm0 signed int v20 ; // esi __m128i v21 ; // xmm4 int v22 ; // ecx unsigned __int64 v23 ; // rax HANDLE v24 ; // eax unsigned __int64 v26 ; // [esp-54h] [ebp-60h] __m128i v27 ; // [esp-20h] [ebp-2Ch] int v28 ; // [esp-8h] [ebp-14h] unsigned __int8 v29 ; // [esp-2h] [ebp-Eh] unsigned __int8 v30 ; // [esp-1h] [ebp-Dh] int v31 ; // [esp+0h] [ebp-Ch] int v32 ; // [esp+4h] [ebp-8h] int retaddr ; // [esp+Ch] [ebp+0h] v31 = a2 ; v32 = retaddr ; v2 = a1 ; v26 = __rdtsc (); v3 = 0 ; v4 = 0 ; while ( 1 ) { v5 = * ( _BYTE * )( v4 + a1 ); if ( v5 >= 48 && v5 <= 57 ) { v6 = v5 - 65 ; goto LABEL_6 ; } v6 = v5 - 65 ; if ( ( unsigned __int8 )( v5 - 65 ) > 0x19u ) break ; LABEL_6 : v3 *= 16 ; if ( ( unsigned __int8 )( v5 - 48 ) <= 9u ) { v7 = v3 - 48 ; LABEL_10 : v3 = v5 + v7 ; goto LABEL_11 ; } if ( v6 <= 0x19u ) { v7 = v3 - 55 ; goto LABEL_10 ; } LABEL_11 : if ( ++ v4 >= 8 ) { v8 = 1 ; goto LABEL_14 ; } } v8 = 0 ; LABEL_14 : v9 = _mm_shuffle_epi32 ( _mm_cvtsi32_si128 ( v3 ), 0 ); if ( ! v8 ) return 0 ; v10 = * ( _BYTE * )( v2 + 8 ); v11 = 0 ; if ( v10 >= 48 && v10 <= 57 ) { v12 = v10 - 65 ; v30 = v10 - 65 ; goto LABEL_19 ; } v12 = v10 - 65 ; v30 = v10 - 65 ; if ( ( unsigned __int8 )( v10 - 65 ) > 0x19u ) { LABEL_34 : v17 = 0 ; goto LABEL_35 ; } LABEL_19 : v13 = * ( _BYTE * )( v2 + 9 ); v29 = v12 ; if ( v13 < 48 ) { v12 = v29 ; } else if ( v13 <= 57 ) { v14 = v13 - 65 ; goto LABEL_24 ; } v14 = v13 - 65 ; v30 = v12 ; if ( v14 > 0x19u ) goto LABEL_34 ; LABEL_24 : if ( ( unsigned __int8 )( v10 - 48 ) > 9u ) { if ( v30 > 0x19u ) v15 = 0 ; else v15 = 16 * ( v10 - 7 ); } else { v15 = 16 * v10 ; } v16 = * ( _BYTE * )( v2 + 9 ) - 48 ; if ( v16 <= 9u ) goto LABEL_33 ; if ( v14 > 0x19u ) { v16 = 0 ; LABEL_33 : v11 = v15 + v16 ; v17 = 1 ; goto LABEL_35 ; } v17 = 1 ; v11 = v15 + * ( _BYTE * )( v2 + 9 ) - 55 ; LABEL_35 : v18 = _mm_cvtsi32_si128 (( char ) v11 ); v19 = _mm_unpacklo_epi8 ( v18 , v18 ); v27 = _mm_shuffle_epi32 ( _mm_unpacklo_epi16 ( v19 , v19 ), 0 ); if ( v17 ) { v20 = 0 ; if ( dword_4053C4 >= 2 ) { v20 = 16 ; v21 = _mm_mullo_epi32 ( _mm_cvtepu8_epi32 ( _mm_cvtsi32_si128 ( v27 . m128i_u32 [ 0 ])), ( __m128i ) xmmword_404380 ); xmmword_405018 = ( __int128 ) _mm_xor_si128 ( _mm_add_epi32 (( __m128i ) xmmword_404340 , v9 ), _mm_add_epi32 ( v21 , ( __m128i ) xmmword_405018 )); xmmword_405028 = ( __int128 ) _mm_xor_si128 ( _mm_add_epi32 ( _mm_add_epi32 (( __m128i ) xmmword_404350 , ( __m128i ) xmmword_404340 ), v9 ), _mm_add_epi32 ( v21 , ( __m128i ) xmmword_405028 )); xmmword_405038 = ( __int128 ) _mm_xor_si128 ( _mm_add_epi32 ( _mm_add_epi32 (( __m128i ) xmmword_404360 , ( __m128i ) xmmword_404340 ), v9 ), _mm_add_epi32 ( v21 , ( __m128i ) xmmword_405038 )); xmmword_405048 = ( __int128 ) _mm_xor_si128 ( _mm_add_epi32 ( _mm_add_epi32 (( __m128i ) xmmword_404370 , ( __m128i ) xmmword_404340 ), v9 ), _mm_add_epi32 ( v21 , ( __m128i ) xmmword_405048 )); } do { * (( _DWORD * ) & xmmword_405018 + v20 ) = ( v20 + v3 ) ^ ( 16843009 * v11 + * (( _DWORD * ) & xmmword_405018 + v20 )); ++ v20 ; } while ( v20 < 24 ); v22 = 0 ; while ( * (( _BYTE * ) & xmmword_405018 + v22 ) == * (( _BYTE * ) & loc_404148 + v22 ) ) { if ( ++ v22 >= 96 ) { v28 = 0 ; v23 = __rdtsc (); if ( HIDWORD ( v23 ) > HIDWORD ( v26 ) || ( v28 = v23 - v26 , ( unsigned int )( v23 - v26 ) >= 0xFFFFFF ) ) MEMORY [ 0 ] = 0 ; v24 = GetCurrentProcess (); WriteProcessMemory ( v24 , sub_4018A0 , & xmmword_405018 , 0x60u , 0 ); return 1 ; } } } return 0 ; } \u770b\u4e0d\u662f\u7279\u522b\u61c2\uff0c\u4f46\u4e5f\u80fd\u4ece\u4e2d\u8bfb\u5230\u4e00\u70b9\u4e1c\u897f\u3002 if ( ++v4 >= 8 ) \u53ef\u77e5\u8f93\u5165\u5b57\u7b26\u4e32\u81f3\u5c11\u4e3a8\u4f4d \u4e4b\u540e\u5c31\u76f4\u63a5\u52a8\u6001\u8c03\u8bd5\u4e86\uff0c\u8fd9\u91cc\u7528\u7684\u662fx32dbg 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 00401636 | 8 A343E | mov dh , byte ptr ds :[ esi + edi ] | 00401639 | 80 FE 30 | cmp dh , 30 | 30 : '0' 0040163 C | 7 C 0 C | jl justre . 40164 A | 0040163 E | 80 FE 39 | cmp dh , 39 | 39 : '9' 00401641 | 7 F 07 | jg justre . 40164 A | 00401643 | 8 AD6 | mov dl , dh | 00401645 | 80 EA 41 | sub dl , 41 | 00401648 | EB 0 A | jmp justre . 401654 | 0040164 A | 8 AD6 | mov dl , dh | 0040164 C | 80 EA 41 | sub dl , 41 | 0040164 F | 80 FA 19 | cmp dl , 19 | 00401652 | 77 2 C | ja justre . 401680 | 00401654 | 8 ACE | mov cl , dh | 00401656 | C1E0 04 | shl eax , 4 | 00401659 | 80 E9 30 | sub cl , 30 | 0040165 C | 80 F9 09 | cmp cl , 9 | 9 : '\\t' 0040165 F | 77 05 | ja justre . 401666 | 00401661 | 83 C0 D0 | add eax , FFFFFFD0 | 00401664 | EB 08 | jmp justre . 40166 E | 00401666 | 80 FA 19 | cmp dl , 19 | 00401669 | 77 08 | ja justre . 401673 | 0040166 B | 83 C0 C9 | add eax , FFFFFFC9 | 0040166 E | 0 FBECE | movsx ecx , dh | 00401671 | 03 C1 | add eax , ecx | 00401673 | 46 | inc esi | 00401674 | 83 FE 08 | cmp esi , 8 | 00401677 | 7 C BD | jl justre . 401636 | \u8fd9\u91cc\u662f\u5224\u65ad\u51fd\u6570\u7684\u7b2c\u4e00\u4e2a\u5faa\u73af\uff0c\u7528\u9ed1\u76d2\u76f4\u63a5\u731c\u6d4b\uff0c\u8fd9\u91cc\u662f\u8bfb\u53d6\u524d8\u4f4d\u5b57\u7b26\u5230eax 1 2 00401682 | 66 : 0 F6EC0 | movd xmm0 , eax | 00401686 | 66 : 0 F70E8 00 | pshufd xmm5 , xmm0 , 0 | \u8fd9\u4e24\u53e5\uff0c\u5c06\u524d\u516b\u4e3a\u6269\u5c55\u5230xmm5\u4e2d 1 xmm5 12345678123456781234567812345678 \u8fd9\u4e00\u53e5\uff0c\u8bfb\u53d6\u4e86\u540e\u4e24\u4f4d\uff0c\u6240\u4ee5\u4ece\u8fd9\u91cc\u53ef\u4ee5\u77e5\u9053\u8f93\u5165\u5b57\u7b26\u81f3\u5c1110\u4f4d 1 00401693 | 8 A57 08 | mov dl , byte ptr ds :[ edi + 8 ] | edi + 8 : \"AB\" \u7ee7\u7eed\u9ed1\u76d2\uff0c\u53ef\u77e5\uff0c\u5728\u8fd9\u51e0\u53e5\u4e4b\u524d\u7684\u8bed\u53e5\u90fd\u662f\u5728\u6267\u884c\u5c06\u540e\u4e24\u4f4d\u8bfb\u53d6\u5230ecx\u4e2d\uff0c\u800c\u8fd9\u51e0\u53e5\u5219\u662f\u5c06\u5176\u6269\u5c55\u5230xmm0\u4e2d 1 2 3 4 5 6 00401728 | 0 FBECE | movsx ecx , dh | 0040172 B | 66 : 0 F6EC1 | movd xmm0 , ecx | 0040172 F | 66 : 0 F60C0 | punpcklbw xmm0 , xmm0 | 00401733 | 66 : 0 F61C0 | punpcklwd xmm0 , xmm0 | 00401737 | 66 : 0 F70C0 00 | pshufd xmm0 , xmm0 , 0 | 0040173 C | 0 F2945 E0 | movaps xmmword ptr ss :[ ebp - 20 ], xmm0 | \u63a5\u4e0b\u6765\u7531\u5355\u6b65\u8c03\u8bd5\u5c31\u53ef\u77e5,\u5c06\u4e0b\u9762\uff0c\u6bcf\u6b21\u8bfb\u53d616\u4e2a16\u8fdb\u5236\u5b57\u7b26\u8fdb\u884c\u8fd0\u7b97(\u6700\u540e\u4e24\u7ec4\u662f\u5206\u522b\u8fdb\u884c\uff0c\u6bcf\u6b21\u8bfb\u53d64\u4e2a16\u8fdb\u5236\u5b57\u7b26)\uff1a \u5148\u5206\u522b\u52a0\u4e0a\u540e\u4e24\u4f4d\uff0c\u8fd9\u91cc\u5c31\u662f\u52a0\u4e0aAB\uff0c\u518d\u6bcf\u516b\u4f4d\uff0c\u548c\u524d\u516b\u4f4d\u52a0\u4e0ai\u7684\u6570\u5f02\u6216\u540e\u518d\u9001\u56de[00405018] \u4f8b\u5982\uff1a3E5F11D5FE0F0B1DEA90BD987BB39408\u52a0\u4e0aABABABABABABABABABABABABABABABAB\uff0c\u5728\u548c12345678123456781234567812345678\u52a0\u4e0a00000003000000020000000100000000\u540e\u76841234567B1234567A1234567912345678\u5f02\u6216\u540e\u5f97F83EEBFBBB8EE0B284083F3A356B69CB\uff0c\u7136\u540e\u9001\u56de[00405018] 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 00405010 08 94 B3 7 B 98 BD 90 EA / ......... \u00b3{ . \u00bd . \u00ea 00405020 1 D 0 B 0 F FE D5 11 5 F 3 E 37 FC CA 85 B4 F1 3 A FC ... \u00fe\u00d5 . _ > 7 \u00fc\u00ca . \u00b4\u00f1 : \u00fc 00405030 39 0 D 16 EE 35 75 50 3 E 3 B 6 D CF 3 D FC 0 C 5 D 07 9 .. \u00ee 5 uP > ; m\u00cf = \u00fc .]. 00405040 2 E 51 EB 29 EF BB 16 58 3 C 85 50 3 E 40 2 F 16 B0 . Q\u00eb ) \u00ef\u00bb . X < . P >@/ . \u00b0 00405050 FD F0 4 E 07 32 4 E 19 64 03 95 4 B 22 00 9 A 8 B 22 \u00fd\u00f0 N . 2 N . d .. K \"...\" 00405060 91 0 E 0 F FE 1 C 0 D 5 F 07 38 51 EB F9 A0 65 16 FE ... \u00fe .. _ . 8 Q\u00eb\u00f9 e . \u00fe 00405070 49 33 4 F 89 C6 F1 56 FC I3O . \u00c6\u00f1 V\u00fc _____________________________________________________________________________ 00405010 CB 69 6 B 35 3 A 3 F 08 84 / ....... \u00cb ik5 : ? .. 00405020 B2 E0 8 E BB FB EB 3 E F8 37 FC CA 85 B4 F1 3 A FC \u00b2\u00e0 . \u00bb\u00fb\u00eb > \u00f8 7 \u00fc\u00ca . \u00b4\u00f1 : \u00fc 00405030 39 0 D 16 EE 35 75 50 3 E 3 B 6 D CF 3 D FC 0 C 5 D 07 9 .. \u00ee 5 uP > ; m\u00cf = \u00fc .]. 00405040 2 E 51 EB 29 EF BB 16 58 3 C 85 50 3 E 40 2 F 16 B0 . Q\u00eb ) \u00ef\u00bb . X < . P >@/ . \u00b0 00405050 FD F0 4 E 07 32 4 E 19 64 03 95 4 B 22 00 9 A 8 B 22 \u00fd\u00f0 N . 2 N . d .. K \"...\" 00405060 91 0 E 0 F FE 1 C 0 D 5 F 07 38 51 EB F9 A0 65 16 FE ... \u00fe .. _ . 8 Q\u00eb\u00f9 e . \u00fe 00405070 49 33 4 F 89 C6 F1 56 FC I3O . \u00c6\u00f1 V\u00fc 1 2 3 4 5 6 00401831 | 8 A81 18504000 | mov al , byte ptr ds :[ ecx + 405018 ] | 00401837 | 3 A81 48414000 | cmp al , byte ptr ds :[ ecx + 404148 ] | 0040183 D | 75 4 F | jne justre . 40188 E | 0040183 F | 41 | inc ecx | 00401840 | 83 F9 60 | cmp ecx , 60 | 00401843 | 7 C EC | jl justre . 401831 | \u4e0a\u9762\u8fd9\u51e0\u53e5\u5219\u662f\u5c06\u8fd0\u7b97\u540e\u7684\u5b57\u7b26\u548c[404148]\u5904\u7684\u5b57\u7b26\u8fdb\u884c\u5bf9\u6bd4\uff0c\u5373\u662f\u4e3b\u51fd\u6570\u4e2d\u7684\uff08\u4e00\u5f00\u59cbIDA\u7ed9\u8bc6\u522b\u6210\u4e86\u8bed\u53e5\uff0c\u76f4\u63a5undifine\u5373\u53ef\uff09 1 2 3 4 5 6 7 8 9 10 11 12 13 14 ; _BYTE byte_404148 [ 96 ] . rdata : 00404148 byte_404148 db 55h , 8Bh , 0ECh , 83h , 0E4h , 0F0h , 81h , 0ECh , 78h , 2 . rdata : 00404148 ; DATA XREF : sub_401610 + 227 \u2191 r . rdata : 00404148 db 2 dup ( 0 ), 0A1h , 4 , 50h , 40h , 0 , 33h , 0C4h , 89h , 84h . rdata : 00404148 db 24h , 74h , 2 , 2 dup ( 0 ), 0Fh , 10h , 5 , 0A8h , 41h , 40h . rdata : 00404148 db 0 , 0A0h , 0C0h , 41h , 40h , 0 , 56h , 0Fh , 11h , 44h , 24h . rdata : 00404148 db 2Ch , 57h , 0F3h , 0Fh , 7Eh , 5 , 0B8h , 41h , 40h , 0 , 66h . rdata : 00404148 db 0Fh , 0D6h , 44h , 24h , 40h , 0Fh , 10h , 41h , 0Ah , 6Ah , 40h . rdata : 00404148 db 88h , 44h , 24h , 4Ch , 8Dh , 84h , 24h , 0FCh , 1 , 2 dup ( 0 ) . rdata : 00404148 db 6Ah , 0 , 50h , 0Fh , 11h , 44h , 24h , 1Ch , 0E8h , 58h , 0Fh . rdata : 00404148 db 2 dup ( 0 ), 6Ah , 40h , 8Dh , 84h , 24h , 48h , 2 . rdata : 004041A8 xmmword 4E434158435843594445434641534641h . rdata : 004041B8 dq 43585143444B4644h . rdata : 004041C0 db 0 \u77e5\u9053\u4e86\u8fd0\u7b97\u8fc7\u7a0b\uff0c\u90a3\u5c31\u53ef\u4ee5\u6765\u89e3\u51fa\u524d10\u4f4d\uff1a\u6211\u8fd9\u91cc\u901a\u8fc7\u5148\u6c42\u51fa\u524d\u516b\u4f4d,\u518d\u6c42\u51fa\u540e\u4e24\u4f4d\u7684\u65b9\u6cd5 \u56e0\u4e3a\u524d\u516b\u4f4d\uff0c\u5bf9\u76f8\u90bb\u76844\u4e2a16\u8fdb\u5236\u6570\u64cd\u4f5c\u76f8\u5dee\u4e3a1\uff0c\u5219\u53ef\u901a\u8fc7\u6700\u521d\u7684\u4e24\u4f4d\u6c42\u51fa\u6ee1\u8db3\u6761\u4ef6\u76848\u4f4d\u6570,\u518d\u76f8\u51cf\u6c42\u51fa\u6ee1\u8db3\u76f8\u5dee\u4e3a1\u7684\u4e14\u53c2\u4e0e\u8fd0\u7b97\u7684\u540e\u4e24\u4f4d\u662f\u76f8\u540c\u7684\u524d\u516b\u4f4d\uff0c\u518d\u901a\u8fc7\u5df2\u77e5\u524d\u516b\u4f4d\u6765\u7b97\u51fa\u540e\u4e24\u4f4d 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 s = [ 0x55 , 0x8B , 0xEC , 0x83 ] aa = [] key = ( s [ 3 ] << 24 ) + ( s [ 2 ] << 16 ) + ( s [ 1 ] << 8 ) + s [ 0 ] for i in xrange ( 0xFF ): s1 = [ 0x08 , 0x94 , 0xB3 , 0x7B ] for j in xrange ( 4 ): s1 [ j ] += i key2 = ( s1 [ 3 ] << 24 ) + ( s1 [ 2 ] << 16 ) + ( s1 [ 1 ] << 8 ) + s1 [ 0 ] if 0XFFFFFFF < ( key ^ key2 ) <= 0xFFFFFFFF : aa . append ( key ^ key2 ) else : aa . append ( 0 ) s = [ 0xE4 , 0xF0 , 0x81 , 0xEC ] bb = [] key = ( s [ 3 ] << 24 ) + ( s [ 2 ] << 16 ) + ( s [ 1 ] << 8 ) + s [ 0 ] for i in xrange ( 0xFF ): s1 = [ 0x98 , 0xBD , 0x90 , 0xEA ] for j in xrange ( 4 ): s1 [ j ] += i key2 = ( s1 [ 3 ] << 24 ) + ( s1 [ 2 ] << 16 ) + ( s1 [ 1 ] << 8 ) + s1 [ 0 ] if 0XFFFFFFF < ( key ^ key2 ) <= 0xFFFFFFFF : bb . append ( key ^ key2 ) else : bb . append ( 0 ) for i in xrange ( len ( aa )): if aa [ i ] != 0 and bb [ i ] != 0 : if bb [ i ] - aa [ i ] == 1 : print hex ( aa [ i ]) break s = [ 0xE4 , 0xF0 , 0x81 , 0xEC ] s1 = [ 0x98 , 0xBD , 0x90 , 0xEA ] key = ( s [ 3 ] << 24 ) + ( s [ 2 ] << 16 ) + ( s [ 1 ] << 8 ) + s [ 0 ] key2 = ( s1 [ 3 ] << 24 ) + ( s1 [ 2 ] << 16 ) + ( s1 [ 1 ] << 8 ) + s1 [ 0 ] print hex (( key ^ bb [ i ]) - key2 ) \u6700\u7ec8\u5f97\u5230\uff1a 1 2 0 x13242248L 0 x15151515L \u5373\u524d10\u4f4d\u4e3a 1324224815 \uff0c\u4f46\u8f93\u8fdb\u53bb\u8fd8\u662fsorry\uff0c\u90a3\u5c31\u662f\u540e\u9762\u8fd8\u6709\u4e00\u4e9b\u4e1c\u897f \u7ee7\u7eed\u8c03\u8bd5\uff1a 1 00401862 | 8900 | mov dword ptr ds : [ eax ] , eax | 1 2 if ( HIDWORD ( v23 ) > HIDWORD ( v26 ) || ( v28 = v23 - v26 , ( unsigned int )( v23 - v26 ) >= 0xFFFFFF ) ) MEMORY [ 0 ] = 0 ; \u8c03\u8bd5\u5230\u8fd9\u91cc\u7a0b\u5e8f\u4f1a\u5d29\u6e83\uff0c\u6839\u636eIDA\u8fd9\u91ccMEMORY[0] = 0\u4e5f\u662f\u5206\u6790\u4e0d\u51fa\u6765\u7684\uff0c\u76f4\u63a5\u8bbe\u4e0b\u4e00\u53e5\u4e3a\u65b0EIP\u5373\u53ef \u63a5\u7740\u5f00\u59cb\u778e\u731c\u6a21\u5f0f....... 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 00401949 | 8 B8424 F8010000 | mov eax , dword ptr ss :[ esp + 1 F8 ] | 00401950 | 8 D9424 70010000 | lea edx , dword ptr ss :[ esp + 170 ] | 00401957 | 83 C4 18 | add esp , 18 | 0040195 A | 898424 D8010000 | mov dword ptr ss :[ esp + 1 D8 ], eax | 00401961 | 8 B8424 E4010000 | mov eax , dword ptr ss :[ esp + 1 E4 ] | 00401968 | 8 D8C24 D8010000 | lea ecx , dword ptr ss :[ esp + 1 D8 ] | 0040196 F | 898424 DC010000 | mov dword ptr ss :[ esp + 1 DC ], eax | 00401976 | E8 85 F6FFFF | call < justre . sub_401000 > | 0040197 B | 8 B8424 E8010000 | mov eax , dword ptr ss :[ esp + 1 E8 ] | 00401982 | 8 D9424 D8000000 | lea edx , dword ptr ss :[ esp + D8 ] | 00401989 | 898424 D8010000 | mov dword ptr ss :[ esp + 1 D8 ], eax | 00401990 | 8 D8C24 D8010000 | lea ecx , dword ptr ss :[ esp + 1 D8 ] | 00401997 | 8 B8424 EC010000 | mov eax , dword ptr ss :[ esp + 1 EC ] | 0040199 E | 898424 DC010000 | mov dword ptr ss :[ esp + 1 DC ], eax | 004019 A5 | E8 56 F6FFFF | call < justre . sub_401000 > | 004019 AA | 8 B8424 F0010000 | mov eax , dword ptr ss :[ esp + 1 F0 ] | 004019 B1 | 8 D5424 58 | lea edx , dword ptr ss :[ esp + 58 ] | 004019 B5 | 898424 D8010000 | mov dword ptr ss :[ esp + 1 D8 ], eax | 004019 BC | 8 D8C24 D8010000 | lea ecx , dword ptr ss :[ esp + 1 D8 ] | 004019 C3 | 8 B8424 F4010000 | mov eax , dword ptr ss :[ esp + 1 F4 ] | 004019 CA | 898424 DC010000 | mov dword ptr ss :[ esp + 1 DC ], eax | 004019 D1 | E8 2 AF6FFFF | call < justre . sub_401000 > | 004019 D6 | 8 D7424 10 | lea esi , dword ptr ss :[ esp + 10 ] | 004019 DA | 8 D4E 01 | lea ecx , dword ptr ds :[ esi + 1 ] | \u901a\u8fc7\u8fd9\u51e0\u4e2a\u8bed\u53e5\uff0c\u5c06\u8bfb\u8fdb\u6765\u7684 AFSAFCEDYCXCXACNDFKDCQXC \u5206\u6210\u4e09\u90e8\u5206\uff0c\u5e76\u6bcf\u90e8\u5206\u90fd\u5f80\u524d\u586b\u5145\u6210\u4e00\u4e2a\u65b0\u7684\u5b57\u7b26\u4e32 1 2 3 \"AFSAFCEDAFSAFCEDYCXCXACNDFKDCQXC\" \"YCXCFACNAFSAFCEDYCXCXACNDFKDCQXC\" \"DFKDCQXCAFSAFCEDYCXCXACNDFKDCQXC\" \u4e2d\u95f4\u8fd9\u91cc\uff0c\u5728\u524d\u5341\u4f4d\u540e\u7531\u8bfb\u8fdb\u6765\u4e8616\u4e2a\u5b57\u7b26\uff0c\u5e76\u8f6c\u5316\u621016\u4e2a16\u8fdb\u5236\u6570\uff0c\u901a\u8fc7 call <justre.sub_401500> \u52a0\u5bc6\uff0c\u5e76\u4e14\u662f\u5206\u6210\u4e24\u5757\u8fdb\u884c\u52a0\u5bc6\uff0c\u6bcf\u6b21\u52a0\u5bc664\u4f4d\uff0c\u52a0\u5bc6\u8fd0\u7b97\u540e\u5b58\u50a8 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 00401 A50 | 0 FB68434 F9010000 | movzx eax , byte ptr ss :[ esp + esi + 1 F9 ] | 00401 A58 | 0 FB68C34 F8010000 | movzx ecx , byte ptr ss :[ esp + esi + 1 F8 ] | 00401 A60 | 0 FB69434 FC010000 | movzx edx , byte ptr ss :[ esp + esi + 1 FC ] | 00401 A68 | C1E0 08 | shl eax , 8 | 00401 A6B | 0 BC8 | or ecx , eax | 00401 A6D | 0 FB68434 FA010000 | movzx eax , byte ptr ss :[ esp + esi + 1 FA ] | 00401 A75 | C1E0 10 | shl eax , 10 | 00401 A78 | 0 BC8 | or ecx , eax | 00401 A7A | 0 FB68434 FB010000 | movzx eax , byte ptr ss :[ esp + esi + 1 FB ] | 00401 A82 | C1E0 18 | shl eax , 18 | 00401 A85 | 0 BC8 | or ecx , eax | 00401 A87 | 0 FB68434 FD010000 | movzx eax , byte ptr ss :[ esp + esi + 1 FD ] | 00401 A8F | 898 C24 D8010000 | mov dword ptr ss :[ esp + 1 D8 ], ecx | 00401 A96 | 0 FB68C34 FF010000 | movzx ecx , byte ptr ss :[ esp + esi + 1 FF ] | 00401 A9E | C1E0 08 | shl eax , 8 | 00401 AA1 | 0 BD0 | or edx , eax | 00401 AA3 | C1E1 08 | shl ecx , 8 | 00401 AA6 | 0 FB68434 FE010000 | movzx eax , byte ptr ss :[ esp + esi + 1 FE ] | 00401 AAE | 0 BC8 | or ecx , eax | 00401 AB0 | 8 D4424 58 | lea eax , dword ptr ss :[ esp + 58 ] | 00401 AB4 | C1E1 10 | shl ecx , 10 | 00401 AB7 | 0 BCA | or ecx , edx | 00401 AB9 | 8 D9424 58010000 | lea edx , dword ptr ss :[ esp + 158 ] | 00401 AC0 | 50 | push eax | 00401 AC1 | 8 D8424 DC000000 | lea eax , dword ptr ss :[ esp + DC ] | 00401 AC8 | 898 C24 E0010000 | mov dword ptr ss :[ esp + 1 E0 ], ecx | 00401 ACF | 50 | push eax | 00401 AD0 | 8 D8C24 E0010000 | lea ecx , dword ptr ss :[ esp + 1 E0 ] | 00401 AD7 | E8 24 FAFFFF | call < justre . sub_401500 > | \u524d\u9762\u662f\u53d6\uff0c\u540e\u9762\u662f\u5b58\u50a8\uff0c\u51fd\u6570\u7528\u6765\u52a0\u5bc6\u8fd0\u7b97 00401 ADC | 8 B8C24 E0010000 | mov ecx , dword ptr ss :[ esp + 1 E0 ] | 00401 AE3 | 83 C4 08 | add esp , 8 | 00401 AE6 | 888 C34 38020000 | mov byte ptr ss :[ esp + esi + 238 ], cl | 00401 AED | 8 BC1 | mov eax , ecx | 00401 AEF | C1E8 08 | shr eax , 8 | 00401 AF2 | 888434 39020000 | mov byte ptr ss :[ esp + esi + 239 ], al | 00401 AF9 | 8 BC1 | mov eax , ecx | 00401 AFB | C1E8 10 | shr eax , 10 | 00401 AFE | 888434 3 A020000 | mov byte ptr ss :[ esp + esi + 23 A ], al | 00401 B05 | C1E9 18 | shr ecx , 18 | 00401 B08 | 888 C34 3 B020000 | mov byte ptr ss :[ esp + esi + 23 B ], cl | 00401 B0F | 8 B8C24 DC010000 | mov ecx , dword ptr ss :[ esp + 1 DC ] | 00401 B16 | 8 BC1 | mov eax , ecx | 00401 B18 | 888 C34 3 C020000 | mov byte ptr ss :[ esp + esi + 23 C ], cl | 00401 B1F | C1E8 08 | shr eax , 8 | 00401 B22 | 888434 3 D020000 | mov byte ptr ss :[ esp + esi + 23 D ], al | 00401 B29 | 8 BC1 | mov eax , ecx | 00401 B2B | C1E8 10 | shr eax , 10 | 00401 B2E | C1E9 18 | shr ecx , 18 | 00401 B31 | 888434 3 E020000 | mov byte ptr ss :[ esp + esi + 23 E ], al | 00401 B38 | 888 C34 3 F020000 | mov byte ptr ss :[ esp + esi + 23 F ], cl | 00401 B3F | 83 C6 08 | add esi , 8 | 00401 B42 | 3 BF7 | cmp esi , edi | edi : & \"D:\\\\CTF\\\\Games\\\\2019\\\\QWB\\\\task_JustRe5\\\\JustRe5\\\\JustRe.exe\" 00401 B44 | 0 F8C 06 FFFFFF | jl justre . 401 A50 | \u6700\u540e\u8fd9\u4e00\u90e8\u5206\u662f\u5bf9\u6bd4\uff0c\u800c\u4e14\u5bf9\u6bd4\u7684\u53ea\u6709\u524d4\u7ec4\uff0c\u540e\u4e24\u7ec4\u6570\u662f\u56fa\u5b9a\u4e0d\u53d8\u7684 1 2 3 4 5 6 7 00401 B4A | C74424 10 507 CA9E6 | mov dword ptr ss :[ esp + 10 ], E6A97C50 | 00401 B52 | 33 C0 | xor eax , eax | 00401 B54 | C74424 14 8709 CEFA | mov dword ptr ss :[ esp + 14 ], FACE0987 | 00401 B5C | C74424 18 20 D50DCF | mov dword ptr ss :[ esp + 18 ], CF0DD520 | 00401 B64 | C74424 1 C 90 BB976C | mov dword ptr ss :[ esp + 1 C ], 6 C97BB90 | 00401 B6C | C74424 20 9090 F6B0 | mov dword ptr ss :[ esp + 20 ], B0F69090 | 00401 B74 | C74424 24 7 BA6A4E8 | mov dword ptr ss :[ esp + 24 ], E8A4A67B | 1 2 3 00401 B80 | 8 A4C04 10 | mov cl , byte ptr ss :[ esp + eax + 10 ] | 00401 B84 | 3 A8C04 38020000 | cmp cl , byte ptr ss :[ esp + eax + 238 ] | 00401 B8B | 75 1 F | jne justre . 401 BAC | \u6839\u636e\u4e0a\u9762\u7684\u5206\u6790\uff0c\u731c\u6d4b\u8fd9\u662f\u4e00\u4e2a64\u4f4d\u7684\u5206\u5757\u52a0\u5bc6\u7b97\u6cd5\uff0c\u67e5\u4e86\u4e00\u4e0b\u53d1\u73b0\u662fDES3 ``` \u4e09\u91cd DES \u7684\u52a0\u89e3\u5bc6\u65b9\u5f0f\u5982\u4e0b C=Ek3(Dk2(Ek1(P)))C=Ek3(Dk2(Ek1(P))) P=Dk1(Ek2(Dk3(C)))P=Dk1(Ek2(Dk3(C))) \u5728\u9009\u62e9\u5bc6\u94a5\u65f6\uff0c\u53ef\u4ee5\u6709\u4e24\u79cd\u65b9\u6cd5 3 \u4e2a\u4e0d\u540c\u7684\u5bc6\u94a5\uff0ck1\uff0ck2\uff0ck3 \u4e92\u76f8\u72ec\u7acb\uff0c\u4e00\u5171 168 \u6bd4\u7279\u3002 2 \u4e2a\u4e0d\u540c\u7684\u5bc6\u94a5\uff0ck1 \u4e0e k2 \u72ec\u7acb\uff0ck3=k1\uff0c112 \u6bd4\u7279\u3002 ``` \u6700\u540e\u76f4\u63a5\u901a\u8fc7pyCrypto\u6a21\u5757\u5bfc\u5165DES3\uff0c\u89e3\u51fa\u540e16\u4f4d\uff0c\u811a\u672c\u5982\u4e0b\u5982\u4e0b 1 2 3 4 5 6 7 key = \"AFSAFCEDYCXCXACNDFKDCQXC\" cipher = [ 0x50 , 0x7C , 0xA9 , 0xE6 , 0x87 , 0x09 , 0xCE , 0xFA , 0x20 , 0xD5 , 0x0D , 0xCF , 0x90 , 0xBB , 0x97 , 0x6C ] flag2 = '' . join ( map ( chr , cipher )) des3 = DES3 . new ( key ) print des3 . decrypt ( flag2 ) \u6700\u7ec8\u811a\u672c\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 from Crypto . Cipher import DES3 s = [ 0x55 , 0x8B , 0xEC , 0x83 ] aa = [] key = ( s [ 3 ] << 24 ) + ( s [ 2 ] << 16 ) + ( s [ 1 ] << 8 ) + s [ 0 ] for i in xrange ( 0xFF ) : s1 = [ 0x08 , 0x94 , 0xB3 , 0x7B ] for j in xrange ( 4 ) : s1 [ j ] += i key2 = ( s1 [ 3 ] << 24 ) + ( s1 [ 2 ] << 16 ) + ( s1 [ 1 ] << 8 ) + s1 [ 0 ] if 0 XFFFFFFF < ( key ^ key2 ) <= 0xFFFFFFFF : aa . append ( key ^ key2 ) else : aa . append ( 0 ) s = [ 0xE4 , 0xF0 , 0x81 , 0xEC ] bb = [] key = ( s [ 3 ] << 24 ) + ( s [ 2 ] << 16 ) + ( s [ 1 ] << 8 ) + s [ 0 ] for i in xrange ( 0xFF ) : s1 = [ 0x98 , 0xBD , 0x90 , 0xEA ] for j in xrange ( 4 ) : s1 [ j ] += i key2 = ( s1 [ 3 ] << 24 ) + ( s1 [ 2 ] << 16 ) + ( s1 [ 1 ] << 8 ) + s1 [ 0 ] if 0 XFFFFFFF < ( key ^ key2 ) <= 0xFFFFFFFF : bb . append ( key ^ key2 ) else : bb . append ( 0 ) for i in xrange ( len ( aa )) : if aa [ i ] != 0 and bb [ i ] != 0 : if bb [ i ] - aa [ i ] == 1 : print hex ( aa [ i ]) break s = [ 0xE4 , 0xF0 , 0x81 , 0xEC ] s1 = [ 0x98 , 0xBD , 0x90 , 0xEA ] key = ( s [ 3 ] << 24 ) + ( s [ 2 ] << 16 ) + ( s [ 1 ] << 8 ) + s [ 0 ] key2 = ( s1 [ 3 ] << 24 ) + ( s1 [ 2 ] << 16 ) + ( s1 [ 1 ] << 8 ) + s1 [ 0 ] print hex (( key ^ bb [ i ]) - key2 ) a = ( key ^ bb [ i ]) - key2 key = \"AFSAFCEDYCXCXACNDFKDCQXC\" cipher = [ 0x50 , 0x7C , 0xA9 , 0xE6 , 0x87 , 0x09 , 0xCE , 0xFA , 0x20 , 0xD5 , 0x0D , 0xCF , 0x90 , 0xBB , 0x97 , 0x6C ] flag2 = '' . join ( map ( chr , cipher )) des3 = DES3 . new ( key ) print hex ( aa [ i ])[ 2 : 10 ] + hex ( a )[ 2 : 4 ] + des3 . decrypt ( flag2 ) \u5f97flag{13242248150dcc509a6f75849b}","title":"JustRe"},{"location":"ctf_write_up/2019/2019qwb/#_ad","text":"\u9898\u76ee\uff1a \u5f3a\u7f51\u5148\u950b_AD \u8fd9\u9053\u9898\u5c31\u662f\u4e00\u9053\u6c34\u98980.0 \u4e0b\u8f7d\u540e\u62d6\u8fdbIDA\u91cc\u6253\u5f00\uff0c\u76f4\u63a5\u627e\u5230mian\u51fd\u6570 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 __int64 __fastcall main ( __int64 a1 , char ** a2 , char ** a3 ) { char v4 [ 128 ]; // [rsp+0h] [rbp-150h] char key [ 45 ]; // [rsp+80h] [rbp-D0h] __int64 v6 ; // [rsp+B0h] [rbp-A0h] __int64 v7 ; // [rsp+B8h] [rbp-98h] __int64 v8 ; // [rsp+C0h] [rbp-90h] __int16 v9 ; // [rsp+C8h] [rbp-88h] char v10 ; // [rsp+D0h] [rbp-80h] char * v11 ; // [rsp+140h] [rbp-10h] int i ; // [rsp+14Ch] [rbp-4h] puts ( \"=== Strong Network Pioneer === \\n\\n \" ); __isoc99_scanf ( \"%s\" , & v10 ); v6 = 7953769703030221169LL ; v7 = 7954876941086586983LL ; v8 = 7956005061827062375LL ; v9 = 105 ; key [ 0 ] = 0x5A ; key [ 1 ] = 0x6D ; key [ 2 ] = 0x78 ; key [ 3 ] = 104 ; key [ 4 ] = 90 ; key [ 5 ] = 51 ; key [ 6 ] = 116 ; key [ 7 ] = 116 ; key [ 8 ] = 89 ; key [ 9 ] = 87 ; key [ 10 ] = 90 ; key [ 11 ] = 104 ; key [ 12 ] = 97 ; key [ 13 ] = 51 ; key [ 14 ] = 86 ; key [ 15 ] = 104 ; key [ 16 ] = 97 ; key [ 17 ] = 87 ; key [ 18 ] = 120 ; key [ 19 ] = 104 ; key [ 20 ] = 97 ; key [ 21 ] = 88 ; key [ 22 ] = 70 ; key [ 23 ] = 112 ; key [ 24 ] = 89 ; key [ 25 ] = 87 ; key [ 26 ] = 53 ; key [ 27 ] = 107 ; key [ 28 ] = 89 ; key [ 29 ] = 87 ; key [ 30 ] = 57 ; key [ 31 ] = 105 ; key [ 32 ] = 102 ; key [ 33 ] = 81 ; key [ 34 ] = 61 ; key [ 35 ] = 61 ; v11 = & v10 ; sub_4005B7 ( & v10 , ( __int64 ) v4 ); for ( i = 0 ; i <= 44 ; ++ i ) { if ( v4 [ i ] != ( unsigned __int8 ) key [ i ] ) { puts ( \"you're not \\n \" ); return 0LL ; } } puts ( \"yes, you are! \\n \" ); return 0LL ; } \u6700\u4e0b\u9762\u7684\u5faa\u73af\u662f\u5224\u65ad\uff0c\u4e5f\u5c31\u662f\u8bf4\u6211\u4eec\u8f93\u5165\u7684v4\u8981\u548ckey\u76f8\u7b49 \u8fdb\u5165sub_4005B7 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 __int64 __fastcall sub_4005B7 ( const char * a1 , __int64 a2 ) { int v2 ; // eax int v3 ; // eax int v4 ; // eax int v5 ; // ST18_4 int v6 ; // eax int v7 ; // eax int v8 ; // eax int v10 ; // [rsp+10h] [rbp-10h] unsigned __int8 v11 ; // [rsp+17h] [rbp-9h] unsigned __int8 v12 ; // [rsp+17h] [rbp-9h] int v13 ; // [rsp+18h] [rbp-8h] int v14 ; // [rsp+18h] [rbp-8h] int v15 ; // [rsp+18h] [rbp-8h] int v16 ; // [rsp+1Ch] [rbp-4h] v16 = 0 ; v13 = 0 ; v10 = strlen ( a1 ); while ( v16 < v10 ) { v2 = v13 ; v14 = v13 + 1 ; * ( _BYTE * )( a2 + v2 ) = base64 [( const unsigned __int8 ) a1 [ v16 ] >> 2 ]; v11 = 16 * a1 [ v16 ] & 0x30 ; if ( v10 <= v16 + 1 ) { v4 = v14 ; v5 = v14 + 1 ; * ( _BYTE * )( a2 + v4 ) = base64 [ v11 ]; * ( _BYTE * )( v5 + a2 ) = 61 ; v6 = v5 + 1 ; v13 = v5 + 2 ; * ( _BYTE * )( v6 + a2 ) = 61 ; break ; } v3 = v14 ; v15 = v14 + 1 ; * ( _BYTE * )( a2 + v3 ) = base64 [(( const unsigned __int8 ) a1 [ v16 + 1 ] >> 4 ) | v11 ]; v12 = 4 * a1 [ v16 + 1 ] & 0x3C ; if ( v10 <= v16 + 2 ) { * ( _BYTE * )( a2 + v15 ) = base64 [ v12 ]; v8 = v15 + 1 ; v13 = v15 + 2 ; * ( _BYTE * )( v8 + a2 ) = 61 ; break ; } * ( _BYTE * )( a2 + v15 ) = base64 [(( const unsigned __int8 ) a1 [ v16 + 2 ] >> 6 ) | v12 ]; v7 = v15 + 1 ; v13 = v15 + 2 ; * ( _BYTE * )( a2 + v7 ) = base64 [ a1 [ v16 + 2 ] & 0x3F ]; v16 += 3 ; } * ( _BYTE * )( v13 + a2 ) = 0 ; return 0LL ; } \u770b\u7740\u5f88\u719f\u6089....\u76f4\u63a5\u5c31\u80fd\u627e\u5230base64\u52a0\u5bc6table\u8868 \u5199\u4e2a\u811a\u672c\u8dd1\u4e00\u4e0b\uff0cflag\u5373\u51fa 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 import base64 key = [ 0 for i in xrange ( 45 )] key [ 0 ] = 0x5A key [ 1 ] = 0x6D key [ 2 ] = 0x78 key [ 3 ] = 104 key [ 4 ] = 90 key [ 5 ] = 51 key [ 6 ] = 116 key [ 7 ] = 116 key [ 8 ] = 89 key [ 9 ] = 87 key [ 10 ] = 90 key [ 11 ] = 104 key [ 12 ] = 97 key [ 13 ] = 51 key [ 14 ] = 86 key [ 15 ] = 104 key [ 16 ] = 97 key [ 17 ] = 87 key [ 18 ] = 120 key [ 19 ] = 104 key [ 20 ] = 97 key [ 21 ] = 88 key [ 22 ] = 70 key [ 23 ] = 112 key [ 24 ] = 89 key [ 25 ] = 87 key [ 26 ] = 53 key [ 27 ] = 107 key [ 28 ] = 89 key [ 29 ] = 87 key [ 30 ] = 57 key [ 31 ] = 105 key [ 32 ] = 102 key [ 33 ] = 81 key [ 34 ] = 61 key [ 35 ] = 61 flag = \"\" for i in xrange ( len ( key )) : flag += chr ( key [ i ]) flag = base64 . b64decode ( flag ) print flag flag{mafakuailaiqiandaob}","title":"\u5f3a\u7f51\u5148\u950b_AD"},{"location":"ctf_write_up/2019/2019qwb/#webassembly","text":"\u9898\u76ee\uff1a webassembly \u8fd9\u662f\u6211\u7b2c\u4e00\u6b21\u63a5\u89e6wasm\uff0c\u8bb0\u5f55\u4e00\u4e0b0.0 \u9898\u76ee\u4e0b\u4e0b\u6765\u53ea\u6709\u4e09\u4e2a\u6587\u4ef6\uff0c\u5206\u522b\u662f .js , .wasm , .html wasm\u4ecb\u7ecd\u5c31\u4e0d\u5728\u8fd9\u91cc\u4ecb\u7ecd\u4e86\uff0c\u6709\u5174\u8da3\u53ef\u4ee5\u5230\u8fd9\u91cc\u770b\u770b wasm\u5c31\u662f\u4e00\u5806\u4e8c\u8fdb\u5236\u6587\u4ef6\uff0c\u5c31\u5f88\u5934\u79c3\u3002\u4f46\u53ef\u4ee5\u7528 wabt\u5de5\u5177 \u8f6c\u6210 .c \u548c .h \u6587\u4ef6 1 $ . / wasm2c webassembly . wasm - o webassembly . c \u4e0d\u8fc7\u8fd8\u662f\u770b\u4e0d\u61c2\uff0c\u4ee3\u7801\u884c\u6570\u8d3c\u6050\u601618567\u884c..............\u540e\u6765Apeng\u5927\u4f6c\u63d0\u4f9b\u4e86\u4e00\u79cd\u4f18\u5316\u65b9\u6cd5\uff1a\u7528gcc\u7f16\u8bd1\u540e\u5728\u7528ida\u53cd\u7f16\u8bd1 \u5c06\u4e4b\u524d\u53cd\u7f16\u8bd1\u51fa\u6765\u7684wasm.c\uff0cwasm.h\uff0c\u4ee5\u53cawabt\u9879\u76ee\u5185\u7684wasm-rt.h\uff0cwasm-rt-impl.c\uff0cwasm-rt-impl.h\u4e09\u4e2a\u6587\u4ef6\u653e\u5230\u540c\u4e00\u4e2a\u6587\u4ef6\u5939\u3002 \u76f4\u63a5gcc wasm.c\u4f1a\u62a5\u9519\uff0c\u56e0\u4e3a\u5f88\u591awasm\u7684\u51fd\u6570\u6ca1\u6709\u5177\u4f53\u7684\u5b9e\u73b0\u3002\u4f46\u662f\u6211\u4eec\u53ef\u4ee5\u53ea\u7f16\u8bd1\u4e0d\u94fe\u63a5\uff0c\u6211\u4eec\u5173\u5fc3\u7684\u53ea\u662f\u7a0b\u5e8f\u672c\u8eab\u7684\u903b\u8f91\uff0c\u4e0d\u9700\u8981\u771f\u6b63\u7f16\u8bd1\u51fa\u80fd\u8fd0\u884c\u7684elf\u6765\u3002 1 $ gcc - c wasm . c - o wasm . o \u5f97\u5230\u7684\u8fd8\u672a\u8fde\u63a5\u7684elf\u6587\u4ef6wasm.o \u73b0\u5728\u5c31\u53ef\u4ee5\u4e22\u8fdbida\u6765\u5206\u6790\u4e86\uff0c\u6bd4\u4e4b\u524d\u7684wasm.c\u53cb\u597d\u5f88\u591a\u3002 \u5206\u6790\u51fa\u6765\u662f\uff0cXTEA\u52a0\u5bc6\uff0c\u89e3\u5bc6\u811a\u672c(Apeng\u5927\u4f6c\u592a\u5f3a\u4e860.0)\u5982\u4e0b\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 # include \" pch.h \" # include < iostream > using namespace std ; void encipher ( unsigned int num_rounds , uint32_t v [ 2 ], uint32_t const key [ 4 ] ) { unsigned int i ; uint32_t v0 = v [ 0 ], v1 = v [ 1 ], sum = 0 , delta = 0 x9E3779B9 ; for ( i = 0 ; i < num_rounds; i++) { v0 += ((( v1 << 4 ) ^ ( v1 >> 5 )) + v1 ) ^ ( sum + key [ sum & 3 ] ) ; sum += delta ; v1 += ((( v0 << 4 ) ^ ( v0 >> 5 )) + v0 ) ^ ( sum + key [ ( sum >> 11 ) & 3 ] ) ; } v [ 0 ] = v0 ; v[1] = v1; } void decipher ( unsigned int num_rounds , uint32_t v [ 2 ], uint32_t const key [ 4 ] ) { unsigned int i ; uint32_t v0 = v [ 0 ], v1 = v [ 1 ], delta = 0 x9E3779B9 , sum = delta * num_rounds ; for ( i = 0 ; i < num_rounds; i++) { v1 -= ((( v0 << 4 ) ^ ( v0 >> 5 )) + v0 ) ^ ( sum + key [ ( sum >> 11 ) & 3 ] ) ; sum -= delta ; v0 -= ((( v1 << 4 ) ^ ( v1 >> 5 )) + v1 ) ^ ( sum + key [ sum & 3 ] ) ; } v [ 0 ] = v0 ; v[1] = v1; } int main () { int i ; unsigned int v [ 10 ] = { 2586051617 L , 2764128737 L , 1835204653 , 2601945884 L , 95579550 , 993221996 , 1624609160 , 781843991 , 879125044 , 0 x7D61 } ; unsigned int k [ 4 ] = { 0 , 0 , 0 , 0 } ; for ( i = 0 ; i < 8; i += 2) decipher ( 32 , & v [ i ], k ) ; cout << ( char * ) v << endl ; }","title":"webassembly"},{"location":"ctf_write_up/2019/2019rctf/","text":"\u8d5b\u540e\u590d\u73b0\uff0c\u5b66\u4e60\u5b66\u4e60\uff01 \u55ef,\u4e3b\u529e\u65b9\u5f88\u559c\u6b22XXTEA\u54400.0 babyre1 \u9898\u76ee\uff1a babyre1 \u8fd0\u884c\uff1a 1 2 Input right flag you can got 'Bingo!' :ssssss input is too short! IDA\u6253\u5f00\uff0c\u627e\u5230\u4e3b\u51fd\u6570\uff1a \u5206\u6790\u5f97\uff1a\u8f93\u5165\u5bc6\u6587,\u957f\u5ea6\u4e3a16\uff0c\u8303\u56f40-9\uff0ca-z \u4e4b\u540e\u7528xxtea\u89e3\u5bc6\uff0c\u540e\u8fdb\u884cCRC16_CCITT\u6821\u9a8c\uff0c\u7ed3\u679c\u5e94\u8be5\u7b49\u4e8e0x69E2\u3002\u800c\u540e\u5bf9\u89e3\u5bc6\u540e\u7684\u524dN\u4f4d\u5f02\u62160x17\uff0c\u6839\u636e\u63d0\u793a\uff0c\u6700\u7ec8\u5e94\u8be5\u5f97\u5230Bingo!\u3002 \u800cxxtea\u89e3\u5bc6\u4e2d\uff1a 1 2 3 4 5 6 7 8 9 10 v11 = ( unsigned __int8 ) v8 [ v6 - 1 ]; v8 [ v6 ] = 0 ; * v5 = v6 ; if ( v6 > v11 && v11 <= 4 ) { v13 = v6 - v11 ; * v5 = v13 ; v8 [ v13 ] = 0 ; return v8 ; } \u6839\u636e\u89e3\u5bc6\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u8282\u7684\u5927\u5c0fN\uff0c\u628a\u660e\u6587\u5012\u6570\u7b2cN\u4f4d\u7528\"\\0\"\u622a\u65ad\u3002 \u90a3\u4e48\u6700\u540e\u4e00\u4e2a\u5b57\u8282\u7684\u5927\u5c0f\u5c31\u5e94\u8be5\u4e3a2\uff0c\u5373\u6700\u7ec8\u5e94\u8be5\u4e3a \u201cBingo!xx\\x02\u201d ,xx\u672a\u77e5\uff0c\u800c Bingo\uff01 \u5e94\u5f02\u62160x17. \u53ef\u4ee5\u901a\u8fc7\u63d0\u793a\uff1a MD5(rctf{your answer}) == 5f8243a662cf71bf31d2b2602638dc1d \u7206\u7834\u51fa\u6765\u3002 \u800c\u6211\u8fd9\u91cc\u662f\u9760\u731c\u7684\uff0c\u4e5f\u4e0d\u96be\u731c\uff0c\\x02\u5f88\u50cf\u52a0\u5bc6\u65f6\u7684padding\uff0c\u6240\u4ee5\u731c\u6d4bXXTEA\u89e3\u5bc6\u540e\u7684\u660e\u6587\u5e94\u8be5\u4e3a \u201cBingo!\\x02\\x02\u201d (\u5176\u4e2dBingo\uff01\u5e94\u4e3a\u5f02\u62160x17\u540e\u7684\u7ed3\u679c) \u5219\u89e3\u5bc6\u811a\u672c\u5982\u4e0b\uff08XXTEA\u4ee3\u7801\u7f51\u4e0a\u6284\u76840.0\uff09\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 #include <iostream> #include <stdio.h> #include <string.h> #include <stdint.h> using namespace std ; #define DELTA 0x9e3779b9 #define MX (((z >> 5 ^ y << 2) + (y >> 3 ^ z << 4)) ^ ((sum ^ y) + (key[(p & 3) ^ e] ^ z))) void btea ( uint32_t * v , int n , uint32_t const key [ 4 ]) { uint32_t y , z , sum ; unsigned p , rounds , e ; if ( n > 1 ) /* Coding Part */ { rounds = 6 + 52 / n ; sum = 0 ; z = v [ n - 1 ]; do { sum += DELTA ; e = ( sum >> 2 ) & 3 ; for ( p = 0 ; p < n - 1 ; p ++ ) { y = v [ p + 1 ]; z = v [ p ] += MX ; } y = v [ 0 ]; z = v [ n - 1 ] += MX ; } while ( -- rounds ); } else if ( n < - 1 ) /* Decoding Part */ { n = - n ; rounds = 6 + 52 / n ; sum = rounds * DELTA ; y = v [ 0 ]; do { e = ( sum >> 2 ) & 3 ; for ( p = n - 1 ; p > 0 ; p -- ) { z = v [ p - 1 ]; y = v [ p ] -= MX ; } z = v [ n - 1 ]; y = v [ 0 ] -= MX ; sum -= DELTA ; } while ( -- rounds ); } } void decode ( char * cipher ) { int i = 0 ; for ( i = 0 ; i < 8 ; i ++ ) { char chr1 = cipher [ i ] >> 4 & 0xF ; char chr2 = cipher [ i ] & 0xF ; if ( chr1 < 10 ) cout << char ( chr1 + 0x30 ); else cout << char ( chr1 + 0x61 - 10 ) ; if ( chr2 < 10 ) cout << char ( chr2 + 0x30 ); else cout << char ( chr2 + 0x61 - 10 ); } } int main () { uint32_t cipher [] = { 0 , 0 }; char cipher1 [] = \"Bingo! \\x02\\x02 \" ; int i = 0 ; uint32_t key [] = { 0xE0C7E0C7 , 0xC6F1D3D7 , 0xC6D3C6D3 , 0xC4D0D2CE }; for ( i = 0 ; i < 6 ; i ++ ) { cipher1 [ i ] ^= 0x17 ; } memcpy ( cipher , cipher1 , 8 ); btea ( cipher , 2 , key ); cout << \"rctf{\" ; decode (( char * ) cipher ); cout << \"}\" ; return 0 ; } \u5f97\u5230flag\uff1a rctf{05e8a376e4e0446e} babyre2 \u9898\u76ee\uff1a babyre2 \u7a0b\u5e8f\u903b\u8f91\uff1a \u8f93\u51658-16\u4f4d\u957faccount\uff0c8-16\u4f4d\u957fpassword\uff0c\u4e0d\u8d85\u8fc70x400\u957f\u5ea6\u7684data\uff0cdata\u8303\u56f4\uff1a 1 ( buf [ i ] <= '/' || buf [ i ] > '9' ) && ( buf [ i ] <= '`' || buf [ i ] > 'f' ) && ( buf [ i ] <= '@' || buf [ i ] > 'F' ) ) \u540e\u4ee5account\u4f5c\u4e3akey\uff0c\u52a0\u5bc6\u4e00\u7ec4\u5e38\u91cf\u3002 1 v12 = XXtea_1 (( __int64 ) & account , ( __int64 ) & v6 ); 1 0xF8u,0xD4u,0xD5u,0xDCu,0xC9u,0xDAu,0xCFu,0xCEu,0xD7u,0xDAu,0xCFu,0xD2u,0xD4u,0xD5u,0xC8u,0x9Au,0xB1u password\u7684\u6bcf\u4e00\u4f4d\u51cf\u53bb\u5341\u4f4d\u548c\u4e2a\u4f4d\uff0c\u51cf\u53bb\u7684\u7ed3\u679c\u4f5c\u4e3a\u4e0b\u6807\u4ecedata\u53d6\u6570\u636e\uff0c\u5f97\u5230data2. 1 2 3 4 5 6 7 8 9 10 for ( i = 0 ; i < v10 ; ++ i ) { v11 = a1 [ i ] - ( a1 [ i ] % 10 + a1 [ i ] / 10 ); if ( v11 >= v6 ) { v8 = 0 ; break ; } ptr [ i ] = * ( _BYTE * )( v11 + a2 ); } \u7528data2\u5f02\u62160xCC\u4f5c\u4e3akey\u5bc6\u4e4b\u524d\u7684\u5bc6\u6587\u3002 1 2 3 for ( j = 0 ; j < a2 ; ++ j ) * (( _BYTE * ) & dest + j ) ^= 0xCCu ; ptr = XXTEA_2 ( v6 , v7 , ( __int64 ) & dest , 16 , & dword_204058 ); \u4e8e\u662f\u76f4\u63a5\u6784\u9020account:'1'*16\uff0cdata'fd'*256\uff0cpassword\u4efb\u610f16\u4f4d\u5373\u53ef \u811a\u672c\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 from pwn import * p = process ( './babyre2' ) p . recvuntil ( 'Please input the account:' ) p . send ( '1' * 16 ) p . recvuntil ( 'Please input the password:' ) p . send ( '1' * 16 ) p . recvuntil ( 'Please input the data:' ) p . send ( 'fd' * 256 ) p . interactive () # print(hex(0x31 ^ 0xCC)) p.s.\u8fd9\u9898\u8fd8\u6709\u65f6\u95f4\u9650\u5236,\u8c03\u8bd5\u7684\u65f6\u5019\u5c31\u5f88\u559c\u6b22Time Out!0.0.... DontEatMe \u9898\u76ee\uff1a DontEatMe \u8fd0\u884c\u7a0b\u5e8f\uff1a 1 2 3 4 LiHua is trapped on an isolated island. One day, he caught a fish. Suddenly,the fish said: \"Dont eat me! I am Fish God,if you release me,as return ,you have one wish.\" Li said : I want to know how to escape from this island. Fish said: \u6839\u636e\u8f93\u51fa\u627e\u5230\u4e3b\u51fd\u6570\uff0c\u4e00\u5f00\u59cb\u6709ZwSetInformationThread\u53cd\u8c03\u8bd5\uff1a 1 2 3 v70 = GetModuleHandleA ( \"Ntdll\" ); v71 = GetProcAddress ( v70 , \"ZwSetInformationThread\" ); v72 = GetCurrentThread (); \u76f4\u63a5\u8df3\u8fc7\u5c31\u53ef\u4ee5\u4e86\uff0c\u4f2a\u968f\u673a\u6570\u751f\u6210\u4ee5\u4e00\u4e32key\uff0c\u63a5\u4e0b\u6765\u5e94\u8be5\u662f\u90a3\u4e2a\u51fd\u6570\u5e94\u8be5\u662fBlowfish 1 2 3 4 5 6 7 8 9 10 11 12 srand ( 0xDEADBEEF ); ..... do key [ v6 ++ ] = rand (); while ( v6 < 8 ); key [ 0 ] = 0 ; v56 = * ( _QWORD * ) \"fishFISH\" ; * ( _WORD * ) & key [ 1 ] = * ( _WORD * ) \"fishFISH\" ^ * ( _WORD * )(( char * ) & v56 + 1 ); * ( _WORD * ) & key [ 3 ] = * ( _WORD * )(( char * ) & v56 + 1 ) ^ * ( _WORD * )(( char * ) & v56 + 3 ); * ( _WORD * ) & key [ 5 ] = WORD1 ( v56 ) ^ * ( _WORD * )(( char * ) & v56 + 5 ); key [ 7 ] = BYTE3 ( v56 ) ^ aFishfish [ 7 ]; Blowfish (( int ) & v49 ); \u7279\u5f81\u4e3a\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 .rdata: 000 B3118 dword_B3118 dd 243 F6A88h ; DATA XREF: Blowfish+12\u2191o .rdata: 000 B311C dd 85 A308D3h .rdata: 000 B3120 dd 13198 A2Eh .rdata: 000 B3124 dd 3707344 h .rdata: 000 B3128 dd 0 A4093822h .rdata: 000 B312C dd 299 F31D0h .rdata: 000 B3130 dd 82 EFA98h .rdata: 000 B3134 dd 0 EC4E6C89h .rdata: 000 B3138 dd 452821 E6h .rdata: 000 B313C dd 38 D01377h .rdata: 000 B3140 dd 0 BE5466CFh .rdata: 000 B3144 dd 34 E90C6Ch .rdata: 000 B3148 dd 0 C0AC29B7h .rdata: 000 B314C dd 0 C97C50DDh .rdata: 000 B3150 dd 3 F84D5B5h .rdata: 000 B3154 dd 0 B5470917h .rdata: 000 B3158 dd 9216 D5D9h .rdata: 000 B315C dd 8979 FB1Bh \u63a5\u4e0b\u6765\u8fd9\u91cc\uff0c\u65e0\u8bba\u8f93\u4ec0\u4e48\uff0c\u8fd0\u7b97\u540ev8 = 8\u3002\u6240\u4ee5else\u91cc\u9762\u90a3\u4e00\u5927\u4e32\u90fd\u53ef\u4ee5\u4e0d\u7528\u770bhhh 1 2 3 4 5 6 7 8 9 if ( v8 / 16 <= 0 ) { v25 = envpa ; } else { v12 = ( unsigned __int8 * )( v9 + 2 ); ..... } \u63a5\u4e0b\u6765\u5927\u4e00\u4e32\uff0c\u5c31\u4e3a\u4e86\u751f\u6210\u4e00\u4e2a\u8ff7\u5bab 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 a68 = * ( _QWORD * ) \"DontEatM\" ; v93 = _byteswap_ushort ( aDonteatm [ 0 ]); v94 = _byteswap_ushort ( WORD1 ( a68 )); v95 = _byteswap_ushort ( aDonteatm [ 2 ]); v96 = _byteswap_ushort ( aDonteatm [ 3 ]); v97 = & byte_3F501A ; do { * (( _WORD * ) v97 - 1 ) ^= v93 ; * ( _WORD * ) v97 ^= v94 ; * (( _WORD * ) v97 + 1 ) ^= v95 ; * (( _WORD * ) v97 + 2 ) ^= v96 ; v97 += 8 ; } while ( ( signed int ) v97 < ( signed int ) & unk_3F503A ); v98 = maze ; v99 = ( unsigned __int16 * ) & unk_3F5018 ; do { v100 = * v99 ; v101 = 15 ; do { v102 = ( v100 & ( 1 << v101 )) >> v101 ; -- v101 ; * v98 = v102 ; ++ v98 ; } while ( v101 > - 1 ); ++ v99 ; } while ( ( signed int ) v99 < ( signed int ) & unk_3F5038 ); \u5927\u6982\u957f\u8fd9\u6837\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 1111111111111111 1000000000111111 1011111110111111 1011111110111111 1011110000000111 1011110111110111 1011110111110111 1011110000110111 1011111110110111 1011111110110111 1000000000110111 1111101111110111 1111100000000111 1111111111111111 1111111111111111 1111111111111111 \u6839\u636e maze \u548c\u89e3\u5bc6\u540e\u7684\u8f93\u5165\u8fdb\u884ccheck 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 v103 = * v92 ; v104 = 10 ; v105 = 0 ; v106 = 5 ; if ( * v92 ) { v107 = 160 ; while ( 1 ) { switch ( v103 ) { case 'a' : -- v106 ; break ; case 'd' : ++ v106 ; break ; case 's' : ++ v104 ; v107 += 16 ; break ; case 'w' : -- v104 ; v107 -= 16 ; break ; default : break ; } if ( maze [ v107 + v106 ] == 1 ) break ; v103 = v92 [ v105 ++ + 1 ]; if ( ! v103 ) { if ( v104 == 4 && v106 == 9 && v105 < 17 ) { printf ( \"Congratulations! Here is your flag: RCTF{%s}\" , & input ); return 0 ; } break ; } } } \u76f4\u63a5DFS\u7b97\u51fa\u660e\u6587\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 maze = [ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 1 , 1 , 1 , 1 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 1 , 1 , 1 , 0 , 1 , 1 , 1 , 1 , 0 , 1 , 1 , 1 , 1 , 1 , 0 , 1 , 1 , 1 , 1 , 0 , 1 , 1 , 1 , 1 , 0 , 1 , 1 , 1 , 1 , 1 , 0 , 1 , 1 , 1 , 1 , 0 , 1 , 1 , 1 , 1 , 0 , 0 , 0 , 0 , 1 , 1 , 0 , 1 , 1 , 1 , 1 , 0 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 1 , 1 , 0 , 1 , 1 , 1 , 1 , 0 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 1 , 1 , 0 , 1 , 1 , 1 , 1 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 1 , 0 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 ] op = \"adsw\" num = 10 num1 = 0 x = 5 y = 160 def getop ( n ): global num global x global y if n == ord ( op [ 0 ]): x -= 1 if n == ord ( op [ 1 ]): x += 1 if n == ord ( op [ 2 ]): num += 1 y += 16 if n == ord ( op [ 3 ]): num -= 1 y -= 16 def recover ( n ): global num global x global y if n == ord ( op [ 0 ]): x += 1 if n == ord ( op [ 1 ]): x -= 1 if n == ord ( op [ 2 ]): num -= 1 y -= 16 if n == ord ( op [ 3 ]): num += 1 y += 16 ans = [ 0 for i in range ( 16 )] def dfs ( n ): global num global num1 global x global y if n == 16 : if num == 4 and x == 9 : print ( \"\" . join ( map ( chr , ans ))) return 0 else : return 0 for i in list ( map ( ord , op )): getop ( i ) ans [ n ] = i if maze [ x + y ] != 1 : dfs ( n + 1 ) recover ( i ) return 0 dfs ( 0 ) \u5f97\u5230\uff1a ddddwwwaaawwwddd \u6700\u7ec8\u89e3\u5bc6\u811a\u672c\u5982\u4e0b\uff1a 1 2 3 4 5 6 7 8 9 10 from Crypto.Cipher import Blowfish key = b \" \\x00\\x0F\\x1A\\x01\\x35\\x3A\\x3B\\x20 \" Cipher = b \"ddddwwwaaawwwddd\" obj = Blowfish . new ( key ) plain = obj . encrypt ( Cipher ) for i in list ( map ( hex , list ( plain ))): print ( i [ 2 : 4 ], end = '' ) \u5f97flag: RCTF{db824ef8605c5235b4bbacfa2ff8e087} crack \u9898\u76ee\uff1a crack \u7b2c\u4e00\u90e8\u5206 \u6839\u636e\u5b57\u7b26\u4e32\uff0c\u627e\u5230\u4e3b\u8981\u51fd\u6570\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 v4 = v3 ; sub_106E558 ( v3 , 1 ); v5 = v4 [ 52 ]; if ( * ( _DWORD * )( v5 - 4 ) > 1 ) sub_10613E0 ( * ( _DWORD * )( v5 - 12 )); v6 = 3 * v4 [ 58 ]; v7 = ( void * ) v4 [ 56 ]; v4 [ 53 ] = v4 [ 52 ]; memset ( v7 , 0 , v6 ); v8 = * ( _DWORD * )( v4 [ 52 ] - 12 ); // len(input) v9 = ( _DWORD * ) v4 [ 54 ]; v10 = 0 ; v11 = 0 ; v12 = 0 ; v30 = 0x100758E540F i64 ; v29 = v8 ; v28 = v9 ; v27 = 0 ; if ( v8 <= 0 ) return MessageBoxA ( 0 , \"Try Again!\" , \"tip\" , 0 ); do { v13 = v4 [ 58 ]; // 0x200 // if ( v12 >= v13 ) // 0x200 * 0x200 break ; if ( v12 < 0 || ( input = ( char * ) v4 [ 52 ], v12 > * (( _DWORD * ) input - 3 )) ) // len(input) = *(input-3) sub_1061560 ( 0x80070057 ); v15 = * ( unsigned __int16 * ) & input [ 2 * v12 ]; if ( v15 != '0' && v15 != '1' ) return MessageBoxA ( 0 , \"Input no accept!\" , \"tip\" , 0 ); if ( v15 == '1' ) v27 = ++ v10 ; v16 = v28 [ v10 + v12 * v13 ]; v17 = ( unsigned int ) v30 < v16 ; LODWORD ( v30 ) = v30 - v16 ; v10 = v27 ; v9 = v28 ; HIDWORD ( v30 ) -= v17 ; if ( v12 > v27 ) { v11 [ v4 [ 56 ]] = v28 [ v12 + v27 * v13 ]; v11 [ v4 [ 56 ] + 1 ] = BYTE1 ( v28 [ v12 + v27 * v4 [ 58 ]]); v11 [ v4 [ 56 ] + 2 ] = BYTE2 ( v28 [ v12 + v27 * v4 [ 58 ]]); v10 = v27 ; v11 += 3 ; } ++ v12 ; } while ( v12 < v29 ); if ( SHIDWORD ( v30 ) > 0 || v30 >= 0 && ( _DWORD ) v30 ) return MessageBoxA ( 0 , \"Try Again!\" , \"tip\" , 0 ); v18 = ( void ( __stdcall * )( int * , __int64 * , int )) v4 [ 56 ]; v19 = v4 [ 57 ]; LODWORD ( v30 ) = - 1 ; v18 ( v4 , & v30 , v19 ); if ( ( _DWORD ) v30 == - 1 ) return MessageBoxA ( 0 , \"Try Again!\" , \"tip\" , 0 ); v20 = v4 [ 50 ]; v21 = GdipGetImagePixelFormat ( * ( _DWORD * )( v20 + 4 ), & v29 ); if ( v21 ) * ( _DWORD * )( v20 + 8 ) = v21 ; v22 = v4 [ 50 ]; v23 = GdipBitmapLockBits ( * ( _DWORD * )( v22 + 4 ), v4 [ 49 ], 7 , v29 , v4 [ 51 ]); if ( v23 ) * ( _DWORD * )( v22 + 8 ) = v23 ; memcpy_0 ( & v9 [ HIDWORD ( v30 ) + v30 * v4 [ 58 ]], v32 , 4 * v31 ); v24 = v4 [ 50 ]; v25 = GdipBitmapUnlockBits ( * ( _DWORD * )( v24 + 4 ), v4 [ 51 ]); if ( v25 ) * ( _DWORD * )( v24 + 8 ) = v25 ; sub_1062880 (); MessageBoxA ( 0 , \"You get it!\" , \"tip\" , 0 ); sub_106C00A ( 1000 ); return sub_106C22D ( 0 ); } \u8fd9\u4e00\u53e5\u9650\u5236\u4e86\u8f93\u5165\u5fc5\u987b\u4e3a0 or 1: 1 if ( v15 != '0' && v15 != '1' ) \u8c03\u8bd5\u8fd0\u884c\u8fc7\u7a0b\u4e2d\uff0c\u53ef\u77e5v13 = 0x200\uff1a 1 2 v13 = v4 [ 58 ]; // 0x200 if ( v12 >= v13 ) // 0x200 * 0x200 break ; \u8fd9\u4e00\u90e8\u5206\u7684\u903b\u8f91\u5f88\u50cf\u4e4b\u524d\u505a\u8fc7\u7684Bugku\u91cc\u9762\u7684 Mountain climbing \u56e0\u4e3a\u9759\u6001\u627e\u4e0d\u5230mountain\uff0c\u6240\u4ee5\u53ea\u80fd\u5728\u52a8\u6001\u8c03\u8bd5\u8fc7\u7a0b\u4e2d\u5c06mountain dump\u51fa\u6765\uff0c\u811a\u672c\u5982\u4e0b\uff1a 1 2 3 4 5 6 7 import ida_bytes addr = 0x03A24020 fp = open ( \"data.txt\" , \"wb+\" ) for i in range ( 0x200 * 0x200 ): fp . write ( bytes ( ida_bytes . get_dword ( addr + i * 4 ))) fp . write ( ' \\n ' ) fp . close () \u5f97\u5230\uff1a 1 2 3 4 5 10256753 15502165 5303425 3 .... \u52a8\u6001\u89c4\u5212\u6c42\u89e3\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 import numpy data = open ( \"data.txt\" , \"r\" ) input = [] line = data . readline () data_list = [] for i in range ( 0x200 ): tmp = [] for j in range ( 0x200 ): num = list ( map ( int , line . split ())) tmp . append ( num ) line = data . readline () data_list . append ( tmp ) data . close () data = numpy . array ( data_list ) path = [ \"\" ] * len ( data ) for i in range ( 0 , len ( data ) - 1 )[:: - 1 ]: for j in range ( i + 1 ): if data [ i + 1 ][ j ] > data [ i + 1 ][ j + 1 ]: t = '0' max = data [ i + 1 ][ j ] else : t = '1' max = data [ i + 1 ][ j + 1 ] path [ i ] += t data [ i ][ j ] += max # print(hex(data[0][0][0])) input = '0' j = 0 for i in range ( 0x200 - 1 ): input += path [ i ][ j ] if path [ i ][ j ] == '1' : j += 1 print ( input ) print ( len ( input )) \u6c42\u5f97512\u4f4d\u8f93\u5165\uff1au7b2c\u4e8c\u90e8\u5206 \u63a5\u7740\u5206\u6790\u8fd9\u4e2a\u51fd\u6570\uff1a 1 v18 ( v4 , & v30 , v19 ); \u5728\u52a8\u6001\u8c03\u8bd5\u8fc7\u7a0b\u4e2d\u53ef\u4ee5\u5c06\u6c47\u7f16\u4ee3\u7801\u8f6c\u6210\u4e00\u4e2a\u51fd\u6570\u8fdb\u884c\u9759\u6001\u5206\u6790\uff1aint __stdcall sub_3B46020 ( _DWORD * a1 , int a2 , int a3 ) { int result ; // eax signed int j ; // [esp+D0h] [ebp-28Ch] signed int i ; // [esp+DCh] [ebp-280h] __int64 v6 ; // [esp+E8h] [ebp-274h] int v7 ; // [esp+F0h] [ebp-26Ch] int v8 ; // [esp+F4h] [ebp-268h] int v9 ; // [esp+F8h] [ebp-264h] int v10 ; // [esp+FCh] [ebp-260h] int v11 ; // [esp+100h] [ebp-25Ch] int v12 ; // [esp+104h] [ebp-258h] int v13 ; // [esp+108h] [ebp-254h] int v14 ; // [esp+10Ch] [ebp-250h] int v15 ; // [esp+110h] [ebp-24Ch] int v16 ; // [esp+114h] [ebp-248h] int v17 ; // [esp+118h] [ebp-244h] int v18 ; // [esp+11Ch] [ebp-240h] int v19 ; // [esp+120h] [ebp-23Ch] int v20 ; // [esp+124h] [ebp-238h] int v21 ; // [esp+2F0h] [ebp-6Ch] int v22 ; // [esp+2FCh] [ebp-60h] int v23 ; // [esp+308h] [ebp-54h] int v24 ; // [esp+314h] [ebp-48h] int v25 ; // [esp+320h] [ebp-3Ch] int v26 ; // [esp+32Ch] [ebp-30h] int v27 ; // [esp+338h] [ebp-24h] int v28 ; // [esp+344h] [ebp-18h] int v29 ; // [esp+350h] [ebp-Ch] v29 = a1 [ 53 ] + 2 * a1 [ 58 ]; v28 = a1 [ 55 ] + 12 ; v27 = * ( _DWORD * ) a1 [ 55 ]; v26 = * ( _DWORD * )( a1 [ 55 ] + 4 ); v25 = * ( _DWORD * )( a1 [ 55 ] + 8 ); v24 = v28 ; v23 = 0 ; v22 = 0 ; v21 = 0 ; v6 = 0 i64 ; v7 = 0 ; v8 = 0 ; v9 = 0 ; v10 = 0 ; v11 = 0 ; v12 = 0 ; v13 = v29 ; v14 = 0 ; v15 = 0 ; v16 = v27 ; v17 = v26 ; v18 = v25 ; v19 = v28 ; v20 = a2 ; while ( 1 ) { result = v23 + a3 ; if ( !* ( _BYTE * )( v23 + a3 ) ) return result ; v21 += ( * ( char * )( v23 + a3 ) - 48 ) << v23 % 6 ; result = v23 / 6 ; if ( v23 % 6 != 5 ) goto LABEL_76 ; switch ( v21 ) { case 0 : v21 = 0 ; for ( i = 0 ; i < 24 ; ++ i ) v21 += ( * ( char * )( ++ v23 + a3 ) - 48 ) << i ; LODWORD ( v6 ) = v21 ; goto LABEL_75 ; case 1 : v21 = 0 ; for ( j = 0 ; j < 24 ; ++ j ) v21 += ( * ( char * )( ++ v23 + a3 ) - 48 ) << j ; HIDWORD ( v6 ) = v21 ; goto LABEL_75 ; case 2 : LODWORD ( v6 ) = * ( unsigned __int16 * )( v29 + 2 * v22 ++ ); LABEL_75 : v21 = 0 ; LABEL_76 : ++ v23 ; break ; case 3 : HIDWORD ( v6 ) = v6 ; goto LABEL_75 ; case 4 : v8 = v7 ; goto LABEL_75 ; case 5 : if ( ( signed int ) v6 < 128 ) * (( _DWORD * ) & v6 + v6 ) = HIDWORD ( v6 ); goto LABEL_75 ; case 6 : if ( SHIDWORD ( v6 ) < 128 ) LODWORD ( v6 ) = * (( _DWORD * ) & v6 + HIDWORD ( v6 )); goto LABEL_75 ; case 7 : if ( v7 < 128 ) * (( _DWORD * ) & v6 + v7 ) = v8 ; goto LABEL_75 ; case 8 : if ( v8 < 128 ) v7 = * (( _DWORD * ) & v6 + v8 ); goto LABEL_75 ; case 9 : LODWORD ( v6 ) = * ( _DWORD * )( v6 + 4 * HIDWORD ( v6 )); goto LABEL_75 ; case 10 : * ( _DWORD * )( v6 + 4 * HIDWORD ( v6 )) = v9 ; goto LABEL_75 ; case 11 : LODWORD ( v6 ) = HIDWORD ( v6 ) + v6 ; goto LABEL_75 ; case 12 : LODWORD ( v6 ) = v6 - HIDWORD ( v6 ); goto LABEL_75 ; case 13 : LODWORD ( v6 ) = HIDWORD ( v6 ) * v6 ; goto LABEL_75 ; case 14 : LODWORD ( v6 ) = ( signed int ) v6 / SHIDWORD ( v6 ); goto LABEL_75 ; case 15 : LODWORD ( v6 ) = HIDWORD ( v6 ) & v6 ; goto LABEL_75 ; case 16 : LODWORD ( v6 ) = HIDWORD ( v6 ) | v6 ; goto LABEL_75 ; case 17 : LODWORD ( v6 ) = HIDWORD ( v6 ) ^ v6 ; goto LABEL_75 ; case 18 : LODWORD ( v6 ) = ( _DWORD ) v6 << SBYTE4 ( v6 ); goto LABEL_75 ; case 19 : LODWORD ( v6 ) = ( signed int ) v6 >> SBYTE4 ( v6 ); goto LABEL_75 ; case 20 : LODWORD ( v6 ) = ( signed int ) v6 > SHIDWORD ( v6 ); goto LABEL_75 ; case 21 : LODWORD ( v6 ) = ( signed int ) v6 < SHIDWORD ( v6 ); goto LABEL_75 ; case 22 : LODWORD ( v6 ) = v6 == HIDWORD ( v6 ); goto LABEL_75 ; case 23 : LODWORD ( v6 ) = v6 != HIDWORD ( v6 ); goto LABEL_75 ; case 24 : LODWORD ( v6 ) = v23 ; goto LABEL_75 ; case 25 : v23 = v6 ; v21 = 0 ; break ; case 26 : if ( ( _DWORD ) v6 ) goto LABEL_75 ; v23 = HIDWORD ( v6 ); v21 = 0 ; break ; default : return result ; } } } \u5927\u6982\u662f\u4e2aVM\uff0c\u8c03\u8bd5\u8fc7\u7a0b\u4e2d\u5c06\u64cd\u4f5c\u7801dump\u51fa\u6765\uff0c\u55ef\uff0c\u590d\u5236\u7c98\u8d34 \u4e4b\u540e\u5206\u6790VM\u8fc7\u7a0b\uff0c\u5199\u4e2a\u811a\u672c\u5c06\u8fc7\u7a0b\u5927\u81f4\u8fd8\u539f\u4e00\u4e0b\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 codeopcode = 0 i = 0 j = 0 #LODWORD(x) = r0 #HIDWORD(x) = r1 while i < len ( code ): opcode = eval ( '0b' + code [ i : i + 6 ][:: - 1 ]) i += 6 if opcode == 0 : num = eval ( '0b' + code [ i : i + 24 ][:: - 1 ]) print ( 'mov r0,0x %x ' % num ) i += 24 elif opcode == 1 : num = eval ( '0b' + code [ i : i + 24 ][:: - 1 ]) print ( 'mov r1,0x %x ' % num ) i += 24 elif opcode == 2 : print ( 'mov r0\uff0cinput[ %d ]' % j ) elif opcode == 3 : print ( 'mov r1,r0' ) elif opcode == 4 : print ( 'mov r3,r2' ) elif opcode == 5 : print ( \"if r0 < 128:\" ) print ( ' \\t mov x[r0],r1' ) elif opcode == 6 : print ( \"if r1 < 128:\" ) print ( ' \\t mov r0,x[r1]' ) elif opcode == 7 : print ( \"if r3 < 128:\" ) print ( ' \\t mov x[r2],r3' ) elif opcode == 8 : print ( \"if r2 < 128:\" ) print ( ' \\t mov r2,x[r3]' ) elif opcode == 9 : print ( 'mov r0,x[4 * r1]' ) elif opcode == 0xA : print ( 'mov x[4 * r1],r4' ) elif opcode == 0xB : print ( 'add r0,r1' ) elif opcode == 0xC : print ( 'sub r0,r1' ) elif opcode == 0xD : print ( 'mul r0,r1' ) elif opcode == 0xE : print ( 'div r0,r1' ) elif opcode == 0xF : print ( 'and r0,r1' ) elif opcode == 0x10 : print ( 'or r0,r1' ) elif opcode == 0x11 : print ( 'xor r0,r1' ) elif opcode == 0x12 : print ( 'shl r0,r1' ) elif opcode == 0x13 : print ( 'shr r0,r1' ) elif opcode == 0x14 : print ( 'cmp r0,r1' ) print ( 'setnle r0' ) elif opcode == 0x15 : print ( 'cmp r0,r1' ) print ( 'setl r0' ) elif opcode == 0x16 : print ( 'cmp r0,r1' ) print ( 'setz r0' ) elif opcode == 0x17 : print ( \"cmp r0,r1\" ) print ( 'setnz r0' ) elif opcode == 0x18 : print ( \"mov r0,rip\" ) elif opcode == 0x19 : print ( \"mov rip,r0\" ) elif opcode == 0x1A : print ( \"cmp r0,0\" ) print ( 'je r1' ) else : print ( \"<unknown>\" ) \u5f97\u5230\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 mov r0 , 0 x26a mov r1 , r0 mov r0 \uff0c input [ 0 ] cmp r0 , 0 je r1 mov r1 , 0 x30 sub r0 , r1 mov r1 , r0 mov r0 , 0 x3 if r0 < 128 : mov x [ r0 ], r1 mov r0 , 0 x0 mov r1 , r0 mov r0 , 0 x2 if r0 < 128 : mov x [ r0 ], r1 mov r0 , 0 x7 mov r1 , r0 if r1 < 128 : mov r0 , x [ r1 ] mov r1 , r0 if r3 < 128 : mov x [ r2 ], r3 shl r0 , r1 mov r1 , r0 mov r0 , 0 x3 if r0 < 128 : mov x [ r0 ], r1 mov r0 , 0 x1 mov r1 , r0 mov r0 , 0 x2 if r0 < 128 : mov x [ r0 ], r1 mov r0 , 0 x6 mov r1 , r0 if r1 < 128 : mov r0 , x [ r1 ] if r3 < 128 : mov x [ r2 ], r3 add r0 , r1 mov r1 , r0 mov r0 , 0 x6 if r0 < 128 : mov x [ r0 ], r1 mov r1 , 0 x7 if r1 < 128 : mov r0 , x [ r1 ] mov r1 , 0 x1 add r0 , r1 mov r1 , r0 mov r0 , 0 x7 if r0 < 128 : mov x [ r0 ], r1 mov r0 , 0 x0 mov rip , r0 mov r1 , 0 x6 if r1 < 128 : mov r0 , x [ r1 ] mov r1 , 0 x7 mul r0 , r1 mov r1 , 0 xf423f cmp r0 , r1 setz r0 mov r1 , 0 xc36 cmp r0 , 0 je r1 ..... \u63a5\u4e0b\u6765\u5c31\u53ea\u80fd\u9760\u731c\u7684\u4e860.0 \u7531\u4e8e\u53c8\u8fd9\u51e0\u53e5\uff1a 1 2 3 4 5 6 7 8 mov r1 , 0 x7 mul r0 , r1 mov r1 , 0 xf423f cmp r0 , r1 setz r0 mov r1 , 0 xc36 cmp r0 , 0 je r1 \u731c\u6d4b\u8fd9\u91cc\u662fcheck\uff0c\u4e5f\u5c31\u662f\u8bf4\u6709\u53e6\u5916\u4e00\u4e2a\u6570(\u6682\u65f6\u4e0d\u77e5\u9053\u8fd9\u4e2a\u6570\u600e\u4e48\u7b97\u51fa\u6765\u7684)\uff0c\u8fd9\u4e2a\u6570*7 == 0xf423f, \u4e5f\u5c31\u662f0x22e09\u3002\u53c8\u56e0\u4e3a\u6574\u4e00\u4e2a\u903b\u8f91\u4e0b\u6765\u53ea\u6709\u4e00\u53e5 shl r0,r1 \uff0c\u6240\u4ee5\u731c\u6d4b\u6709\u53e6\u5916\u4e00\u4e2a\u4e8c\u8fdb\u5236\u6570\u8ddf\u5728\u524d512\u7684\u8f93\u5165\u4e4b\u540e\uff0c\u800c\u8fd9\u4e2a\u4e8c\u8fdb\u5236\u6570\u5e94\u8be5\u4e3a\u202d100010111000001001\u202c(==0x22e09)\u800c\u4e14\u8f93\u5165\u5e94\u8be5\u662f\u5927\u7aef\u5e8f\uff0c\u4e5f\u5c31\u662f100100000111010001,\u5373\u6574\u4e2a\u7b2c\u4e8c\u90e8\u5206\u903b\u8f91\u5927\u6982\u662f 1 2 3 4 5 6 input = \"100100000111010001\" sum = 0 for i in range ( len ( input )): sum += ( ord ( input ) - 0x30 ) << i if sum * 7 == 0xf423f : print ( \"sucess\" ) \u6240\u4ee5\u6574\u4e2a\u8f93\u5165\u4e3a\u524d512\u4f4d\u8f93\u51fa\u63a5\u4e0a100100000111010001\uff1au5f97\u5230flag:13yR01sw3iy1l1n9","title":"2019 RCTF\u56fd\u9645\u8d5b"},{"location":"ctf_write_up/2019/2019rctf/#babyre1","text":"\u9898\u76ee\uff1a babyre1 \u8fd0\u884c\uff1a 1 2 Input right flag you can got 'Bingo!' :ssssss input is too short! IDA\u6253\u5f00\uff0c\u627e\u5230\u4e3b\u51fd\u6570\uff1a \u5206\u6790\u5f97\uff1a\u8f93\u5165\u5bc6\u6587,\u957f\u5ea6\u4e3a16\uff0c\u8303\u56f40-9\uff0ca-z \u4e4b\u540e\u7528xxtea\u89e3\u5bc6\uff0c\u540e\u8fdb\u884cCRC16_CCITT\u6821\u9a8c\uff0c\u7ed3\u679c\u5e94\u8be5\u7b49\u4e8e0x69E2\u3002\u800c\u540e\u5bf9\u89e3\u5bc6\u540e\u7684\u524dN\u4f4d\u5f02\u62160x17\uff0c\u6839\u636e\u63d0\u793a\uff0c\u6700\u7ec8\u5e94\u8be5\u5f97\u5230Bingo!\u3002 \u800cxxtea\u89e3\u5bc6\u4e2d\uff1a 1 2 3 4 5 6 7 8 9 10 v11 = ( unsigned __int8 ) v8 [ v6 - 1 ]; v8 [ v6 ] = 0 ; * v5 = v6 ; if ( v6 > v11 && v11 <= 4 ) { v13 = v6 - v11 ; * v5 = v13 ; v8 [ v13 ] = 0 ; return v8 ; } \u6839\u636e\u89e3\u5bc6\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u8282\u7684\u5927\u5c0fN\uff0c\u628a\u660e\u6587\u5012\u6570\u7b2cN\u4f4d\u7528\"\\0\"\u622a\u65ad\u3002 \u90a3\u4e48\u6700\u540e\u4e00\u4e2a\u5b57\u8282\u7684\u5927\u5c0f\u5c31\u5e94\u8be5\u4e3a2\uff0c\u5373\u6700\u7ec8\u5e94\u8be5\u4e3a \u201cBingo!xx\\x02\u201d ,xx\u672a\u77e5\uff0c\u800c Bingo\uff01 \u5e94\u5f02\u62160x17. \u53ef\u4ee5\u901a\u8fc7\u63d0\u793a\uff1a MD5(rctf{your answer}) == 5f8243a662cf71bf31d2b2602638dc1d \u7206\u7834\u51fa\u6765\u3002 \u800c\u6211\u8fd9\u91cc\u662f\u9760\u731c\u7684\uff0c\u4e5f\u4e0d\u96be\u731c\uff0c\\x02\u5f88\u50cf\u52a0\u5bc6\u65f6\u7684padding\uff0c\u6240\u4ee5\u731c\u6d4bXXTEA\u89e3\u5bc6\u540e\u7684\u660e\u6587\u5e94\u8be5\u4e3a \u201cBingo!\\x02\\x02\u201d (\u5176\u4e2dBingo\uff01\u5e94\u4e3a\u5f02\u62160x17\u540e\u7684\u7ed3\u679c) \u5219\u89e3\u5bc6\u811a\u672c\u5982\u4e0b\uff08XXTEA\u4ee3\u7801\u7f51\u4e0a\u6284\u76840.0\uff09\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 #include <iostream> #include <stdio.h> #include <string.h> #include <stdint.h> using namespace std ; #define DELTA 0x9e3779b9 #define MX (((z >> 5 ^ y << 2) + (y >> 3 ^ z << 4)) ^ ((sum ^ y) + (key[(p & 3) ^ e] ^ z))) void btea ( uint32_t * v , int n , uint32_t const key [ 4 ]) { uint32_t y , z , sum ; unsigned p , rounds , e ; if ( n > 1 ) /* Coding Part */ { rounds = 6 + 52 / n ; sum = 0 ; z = v [ n - 1 ]; do { sum += DELTA ; e = ( sum >> 2 ) & 3 ; for ( p = 0 ; p < n - 1 ; p ++ ) { y = v [ p + 1 ]; z = v [ p ] += MX ; } y = v [ 0 ]; z = v [ n - 1 ] += MX ; } while ( -- rounds ); } else if ( n < - 1 ) /* Decoding Part */ { n = - n ; rounds = 6 + 52 / n ; sum = rounds * DELTA ; y = v [ 0 ]; do { e = ( sum >> 2 ) & 3 ; for ( p = n - 1 ; p > 0 ; p -- ) { z = v [ p - 1 ]; y = v [ p ] -= MX ; } z = v [ n - 1 ]; y = v [ 0 ] -= MX ; sum -= DELTA ; } while ( -- rounds ); } } void decode ( char * cipher ) { int i = 0 ; for ( i = 0 ; i < 8 ; i ++ ) { char chr1 = cipher [ i ] >> 4 & 0xF ; char chr2 = cipher [ i ] & 0xF ; if ( chr1 < 10 ) cout << char ( chr1 + 0x30 ); else cout << char ( chr1 + 0x61 - 10 ) ; if ( chr2 < 10 ) cout << char ( chr2 + 0x30 ); else cout << char ( chr2 + 0x61 - 10 ); } } int main () { uint32_t cipher [] = { 0 , 0 }; char cipher1 [] = \"Bingo! \\x02\\x02 \" ; int i = 0 ; uint32_t key [] = { 0xE0C7E0C7 , 0xC6F1D3D7 , 0xC6D3C6D3 , 0xC4D0D2CE }; for ( i = 0 ; i < 6 ; i ++ ) { cipher1 [ i ] ^= 0x17 ; } memcpy ( cipher , cipher1 , 8 ); btea ( cipher , 2 , key ); cout << \"rctf{\" ; decode (( char * ) cipher ); cout << \"}\" ; return 0 ; } \u5f97\u5230flag\uff1a rctf{05e8a376e4e0446e}","title":"babyre1"},{"location":"ctf_write_up/2019/2019rctf/#babyre2","text":"\u9898\u76ee\uff1a babyre2 \u7a0b\u5e8f\u903b\u8f91\uff1a \u8f93\u51658-16\u4f4d\u957faccount\uff0c8-16\u4f4d\u957fpassword\uff0c\u4e0d\u8d85\u8fc70x400\u957f\u5ea6\u7684data\uff0cdata\u8303\u56f4\uff1a 1 ( buf [ i ] <= '/' || buf [ i ] > '9' ) && ( buf [ i ] <= '`' || buf [ i ] > 'f' ) && ( buf [ i ] <= '@' || buf [ i ] > 'F' ) ) \u540e\u4ee5account\u4f5c\u4e3akey\uff0c\u52a0\u5bc6\u4e00\u7ec4\u5e38\u91cf\u3002 1 v12 = XXtea_1 (( __int64 ) & account , ( __int64 ) & v6 ); 1 0xF8u,0xD4u,0xD5u,0xDCu,0xC9u,0xDAu,0xCFu,0xCEu,0xD7u,0xDAu,0xCFu,0xD2u,0xD4u,0xD5u,0xC8u,0x9Au,0xB1u password\u7684\u6bcf\u4e00\u4f4d\u51cf\u53bb\u5341\u4f4d\u548c\u4e2a\u4f4d\uff0c\u51cf\u53bb\u7684\u7ed3\u679c\u4f5c\u4e3a\u4e0b\u6807\u4ecedata\u53d6\u6570\u636e\uff0c\u5f97\u5230data2. 1 2 3 4 5 6 7 8 9 10 for ( i = 0 ; i < v10 ; ++ i ) { v11 = a1 [ i ] - ( a1 [ i ] % 10 + a1 [ i ] / 10 ); if ( v11 >= v6 ) { v8 = 0 ; break ; } ptr [ i ] = * ( _BYTE * )( v11 + a2 ); } \u7528data2\u5f02\u62160xCC\u4f5c\u4e3akey\u5bc6\u4e4b\u524d\u7684\u5bc6\u6587\u3002 1 2 3 for ( j = 0 ; j < a2 ; ++ j ) * (( _BYTE * ) & dest + j ) ^= 0xCCu ; ptr = XXTEA_2 ( v6 , v7 , ( __int64 ) & dest , 16 , & dword_204058 ); \u4e8e\u662f\u76f4\u63a5\u6784\u9020account:'1'*16\uff0cdata'fd'*256\uff0cpassword\u4efb\u610f16\u4f4d\u5373\u53ef \u811a\u672c\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 from pwn import * p = process ( './babyre2' ) p . recvuntil ( 'Please input the account:' ) p . send ( '1' * 16 ) p . recvuntil ( 'Please input the password:' ) p . send ( '1' * 16 ) p . recvuntil ( 'Please input the data:' ) p . send ( 'fd' * 256 ) p . interactive () # print(hex(0x31 ^ 0xCC)) p.s.\u8fd9\u9898\u8fd8\u6709\u65f6\u95f4\u9650\u5236,\u8c03\u8bd5\u7684\u65f6\u5019\u5c31\u5f88\u559c\u6b22Time Out!0.0....","title":"babyre2"},{"location":"ctf_write_up/2019/2019rctf/#donteatme","text":"\u9898\u76ee\uff1a DontEatMe \u8fd0\u884c\u7a0b\u5e8f\uff1a 1 2 3 4 LiHua is trapped on an isolated island. One day, he caught a fish. Suddenly,the fish said: \"Dont eat me! I am Fish God,if you release me,as return ,you have one wish.\" Li said : I want to know how to escape from this island. Fish said: \u6839\u636e\u8f93\u51fa\u627e\u5230\u4e3b\u51fd\u6570\uff0c\u4e00\u5f00\u59cb\u6709ZwSetInformationThread\u53cd\u8c03\u8bd5\uff1a 1 2 3 v70 = GetModuleHandleA ( \"Ntdll\" ); v71 = GetProcAddress ( v70 , \"ZwSetInformationThread\" ); v72 = GetCurrentThread (); \u76f4\u63a5\u8df3\u8fc7\u5c31\u53ef\u4ee5\u4e86\uff0c\u4f2a\u968f\u673a\u6570\u751f\u6210\u4ee5\u4e00\u4e32key\uff0c\u63a5\u4e0b\u6765\u5e94\u8be5\u662f\u90a3\u4e2a\u51fd\u6570\u5e94\u8be5\u662fBlowfish 1 2 3 4 5 6 7 8 9 10 11 12 srand ( 0xDEADBEEF ); ..... do key [ v6 ++ ] = rand (); while ( v6 < 8 ); key [ 0 ] = 0 ; v56 = * ( _QWORD * ) \"fishFISH\" ; * ( _WORD * ) & key [ 1 ] = * ( _WORD * ) \"fishFISH\" ^ * ( _WORD * )(( char * ) & v56 + 1 ); * ( _WORD * ) & key [ 3 ] = * ( _WORD * )(( char * ) & v56 + 1 ) ^ * ( _WORD * )(( char * ) & v56 + 3 ); * ( _WORD * ) & key [ 5 ] = WORD1 ( v56 ) ^ * ( _WORD * )(( char * ) & v56 + 5 ); key [ 7 ] = BYTE3 ( v56 ) ^ aFishfish [ 7 ]; Blowfish (( int ) & v49 ); \u7279\u5f81\u4e3a\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 .rdata: 000 B3118 dword_B3118 dd 243 F6A88h ; DATA XREF: Blowfish+12\u2191o .rdata: 000 B311C dd 85 A308D3h .rdata: 000 B3120 dd 13198 A2Eh .rdata: 000 B3124 dd 3707344 h .rdata: 000 B3128 dd 0 A4093822h .rdata: 000 B312C dd 299 F31D0h .rdata: 000 B3130 dd 82 EFA98h .rdata: 000 B3134 dd 0 EC4E6C89h .rdata: 000 B3138 dd 452821 E6h .rdata: 000 B313C dd 38 D01377h .rdata: 000 B3140 dd 0 BE5466CFh .rdata: 000 B3144 dd 34 E90C6Ch .rdata: 000 B3148 dd 0 C0AC29B7h .rdata: 000 B314C dd 0 C97C50DDh .rdata: 000 B3150 dd 3 F84D5B5h .rdata: 000 B3154 dd 0 B5470917h .rdata: 000 B3158 dd 9216 D5D9h .rdata: 000 B315C dd 8979 FB1Bh \u63a5\u4e0b\u6765\u8fd9\u91cc\uff0c\u65e0\u8bba\u8f93\u4ec0\u4e48\uff0c\u8fd0\u7b97\u540ev8 = 8\u3002\u6240\u4ee5else\u91cc\u9762\u90a3\u4e00\u5927\u4e32\u90fd\u53ef\u4ee5\u4e0d\u7528\u770bhhh 1 2 3 4 5 6 7 8 9 if ( v8 / 16 <= 0 ) { v25 = envpa ; } else { v12 = ( unsigned __int8 * )( v9 + 2 ); ..... } \u63a5\u4e0b\u6765\u5927\u4e00\u4e32\uff0c\u5c31\u4e3a\u4e86\u751f\u6210\u4e00\u4e2a\u8ff7\u5bab 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 a68 = * ( _QWORD * ) \"DontEatM\" ; v93 = _byteswap_ushort ( aDonteatm [ 0 ]); v94 = _byteswap_ushort ( WORD1 ( a68 )); v95 = _byteswap_ushort ( aDonteatm [ 2 ]); v96 = _byteswap_ushort ( aDonteatm [ 3 ]); v97 = & byte_3F501A ; do { * (( _WORD * ) v97 - 1 ) ^= v93 ; * ( _WORD * ) v97 ^= v94 ; * (( _WORD * ) v97 + 1 ) ^= v95 ; * (( _WORD * ) v97 + 2 ) ^= v96 ; v97 += 8 ; } while ( ( signed int ) v97 < ( signed int ) & unk_3F503A ); v98 = maze ; v99 = ( unsigned __int16 * ) & unk_3F5018 ; do { v100 = * v99 ; v101 = 15 ; do { v102 = ( v100 & ( 1 << v101 )) >> v101 ; -- v101 ; * v98 = v102 ; ++ v98 ; } while ( v101 > - 1 ); ++ v99 ; } while ( ( signed int ) v99 < ( signed int ) & unk_3F5038 ); \u5927\u6982\u957f\u8fd9\u6837\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 1111111111111111 1000000000111111 1011111110111111 1011111110111111 1011110000000111 1011110111110111 1011110111110111 1011110000110111 1011111110110111 1011111110110111 1000000000110111 1111101111110111 1111100000000111 1111111111111111 1111111111111111 1111111111111111 \u6839\u636e maze \u548c\u89e3\u5bc6\u540e\u7684\u8f93\u5165\u8fdb\u884ccheck 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 v103 = * v92 ; v104 = 10 ; v105 = 0 ; v106 = 5 ; if ( * v92 ) { v107 = 160 ; while ( 1 ) { switch ( v103 ) { case 'a' : -- v106 ; break ; case 'd' : ++ v106 ; break ; case 's' : ++ v104 ; v107 += 16 ; break ; case 'w' : -- v104 ; v107 -= 16 ; break ; default : break ; } if ( maze [ v107 + v106 ] == 1 ) break ; v103 = v92 [ v105 ++ + 1 ]; if ( ! v103 ) { if ( v104 == 4 && v106 == 9 && v105 < 17 ) { printf ( \"Congratulations! Here is your flag: RCTF{%s}\" , & input ); return 0 ; } break ; } } } \u76f4\u63a5DFS\u7b97\u51fa\u660e\u6587\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 maze = [ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 1 , 1 , 1 , 1 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 1 , 1 , 1 , 0 , 1 , 1 , 1 , 1 , 0 , 1 , 1 , 1 , 1 , 1 , 0 , 1 , 1 , 1 , 1 , 0 , 1 , 1 , 1 , 1 , 0 , 1 , 1 , 1 , 1 , 1 , 0 , 1 , 1 , 1 , 1 , 0 , 1 , 1 , 1 , 1 , 0 , 0 , 0 , 0 , 1 , 1 , 0 , 1 , 1 , 1 , 1 , 0 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 1 , 1 , 0 , 1 , 1 , 1 , 1 , 0 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 1 , 1 , 0 , 1 , 1 , 1 , 1 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 1 , 0 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 ] op = \"adsw\" num = 10 num1 = 0 x = 5 y = 160 def getop ( n ): global num global x global y if n == ord ( op [ 0 ]): x -= 1 if n == ord ( op [ 1 ]): x += 1 if n == ord ( op [ 2 ]): num += 1 y += 16 if n == ord ( op [ 3 ]): num -= 1 y -= 16 def recover ( n ): global num global x global y if n == ord ( op [ 0 ]): x += 1 if n == ord ( op [ 1 ]): x -= 1 if n == ord ( op [ 2 ]): num -= 1 y -= 16 if n == ord ( op [ 3 ]): num += 1 y += 16 ans = [ 0 for i in range ( 16 )] def dfs ( n ): global num global num1 global x global y if n == 16 : if num == 4 and x == 9 : print ( \"\" . join ( map ( chr , ans ))) return 0 else : return 0 for i in list ( map ( ord , op )): getop ( i ) ans [ n ] = i if maze [ x + y ] != 1 : dfs ( n + 1 ) recover ( i ) return 0 dfs ( 0 ) \u5f97\u5230\uff1a ddddwwwaaawwwddd \u6700\u7ec8\u89e3\u5bc6\u811a\u672c\u5982\u4e0b\uff1a 1 2 3 4 5 6 7 8 9 10 from Crypto.Cipher import Blowfish key = b \" \\x00\\x0F\\x1A\\x01\\x35\\x3A\\x3B\\x20 \" Cipher = b \"ddddwwwaaawwwddd\" obj = Blowfish . new ( key ) plain = obj . encrypt ( Cipher ) for i in list ( map ( hex , list ( plain ))): print ( i [ 2 : 4 ], end = '' ) \u5f97flag: RCTF{db824ef8605c5235b4bbacfa2ff8e087}","title":"DontEatMe"},{"location":"ctf_write_up/2019/2019rctf/#crack","text":"\u9898\u76ee\uff1a crack","title":"crack"},{"location":"ctf_write_up/2019/2019rctf/#_1","text":"\u6839\u636e\u5b57\u7b26\u4e32\uff0c\u627e\u5230\u4e3b\u8981\u51fd\u6570\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 v4 = v3 ; sub_106E558 ( v3 , 1 ); v5 = v4 [ 52 ]; if ( * ( _DWORD * )( v5 - 4 ) > 1 ) sub_10613E0 ( * ( _DWORD * )( v5 - 12 )); v6 = 3 * v4 [ 58 ]; v7 = ( void * ) v4 [ 56 ]; v4 [ 53 ] = v4 [ 52 ]; memset ( v7 , 0 , v6 ); v8 = * ( _DWORD * )( v4 [ 52 ] - 12 ); // len(input) v9 = ( _DWORD * ) v4 [ 54 ]; v10 = 0 ; v11 = 0 ; v12 = 0 ; v30 = 0x100758E540F i64 ; v29 = v8 ; v28 = v9 ; v27 = 0 ; if ( v8 <= 0 ) return MessageBoxA ( 0 , \"Try Again!\" , \"tip\" , 0 ); do { v13 = v4 [ 58 ]; // 0x200 // if ( v12 >= v13 ) // 0x200 * 0x200 break ; if ( v12 < 0 || ( input = ( char * ) v4 [ 52 ], v12 > * (( _DWORD * ) input - 3 )) ) // len(input) = *(input-3) sub_1061560 ( 0x80070057 ); v15 = * ( unsigned __int16 * ) & input [ 2 * v12 ]; if ( v15 != '0' && v15 != '1' ) return MessageBoxA ( 0 , \"Input no accept!\" , \"tip\" , 0 ); if ( v15 == '1' ) v27 = ++ v10 ; v16 = v28 [ v10 + v12 * v13 ]; v17 = ( unsigned int ) v30 < v16 ; LODWORD ( v30 ) = v30 - v16 ; v10 = v27 ; v9 = v28 ; HIDWORD ( v30 ) -= v17 ; if ( v12 > v27 ) { v11 [ v4 [ 56 ]] = v28 [ v12 + v27 * v13 ]; v11 [ v4 [ 56 ] + 1 ] = BYTE1 ( v28 [ v12 + v27 * v4 [ 58 ]]); v11 [ v4 [ 56 ] + 2 ] = BYTE2 ( v28 [ v12 + v27 * v4 [ 58 ]]); v10 = v27 ; v11 += 3 ; } ++ v12 ; } while ( v12 < v29 ); if ( SHIDWORD ( v30 ) > 0 || v30 >= 0 && ( _DWORD ) v30 ) return MessageBoxA ( 0 , \"Try Again!\" , \"tip\" , 0 ); v18 = ( void ( __stdcall * )( int * , __int64 * , int )) v4 [ 56 ]; v19 = v4 [ 57 ]; LODWORD ( v30 ) = - 1 ; v18 ( v4 , & v30 , v19 ); if ( ( _DWORD ) v30 == - 1 ) return MessageBoxA ( 0 , \"Try Again!\" , \"tip\" , 0 ); v20 = v4 [ 50 ]; v21 = GdipGetImagePixelFormat ( * ( _DWORD * )( v20 + 4 ), & v29 ); if ( v21 ) * ( _DWORD * )( v20 + 8 ) = v21 ; v22 = v4 [ 50 ]; v23 = GdipBitmapLockBits ( * ( _DWORD * )( v22 + 4 ), v4 [ 49 ], 7 , v29 , v4 [ 51 ]); if ( v23 ) * ( _DWORD * )( v22 + 8 ) = v23 ; memcpy_0 ( & v9 [ HIDWORD ( v30 ) + v30 * v4 [ 58 ]], v32 , 4 * v31 ); v24 = v4 [ 50 ]; v25 = GdipBitmapUnlockBits ( * ( _DWORD * )( v24 + 4 ), v4 [ 51 ]); if ( v25 ) * ( _DWORD * )( v24 + 8 ) = v25 ; sub_1062880 (); MessageBoxA ( 0 , \"You get it!\" , \"tip\" , 0 ); sub_106C00A ( 1000 ); return sub_106C22D ( 0 ); } \u8fd9\u4e00\u53e5\u9650\u5236\u4e86\u8f93\u5165\u5fc5\u987b\u4e3a0 or 1: 1 if ( v15 != '0' && v15 != '1' ) \u8c03\u8bd5\u8fd0\u884c\u8fc7\u7a0b\u4e2d\uff0c\u53ef\u77e5v13 = 0x200\uff1a 1 2 v13 = v4 [ 58 ]; // 0x200 if ( v12 >= v13 ) // 0x200 * 0x200 break ; \u8fd9\u4e00\u90e8\u5206\u7684\u903b\u8f91\u5f88\u50cf\u4e4b\u524d\u505a\u8fc7\u7684Bugku\u91cc\u9762\u7684 Mountain climbing \u56e0\u4e3a\u9759\u6001\u627e\u4e0d\u5230mountain\uff0c\u6240\u4ee5\u53ea\u80fd\u5728\u52a8\u6001\u8c03\u8bd5\u8fc7\u7a0b\u4e2d\u5c06mountain dump\u51fa\u6765\uff0c\u811a\u672c\u5982\u4e0b\uff1a 1 2 3 4 5 6 7 import ida_bytes addr = 0x03A24020 fp = open ( \"data.txt\" , \"wb+\" ) for i in range ( 0x200 * 0x200 ): fp . write ( bytes ( ida_bytes . get_dword ( addr + i * 4 ))) fp . write ( ' \\n ' ) fp . close () \u5f97\u5230\uff1a 1 2 3 4 5 10256753 15502165 5303425 3 .... \u52a8\u6001\u89c4\u5212\u6c42\u89e3\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 import numpy data = open ( \"data.txt\" , \"r\" ) input = [] line = data . readline () data_list = [] for i in range ( 0x200 ): tmp = [] for j in range ( 0x200 ): num = list ( map ( int , line . split ())) tmp . append ( num ) line = data . readline () data_list . append ( tmp ) data . close () data = numpy . array ( data_list ) path = [ \"\" ] * len ( data ) for i in range ( 0 , len ( data ) - 1 )[:: - 1 ]: for j in range ( i + 1 ): if data [ i + 1 ][ j ] > data [ i + 1 ][ j + 1 ]: t = '0' max = data [ i + 1 ][ j ] else : t = '1' max = data [ i + 1 ][ j + 1 ] path [ i ] += t data [ i ][ j ] += max # print(hex(data[0][0][0])) input = '0' j = 0 for i in range ( 0x200 - 1 ): input += path [ i ][ j ] if path [ i ][ j ] == '1' : j += 1 print ( input ) print ( len ( input )) \u6c42\u5f97512\u4f4d\u8f93\u5165\uff1atitle":"\u7b2c\u4e00\u90e8\u5206"},{"location":"ctf_write_up/2019/2019rctf/#_2","text":"\u63a5\u7740\u5206\u6790\u8fd9\u4e2a\u51fd\u6570\uff1a 1 v18 ( v4 , & v30 , v19 ); \u5728\u52a8\u6001\u8c03\u8bd5\u8fc7\u7a0b\u4e2d\u53ef\u4ee5\u5c06\u6c47\u7f16\u4ee3\u7801\u8f6c\u6210\u4e00\u4e2a\u51fd\u6570\u8fdb\u884c\u9759\u6001\u5206\u6790\uff1aint __stdcall sub_3B46020 ( _DWORD * a1 , int a2 , int a3 ) { int result ; // eax signed int j ; // [esp+D0h] [ebp-28Ch] signed int i ; // [esp+DCh] [ebp-280h] __int64 v6 ; // [esp+E8h] [ebp-274h] int v7 ; // [esp+F0h] [ebp-26Ch] int v8 ; // [esp+F4h] [ebp-268h] int v9 ; // [esp+F8h] [ebp-264h] int v10 ; // [esp+FCh] [ebp-260h] int v11 ; // [esp+100h] [ebp-25Ch] int v12 ; // [esp+104h] [ebp-258h] int v13 ; // [esp+108h] [ebp-254h] int v14 ; // [esp+10Ch] [ebp-250h] int v15 ; // [esp+110h] [ebp-24Ch] int v16 ; // [esp+114h] [ebp-248h] int v17 ; // [esp+118h] [ebp-244h] int v18 ; // [esp+11Ch] [ebp-240h] int v19 ; // [esp+120h] [ebp-23Ch] int v20 ; // [esp+124h] [ebp-238h] int v21 ; // [esp+2F0h] [ebp-6Ch] int v22 ; // [esp+2FCh] [ebp-60h] int v23 ; // [esp+308h] [ebp-54h] int v24 ; // [esp+314h] [ebp-48h] int v25 ; // [esp+320h] [ebp-3Ch] int v26 ; // [esp+32Ch] [ebp-30h] int v27 ; // [esp+338h] [ebp-24h] int v28 ; // [esp+344h] [ebp-18h] int v29 ; // [esp+350h] [ebp-Ch] v29 = a1 [ 53 ] + 2 * a1 [ 58 ]; v28 = a1 [ 55 ] + 12 ; v27 = * ( _DWORD * ) a1 [ 55 ]; v26 = * ( _DWORD * )( a1 [ 55 ] + 4 ); v25 = * ( _DWORD * )( a1 [ 55 ] + 8 ); v24 = v28 ; v23 = 0 ; v22 = 0 ; v21 = 0 ; v6 = 0 i64 ; v7 = 0 ; v8 = 0 ; v9 = 0 ; v10 = 0 ; v11 = 0 ; v12 = 0 ; v13 = v29 ; v14 = 0 ; v15 = 0 ; v16 = v27 ; v17 = v26 ; v18 = v25 ; v19 = v28 ; v20 = a2 ; while ( 1 ) { result = v23 + a3 ; if ( !* ( _BYTE * )( v23 + a3 ) ) return result ; v21 += ( * ( char * )( v23 + a3 ) - 48 ) << v23 % 6 ; result = v23 / 6 ; if ( v23 % 6 != 5 ) goto LABEL_76 ; switch ( v21 ) { case 0 : v21 = 0 ; for ( i = 0 ; i < 24 ; ++ i ) v21 += ( * ( char * )( ++ v23 + a3 ) - 48 ) << i ; LODWORD ( v6 ) = v21 ; goto LABEL_75 ; case 1 : v21 = 0 ; for ( j = 0 ; j < 24 ; ++ j ) v21 += ( * ( char * )( ++ v23 + a3 ) - 48 ) << j ; HIDWORD ( v6 ) = v21 ; goto LABEL_75 ; case 2 : LODWORD ( v6 ) = * ( unsigned __int16 * )( v29 + 2 * v22 ++ ); LABEL_75 : v21 = 0 ; LABEL_76 : ++ v23 ; break ; case 3 : HIDWORD ( v6 ) = v6 ; goto LABEL_75 ; case 4 : v8 = v7 ; goto LABEL_75 ; case 5 : if ( ( signed int ) v6 < 128 ) * (( _DWORD * ) & v6 + v6 ) = HIDWORD ( v6 ); goto LABEL_75 ; case 6 : if ( SHIDWORD ( v6 ) < 128 ) LODWORD ( v6 ) = * (( _DWORD * ) & v6 + HIDWORD ( v6 )); goto LABEL_75 ; case 7 : if ( v7 < 128 ) * (( _DWORD * ) & v6 + v7 ) = v8 ; goto LABEL_75 ; case 8 : if ( v8 < 128 ) v7 = * (( _DWORD * ) & v6 + v8 ); goto LABEL_75 ; case 9 : LODWORD ( v6 ) = * ( _DWORD * )( v6 + 4 * HIDWORD ( v6 )); goto LABEL_75 ; case 10 : * ( _DWORD * )( v6 + 4 * HIDWORD ( v6 )) = v9 ; goto LABEL_75 ; case 11 : LODWORD ( v6 ) = HIDWORD ( v6 ) + v6 ; goto LABEL_75 ; case 12 : LODWORD ( v6 ) = v6 - HIDWORD ( v6 ); goto LABEL_75 ; case 13 : LODWORD ( v6 ) = HIDWORD ( v6 ) * v6 ; goto LABEL_75 ; case 14 : LODWORD ( v6 ) = ( signed int ) v6 / SHIDWORD ( v6 ); goto LABEL_75 ; case 15 : LODWORD ( v6 ) = HIDWORD ( v6 ) & v6 ; goto LABEL_75 ; case 16 : LODWORD ( v6 ) = HIDWORD ( v6 ) | v6 ; goto LABEL_75 ; case 17 : LODWORD ( v6 ) = HIDWORD ( v6 ) ^ v6 ; goto LABEL_75 ; case 18 : LODWORD ( v6 ) = ( _DWORD ) v6 << SBYTE4 ( v6 ); goto LABEL_75 ; case 19 : LODWORD ( v6 ) = ( signed int ) v6 >> SBYTE4 ( v6 ); goto LABEL_75 ; case 20 : LODWORD ( v6 ) = ( signed int ) v6 > SHIDWORD ( v6 ); goto LABEL_75 ; case 21 : LODWORD ( v6 ) = ( signed int ) v6 < SHIDWORD ( v6 ); goto LABEL_75 ; case 22 : LODWORD ( v6 ) = v6 == HIDWORD ( v6 ); goto LABEL_75 ; case 23 : LODWORD ( v6 ) = v6 != HIDWORD ( v6 ); goto LABEL_75 ; case 24 : LODWORD ( v6 ) = v23 ; goto LABEL_75 ; case 25 : v23 = v6 ; v21 = 0 ; break ; case 26 : if ( ( _DWORD ) v6 ) goto LABEL_75 ; v23 = HIDWORD ( v6 ); v21 = 0 ; break ; default : return result ; } } } \u5927\u6982\u662f\u4e2aVM\uff0c\u8c03\u8bd5\u8fc7\u7a0b\u4e2d\u5c06\u64cd\u4f5c\u7801dump\u51fa\u6765\uff0c\u55ef\uff0c\u590d\u5236\u7c98\u8d34 \u4e4b\u540e\u5206\u6790VM\u8fc7\u7a0b\uff0c\u5199\u4e2a\u811a\u672c\u5c06\u8fc7\u7a0b\u5927\u81f4\u8fd8\u539f\u4e00\u4e0b\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 codeopcode = 0 i = 0 j = 0 #LODWORD(x) = r0 #HIDWORD(x) = r1 while i < len ( code ): opcode = eval ( '0b' + code [ i : i + 6 ][:: - 1 ]) i += 6 if opcode == 0 : num = eval ( '0b' + code [ i : i + 24 ][:: - 1 ]) print ( 'mov r0,0x %x ' % num ) i += 24 elif opcode == 1 : num = eval ( '0b' + code [ i : i + 24 ][:: - 1 ]) print ( 'mov r1,0x %x ' % num ) i += 24 elif opcode == 2 : print ( 'mov r0\uff0cinput[ %d ]' % j ) elif opcode == 3 : print ( 'mov r1,r0' ) elif opcode == 4 : print ( 'mov r3,r2' ) elif opcode == 5 : print ( \"if r0 < 128:\" ) print ( ' \\t mov x[r0],r1' ) elif opcode == 6 : print ( \"if r1 < 128:\" ) print ( ' \\t mov r0,x[r1]' ) elif opcode == 7 : print ( \"if r3 < 128:\" ) print ( ' \\t mov x[r2],r3' ) elif opcode == 8 : print ( \"if r2 < 128:\" ) print ( ' \\t mov r2,x[r3]' ) elif opcode == 9 : print ( 'mov r0,x[4 * r1]' ) elif opcode == 0xA : print ( 'mov x[4 * r1],r4' ) elif opcode == 0xB : print ( 'add r0,r1' ) elif opcode == 0xC : print ( 'sub r0,r1' ) elif opcode == 0xD : print ( 'mul r0,r1' ) elif opcode == 0xE : print ( 'div r0,r1' ) elif opcode == 0xF : print ( 'and r0,r1' ) elif opcode == 0x10 : print ( 'or r0,r1' ) elif opcode == 0x11 : print ( 'xor r0,r1' ) elif opcode == 0x12 : print ( 'shl r0,r1' ) elif opcode == 0x13 : print ( 'shr r0,r1' ) elif opcode == 0x14 : print ( 'cmp r0,r1' ) print ( 'setnle r0' ) elif opcode == 0x15 : print ( 'cmp r0,r1' ) print ( 'setl r0' ) elif opcode == 0x16 : print ( 'cmp r0,r1' ) print ( 'setz r0' ) elif opcode == 0x17 : print ( \"cmp r0,r1\" ) print ( 'setnz r0' ) elif opcode == 0x18 : print ( \"mov r0,rip\" ) elif opcode == 0x19 : print ( \"mov rip,r0\" ) elif opcode == 0x1A : print ( \"cmp r0,0\" ) print ( 'je r1' ) else : print ( \"<unknown>\" ) \u5f97\u5230\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 mov r0 , 0 x26a mov r1 , r0 mov r0 \uff0c input [ 0 ] cmp r0 , 0 je r1 mov r1 , 0 x30 sub r0 , r1 mov r1 , r0 mov r0 , 0 x3 if r0 < 128 : mov x [ r0 ], r1 mov r0 , 0 x0 mov r1 , r0 mov r0 , 0 x2 if r0 < 128 : mov x [ r0 ], r1 mov r0 , 0 x7 mov r1 , r0 if r1 < 128 : mov r0 , x [ r1 ] mov r1 , r0 if r3 < 128 : mov x [ r2 ], r3 shl r0 , r1 mov r1 , r0 mov r0 , 0 x3 if r0 < 128 : mov x [ r0 ], r1 mov r0 , 0 x1 mov r1 , r0 mov r0 , 0 x2 if r0 < 128 : mov x [ r0 ], r1 mov r0 , 0 x6 mov r1 , r0 if r1 < 128 : mov r0 , x [ r1 ] if r3 < 128 : mov x [ r2 ], r3 add r0 , r1 mov r1 , r0 mov r0 , 0 x6 if r0 < 128 : mov x [ r0 ], r1 mov r1 , 0 x7 if r1 < 128 : mov r0 , x [ r1 ] mov r1 , 0 x1 add r0 , r1 mov r1 , r0 mov r0 , 0 x7 if r0 < 128 : mov x [ r0 ], r1 mov r0 , 0 x0 mov rip , r0 mov r1 , 0 x6 if r1 < 128 : mov r0 , x [ r1 ] mov r1 , 0 x7 mul r0 , r1 mov r1 , 0 xf423f cmp r0 , r1 setz r0 mov r1 , 0 xc36 cmp r0 , 0 je r1 ..... \u63a5\u4e0b\u6765\u5c31\u53ea\u80fd\u9760\u731c\u7684\u4e860.0 \u7531\u4e8e\u53c8\u8fd9\u51e0\u53e5\uff1a 1 2 3 4 5 6 7 8 mov r1 , 0 x7 mul r0 , r1 mov r1 , 0 xf423f cmp r0 , r1 setz r0 mov r1 , 0 xc36 cmp r0 , 0 je r1 \u731c\u6d4b\u8fd9\u91cc\u662fcheck\uff0c\u4e5f\u5c31\u662f\u8bf4\u6709\u53e6\u5916\u4e00\u4e2a\u6570(\u6682\u65f6\u4e0d\u77e5\u9053\u8fd9\u4e2a\u6570\u600e\u4e48\u7b97\u51fa\u6765\u7684)\uff0c\u8fd9\u4e2a\u6570*7 == 0xf423f, \u4e5f\u5c31\u662f0x22e09\u3002\u53c8\u56e0\u4e3a\u6574\u4e00\u4e2a\u903b\u8f91\u4e0b\u6765\u53ea\u6709\u4e00\u53e5 shl r0,r1 \uff0c\u6240\u4ee5\u731c\u6d4b\u6709\u53e6\u5916\u4e00\u4e2a\u4e8c\u8fdb\u5236\u6570\u8ddf\u5728\u524d512\u7684\u8f93\u5165\u4e4b\u540e\uff0c\u800c\u8fd9\u4e2a\u4e8c\u8fdb\u5236\u6570\u5e94\u8be5\u4e3a\u202d100010111000001001\u202c(==0x22e09)\u800c\u4e14\u8f93\u5165\u5e94\u8be5\u662f\u5927\u7aef\u5e8f\uff0c\u4e5f\u5c31\u662f100100000111010001,\u5373\u6574\u4e2a\u7b2c\u4e8c\u90e8\u5206\u903b\u8f91\u5927\u6982\u662f 1 2 3 4 5 6 input = \"100100000111010001\" sum = 0 for i in range ( len ( input )): sum += ( ord ( input ) - 0x30 ) << i if sum * 7 == 0xf423f : print ( \"sucess\" ) \u6240\u4ee5\u6574\u4e2a\u8f93\u5165\u4e3a\u524d512\u4f4d\u8f93\u51fa\u63a5\u4e0a100100000111010001\uff1au5f97\u5230flag:13yR01sw3iy1l1n9","title":"\u7b2c\u4e8c\u90e8\u5206"},{"location":"ctf_write_up/2019/2019starctf/","text":"\u8d5b\u540e\u590d\u73b0\uff0c\u5b66\u4e60\u5b66\u4e60\uff01 yy \u9898\u76ee\uff1a yy \u8fd9\u9898\u771f\u662f\u8c03\u548c\u731c\u51fa\u6765\u76840.0..... \u6839\u636e\u8c03\u8bd5\u548c\u731c\u6d4b\uff0c\u4eceyylex()\u51fd\u6570\u4e2d\u7684yysec[]\u6570\u7ec4\u53ef\u4ee5\u731c\u51fa\u5408\u6cd5\u5b57\u7b26\u4e3a\u3002 1 2 3 4 5 6 7 8 yyaccept = [] for i in range ( len ( yyec )) : if yyec [ i ] != 0x01 : yyaccept . append ( i ) print ( \"\" . join ( map ( chr , yyaccept ))) yyaccept = \"*0123456789CFT_abcdefghijklmnopqrstuvwxyz{}\" \u731c\u6d4b\u4e3a\uff1a*CTF{0123456789_abcdefghijklmnopqrstuvwxyz} \u7ee7\u7eed\u8c03\u8bd5\u53ef\u53d1\u73b0,\u7a0b\u5e8f\u4f1a\u6839\u636e\u8f93\u5165\u5b57\u7b26\u4ecebox[]\u4e2d\u53d6\u51fa\u5bf9\u5e94\u7684\u5b57\u7b26\u66ff\u6362buffer\u4e2d\u7684\u5b57\u7b26\uff0c\u800c \u201c_\u201d \u5219\u662f\u8c03\u7528aes cbc encrypt\u8fdb\u884c\u52a0\u5bc6,\u5e76\u66f4\u65b0buffer\u3002\u6700\u7ec8\u548ccmp\u8fdb\u884c\u5bf9\u6bd4\uff1aswitch ( ( unsigned int ) & savedregs ) { case 2u : if ( ! memcmp ( result , cmp , 0xA0uLL ) ) puts ( \"Congratulations!\" ); else puts ( \"try again!\" ); break ; case 3u : pc = 0 ; buffer = * ( _QWORD * ) & append ; qword_5556FE90A3E8 = qword_5556FE90A2B8 ; break ; case 7u : pc = 0 ; buffer = * ( _QWORD * ) & append ; qword_5556FE90A3E8 = qword_5556FE90A2B8 ; break ; case 8u : aes_cbc_encrypt ( & buffer ); break ; case 0xBu : aes_cbc_encrypt ( & buffer ); break ; case 0xFu : v1 = pc ++ ; * (( _BYTE * ) & buffer + v1 ) = box [ 0 ]; break ; case 0x10u : v2 = pc ++ ; * (( _BYTE * ) & buffer + v2 ) = box [ 1 ]; break ; case 0x11u : v3 = pc ++ ; * (( _BYTE * ) & buffer + v3 ) = box [ 2 ]; break ; case 0x12u : v4 = pc ++ ; * (( _BYTE * ) & buffer + v4 ) = box [ 3 ]; break ; case 0x13u : v5 = pc ++ ; * (( _BYTE * ) & buffer + v5 ) = box [ 4 ]; break ; case 0x14u : v6 = pc ++ ; * (( _BYTE * ) & buffer + v6 ) = box [ 5 ]; break ; case 0x15u : v7 = pc ++ ; * (( _BYTE * ) & buffer + v7 ) = box [ 6 ]; break ; case 0x16u : v8 = pc ++ ; * (( _BYTE * ) & buffer + v8 ) = box [ 7 ]; break ; case 0x17u : v9 = pc ++ ; * (( _BYTE * ) & buffer + v9 ) = box [ 8 ]; break ; case 0x18u : v10 = pc ++ ; * (( _BYTE * ) & buffer + v10 ) = box [ 9 ]; break ; case 0x19u : v11 = pc ++ ; * (( _BYTE * ) & buffer + v11 ) = box [ 10 ]; break ; case 0x1Au : v12 = pc ++ ; * (( _BYTE * ) & buffer + v12 ) = box [ 11 ]; break ; case 0x1Bu : v13 = pc ++ ; * (( _BYTE * ) & buffer + v13 ) = box [ 12 ]; break ; case 0x1Cu : v14 = pc ++ ; * (( _BYTE * ) & buffer + v14 ) = box [ 13 ]; break ; case 0x1Du : v15 = pc ++ ; * (( _BYTE * ) & buffer + v15 ) = box [ 14 ]; break ; case 0x1Eu : v16 = pc ++ ; * (( _BYTE * ) & buffer + v16 ) = box [ 15 ]; break ; case 0x1Fu : v17 = pc ++ ; * (( _BYTE * ) & buffer + v17 ) = box [ 16 ]; break ; case 0x20u : v18 = pc ++ ; * (( _BYTE * ) & buffer + v18 ) = box [ 17 ]; break ; case 0x21u : v19 = pc ++ ; * (( _BYTE * ) & buffer + v19 ) = box [ 18 ]; break ; case 0x22u : v20 = pc ++ ; * (( _BYTE * ) & buffer + v20 ) = box [ 19 ]; break ; case 0x23u : v21 = pc ++ ; * (( _BYTE * ) & buffer + v21 ) = box [ 20 ]; break ; case 0x24u : v22 = pc ++ ; * (( _BYTE * ) & buffer + v22 ) = box [ 21 ]; break ; case 0x25u : v23 = pc ++ ; * (( _BYTE * ) & buffer + v23 ) = box [ 22 ]; break ; case 0x26u : v24 = pc ++ ; * (( _BYTE * ) & buffer + v24 ) = box [ 23 ]; break ; case 0x27u : v25 = pc ++ ; * (( _BYTE * ) & buffer + v25 ) = box [ 24 ]; break ; case 0x28u : v26 = pc ++ ; * (( _BYTE * ) & buffer + v26 ) = box [ 25 ]; break ; case 0x29u : v27 = pc ++ ; * (( _BYTE * ) & buffer + v27 ) = box [ 26 ]; break ; case 0x2Au : v28 = pc ++ ; * (( _BYTE * ) & buffer + v28 ) = box [ 27 ]; break ; case 0x2Bu : v29 = pc ++ ; * (( _BYTE * ) & buffer + v29 ) = box [ 28 ]; break ; case 0x2Cu : v30 = pc ++ ; * (( _BYTE * ) & buffer + v30 ) = box [ 29 ]; break ; case 0x2Du : v31 = pc ++ ; * (( _BYTE * ) & buffer + v31 ) = box [ 30 ]; break ; case 0x2Eu : v32 = pc ++ ; * (( _BYTE * ) & buffer + v32 ) = box [ 31 ]; break ; case 0x2Fu : v33 = pc ++ ; * (( _BYTE * ) & buffer + v33 ) = box [ 32 ]; break ; case 0x30u : v34 = pc ++ ; * (( _BYTE * ) & buffer + v34 ) = box [ 33 ]; break ; case 0x31u : v35 = pc ++ ; * (( _BYTE * ) & buffer + v35 ) = box [ 34 ]; break ; case 0x32u : v36 = pc ++ ; * (( _BYTE * ) & buffer + v36 ) = box [ 35 ]; break ; default : break ; } \u5219\u89e3\u5bc6\u811a\u672c\u5982\u4e0b\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 from Crypto . Cipher import AES key = b \" \\x2B\\x7E\\x15\\x16\\x28\\xAE\\xD2\\xA6\\xAB\\xF7\\x15\\x88\\x09\\xCF\\x4F\\x3C \" # print(len(key)) cmp = [ 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0xAE , 0x46 , 0x14 , 0xF8 , 0x2A , 0x40 , 0xCF , 0x50 , 0x31 , 0xD3 , 0xFE , 0x04 , 0x8C , 0x06 , 0x12 , 0x12 , 0x23 , 0xFA , 0xC7 , 0x26 , 0xE8 , 0x61 , 0xD9 , 0xC3 , 0xA9 , 0x3C , 0x45 , 0x70 , 0x1A , 0xC7 , 0xF0 , 0x3D , 0xDF , 0xBE , 0xBC , 0x16 , 0xAB , 0x6E , 0x37 , 0xAC , 0x14 , 0x8B , 0x9C , 0x94 , 0xF7 , 0x5D , 0x62 , 0x78 , 0xFC , 0x16 , 0x98 , 0x1D , 0xB2 , 0x31 , 0xD3 , 0x5A , 0xDC , 0x3A , 0x60 , 0x86 , 0x9A , 0xCA , 0x7B , 0xA3 , 0xB5 , 0xD5 , 0xF1 , 0xB2 , 0xD9 , 0xFF , 0xD2 , 0x09 , 0xD4 , 0x77 , 0xD7 , 0x3D , 0xC0 , 0x56 , 0x19 , 0x02 , 0xB6 , 0x9B , 0x42 , 0x6C , 0xE8 , 0xA2 , 0x77 , 0xE3 , 0x99 , 0xAC , 0x32 , 0x40 , 0x91 , 0xA9 , 0x2A , 0x86 , 0xF3 , 0xFA , 0x47 , 0x3C , 0xC3 , 0x5C , 0x41 , 0x9B , 0xE8 , 0x05 , 0x07 , 0xD0 , 0xD4 , 0x30 , 0x5A , 0x9E , 0x8D , 0x52 , 0x9B , 0xA3 , 0xFB , 0xAD , 0xB6 , 0x44 , 0x3F , 0x72 , 0x83 , 0x9C , 0x22 , 0x77 , 0xFE , 0x48 , 0xFE , 0x86 , 0x84 , 0x12 , 0x00 , 0x4E , 0xED , 0xFF , 0xAC , 0x44 , 0x19 , 0x23 , 0x84 , 0x1F , 0x12 , 0xCA ] append = [ 0x61 , 0x24 , 0x25 , 0x86 , 0x31 , 0xAB , 0x6E , 0xAF , 0xB1 , 0x14 , 0xFE , 0x76 , 0x78 , 0x3D , 0x1E , 0xFF ] box = { 0x82 : \"a\" , 0x05 : \"b\" , 0x86 : \"c\" , 0x8A : \"d\" , 0x0B : 'e' , 0x11 : 'f' , 0x96 : 'g' , 0x1D : 'h' , 0x27 : 'i' , 0xA9 : 'j' , 0x2B : 'k' , 0xB1 : 'l' , 0xF3 : 'm' , 0x5E : 'n' , 0x37 : 'o' , 0x38 : 'p' , 0xC2 : 'q' , 0x47 : 'r' , 0x4E : 's' , 0x4F : 't' , 0xD6 : 'u' , 0x58 : 'v' , 0xDE : 'w' , 0xE2 : 'x' , 0xE5 : 'y' , 0xE6 : 'z' , 0x67 : '0' , 0x6B : '1' , 0xEC : '2' , 0xED : '3' , 0x6F : '4' , 0xF2 : '5' , 0x73 : '6' , 0xF5 : '7' , 0x77 : '8' , 0x7F : '9' } Cipher = b \"\" for i in cmp : Cipher += bytes ([ i ]) obj = AES . new ( key , AES . MODE_CBC , key ) plain = obj . decrypt ( Cipher ) flag = \"\" index = 0 for i in plain : try : flag += box [ i ] index += 1 except KeyError : if flag [ index - 1 ] != \"_\" : flag += '_' index += 1 print ( flag ) #yy_funct10n_1s_h4rd_and_n0_n33d_to_r3v3rs3 \u7531\u4e8eappend\u4e2d\u6709\u53ef\u8f6c\u5316\u5b57\u7b26\uff0c\u6240\u4ee5\u6253\u5370\u51fa\u6765\u540e\u624b\u52a8\u9664\u53bbhhhhh........ \u6700\u7ec8flag\u5982\u4e0b\uff1a *CTF{yy funct10n 1s h4rd and n0 n33d to r3v3rs3} fanoGo \u9898\u76ee\uff1a fanoGo \u672c\u9898\u4e00\u8def\u8fde\u731c\u5e26\u8499\u3002\u3002\u3002 \u6839\u636e\u8f93\u51fa Say something: \u627e\u5230\u4e3b\u8981\u51fd\u6570.......\u770b\u4e0d\u61c2\uff0c\u5f00\u59cb\u8c03\u8bd5\uff1a \u8f93\u5165\u540e\u4f1a\u7ecf\u8fc7 fano___Fano__Decode \u51fd\u6570\u8fdb\u884c\u89e3\u7801(\u4e3a\u4ec0\u4e48\u662f\u89e3\u7801\u540d\u5b57\u8bf4\u7684\u5f88\u6e05\u695ahhh),\u89e3\u7801\u540e\u957f\u5ea6\u4e3a0x15A,\u7531\u8be5\u8bed\u53e5\u786e\u8ba4\uff1a 1 if ( e . _type == ( runtime__type_0 * ) 0x15A ) \u540e\u8fdb\u5165runtime_eqstring()\u51fd\u6570\u8fdb\u884c\u5bf9\u6bd4,\u6c47\u7f16\u4ee3\u7801\u5982\u4e0b0.0\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 .text: 0000000000456 B83 cmp rbx , 40 h .text: 0000000000456 B87 jb short loc_456BC6 .text: 0000000000456 B89 vmovdqu ymm0 , ymmword ptr [ rsi ] .text: 0000000000456 B8D vmovdqu ymm1 , ymmword ptr [ rdi ] .text: 0000000000456 B91 vmovdqu ymm2 , ymmword ptr [ rsi + 20 h ] .text: 0000000000456 B96 vmovdqu ymm3 , ymmword ptr [ rdi + 20 h ] .text: 0000000000456 B9B vpcmpeqb ymm4 , ymm0 , ymm1 .text: 0000000000456 B9F vpcmpeqb ymm5 , ymm3 , ymm2 .text: 0000000000456 BA3 vpand ymm6 , ymm5 , ymm4 .text: 0000000000456 BA7 vpmovmskb edx , ymm6 .text: 0000000000456 BAB add rsi , 40 h .text: 0000000000456 BAF add rdi , 40 h .text: 0000000000456 BB3 sub rbx , 40 h .text: 0000000000456 BB7 cmp edx , 0 FFFFFFFFh .text: 0000000000456 BBD jz short loc_456B83 \u800c\u8c03\u8bd5\u7740\u53ef\u4ee5\u53d1\u73b0\u5bf9\u6bd4\u5bf9\u8c61\u5c31\u662f\u8fd9\u4e32\uff1a 1 2 3 4 \"If you cannot read all your books...fondle them---peer into them, let them fall open where they w\" \"ill, read from the first sentence that arrests the eye, set them back on the shelves with your ow\" \"n hands, arrange them on your own plan so that you at least know where they are. Let them be your\" \" friends; let them, at any rate, be your acquaintances.\" \u5c1d\u8bd5\u641c\u7d22Encode\u51fd\u6570,\u8fd8\u771f\u6709hhhhhh\uff0cpatch\u4e0a\u53bb\uff0c\u5c06\u4e0a\u9762\u90a3\u4e32\u8fdb\u884c\u7f16\u7801\u5c31\u5f97\u5230\u6211\u4eec\u7684\u8f93\u5165\u3002 \u811a\u672c\uff1a 1 2 3 4 5 6 7 8 9 10 11 from pwn import * exp = process ( \"./fanoGo\" ) # cmp = \"\\x49\\x66\\x20\\x79\\x6F\\x75\\x20\\x63\\x61\\x6E\\x6E\\x6F\\x74\\x20\\x72\\x65\\x61\\x64\\x20\\x61\\x6C\\x6C\\x20\\x79\\x6F\\x75\\x72\\x20\\x62\\x6F\\x6F\\x6B\\x73\\x2E\\x2E\\x2E\\x66\\x6F\\x6E\\x64\\x6C\\x65\\x20\\x74\\x68\\x65\\x6D\\x2D\\x2D\\x2D\\x70\\x65\\x65\\x72\\x20\\x69\\x6E\\x74\\x6F\\x20\\x74\\x68\\x65\\x6D\\x2C\\x20\\x6C\\x65\\x74\\x20\\x74\\x68\\x65\\x6D\\x20\\x66\\x61\\x6C\\x6C\\x20\\x6F\\x70\\x65\\x6E\\x20\\x77\\x68\\x65\\x72\\x65\\x20\\x74\\x68\\x65\\x79\\x20\\x77\\x69\\x6C\\x6C\\x2C\\x20\\x72\\x65\\x61\\x64\\x20\\x66\\x72\\x6F\\x6D\\x20\\x74\\x68\\x65\\x20\\x66\\x69\\x72\\x73\\x74\\x20\\x73\\x65\\x6E\\x74\\x65\\x6E\\x63\\x65\\x20\\x74\\x68\\x61\\x74\\x20\\x61\\x72\\x72\\x65\\x73\\x74\\x73\\x20\\x74\\x68\\x65\\x20\\x65\\x79\\x65\\x2C\\x20\\x73\\x65\\x74\\x20\\x74\\x68\\x65\\x6D\\x20\\x62\\x61\\x63\\x6B\\x20\\x6F\\x6E\\x20\\x74\\x68\\x65\\x20\\x73\\x68\\x65\\x6C\\x76\\x65\\x73\\x20\\x77\\x69\\x74\\x68\\x20\\x79\\x6F\\x75\\x72\\x20\\x6F\\x77\\x6E\\x20\\x68\\x61\\x6E\\x64\\x73\\x2C\\x20\\x61\\x72\\x72\\x61\\x6E\\x67\\x65\\x20\\x74\\x68\\x65\\x6D\\x20\\x6F\\x6E\\x20\\x79\\x6F\\x75\\x72\\x20\\x6F\\x77\\x6E\\x20\\x70\\x6C\\x61\\x6E\\x20\\x73\\x6F\\x20\\x74\\x68\\x61\\x74\\x20\\x79\\x6F\\x75\\x20\\x61\\x74\\x20\\x6C\\x65\\x61\\x73\\x74\\x20\\x6B\\x6E\\x6F\\x77\\x20\\x77\\x68\\x65\\x72\\x65\\x20\\x74\\x68\\x65\\x79\\x20\\x61\\x72\\x65\\x2E\\x20\\x4C\\x65\\x74\\x20\\x74\\x68\\x65\\x6D\\x20\\x62\\x65\\x20\\x79\\x6F\\x75\\x72\\x20\\x66\\x72\\x69\\x65\\x6E\\x64\\x73\\x3B\\x20\\x6C\\x65\\x74\\x20\\x74\\x68\\x65\\x6D\\x2C\\x20\\x61\\x74\\x20\\x61\\x6E\\x79\\x20\\x72\\x61\\x74\\x65\\x2C\\x20\\x62\\x65\\x20\\x79\\x6F\\x75\\x72\\x20\\x61\\x63\\x71\\x75\\x61\\x69\\x6E\\x74\\x61\\x6E\\x63\\x65\\x73\\x2E\\x00\" cmp = \" \\x2B\\x60\\xC3\\xBE\\xC2\\xB7\\xC2\\x82\\xC2\\x89\\xC3\\x95\\x5B\\xC2\\x87\\x2A\\x69\\x13\\xC2\\x96\\x51\\xC3\\xBD\\x6F\\x32\\x28\\x5A\\xC3\\x92\\x74\\xC2\\x94\\xC2\\x94\\xC2\\x95\\xC2\\x96\\xC2\\xA4\\xC3\\x8A\\xC2\\xA3\\xC3\\x8E\\xC2\\xB3\\x24\\x24\\x24\\xC2\\xBA\\xC2\\xAE\\x46\\x2B\\xC2\\xAC\\x3C\\xC3\\xAB\\x32\\x23\\x2A\\xC3\\xB0\\xC3\\xB3\\xC2\\xAC\\xC3\\x85\\xC2\\x87\\x2C\\xC2\\xA3\\x6B\\xC2\\xAD\\x0F\\xC3\\x87\\x5C\\xC2\\xA8\\xC3\\xB3\\xC2\\xAF\\xC3\\xA1\\xC3\\xB9\\x12\\xC3\\x8A\\x44\\x72\\xC2\\xA6\\xC2\\x91\\x66\\x6D\\x31\\xC3\\xA7\\x51\\x64\\x67\\x78\\x75\\x6B\\xC2\\x96\\xC2\\x91\\x51\\xC3\\xA7\\x3E\\x13\\xC3\\x8E\\x57\\x7B\\x47\\xC2\\x9D\\x45\\x7F\\x29\\x11\\xC3\\x95\\xC3\\xA1\\xC3\\xA7\\x59\\xC2\\x8A\\x06\\xC2\\x8C\\xC2\\x91\\xC2\\xB5\\x0F\\x3A\\xC2\\x8E\\xC2\\xBA\\xC3\\x8B\\xC3\\xAA\\xC3\\xA8\\xC3\\xBC\\xC2\\x8E\\x71\\xC3\\xBD\\x6F\\x32\\x36\\xC3\\xB9\\x42\\xC3\\xA7\\x49\\xC3\\x92\\x22\\x79\\xC3\\x89\\xC3\\x93\\x54\\x79\\xC3\\x96\\x63\\x6A\\x1F\\xC3\\x96\\xC3\\xB3\\x23\\x6F\\xC2\\x94\\x37\\xC2\\x94\\xC3\\xA8\\x76\\xC3\\x83\\xC3\\x8E\\x7C\\x3F\\xC2\\xAD\\xC3\\xA0\\xC2\\x9F\\x0C\\xC2\\xAA\\x7B\\xC3\\x83\\x26\\xC2\\xAD\\xC3\\xB0\\x7E\\x3A\\xC3\\xA5\\x47\\xC2\\x9D\\x7F\\x09\\xC3\\xA5\\x49\\x44\\xC2\\xB0\\xC2\\xAF\\x0F\\x3A\\xC3\\x8C\\x50\\x51\\xC3\\xBD\\x6F\\x32\\x2C\\xC3\\x8C\\x2D\\x27\\x49\\xC3\\xA3\\x2A\\xC3\\xB0\\xC3\\xB3\\xC2\\xAC\\xC3\\x88\\xC2\\x89\\xC3\\xB0\\xC2\\x9D\\x7E\\x1C\\xC2\\x9F\\x29\\x11\\x41\\x47\\xC3\\xB5\\xC2\\xBC\\xC3\\x88\\xC2\\x9A\\x38\\xC3\\xB0\\xC3\\xA2\\xC2\\xB8\\xC3\\xA9\\x15\\xC3\\x92\\x50 \" exp . sendafter ( \"Say something:\" , cmp ) exp . interactive () \u7531\u4e8e\u662f\u540e\u9762\u505a\u7684\uff0c\u7aef\u53e3\u5df2\u7ecf\u5173\u4e86,\u6240\u4ee5\u53ea\u80fd\u672c\u5730\u6253\u4e86hhhhhh Matr1x \u9898\u76ee\uff1a Matr1x \u9898\u76ee\u4e00\u6253\u5f00\uff0c\u901a\u8fc7start\u627e\u5230main\u51fd\u6570\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 .text: 00002620 start proc near ; DATA XREF: LOAD:00000018\u2191o .text: 00002620 xor ebp , ebp .text: 00002622 pop esi .text: 00002623 mov ecx , esp .text: 00002625 and esp , 0 FFFFFFF0h .text: 00002628 push eax .text: 00002629 push esp ; stack_end .text: 0000262 A push edx ; rtld_fini .text: 0000262 B call sub_2652 .text: 00002630 add ebx , 10994 h .text: 00002636 lea eax , ( nullsub_1 - 12 FC4h )[ ebx ] .text: 0000263 C push eax ; fini .text: 0000263 D lea eax , ( sub_11250 - 12 FC4h )[ ebx ] .text: 00002643 push eax ; init .text: 00002644 push ecx ; ubp_av .text: 00002645 push esi ; argc .text: 00002646 push ds :( off_12FF8 - 12 FC4h )[ ebx ] ; main .text: 0000264 C call ___libc_start_main .text: 00002651 hlt .text: 00002651 start endp .text: 00002651 \u53bb\u82b1\u6307\u4ee4\u548c\u5197\u4f59\u4ee3\u7801 .....\u4e00\u5806\u82b1\u6307\u4ee4\u548c\u5197\u4f59\u4ee3\u7801\u3002\u90a3\u5c31\u53bb\u6389\u54af\u3002 \u5176\u4e2d\uff0c\u9664\u53bb\u5168\u5c40\u53d8\u91cf\u7684\u4ee3\u7801\u5982\u679c\u4e4b\u95f4\u5728\u5168\u5c40\u53d8\u91cf\u8d4b\u503c\u5904patch\u4f1a\u51fa\u95ee\u9898\uff0c\u6765\u81eaApeng\u5927\u4f6c\u7684\u6307\u5bfc\uff1a Note \u95ee\u9898\u51fa\u5728pie\u7684\u91cd\u5b9a\u4f4d\u4e0a\u4e86\uff0c\u7531\u4e8e\u7a0b\u5e8f\u539f\u672c\u5f00\u542f\u4e86pie\uff0c\u5bf9\u5168\u5c40\u53d8\u91cf\u5f15\u7528\u7684\u65f6\u5019\u5730\u5740\u662f\u4f1a\u53d8\u7684\uff0c\u6240\u4ee5elf\u8fd0\u884c\u7684\u65f6\u5019\u4f1a\u628a\u6240\u6709\u8fd9\u4e9b\u5168\u5c40\u53d8\u91cf\u7684\u5f15\u7528\u90fdpatch\u6210\u91cd\u5b9a\u4f4d\u4e4b\u540e\u7684\u3002\u800c\u4ed6\u67e5\u627e\u7684\u65b9\u5f0f\u80af\u5b9a\u4e0d\u662f\u6839\u636e\u8bed\u53e5\u6765\u67e5\uff0c\u53ef\u80fd\u662f\u6709\u4e2a\u8868\uff0c\u6240\u4ee5\u6240\u6709\u8fd9\u4e9b\u5168\u5c40\u53d8\u91cf\u90fd\u4f1a\u88abpatch\u3002\u6240\u4ee5\u53ea\u9700\u8981\u628amov eax,0xxx\u8fd9\u53e5\u8bddpatch\u5230\u5176\u4ed6\u5730\u65b9\u5c31\u884c\u4e86 \u6240\u4ee5\u7a0d\u5fae\u4fee\u6539\u4e86\u4e00\u4e0b\uff0c\u6700\u7ec8\u5982\u4e0b\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 bg = 0x00002620 end = 0x00011320 addr = bg index = 0 def patch_nop ( begin , end ): while end > begin : PatchByte ( begin , 0x90 ) begin += 1 def next_instr ( addr ): return addr + ItemSize ( addr ) def patch_global ( addr , eax ): flag = GetMnem ( addr ) ebx = GetOperandValue ( addr , 1 ) if flag == \"xor\" : eax ^= ebx elif flag == \"shl\" : eax <<= ebx elif flag == \"sub\" : eax -= ebx elif flag == \"add\" : eax += ebx elif flag == \"and\" : eax &= ebx elif flag == \"shr\" : eax >>= ebx elif flag == \"or\" : eax |= ebx return eax & 0xFFFFFFFF OperandValue = [ 'or' , 'shr' , 'and' , 'add' , 'sub' , 'shl' , 'xor' ] Register = [ 'ebx' , 'ecx' , 'edx' , 'eax' ] Patch_jnz = [ 'xor' , 'sub' ] dest_addr = 0 _addr = 0 while addr < end : next = next_instr ( addr ) MakeCode ( next ) if GetMnem ( addr ) in Patch_jnz and 'jnz' in GetMnem ( next ): if GetOperandValue ( addr , 0 ) == GetOperandValue ( addr , 1 ): print ( \"sucess_patch_jnz: %x \" % addr ) dest_addr = next_instr ( next ) patch_nop ( next , dest_addr ) if \"call $+5\" == GetDisasm ( addr ): if \"pop eax\" == GetDisasm ( next ): dest_addr = addr for i in range ( 4 ): dest_addr = next_instr ( dest_addr ) MakeCode ( dest_addr ) if \"jmp\" in GetMnem ( dest_addr ): print ( \"sucess_patch_call: %x \" % addr ) patch_nop ( addr , dest_addr ) PatchByte ( dest_addr , 0xE8 ) if \"xchg\" in GetMnem ( addr ): if GetOperandValue ( addr , 1 ) == GetOperandValue ( addr , 0 ): print ( \"sucess_patch_xchg: %x \" % addr ) patch_nop ( addr , next ) if \"jmp $+5\" == GetDisasm ( addr ): if \"leave\" in GetMnem ( next ): patch_nop ( addr , next ) print ( \"sucess_patch_jmp: %x \" % addr ) next = next_instr ( next ) addr = next next = next_instr ( next ) next = next_instr ( next ) patch_nop ( addr , next ) PatchByte ( addr , 0xC3 ) if \"[ebp\" in GetDisasm ( addr ) and GetOperandValue ( addr , 1 ) > 0x10000 and GetOperandValue ( addr , 1 ) < ( 0xFFFFFFFF - 0x10000 ): patch_nop ( addr , next ) print ( \"sucess_patch_ebp: %x \" % addr ) if 0x0001329C >= GetOperandValue ( addr , 1 ) >= 0x00013280 : print ( \"sucess: %x \" % addr ) eax = Dword ( GetOperandValue ( addr , 1 )) _addr = addr Reg = GetOperandValue ( addr , 0 ) while GetMnem ( next ) in OperandValue : eax = patch_global ( next , eax ) _addr = next next = next_instr ( next ) MakeCode ( _addr ) MakeCode ( next ) if GetOperandValue ( _addr , 0 ) != GetOperandValue ( next , 0 ): break elif GetOpnd ( next , 1 ) in Register : break if GetOpnd ( _addr , 0 ) == GetOpnd ( _addr , 1 ): Reg = - 1 if Reg != - 1 : addr = next_instr ( addr ) patch_nop ( addr , next ) if Reg == 3 : PatchByte ( addr , 0xBB ) PatchDword ( addr + 1 , eax ) elif Reg == 2 : PatchByte ( addr , 0xBA ) PatchDword ( addr + 1 , eax ) elif Reg == 1 : PatchByte ( addr , 0xB9 ) PatchDword ( addr + 1 , eax ) elif Reg == 0 : PatchByte ( addr , 0xB8 ) PatchDword ( addr + 1 , eax ) addr = next_instr ( addr ) MakeCode ( addr ) \u4e4b\u540e\u5c31\u53ef\u4ee5F5\uff0c\u4f46\u662f\u7531\u4e8eIDA\u662f\u8f6f\u4ef6\u5206\u6790\uff0c\u6240\u4ee5\u90a3\u4e9b\u51fd\u6570\u5f97\u4e00\u4e2a\u4e2aF5..... \u4e4b\u540e\u518d\u624b\u52a8\u53bb\u6389\u5197\u4f59\u4ee3\u7801\uff0c\u5c31\u53ef\u4ee5\u5f88\u6109\u5feb\u7684\u5206\u6790\u4e86\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 printf ( format ); _isoc99_scanf ( a255s , input ); v8 = strlen ( input ); for ( i = 0 ; i < v8 / 2 ; ++ i ) * v7 = ( input [ 2 * i + 1 ] - '0' ) | 16 * ( input [ 2 * i ] - '0' ); v9 [ v8 / 2 ] = 0 ; sub_39C7 ( v9 ); if ( sub_4638 () ) { memset ( s , 0 , 0x1Cu ); for ( i = 0 ; i < 6 ; ++ i ) { v3 = 0 ; v5 = cube [ i ]; v4 = mul_cube [ i ]; for ( j = 0 ; j < 9 ; ++ j ) v3 += v4 [ j ] * v5 [ j ]; * ( _DWORD * ) & s [ 4 * i ] = v3 ; } printf ( aHereIsYourFlag , s ); } else { v1 = puts ( aTryAgain ) | v0 ; } return 0 ; } \u7b97\u6cd5 1 2 for ( i = 0 ; i < v8 / 2 ; ++ i ) * v7 = ( input [ 2 * i + 1 ] - '0' ) | 16 * ( input [ 2 * i ] - '0' ); \u8fd9\u4e2a\u5faa\u73af\u5c06\u8f93\u5165\u6bcf\u4e24\u4f4d\u4e00\u7ec4\u8f6c\u6210\u5341\u516d\u8fdb\u5236\u6570\uff1a\u4f8b\u5982\u8f93\u51651234\u4f1a\u8f6c\u62100x12,0x34 \u4e3b\u8981\u64cd\u4f5c\u4e3a sub_39C7(v9); 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 int __cdecl sub_39C7 ( char * s ) { int v1 ; // ecx signed int i ; // [esp+54h] [ebp-8h] signed int v4 ; // [esp+58h] [ebp-4h] v4 = strlen ( s ); for ( i = 0 ; i < v4 ; ++ i ) { v1 = s [ i ]; switch ( v1 ) { case 0x10 : sub_6D47 (); break ; case 0x15 : sub_76DF (); break ; case 0x11 : sub_818A (); break ; case 0x14 : sub_88B8 (); break ; case 0x12 : sub_9131 (); break ; case 0x13 : sub_9BE7 (); break ; case 0x20 : sub_A570 (); break ; case 0x25 : sub_AC8E (); break ; case 0x21 : sub_B43B (); break ; case 0x24 : sub_BC72 (); break ; case 0x22 : sub_C2E1 (); break ; case 0x23 : sub_C9C9 (); break ; case 0x30 : sub_D14D (); break ; case 0x35 : sub_DB6D (); break ; case 0x31 : sub_E5D7 (); break ; case 0x34 : sub_EE9E (); break ; case 0x32 : sub_F7F9 (); break ; case 0x33 : sub_101AD (); break ; default : return 1 ; } } return 0 ; } \u6839\u636ecase\u53ef\u4ee5\u77e5\u9053\u6211\u4eec\u8f93\u5165\u7684\u8303\u56f4\uff1a 10~15\uff0c20~25\uff0c30~35 \u968f\u4fbf\u8fdb\u53bb\u4e00\u4e2a\u770b\u4e00\u4e0b(\u8fd9\u91cc\u4e5f\u6709\u4e00\u4e9b\u5197\u4f59\u4ee3\u7801\u6211\u624b\u52a8\u53bb\u6389\u4e86\uff0c\uff0c\u4fbf\u4e8e\u5206\u6790)\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 int sub_6D47 () { int i ; // [esp+5Ch] [ebp-8h] int v2 ; // [esp+60h] [ebp-4h] v2 = 0 ; for ( i = 0 ; i < 3 ; ++ i ) { v2 = A [ 3 * i + 2 ]; A [ 3 * i + 2 ] = F [ 3 * i + 2 ]; F [ 3 * i + 2 ] = B [ 3 * i + 2 ]; B [ 3 * i + 2 ] = E [ 3 * i + 2 ]; E [ 3 * i + 2 ] = v2 ; } return sub_5C20 ( D ); } \u5e94\u8be5\u662f\u4e2a\u8f6e\u6362\u3002 \u518d\u6839\u636e\u7ecf\u9a8c\u4e0d\u96be\u63a8\u51fa\uff0c\u8fd9\u5e94\u8be5\u662f\u4e00\u4e2a3\u9636\u9b54\u65b9\uff1a \u4e00\u51716\u4e2a\u9762\uff0c\u6bcf\u4e2a\u9762\u67099\u4e2a\u5143\u7d20\uff0c\u5171\u67093*6=18\u79cd\u64cd\u4f5c \u5224\u65ad\u51fd\u6570sub_4638(): 1 2 3 4 5 6 7 8 9 10 11 12 13 14 int sub_4638 () { int ( * v0 )[ 9 ]; // ST00_4 signed int i ; // [esp+4h] [ebp-8h] int v3 ; // [esp+8h] [ebp-4h] v3 = 1 ; for ( i = 0 ; i < 6 && v3 ; ++ i ) { v0 = cube [ i ]; v3 = (( * v0 )[ 7 ] + ( * v0 )[ 5 ] + ( * v0 )[ 4 ] + ( * v0 )[ 3 ] + ( * v0 )[ 1 ] == cmp [ 2 * i + 1 ]) & (( * v0 )[ 8 ] + ( * v0 )[ 6 ] + ( * v0 )[ 4 ] + ( * v0 )[ 2 ] + ( * v0 )[ 0 ] == cmp [ 2 * i ]) & ( unsigned __int8 ) v3 ; } return v3 ; } \u53ef\u4ee5\u5206\u6790\u51fa\uff0c\u8be5\u5224\u65ad\u4e3a\u6bcf\u4e2a\u9b54\u65b9\u7684\uff1a sum(center + middle)==cmp[2 * i] sum(center + coner)==cmp[2 * i + 1] \u800c\u5f97\u5230flag\u7684\u5faa\u73af\uff1a 1 2 3 4 5 6 7 8 9 10 for ( i = 0 ; i < 6 ; ++ i ) { v3 = 0 ; v5 = cube [ i ]; v4 = mul_cube [ i ]; for ( j = 0 ; j < 9 ; ++ j ) v3 += v4 [ j ] * v5 [ j ]; * ( _DWORD * ) & s [ 4 * i ] = v3 ; } printf ( aHereIsYourFlag , s ); \u7a77\u4e3e\u6c42\u89e3 \u7531\u4e0a\u8ff0\u5206\u6790\uff0c\u7531\u4e8ecorner[4*6],middle[4*6],center[6],\u6570\u636e\u91cf\u5c0f\uff0c\u53ef\u4ee5\u901a\u8fc7\u7a77\u4e3e\u7684\u65b9\u6cd5\u6c42\u89e3\uff1a \u63d0\u53d6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 mul_cube = [[ 0xB849CD19 , 0x55E00017 , 0x844966B , 0x80C181EC , 0x686C0B3C , 0x55400592 , 0xCD42168A , 0x4039E81 , 0xD9DE549F ], [ 0x2034677D , 0x144ABD , 0x49100D00 , 0xE003A0E0 , 0x80F0006D , 0x8307ADD6 , 0x4CF60781 , 0xA0352643 , 0xC580C3DE ], [ 0xEA8C4E24 , 0x68603008 , 0x687FBFFF , 0x19DE4BF9 , 0x271A1179 , 0x99791C4D , 0x29CBFFC , 0x2B82801E , 0x3C0307FB ], [ 0xDAE61CD6 , 0x8F7B1BF0 , 0xC56CEF1D , 0xD6493A96 , 0x1808018 , 0xF48001B9 , 0x3712519 , 0x9294F318 , 0x6DE20384 ], [ 0xF3750B04 , 0x256A122A , 0x257290B , 0xC4582056 , 0x204E8BC0 , 0x79C7ADE7 , 0xC4C20203 , 0x5B961570 , 0x66034856 ], [ 0x78329E3A , 0x1D07C00 , 0x4AC240E6 , 0x854CFBBE , 0xABFEC404 , 0x5BD80037 , 0xE94CBCD8 , 0x1 , 0xC4CA280D ]] cube = [[ 0xFDFE0BA1 , 0x9A915052 , 0xC96F3527 , 0xF5201FCD , 0xFE32ED8F , 0xDB8E3EF9 , 0x51EF954 , 0xFE217F1C , 0x7B33A8BB ], [ 0x9CF903A1 , 0xC381E2CD , 0x22B35BE4 , 0x4550E6AE , 0xDC9E8F3C , 0xA9B44EAF , 0x3372486A , 0x51329F58 , 0x5F2F456E ], [ 0x9B555A08 , 0xEB1A8529 , 0x9B009084 , 0x9B0B7B06 , 0x9967F311 , 0x91FB13AB , 0x18952236 , 0x6F7B9915 , 0xEDD9D6D1 ], [ 0xFB67FE21 , 0x259911B0 , 0x3DC4EE74 , 0x98936FF0 , 0xDF7502CE , 0xC3DF1016 , 0xBC1220F9 , 0xF54C810C , 0x715A634C ], [ 0x3E1637A6 , 0x80F07B8D , 0xFB9CA491 , 0xAD254C2E , 0xFB5A012F , 0x1AEF5581 , 0xB9CC1351 , 0x9A3B536D , 0xBD7FAF0F ], [ 0xF49AD883 , 0x2C55324 , 0x83BC3205 , 0x43846281 , 0x19382448 , 0xFADB2B18 , 0x9335D185 , 0x94C6BF5A , 0x591685AE ]] print ( center ) for i in range ( 6 ): print ( hex ( mul_cube [ i ][ 4 ]) , end = ',' ) print ( corner ) for i in range ( 6 ): v0 = mul_cube [ i ] for j in range ( 0 , 9 , 2 ): if j == 4 : continue print ( hex ( v0 [ j ]), end = ',' ) print ( middle ) for i in range ( 6 ): v0 = mul_cube [ i ] for j in range ( 1 , 9 , 2 ): print ( hex ( v0 [ j ]), end = ',' ) \u7ec4\u5408\u6c42\u503c \u7528cmp\u6765center\u7684\u786e\u5b9a\u503c\u4ee5\u53ca\u5bf9\u5e94corner\uff0cmiddle\u7684\u53d6\u503c 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 import itertools corner = [ 0xfdfe0ba1 , 0xc96f3527 , 0x51ef954 , 0x7b33a8bb , 0x9cf903a1 , 0x22b35be4 , 0x3372486a , 0x5f2f456e , 0x9b555a08 , 0x9b009084 , 0x18952236 , 0xedd9d6d1 , 0xfb67fe21 , 0x3dc4ee74 , 0xbc1220f9 , 0x715a634c , 0x3e1637a6 , 0xfb9ca491 , 0xb9cc1351 , 0xbd7faf0f , 0xf49ad883 , 0x83bc3205 , 0x9335d185 , 0x591685ae ] middle = [ 0x9a915052 , 0xf5201fcd , 0xdb8e3ef9 , 0xfe217f1c , 0xc381e2cd , 0x4550e6ae , 0xa9b44eaf , 0x51329f58 , 0xeb1a8529 , 0x9b0b7b06 , 0x91fb13ab , 0x6f7b9915 , 0x259911b0 , 0x98936ff0 , 0xc3df1016 , 0xf54c810c , 0x80f07b8d , 0xad254c2e , 0x1aef5581 , 0x9a3b536d , 0x2c55324 , 0x43846281 , 0xfadb2b18 , 0x94c6bf5a ] center = [ 0xfe32ed8f , 0xdc9e8f3c , 0x9967f311 , 0xdf7502ce , 0xfb5a012f , 0x19382448 ] #print(corner) for i in range ( 6 ): corner_1 = itertools . combinations ( corner , 4 ) for corner_0 in corner_1 : for j in range ( 6 ): sum = corner_0 [ 0 ] + corner_0 [ 1 ] + corner_0 [ 2 ] + corner_0 [ 3 ] sum += center [ j ] sum &= 0xFFFFFFFF # print(i) if sum == cmp [ i * 2 ]: print ( hex ( center [ j ]), ( list ( map ( hex , corner_0 )))) print ( \"----------------------------\" ) # print(middle) for i in range ( 6 ): middle_1 = itertools . combinations ( middle , 4 ) for middle_0 in middle_1 : for j in range ( 6 ): sum = middle_0 [ 0 ] + middle_0 [ 1 ] + middle_0 [ 2 ] + middle_0 [ 3 ] sum += center [ j ] sum &= 0xFFFFFFFF # print(i) if sum == cmp [ i * 2 + 1 ]: print ( hex ( center [ j ]), ( list ( map ( hex , middle_0 )))) \u6392\u5217\u7ec4\u5408\uff0c\u7a77\u4e3e\u6c42\u89e3 \u7528\u53ef\u89c1\u5b57\u7b26\u8fdb\u884c\u8fc7\u6ee4 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 center = [ 0xdf7502ce , 0x9967f311 , 0xdc9e8f3c , 0xfe32ed8f , 0x19382448 , 0xfb5a012f ] corner = [ [ 0xfdfe0ba1 , 0x7b33a8bb , 0x3dc4ee74 , 0x3e1637a6 ], [ 0xc96f3527 , 0x51ef954 , 0x715a634c , 0x9335d185 ], [ 0x9b009084 , 0x18952236 , 0xbd7faf0f , 0x83bc3205 ], [ 0x22b35be4 , 0x3372486a , 0xedd9d6d1 , 0xfb9ca491 ], [ 0x9cf903a1 , 0x9b555a08 , 0xb9cc1351 , 0x591685ae ], [ 0x5f2f456e , 0xfb67fe21 , 0xbc1220f9 , 0xf49ad883 ]] middle = [ [ 0x51329f58 , 0x6f7b9915 , 0x2c55324 , 0x43846281 ], [ 0xf5201fcd , 0xdb8e3ef9 , 0xeb1a8529 , 0x9a3b536d ], [ 0xc381e2cd , 0x98936ff0 , 0xc3df1016 , 0x94c6bf5a ], [ 0x91fb13ab , 0x80f07b8d , 0xad254c2e , 0x1aef5581 ], [ 0xfe217f1c , 0xa9b44eaf , 0x259911b0 , 0xf54c810c ], [ 0x9a915052 , 0x4550e6ae , 0x9b0b7b06 , 0xfadb2b18 ]] mul_center = [ 0x686c0b3c , 0x80f0006d , 0x271a1179 , 0x1808018 , 0x204e8bc0 , 0xabfec404 ] mul_corner = [ [ 0xb849cd19 , 0x844966b , 0xcd42168a , 0xd9de549f ], [ 0x2034677d , 0x49100d00 , 0x4cf60781 , 0xc580c3de ], [ 0xea8c4e24 , 0x687fbfff , 0x29cbffc , 0x3c0307fb ], [ 0xdae61cd6 , 0xc56cef1d , 0x3712519 , 0x6de20384 ], [ 0xf3750b04 , 0x257290b , 0xc4c20203 , 0x66034856 ], [ 0x78329e3a , 0x4ac240e6 , 0xe94cbcd8 , 0xc4ca280d ]] mul_middle = [ [ 0x55e00017 , 0x80c181ec , 0x55400592 , 0x4039e81 ], [ 0x144abd , 0xe003a0e0 , 0x8307add6 , 0xa0352643 ], [ 0x68603008 , 0x19de4bf9 , 0x99791c4d , 0x2b82801e ], [ 0x8f7b1bf0 , 0xd6493a96 , 0xf48001b9 , 0x9294f318 ], [ 0x256a122a , 0xc4582056 , 0x79c7ade7 , 0x5b961570 ], [ 0x1d07c00 , 0x854cfbbe , 0x5bd80037 , 0x1 ]] for i in range ( 6 ): print ( \"-------------------\" ) corner_0 = list ( itertools . permutations ( corner [ i ], 4 )) middle_0 = list ( itertools . permutations ( middle [ i ], 4 )) for k in range ( 24 ): corner_1 = corner_0 [ k ] for l in range ( 24 ): sum = center [ i ] * mul_center [ i ] middle_1 = middle_0 [ l ] flag = \"\" # print(list(map(hex, middle_1))) for m in range ( 4 ): sum += corner_1 [ m ] * mul_corner [ i ][ m ] sum += middle_1 [ m ] * mul_middle [ i ][ m ] key = 0 for m in range ( 4 ): char = sum & 0xFF if 0x30 <= char <= 0x39 or 0x41 <= char <= 0x41 + 25 or 0x61 <= char <= 0x61 + 25 or ord ( '_' ) == char or ord ( '{' ) == char or ord ( '}' ) == char or ord ( \"*\" ) == char : flag += chr ( sum & 0xFF ) sum >>= 8 else : key = 1 if key : continue print ( flag ) \u5f97\u5230: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 ------------------- *CTF erkU ------------------- Gj3o {7h1 KP6o uk6W 4gjL ------------------- S_Cu oeps ------------------- 63_i ERNJ ------------------- s_m4 ------------------- ukxG uHnr g1c} 4nEE YOcm AkT6 YctL VRae \u6839\u636e\u8bcd\u4e49\u4e0d\u96be\u731c\u51faflag\u4e3a\uff1a *CTF{7h1S Cu63 is_m4g1c} Obfuscating Macros II \u9898\u76ee\uff1a Obfuscating Macros II \u6839\u636e\u9898\u76ee\u6df7\u6dc6\u5b8femmmmmm\u4e0d\u61c2 \u8fd0\u884c\u4e0b\u7a0b\u5e8f 1 2 3 ./obfuscating_macros_II.out sss Failed IDA\u6253\u5f00\u627e\u5230main\u51fd\u6570\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 v21 = __readfsqword ( 0x28u ); std :: __cxx11 :: basic_string < char , std :: char_traits < char > , std :: allocator < char >>:: basic_string (); v16 = 0LL ; v17 = 0LL ; std :: operator >>< char , std :: char_traits < char > , std :: allocator < char >> ( & std :: cin , & v20 ); std :: __cxx11 :: basic_string < char , std :: char_traits < char > , std :: allocator < char >>:: length (); if ( v3 != 16 ) goto LABEL_9 ; std :: __cxx11 :: basic_string < char , std :: char_traits < char > , std :: allocator < char >>:: c_str (); v5 = * v4 ; std :: __cxx11 :: basic_string < char , std :: char_traits < char > , std :: allocator < char >>:: c_str (); encrypto ( v5 , * ( _QWORD * )( v6 + 8 )); v18 = v7 ; v19 = v8 ; sub_40465C ( & v16 , ( __int64 ) & v18 ); v9 = v17 ; v10 = std :: ostream :: operator << ( & std :: cout , v16 ); v11 = std :: operator <<< std :: char_traits < char >> ( v10 , ( __int64 ) & byte_407D38 ); v12 = std :: ostream :: operator << ( v11 , v9 ); std :: ostream :: operator << ( v12 , std :: endl < char , std :: char_traits < char >> ); if ( v16 != 0xA1E8895EB916B732LL || v17 != 0x50A2DCC51ED6C4A2LL ) { LABEL_9 : v14 = std :: operator <<< std :: char_traits < char >> (( __int64 ) & std :: cout , ( __int64 ) \"Failed\" ); std :: ostream :: operator << ( v14 , std :: endl < char , std :: char_traits < char >> ); } else { v13 = std :: operator <<< std :: char_traits < char >> (( __int64 ) & std :: cout , ( __int64 ) \"Congratulations!\" ); std :: ostream :: operator << ( v13 , std :: endl < char , std :: char_traits < char >> ); } std :: __cxx11 :: basic_string < char , std :: char_traits < char > , std :: allocator < char >>::~ basic_string ( & v20 ); return 0LL ; \u7a0b\u5e8f\u6d41\u7a0b \u6839\u636e\u8c03\u8bd5: \u9996\u5148\u5224\u65ad\u8f93\u51fa\u957f\u5ea6\u662f\u5426\u4e3a16\uff1a 1 2 if ( v3 != 16 ) goto LABEL_9 ; \u63a5\u7740\u8fdb\u5165encrypto\u51fd\u6570\u8fdb\u884c\u52a0\u5bc6,\u52a0\u5bc6\u540e\u5224\u65ad\uff1a 1 if ( v16 != 0xA1E8895EB916B732LL || v17 != 0x50A2DCC51ED6C4A2LL ) \u91cd\u70b9\u5c31\u662f\u5728encrypto\u51fd\u6570\u54af\u3002 \u52a0\u5bc6\u51fd\u6570 \u8fdb\u53bb\u4ee5\u540e\u53d1\u73b0\u6839\u672c\u770b\u4e0d\u61c2....\u8c03\u8bd5\u5927\u6cd5\u597d\uff01 \u9996\u5148\u662f\u5c06\u8f93\u5165\u5207\u6210\u4e24\u6bb5\uff0c\u957f\u5ea6\u4e3a8\uff1a \u63a5\u7740\u5728\u6808\u91cc\u9762\u770b\u54ea\u91cc\u5bf9\u8fd9\u4e24\u5757\u5730\u65b9\u8fdb\u884c\u4e86\u64cd\u4f5c\uff0c\u8fd9\u91cc\u6211\u8f93\u5165\u4e8611111111AAAAAAAA\uff1a \u5f97\u5230\uff1a \u9996\u5148\u6765\u5230\u4e86v16 = 0,\u5224\u65adv16 <= 0x3FF\uff0c\u90a3\u4e48\u56de\u5230\u8fd9\u91cc\u5c31\u662f\u4e00\u4e2a\u5faa\u73af\u54af\uff1a \u63a5\u7740\u7b2c\u4e00\u6bb5\u53d6\u53cd 1 v8 = ~ v7 ; \u63a5\u7740 1 if ( v7 & 1 ) \u4e3a\u771f\u5219 1 v8 ^=* v5 \u8fd9\u91cc\u770b\u5230v8 \u6307\u5411\u4e86v6\uff0cv5 \u6307\u5411\u4e86v7 \u63a5\u4e0b\u6765\u5c31\u662f 1 2 v6 = v8 v7 ~= v7 \u518d\u63a5\u7740\u6839\u636e\u8c03\u8bd5\u4e0d\u96be\u53d1\u73b0,\u63a5\u4e0b\u6765\u5c31\u662f\u5bf9\u6574\u4e00\u4e2a128\u4f4d\u5b57\u7b26\u8fdb\u884c\u5faa\u73af\u5de6\u79fb1\u4f4d. \u56e0\u4e3a\u4e00\u5f00\u59cb if(v7&1) \u4e3a\u771f\uff0c\u8fd9\u6b21\u6211\u4eec\u8f9300000000AAAAAAAA\uff1a \u5f97\u5230 v8^=*v5 \u6b64\u65f6v5\u53d8\u6210\u4e86\u6307\u5411~v7\uff0c\u800c\u4e4b\u540e\u5c31\u90fd\u4e00\u6837\u4e86\u3002 \u4e0d\u96be\u5199\u51fa\u52a0\u5bc6\u7b97\u6cd5: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 def Andf ( str ): return str & 0xFFFFFFFFFFFFFFFF def Rol ( str1 , str2 ): a = str1 >> 63 b = str2 >> 63 str2 <<= 1 str1 <<= 1 str2 |= a str1 |= b str1 , str2 = Andf ( str1 ), Andf ( str2 ) return str1 , str2 def Encrypto ( str1 , str2 ): if str1 & 1 : str2 ^= str1 else : str2 ^= ( ~ str1 ) str1 = ( ~ str1 ) str1 = Andf ( str1 ) str2 = Andf ( str2 ) str1 , str2 = Rol ( str1 , str2 ) tmp = str2 str2 += str1 str2 = Andf ( str2 ) str1 = tmp str1 , str2 = Rol ( str1 , str2 ) return str1 , str2 for i in range ( 0x400 ): str1 , str2 = Encrypto ( str1 , str2 ) \u5219\u89e3\u5bc6\u811a\u672c\u4e3a\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 def Andf ( str ): return str & 0xFFFFFFFFFFFFFFFF def Ror ( str1 , str2 ): a = ( str1 & 0x1 ) << 63 b = ( str2 & 0x1 ) << 63 str2 >>= 1 str1 >>= 1 str1 |= b str2 |= a str1 , str2 = Andf ( str1 ), Andf ( str2 ) return str1 , str2 def Decrypto ( str1 , str2 ): str1 , str2 = Ror ( str1 , str2 ) tmp = str2 tmp -= str1 tmp = Andf ( tmp ) str2 = str1 str1 = tmp str1 , str2 = Ror ( str1 , str2 ) str1 = ( ~ str1 ) str1 = Andf ( str1 ) if str1 & 1 : str2 ^= str1 else : str2 ^= ( ~ str1 ) str2 = Andf ( str2 ) return str1 , str2 str1 = 0xA1E8895EB916B732 str2 = 0x50A2DCC51ED6C4A2 for i in range ( 0x400 ): str1 , str2 = Decrypto ( str1 , str2 ) # print(hex(str1),hex(str2)) str1 = [ 0x6e , 0x55 , 0x66 , 0x7b , 0x46 , 0x54 , 0x43 , 0x2a ][:: - 1 ] str2 = [ 0x7d , 0x39 , 0x66 , 0x43 , 0x74 , 0x40 , 0x6c , 0x66 ][:: - 1 ] str = str1 + str2 print ( '' . join ( map ( chr , str ))) \u5f97\u5230flag\uff1a *CTF{fUnfl@tCf9} \u9a8c\u8bc1 1 2 3 4 ./obfuscating_macros_II.out *CTF{fUnfl@tCf9} 11666725874628474674 5810449208445420706 Congratulations!","title":"2019 *CTF"},{"location":"ctf_write_up/2019/2019starctf/#yy","text":"\u9898\u76ee\uff1a yy \u8fd9\u9898\u771f\u662f\u8c03\u548c\u731c\u51fa\u6765\u76840.0..... \u6839\u636e\u8c03\u8bd5\u548c\u731c\u6d4b\uff0c\u4eceyylex()\u51fd\u6570\u4e2d\u7684yysec[]\u6570\u7ec4\u53ef\u4ee5\u731c\u51fa\u5408\u6cd5\u5b57\u7b26\u4e3a\u3002 1 2 3 4 5 6 7 8 yyaccept = [] for i in range ( len ( yyec )) : if yyec [ i ] != 0x01 : yyaccept . append ( i ) print ( \"\" . join ( map ( chr , yyaccept ))) yyaccept = \"*0123456789CFT_abcdefghijklmnopqrstuvwxyz{}\" \u731c\u6d4b\u4e3a\uff1a*CTF{0123456789_abcdefghijklmnopqrstuvwxyz} \u7ee7\u7eed\u8c03\u8bd5\u53ef\u53d1\u73b0,\u7a0b\u5e8f\u4f1a\u6839\u636e\u8f93\u5165\u5b57\u7b26\u4ecebox[]\u4e2d\u53d6\u51fa\u5bf9\u5e94\u7684\u5b57\u7b26\u66ff\u6362buffer\u4e2d\u7684\u5b57\u7b26\uff0c\u800c \u201c_\u201d \u5219\u662f\u8c03\u7528aes cbc encrypt\u8fdb\u884c\u52a0\u5bc6,\u5e76\u66f4\u65b0buffer\u3002\u6700\u7ec8\u548ccmp\u8fdb\u884c\u5bf9\u6bd4\uff1aswitch ( ( unsigned int ) & savedregs ) { case 2u : if ( ! memcmp ( result , cmp , 0xA0uLL ) ) puts ( \"Congratulations!\" ); else puts ( \"try again!\" ); break ; case 3u : pc = 0 ; buffer = * ( _QWORD * ) & append ; qword_5556FE90A3E8 = qword_5556FE90A2B8 ; break ; case 7u : pc = 0 ; buffer = * ( _QWORD * ) & append ; qword_5556FE90A3E8 = qword_5556FE90A2B8 ; break ; case 8u : aes_cbc_encrypt ( & buffer ); break ; case 0xBu : aes_cbc_encrypt ( & buffer ); break ; case 0xFu : v1 = pc ++ ; * (( _BYTE * ) & buffer + v1 ) = box [ 0 ]; break ; case 0x10u : v2 = pc ++ ; * (( _BYTE * ) & buffer + v2 ) = box [ 1 ]; break ; case 0x11u : v3 = pc ++ ; * (( _BYTE * ) & buffer + v3 ) = box [ 2 ]; break ; case 0x12u : v4 = pc ++ ; * (( _BYTE * ) & buffer + v4 ) = box [ 3 ]; break ; case 0x13u : v5 = pc ++ ; * (( _BYTE * ) & buffer + v5 ) = box [ 4 ]; break ; case 0x14u : v6 = pc ++ ; * (( _BYTE * ) & buffer + v6 ) = box [ 5 ]; break ; case 0x15u : v7 = pc ++ ; * (( _BYTE * ) & buffer + v7 ) = box [ 6 ]; break ; case 0x16u : v8 = pc ++ ; * (( _BYTE * ) & buffer + v8 ) = box [ 7 ]; break ; case 0x17u : v9 = pc ++ ; * (( _BYTE * ) & buffer + v9 ) = box [ 8 ]; break ; case 0x18u : v10 = pc ++ ; * (( _BYTE * ) & buffer + v10 ) = box [ 9 ]; break ; case 0x19u : v11 = pc ++ ; * (( _BYTE * ) & buffer + v11 ) = box [ 10 ]; break ; case 0x1Au : v12 = pc ++ ; * (( _BYTE * ) & buffer + v12 ) = box [ 11 ]; break ; case 0x1Bu : v13 = pc ++ ; * (( _BYTE * ) & buffer + v13 ) = box [ 12 ]; break ; case 0x1Cu : v14 = pc ++ ; * (( _BYTE * ) & buffer + v14 ) = box [ 13 ]; break ; case 0x1Du : v15 = pc ++ ; * (( _BYTE * ) & buffer + v15 ) = box [ 14 ]; break ; case 0x1Eu : v16 = pc ++ ; * (( _BYTE * ) & buffer + v16 ) = box [ 15 ]; break ; case 0x1Fu : v17 = pc ++ ; * (( _BYTE * ) & buffer + v17 ) = box [ 16 ]; break ; case 0x20u : v18 = pc ++ ; * (( _BYTE * ) & buffer + v18 ) = box [ 17 ]; break ; case 0x21u : v19 = pc ++ ; * (( _BYTE * ) & buffer + v19 ) = box [ 18 ]; break ; case 0x22u : v20 = pc ++ ; * (( _BYTE * ) & buffer + v20 ) = box [ 19 ]; break ; case 0x23u : v21 = pc ++ ; * (( _BYTE * ) & buffer + v21 ) = box [ 20 ]; break ; case 0x24u : v22 = pc ++ ; * (( _BYTE * ) & buffer + v22 ) = box [ 21 ]; break ; case 0x25u : v23 = pc ++ ; * (( _BYTE * ) & buffer + v23 ) = box [ 22 ]; break ; case 0x26u : v24 = pc ++ ; * (( _BYTE * ) & buffer + v24 ) = box [ 23 ]; break ; case 0x27u : v25 = pc ++ ; * (( _BYTE * ) & buffer + v25 ) = box [ 24 ]; break ; case 0x28u : v26 = pc ++ ; * (( _BYTE * ) & buffer + v26 ) = box [ 25 ]; break ; case 0x29u : v27 = pc ++ ; * (( _BYTE * ) & buffer + v27 ) = box [ 26 ]; break ; case 0x2Au : v28 = pc ++ ; * (( _BYTE * ) & buffer + v28 ) = box [ 27 ]; break ; case 0x2Bu : v29 = pc ++ ; * (( _BYTE * ) & buffer + v29 ) = box [ 28 ]; break ; case 0x2Cu : v30 = pc ++ ; * (( _BYTE * ) & buffer + v30 ) = box [ 29 ]; break ; case 0x2Du : v31 = pc ++ ; * (( _BYTE * ) & buffer + v31 ) = box [ 30 ]; break ; case 0x2Eu : v32 = pc ++ ; * (( _BYTE * ) & buffer + v32 ) = box [ 31 ]; break ; case 0x2Fu : v33 = pc ++ ; * (( _BYTE * ) & buffer + v33 ) = box [ 32 ]; break ; case 0x30u : v34 = pc ++ ; * (( _BYTE * ) & buffer + v34 ) = box [ 33 ]; break ; case 0x31u : v35 = pc ++ ; * (( _BYTE * ) & buffer + v35 ) = box [ 34 ]; break ; case 0x32u : v36 = pc ++ ; * (( _BYTE * ) & buffer + v36 ) = box [ 35 ]; break ; default : break ; } \u5219\u89e3\u5bc6\u811a\u672c\u5982\u4e0b\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 from Crypto . Cipher import AES key = b \" \\x2B\\x7E\\x15\\x16\\x28\\xAE\\xD2\\xA6\\xAB\\xF7\\x15\\x88\\x09\\xCF\\x4F\\x3C \" # print(len(key)) cmp = [ 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0xAE , 0x46 , 0x14 , 0xF8 , 0x2A , 0x40 , 0xCF , 0x50 , 0x31 , 0xD3 , 0xFE , 0x04 , 0x8C , 0x06 , 0x12 , 0x12 , 0x23 , 0xFA , 0xC7 , 0x26 , 0xE8 , 0x61 , 0xD9 , 0xC3 , 0xA9 , 0x3C , 0x45 , 0x70 , 0x1A , 0xC7 , 0xF0 , 0x3D , 0xDF , 0xBE , 0xBC , 0x16 , 0xAB , 0x6E , 0x37 , 0xAC , 0x14 , 0x8B , 0x9C , 0x94 , 0xF7 , 0x5D , 0x62 , 0x78 , 0xFC , 0x16 , 0x98 , 0x1D , 0xB2 , 0x31 , 0xD3 , 0x5A , 0xDC , 0x3A , 0x60 , 0x86 , 0x9A , 0xCA , 0x7B , 0xA3 , 0xB5 , 0xD5 , 0xF1 , 0xB2 , 0xD9 , 0xFF , 0xD2 , 0x09 , 0xD4 , 0x77 , 0xD7 , 0x3D , 0xC0 , 0x56 , 0x19 , 0x02 , 0xB6 , 0x9B , 0x42 , 0x6C , 0xE8 , 0xA2 , 0x77 , 0xE3 , 0x99 , 0xAC , 0x32 , 0x40 , 0x91 , 0xA9 , 0x2A , 0x86 , 0xF3 , 0xFA , 0x47 , 0x3C , 0xC3 , 0x5C , 0x41 , 0x9B , 0xE8 , 0x05 , 0x07 , 0xD0 , 0xD4 , 0x30 , 0x5A , 0x9E , 0x8D , 0x52 , 0x9B , 0xA3 , 0xFB , 0xAD , 0xB6 , 0x44 , 0x3F , 0x72 , 0x83 , 0x9C , 0x22 , 0x77 , 0xFE , 0x48 , 0xFE , 0x86 , 0x84 , 0x12 , 0x00 , 0x4E , 0xED , 0xFF , 0xAC , 0x44 , 0x19 , 0x23 , 0x84 , 0x1F , 0x12 , 0xCA ] append = [ 0x61 , 0x24 , 0x25 , 0x86 , 0x31 , 0xAB , 0x6E , 0xAF , 0xB1 , 0x14 , 0xFE , 0x76 , 0x78 , 0x3D , 0x1E , 0xFF ] box = { 0x82 : \"a\" , 0x05 : \"b\" , 0x86 : \"c\" , 0x8A : \"d\" , 0x0B : 'e' , 0x11 : 'f' , 0x96 : 'g' , 0x1D : 'h' , 0x27 : 'i' , 0xA9 : 'j' , 0x2B : 'k' , 0xB1 : 'l' , 0xF3 : 'm' , 0x5E : 'n' , 0x37 : 'o' , 0x38 : 'p' , 0xC2 : 'q' , 0x47 : 'r' , 0x4E : 's' , 0x4F : 't' , 0xD6 : 'u' , 0x58 : 'v' , 0xDE : 'w' , 0xE2 : 'x' , 0xE5 : 'y' , 0xE6 : 'z' , 0x67 : '0' , 0x6B : '1' , 0xEC : '2' , 0xED : '3' , 0x6F : '4' , 0xF2 : '5' , 0x73 : '6' , 0xF5 : '7' , 0x77 : '8' , 0x7F : '9' } Cipher = b \"\" for i in cmp : Cipher += bytes ([ i ]) obj = AES . new ( key , AES . MODE_CBC , key ) plain = obj . decrypt ( Cipher ) flag = \"\" index = 0 for i in plain : try : flag += box [ i ] index += 1 except KeyError : if flag [ index - 1 ] != \"_\" : flag += '_' index += 1 print ( flag ) #yy_funct10n_1s_h4rd_and_n0_n33d_to_r3v3rs3 \u7531\u4e8eappend\u4e2d\u6709\u53ef\u8f6c\u5316\u5b57\u7b26\uff0c\u6240\u4ee5\u6253\u5370\u51fa\u6765\u540e\u624b\u52a8\u9664\u53bbhhhhh........ \u6700\u7ec8flag\u5982\u4e0b\uff1a *CTF{yy funct10n 1s h4rd and n0 n33d to r3v3rs3}","title":"yy"},{"location":"ctf_write_up/2019/2019starctf/#fanogo","text":"\u9898\u76ee\uff1a fanoGo \u672c\u9898\u4e00\u8def\u8fde\u731c\u5e26\u8499\u3002\u3002\u3002 \u6839\u636e\u8f93\u51fa Say something: \u627e\u5230\u4e3b\u8981\u51fd\u6570.......\u770b\u4e0d\u61c2\uff0c\u5f00\u59cb\u8c03\u8bd5\uff1a \u8f93\u5165\u540e\u4f1a\u7ecf\u8fc7 fano___Fano__Decode \u51fd\u6570\u8fdb\u884c\u89e3\u7801(\u4e3a\u4ec0\u4e48\u662f\u89e3\u7801\u540d\u5b57\u8bf4\u7684\u5f88\u6e05\u695ahhh),\u89e3\u7801\u540e\u957f\u5ea6\u4e3a0x15A,\u7531\u8be5\u8bed\u53e5\u786e\u8ba4\uff1a 1 if ( e . _type == ( runtime__type_0 * ) 0x15A ) \u540e\u8fdb\u5165runtime_eqstring()\u51fd\u6570\u8fdb\u884c\u5bf9\u6bd4,\u6c47\u7f16\u4ee3\u7801\u5982\u4e0b0.0\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 .text: 0000000000456 B83 cmp rbx , 40 h .text: 0000000000456 B87 jb short loc_456BC6 .text: 0000000000456 B89 vmovdqu ymm0 , ymmword ptr [ rsi ] .text: 0000000000456 B8D vmovdqu ymm1 , ymmword ptr [ rdi ] .text: 0000000000456 B91 vmovdqu ymm2 , ymmword ptr [ rsi + 20 h ] .text: 0000000000456 B96 vmovdqu ymm3 , ymmword ptr [ rdi + 20 h ] .text: 0000000000456 B9B vpcmpeqb ymm4 , ymm0 , ymm1 .text: 0000000000456 B9F vpcmpeqb ymm5 , ymm3 , ymm2 .text: 0000000000456 BA3 vpand ymm6 , ymm5 , ymm4 .text: 0000000000456 BA7 vpmovmskb edx , ymm6 .text: 0000000000456 BAB add rsi , 40 h .text: 0000000000456 BAF add rdi , 40 h .text: 0000000000456 BB3 sub rbx , 40 h .text: 0000000000456 BB7 cmp edx , 0 FFFFFFFFh .text: 0000000000456 BBD jz short loc_456B83 \u800c\u8c03\u8bd5\u7740\u53ef\u4ee5\u53d1\u73b0\u5bf9\u6bd4\u5bf9\u8c61\u5c31\u662f\u8fd9\u4e32\uff1a 1 2 3 4 \"If you cannot read all your books...fondle them---peer into them, let them fall open where they w\" \"ill, read from the first sentence that arrests the eye, set them back on the shelves with your ow\" \"n hands, arrange them on your own plan so that you at least know where they are. Let them be your\" \" friends; let them, at any rate, be your acquaintances.\" \u5c1d\u8bd5\u641c\u7d22Encode\u51fd\u6570,\u8fd8\u771f\u6709hhhhhh\uff0cpatch\u4e0a\u53bb\uff0c\u5c06\u4e0a\u9762\u90a3\u4e32\u8fdb\u884c\u7f16\u7801\u5c31\u5f97\u5230\u6211\u4eec\u7684\u8f93\u5165\u3002 \u811a\u672c\uff1a 1 2 3 4 5 6 7 8 9 10 11 from pwn import * exp = process ( \"./fanoGo\" ) # cmp = \"\\x49\\x66\\x20\\x79\\x6F\\x75\\x20\\x63\\x61\\x6E\\x6E\\x6F\\x74\\x20\\x72\\x65\\x61\\x64\\x20\\x61\\x6C\\x6C\\x20\\x79\\x6F\\x75\\x72\\x20\\x62\\x6F\\x6F\\x6B\\x73\\x2E\\x2E\\x2E\\x66\\x6F\\x6E\\x64\\x6C\\x65\\x20\\x74\\x68\\x65\\x6D\\x2D\\x2D\\x2D\\x70\\x65\\x65\\x72\\x20\\x69\\x6E\\x74\\x6F\\x20\\x74\\x68\\x65\\x6D\\x2C\\x20\\x6C\\x65\\x74\\x20\\x74\\x68\\x65\\x6D\\x20\\x66\\x61\\x6C\\x6C\\x20\\x6F\\x70\\x65\\x6E\\x20\\x77\\x68\\x65\\x72\\x65\\x20\\x74\\x68\\x65\\x79\\x20\\x77\\x69\\x6C\\x6C\\x2C\\x20\\x72\\x65\\x61\\x64\\x20\\x66\\x72\\x6F\\x6D\\x20\\x74\\x68\\x65\\x20\\x66\\x69\\x72\\x73\\x74\\x20\\x73\\x65\\x6E\\x74\\x65\\x6E\\x63\\x65\\x20\\x74\\x68\\x61\\x74\\x20\\x61\\x72\\x72\\x65\\x73\\x74\\x73\\x20\\x74\\x68\\x65\\x20\\x65\\x79\\x65\\x2C\\x20\\x73\\x65\\x74\\x20\\x74\\x68\\x65\\x6D\\x20\\x62\\x61\\x63\\x6B\\x20\\x6F\\x6E\\x20\\x74\\x68\\x65\\x20\\x73\\x68\\x65\\x6C\\x76\\x65\\x73\\x20\\x77\\x69\\x74\\x68\\x20\\x79\\x6F\\x75\\x72\\x20\\x6F\\x77\\x6E\\x20\\x68\\x61\\x6E\\x64\\x73\\x2C\\x20\\x61\\x72\\x72\\x61\\x6E\\x67\\x65\\x20\\x74\\x68\\x65\\x6D\\x20\\x6F\\x6E\\x20\\x79\\x6F\\x75\\x72\\x20\\x6F\\x77\\x6E\\x20\\x70\\x6C\\x61\\x6E\\x20\\x73\\x6F\\x20\\x74\\x68\\x61\\x74\\x20\\x79\\x6F\\x75\\x20\\x61\\x74\\x20\\x6C\\x65\\x61\\x73\\x74\\x20\\x6B\\x6E\\x6F\\x77\\x20\\x77\\x68\\x65\\x72\\x65\\x20\\x74\\x68\\x65\\x79\\x20\\x61\\x72\\x65\\x2E\\x20\\x4C\\x65\\x74\\x20\\x74\\x68\\x65\\x6D\\x20\\x62\\x65\\x20\\x79\\x6F\\x75\\x72\\x20\\x66\\x72\\x69\\x65\\x6E\\x64\\x73\\x3B\\x20\\x6C\\x65\\x74\\x20\\x74\\x68\\x65\\x6D\\x2C\\x20\\x61\\x74\\x20\\x61\\x6E\\x79\\x20\\x72\\x61\\x74\\x65\\x2C\\x20\\x62\\x65\\x20\\x79\\x6F\\x75\\x72\\x20\\x61\\x63\\x71\\x75\\x61\\x69\\x6E\\x74\\x61\\x6E\\x63\\x65\\x73\\x2E\\x00\" cmp = \" \\x2B\\x60\\xC3\\xBE\\xC2\\xB7\\xC2\\x82\\xC2\\x89\\xC3\\x95\\x5B\\xC2\\x87\\x2A\\x69\\x13\\xC2\\x96\\x51\\xC3\\xBD\\x6F\\x32\\x28\\x5A\\xC3\\x92\\x74\\xC2\\x94\\xC2\\x94\\xC2\\x95\\xC2\\x96\\xC2\\xA4\\xC3\\x8A\\xC2\\xA3\\xC3\\x8E\\xC2\\xB3\\x24\\x24\\x24\\xC2\\xBA\\xC2\\xAE\\x46\\x2B\\xC2\\xAC\\x3C\\xC3\\xAB\\x32\\x23\\x2A\\xC3\\xB0\\xC3\\xB3\\xC2\\xAC\\xC3\\x85\\xC2\\x87\\x2C\\xC2\\xA3\\x6B\\xC2\\xAD\\x0F\\xC3\\x87\\x5C\\xC2\\xA8\\xC3\\xB3\\xC2\\xAF\\xC3\\xA1\\xC3\\xB9\\x12\\xC3\\x8A\\x44\\x72\\xC2\\xA6\\xC2\\x91\\x66\\x6D\\x31\\xC3\\xA7\\x51\\x64\\x67\\x78\\x75\\x6B\\xC2\\x96\\xC2\\x91\\x51\\xC3\\xA7\\x3E\\x13\\xC3\\x8E\\x57\\x7B\\x47\\xC2\\x9D\\x45\\x7F\\x29\\x11\\xC3\\x95\\xC3\\xA1\\xC3\\xA7\\x59\\xC2\\x8A\\x06\\xC2\\x8C\\xC2\\x91\\xC2\\xB5\\x0F\\x3A\\xC2\\x8E\\xC2\\xBA\\xC3\\x8B\\xC3\\xAA\\xC3\\xA8\\xC3\\xBC\\xC2\\x8E\\x71\\xC3\\xBD\\x6F\\x32\\x36\\xC3\\xB9\\x42\\xC3\\xA7\\x49\\xC3\\x92\\x22\\x79\\xC3\\x89\\xC3\\x93\\x54\\x79\\xC3\\x96\\x63\\x6A\\x1F\\xC3\\x96\\xC3\\xB3\\x23\\x6F\\xC2\\x94\\x37\\xC2\\x94\\xC3\\xA8\\x76\\xC3\\x83\\xC3\\x8E\\x7C\\x3F\\xC2\\xAD\\xC3\\xA0\\xC2\\x9F\\x0C\\xC2\\xAA\\x7B\\xC3\\x83\\x26\\xC2\\xAD\\xC3\\xB0\\x7E\\x3A\\xC3\\xA5\\x47\\xC2\\x9D\\x7F\\x09\\xC3\\xA5\\x49\\x44\\xC2\\xB0\\xC2\\xAF\\x0F\\x3A\\xC3\\x8C\\x50\\x51\\xC3\\xBD\\x6F\\x32\\x2C\\xC3\\x8C\\x2D\\x27\\x49\\xC3\\xA3\\x2A\\xC3\\xB0\\xC3\\xB3\\xC2\\xAC\\xC3\\x88\\xC2\\x89\\xC3\\xB0\\xC2\\x9D\\x7E\\x1C\\xC2\\x9F\\x29\\x11\\x41\\x47\\xC3\\xB5\\xC2\\xBC\\xC3\\x88\\xC2\\x9A\\x38\\xC3\\xB0\\xC3\\xA2\\xC2\\xB8\\xC3\\xA9\\x15\\xC3\\x92\\x50 \" exp . sendafter ( \"Say something:\" , cmp ) exp . interactive () \u7531\u4e8e\u662f\u540e\u9762\u505a\u7684\uff0c\u7aef\u53e3\u5df2\u7ecf\u5173\u4e86,\u6240\u4ee5\u53ea\u80fd\u672c\u5730\u6253\u4e86hhhhhh","title":"fanoGo"},{"location":"ctf_write_up/2019/2019starctf/#matr1x","text":"\u9898\u76ee\uff1a Matr1x \u9898\u76ee\u4e00\u6253\u5f00\uff0c\u901a\u8fc7start\u627e\u5230main\u51fd\u6570\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 .text: 00002620 start proc near ; DATA XREF: LOAD:00000018\u2191o .text: 00002620 xor ebp , ebp .text: 00002622 pop esi .text: 00002623 mov ecx , esp .text: 00002625 and esp , 0 FFFFFFF0h .text: 00002628 push eax .text: 00002629 push esp ; stack_end .text: 0000262 A push edx ; rtld_fini .text: 0000262 B call sub_2652 .text: 00002630 add ebx , 10994 h .text: 00002636 lea eax , ( nullsub_1 - 12 FC4h )[ ebx ] .text: 0000263 C push eax ; fini .text: 0000263 D lea eax , ( sub_11250 - 12 FC4h )[ ebx ] .text: 00002643 push eax ; init .text: 00002644 push ecx ; ubp_av .text: 00002645 push esi ; argc .text: 00002646 push ds :( off_12FF8 - 12 FC4h )[ ebx ] ; main .text: 0000264 C call ___libc_start_main .text: 00002651 hlt .text: 00002651 start endp .text: 00002651","title":"Matr1x"},{"location":"ctf_write_up/2019/2019starctf/#_1","text":".....\u4e00\u5806\u82b1\u6307\u4ee4\u548c\u5197\u4f59\u4ee3\u7801\u3002\u90a3\u5c31\u53bb\u6389\u54af\u3002 \u5176\u4e2d\uff0c\u9664\u53bb\u5168\u5c40\u53d8\u91cf\u7684\u4ee3\u7801\u5982\u679c\u4e4b\u95f4\u5728\u5168\u5c40\u53d8\u91cf\u8d4b\u503c\u5904patch\u4f1a\u51fa\u95ee\u9898\uff0c\u6765\u81eaApeng\u5927\u4f6c\u7684\u6307\u5bfc\uff1a Note \u95ee\u9898\u51fa\u5728pie\u7684\u91cd\u5b9a\u4f4d\u4e0a\u4e86\uff0c\u7531\u4e8e\u7a0b\u5e8f\u539f\u672c\u5f00\u542f\u4e86pie\uff0c\u5bf9\u5168\u5c40\u53d8\u91cf\u5f15\u7528\u7684\u65f6\u5019\u5730\u5740\u662f\u4f1a\u53d8\u7684\uff0c\u6240\u4ee5elf\u8fd0\u884c\u7684\u65f6\u5019\u4f1a\u628a\u6240\u6709\u8fd9\u4e9b\u5168\u5c40\u53d8\u91cf\u7684\u5f15\u7528\u90fdpatch\u6210\u91cd\u5b9a\u4f4d\u4e4b\u540e\u7684\u3002\u800c\u4ed6\u67e5\u627e\u7684\u65b9\u5f0f\u80af\u5b9a\u4e0d\u662f\u6839\u636e\u8bed\u53e5\u6765\u67e5\uff0c\u53ef\u80fd\u662f\u6709\u4e2a\u8868\uff0c\u6240\u4ee5\u6240\u6709\u8fd9\u4e9b\u5168\u5c40\u53d8\u91cf\u90fd\u4f1a\u88abpatch\u3002\u6240\u4ee5\u53ea\u9700\u8981\u628amov eax,0xxx\u8fd9\u53e5\u8bddpatch\u5230\u5176\u4ed6\u5730\u65b9\u5c31\u884c\u4e86 \u6240\u4ee5\u7a0d\u5fae\u4fee\u6539\u4e86\u4e00\u4e0b\uff0c\u6700\u7ec8\u5982\u4e0b\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 bg = 0x00002620 end = 0x00011320 addr = bg index = 0 def patch_nop ( begin , end ): while end > begin : PatchByte ( begin , 0x90 ) begin += 1 def next_instr ( addr ): return addr + ItemSize ( addr ) def patch_global ( addr , eax ): flag = GetMnem ( addr ) ebx = GetOperandValue ( addr , 1 ) if flag == \"xor\" : eax ^= ebx elif flag == \"shl\" : eax <<= ebx elif flag == \"sub\" : eax -= ebx elif flag == \"add\" : eax += ebx elif flag == \"and\" : eax &= ebx elif flag == \"shr\" : eax >>= ebx elif flag == \"or\" : eax |= ebx return eax & 0xFFFFFFFF OperandValue = [ 'or' , 'shr' , 'and' , 'add' , 'sub' , 'shl' , 'xor' ] Register = [ 'ebx' , 'ecx' , 'edx' , 'eax' ] Patch_jnz = [ 'xor' , 'sub' ] dest_addr = 0 _addr = 0 while addr < end : next = next_instr ( addr ) MakeCode ( next ) if GetMnem ( addr ) in Patch_jnz and 'jnz' in GetMnem ( next ): if GetOperandValue ( addr , 0 ) == GetOperandValue ( addr , 1 ): print ( \"sucess_patch_jnz: %x \" % addr ) dest_addr = next_instr ( next ) patch_nop ( next , dest_addr ) if \"call $+5\" == GetDisasm ( addr ): if \"pop eax\" == GetDisasm ( next ): dest_addr = addr for i in range ( 4 ): dest_addr = next_instr ( dest_addr ) MakeCode ( dest_addr ) if \"jmp\" in GetMnem ( dest_addr ): print ( \"sucess_patch_call: %x \" % addr ) patch_nop ( addr , dest_addr ) PatchByte ( dest_addr , 0xE8 ) if \"xchg\" in GetMnem ( addr ): if GetOperandValue ( addr , 1 ) == GetOperandValue ( addr , 0 ): print ( \"sucess_patch_xchg: %x \" % addr ) patch_nop ( addr , next ) if \"jmp $+5\" == GetDisasm ( addr ): if \"leave\" in GetMnem ( next ): patch_nop ( addr , next ) print ( \"sucess_patch_jmp: %x \" % addr ) next = next_instr ( next ) addr = next next = next_instr ( next ) next = next_instr ( next ) patch_nop ( addr , next ) PatchByte ( addr , 0xC3 ) if \"[ebp\" in GetDisasm ( addr ) and GetOperandValue ( addr , 1 ) > 0x10000 and GetOperandValue ( addr , 1 ) < ( 0xFFFFFFFF - 0x10000 ): patch_nop ( addr , next ) print ( \"sucess_patch_ebp: %x \" % addr ) if 0x0001329C >= GetOperandValue ( addr , 1 ) >= 0x00013280 : print ( \"sucess: %x \" % addr ) eax = Dword ( GetOperandValue ( addr , 1 )) _addr = addr Reg = GetOperandValue ( addr , 0 ) while GetMnem ( next ) in OperandValue : eax = patch_global ( next , eax ) _addr = next next = next_instr ( next ) MakeCode ( _addr ) MakeCode ( next ) if GetOperandValue ( _addr , 0 ) != GetOperandValue ( next , 0 ): break elif GetOpnd ( next , 1 ) in Register : break if GetOpnd ( _addr , 0 ) == GetOpnd ( _addr , 1 ): Reg = - 1 if Reg != - 1 : addr = next_instr ( addr ) patch_nop ( addr , next ) if Reg == 3 : PatchByte ( addr , 0xBB ) PatchDword ( addr + 1 , eax ) elif Reg == 2 : PatchByte ( addr , 0xBA ) PatchDword ( addr + 1 , eax ) elif Reg == 1 : PatchByte ( addr , 0xB9 ) PatchDword ( addr + 1 , eax ) elif Reg == 0 : PatchByte ( addr , 0xB8 ) PatchDword ( addr + 1 , eax ) addr = next_instr ( addr ) MakeCode ( addr ) \u4e4b\u540e\u5c31\u53ef\u4ee5F5\uff0c\u4f46\u662f\u7531\u4e8eIDA\u662f\u8f6f\u4ef6\u5206\u6790\uff0c\u6240\u4ee5\u90a3\u4e9b\u51fd\u6570\u5f97\u4e00\u4e2a\u4e2aF5..... \u4e4b\u540e\u518d\u624b\u52a8\u53bb\u6389\u5197\u4f59\u4ee3\u7801\uff0c\u5c31\u53ef\u4ee5\u5f88\u6109\u5feb\u7684\u5206\u6790\u4e86\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 printf ( format ); _isoc99_scanf ( a255s , input ); v8 = strlen ( input ); for ( i = 0 ; i < v8 / 2 ; ++ i ) * v7 = ( input [ 2 * i + 1 ] - '0' ) | 16 * ( input [ 2 * i ] - '0' ); v9 [ v8 / 2 ] = 0 ; sub_39C7 ( v9 ); if ( sub_4638 () ) { memset ( s , 0 , 0x1Cu ); for ( i = 0 ; i < 6 ; ++ i ) { v3 = 0 ; v5 = cube [ i ]; v4 = mul_cube [ i ]; for ( j = 0 ; j < 9 ; ++ j ) v3 += v4 [ j ] * v5 [ j ]; * ( _DWORD * ) & s [ 4 * i ] = v3 ; } printf ( aHereIsYourFlag , s ); } else { v1 = puts ( aTryAgain ) | v0 ; } return 0 ; }","title":"\u53bb\u82b1\u6307\u4ee4\u548c\u5197\u4f59\u4ee3\u7801"},{"location":"ctf_write_up/2019/2019starctf/#_2","text":"1 2 for ( i = 0 ; i < v8 / 2 ; ++ i ) * v7 = ( input [ 2 * i + 1 ] - '0' ) | 16 * ( input [ 2 * i ] - '0' ); \u8fd9\u4e2a\u5faa\u73af\u5c06\u8f93\u5165\u6bcf\u4e24\u4f4d\u4e00\u7ec4\u8f6c\u6210\u5341\u516d\u8fdb\u5236\u6570\uff1a\u4f8b\u5982\u8f93\u51651234\u4f1a\u8f6c\u62100x12,0x34 \u4e3b\u8981\u64cd\u4f5c\u4e3a sub_39C7(v9); 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 int __cdecl sub_39C7 ( char * s ) { int v1 ; // ecx signed int i ; // [esp+54h] [ebp-8h] signed int v4 ; // [esp+58h] [ebp-4h] v4 = strlen ( s ); for ( i = 0 ; i < v4 ; ++ i ) { v1 = s [ i ]; switch ( v1 ) { case 0x10 : sub_6D47 (); break ; case 0x15 : sub_76DF (); break ; case 0x11 : sub_818A (); break ; case 0x14 : sub_88B8 (); break ; case 0x12 : sub_9131 (); break ; case 0x13 : sub_9BE7 (); break ; case 0x20 : sub_A570 (); break ; case 0x25 : sub_AC8E (); break ; case 0x21 : sub_B43B (); break ; case 0x24 : sub_BC72 (); break ; case 0x22 : sub_C2E1 (); break ; case 0x23 : sub_C9C9 (); break ; case 0x30 : sub_D14D (); break ; case 0x35 : sub_DB6D (); break ; case 0x31 : sub_E5D7 (); break ; case 0x34 : sub_EE9E (); break ; case 0x32 : sub_F7F9 (); break ; case 0x33 : sub_101AD (); break ; default : return 1 ; } } return 0 ; } \u6839\u636ecase\u53ef\u4ee5\u77e5\u9053\u6211\u4eec\u8f93\u5165\u7684\u8303\u56f4\uff1a 10~15\uff0c20~25\uff0c30~35 \u968f\u4fbf\u8fdb\u53bb\u4e00\u4e2a\u770b\u4e00\u4e0b(\u8fd9\u91cc\u4e5f\u6709\u4e00\u4e9b\u5197\u4f59\u4ee3\u7801\u6211\u624b\u52a8\u53bb\u6389\u4e86\uff0c\uff0c\u4fbf\u4e8e\u5206\u6790)\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 int sub_6D47 () { int i ; // [esp+5Ch] [ebp-8h] int v2 ; // [esp+60h] [ebp-4h] v2 = 0 ; for ( i = 0 ; i < 3 ; ++ i ) { v2 = A [ 3 * i + 2 ]; A [ 3 * i + 2 ] = F [ 3 * i + 2 ]; F [ 3 * i + 2 ] = B [ 3 * i + 2 ]; B [ 3 * i + 2 ] = E [ 3 * i + 2 ]; E [ 3 * i + 2 ] = v2 ; } return sub_5C20 ( D ); } \u5e94\u8be5\u662f\u4e2a\u8f6e\u6362\u3002 \u518d\u6839\u636e\u7ecf\u9a8c\u4e0d\u96be\u63a8\u51fa\uff0c\u8fd9\u5e94\u8be5\u662f\u4e00\u4e2a3\u9636\u9b54\u65b9\uff1a \u4e00\u51716\u4e2a\u9762\uff0c\u6bcf\u4e2a\u9762\u67099\u4e2a\u5143\u7d20\uff0c\u5171\u67093*6=18\u79cd\u64cd\u4f5c \u5224\u65ad\u51fd\u6570sub_4638(): 1 2 3 4 5 6 7 8 9 10 11 12 13 14 int sub_4638 () { int ( * v0 )[ 9 ]; // ST00_4 signed int i ; // [esp+4h] [ebp-8h] int v3 ; // [esp+8h] [ebp-4h] v3 = 1 ; for ( i = 0 ; i < 6 && v3 ; ++ i ) { v0 = cube [ i ]; v3 = (( * v0 )[ 7 ] + ( * v0 )[ 5 ] + ( * v0 )[ 4 ] + ( * v0 )[ 3 ] + ( * v0 )[ 1 ] == cmp [ 2 * i + 1 ]) & (( * v0 )[ 8 ] + ( * v0 )[ 6 ] + ( * v0 )[ 4 ] + ( * v0 )[ 2 ] + ( * v0 )[ 0 ] == cmp [ 2 * i ]) & ( unsigned __int8 ) v3 ; } return v3 ; } \u53ef\u4ee5\u5206\u6790\u51fa\uff0c\u8be5\u5224\u65ad\u4e3a\u6bcf\u4e2a\u9b54\u65b9\u7684\uff1a sum(center + middle)==cmp[2 * i] sum(center + coner)==cmp[2 * i + 1] \u800c\u5f97\u5230flag\u7684\u5faa\u73af\uff1a 1 2 3 4 5 6 7 8 9 10 for ( i = 0 ; i < 6 ; ++ i ) { v3 = 0 ; v5 = cube [ i ]; v4 = mul_cube [ i ]; for ( j = 0 ; j < 9 ; ++ j ) v3 += v4 [ j ] * v5 [ j ]; * ( _DWORD * ) & s [ 4 * i ] = v3 ; } printf ( aHereIsYourFlag , s );","title":"\u7b97\u6cd5"},{"location":"ctf_write_up/2019/2019starctf/#_3","text":"\u7531\u4e0a\u8ff0\u5206\u6790\uff0c\u7531\u4e8ecorner[4*6],middle[4*6],center[6],\u6570\u636e\u91cf\u5c0f\uff0c\u53ef\u4ee5\u901a\u8fc7\u7a77\u4e3e\u7684\u65b9\u6cd5\u6c42\u89e3\uff1a","title":"\u7a77\u4e3e\u6c42\u89e3"},{"location":"ctf_write_up/2019/2019starctf/#_4","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 mul_cube = [[ 0xB849CD19 , 0x55E00017 , 0x844966B , 0x80C181EC , 0x686C0B3C , 0x55400592 , 0xCD42168A , 0x4039E81 , 0xD9DE549F ], [ 0x2034677D , 0x144ABD , 0x49100D00 , 0xE003A0E0 , 0x80F0006D , 0x8307ADD6 , 0x4CF60781 , 0xA0352643 , 0xC580C3DE ], [ 0xEA8C4E24 , 0x68603008 , 0x687FBFFF , 0x19DE4BF9 , 0x271A1179 , 0x99791C4D , 0x29CBFFC , 0x2B82801E , 0x3C0307FB ], [ 0xDAE61CD6 , 0x8F7B1BF0 , 0xC56CEF1D , 0xD6493A96 , 0x1808018 , 0xF48001B9 , 0x3712519 , 0x9294F318 , 0x6DE20384 ], [ 0xF3750B04 , 0x256A122A , 0x257290B , 0xC4582056 , 0x204E8BC0 , 0x79C7ADE7 , 0xC4C20203 , 0x5B961570 , 0x66034856 ], [ 0x78329E3A , 0x1D07C00 , 0x4AC240E6 , 0x854CFBBE , 0xABFEC404 , 0x5BD80037 , 0xE94CBCD8 , 0x1 , 0xC4CA280D ]] cube = [[ 0xFDFE0BA1 , 0x9A915052 , 0xC96F3527 , 0xF5201FCD , 0xFE32ED8F , 0xDB8E3EF9 , 0x51EF954 , 0xFE217F1C , 0x7B33A8BB ], [ 0x9CF903A1 , 0xC381E2CD , 0x22B35BE4 , 0x4550E6AE , 0xDC9E8F3C , 0xA9B44EAF , 0x3372486A , 0x51329F58 , 0x5F2F456E ], [ 0x9B555A08 , 0xEB1A8529 , 0x9B009084 , 0x9B0B7B06 , 0x9967F311 , 0x91FB13AB , 0x18952236 , 0x6F7B9915 , 0xEDD9D6D1 ], [ 0xFB67FE21 , 0x259911B0 , 0x3DC4EE74 , 0x98936FF0 , 0xDF7502CE , 0xC3DF1016 , 0xBC1220F9 , 0xF54C810C , 0x715A634C ], [ 0x3E1637A6 , 0x80F07B8D , 0xFB9CA491 , 0xAD254C2E , 0xFB5A012F , 0x1AEF5581 , 0xB9CC1351 , 0x9A3B536D , 0xBD7FAF0F ], [ 0xF49AD883 , 0x2C55324 , 0x83BC3205 , 0x43846281 , 0x19382448 , 0xFADB2B18 , 0x9335D185 , 0x94C6BF5A , 0x591685AE ]] print ( center ) for i in range ( 6 ): print ( hex ( mul_cube [ i ][ 4 ]) , end = ',' ) print ( corner ) for i in range ( 6 ): v0 = mul_cube [ i ] for j in range ( 0 , 9 , 2 ): if j == 4 : continue print ( hex ( v0 [ j ]), end = ',' ) print ( middle ) for i in range ( 6 ): v0 = mul_cube [ i ] for j in range ( 1 , 9 , 2 ): print ( hex ( v0 [ j ]), end = ',' )","title":"\u63d0\u53d6"},{"location":"ctf_write_up/2019/2019starctf/#_5","text":"\u7528cmp\u6765center\u7684\u786e\u5b9a\u503c\u4ee5\u53ca\u5bf9\u5e94corner\uff0cmiddle\u7684\u53d6\u503c 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 import itertools corner = [ 0xfdfe0ba1 , 0xc96f3527 , 0x51ef954 , 0x7b33a8bb , 0x9cf903a1 , 0x22b35be4 , 0x3372486a , 0x5f2f456e , 0x9b555a08 , 0x9b009084 , 0x18952236 , 0xedd9d6d1 , 0xfb67fe21 , 0x3dc4ee74 , 0xbc1220f9 , 0x715a634c , 0x3e1637a6 , 0xfb9ca491 , 0xb9cc1351 , 0xbd7faf0f , 0xf49ad883 , 0x83bc3205 , 0x9335d185 , 0x591685ae ] middle = [ 0x9a915052 , 0xf5201fcd , 0xdb8e3ef9 , 0xfe217f1c , 0xc381e2cd , 0x4550e6ae , 0xa9b44eaf , 0x51329f58 , 0xeb1a8529 , 0x9b0b7b06 , 0x91fb13ab , 0x6f7b9915 , 0x259911b0 , 0x98936ff0 , 0xc3df1016 , 0xf54c810c , 0x80f07b8d , 0xad254c2e , 0x1aef5581 , 0x9a3b536d , 0x2c55324 , 0x43846281 , 0xfadb2b18 , 0x94c6bf5a ] center = [ 0xfe32ed8f , 0xdc9e8f3c , 0x9967f311 , 0xdf7502ce , 0xfb5a012f , 0x19382448 ] #print(corner) for i in range ( 6 ): corner_1 = itertools . combinations ( corner , 4 ) for corner_0 in corner_1 : for j in range ( 6 ): sum = corner_0 [ 0 ] + corner_0 [ 1 ] + corner_0 [ 2 ] + corner_0 [ 3 ] sum += center [ j ] sum &= 0xFFFFFFFF # print(i) if sum == cmp [ i * 2 ]: print ( hex ( center [ j ]), ( list ( map ( hex , corner_0 )))) print ( \"----------------------------\" ) # print(middle) for i in range ( 6 ): middle_1 = itertools . combinations ( middle , 4 ) for middle_0 in middle_1 : for j in range ( 6 ): sum = middle_0 [ 0 ] + middle_0 [ 1 ] + middle_0 [ 2 ] + middle_0 [ 3 ] sum += center [ j ] sum &= 0xFFFFFFFF # print(i) if sum == cmp [ i * 2 + 1 ]: print ( hex ( center [ j ]), ( list ( map ( hex , middle_0 ))))","title":"\u7ec4\u5408\u6c42\u503c"},{"location":"ctf_write_up/2019/2019starctf/#_6","text":"\u7528\u53ef\u89c1\u5b57\u7b26\u8fdb\u884c\u8fc7\u6ee4 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 center = [ 0xdf7502ce , 0x9967f311 , 0xdc9e8f3c , 0xfe32ed8f , 0x19382448 , 0xfb5a012f ] corner = [ [ 0xfdfe0ba1 , 0x7b33a8bb , 0x3dc4ee74 , 0x3e1637a6 ], [ 0xc96f3527 , 0x51ef954 , 0x715a634c , 0x9335d185 ], [ 0x9b009084 , 0x18952236 , 0xbd7faf0f , 0x83bc3205 ], [ 0x22b35be4 , 0x3372486a , 0xedd9d6d1 , 0xfb9ca491 ], [ 0x9cf903a1 , 0x9b555a08 , 0xb9cc1351 , 0x591685ae ], [ 0x5f2f456e , 0xfb67fe21 , 0xbc1220f9 , 0xf49ad883 ]] middle = [ [ 0x51329f58 , 0x6f7b9915 , 0x2c55324 , 0x43846281 ], [ 0xf5201fcd , 0xdb8e3ef9 , 0xeb1a8529 , 0x9a3b536d ], [ 0xc381e2cd , 0x98936ff0 , 0xc3df1016 , 0x94c6bf5a ], [ 0x91fb13ab , 0x80f07b8d , 0xad254c2e , 0x1aef5581 ], [ 0xfe217f1c , 0xa9b44eaf , 0x259911b0 , 0xf54c810c ], [ 0x9a915052 , 0x4550e6ae , 0x9b0b7b06 , 0xfadb2b18 ]] mul_center = [ 0x686c0b3c , 0x80f0006d , 0x271a1179 , 0x1808018 , 0x204e8bc0 , 0xabfec404 ] mul_corner = [ [ 0xb849cd19 , 0x844966b , 0xcd42168a , 0xd9de549f ], [ 0x2034677d , 0x49100d00 , 0x4cf60781 , 0xc580c3de ], [ 0xea8c4e24 , 0x687fbfff , 0x29cbffc , 0x3c0307fb ], [ 0xdae61cd6 , 0xc56cef1d , 0x3712519 , 0x6de20384 ], [ 0xf3750b04 , 0x257290b , 0xc4c20203 , 0x66034856 ], [ 0x78329e3a , 0x4ac240e6 , 0xe94cbcd8 , 0xc4ca280d ]] mul_middle = [ [ 0x55e00017 , 0x80c181ec , 0x55400592 , 0x4039e81 ], [ 0x144abd , 0xe003a0e0 , 0x8307add6 , 0xa0352643 ], [ 0x68603008 , 0x19de4bf9 , 0x99791c4d , 0x2b82801e ], [ 0x8f7b1bf0 , 0xd6493a96 , 0xf48001b9 , 0x9294f318 ], [ 0x256a122a , 0xc4582056 , 0x79c7ade7 , 0x5b961570 ], [ 0x1d07c00 , 0x854cfbbe , 0x5bd80037 , 0x1 ]] for i in range ( 6 ): print ( \"-------------------\" ) corner_0 = list ( itertools . permutations ( corner [ i ], 4 )) middle_0 = list ( itertools . permutations ( middle [ i ], 4 )) for k in range ( 24 ): corner_1 = corner_0 [ k ] for l in range ( 24 ): sum = center [ i ] * mul_center [ i ] middle_1 = middle_0 [ l ] flag = \"\" # print(list(map(hex, middle_1))) for m in range ( 4 ): sum += corner_1 [ m ] * mul_corner [ i ][ m ] sum += middle_1 [ m ] * mul_middle [ i ][ m ] key = 0 for m in range ( 4 ): char = sum & 0xFF if 0x30 <= char <= 0x39 or 0x41 <= char <= 0x41 + 25 or 0x61 <= char <= 0x61 + 25 or ord ( '_' ) == char or ord ( '{' ) == char or ord ( '}' ) == char or ord ( \"*\" ) == char : flag += chr ( sum & 0xFF ) sum >>= 8 else : key = 1 if key : continue print ( flag ) \u5f97\u5230: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 ------------------- *CTF erkU ------------------- Gj3o {7h1 KP6o uk6W 4gjL ------------------- S_Cu oeps ------------------- 63_i ERNJ ------------------- s_m4 ------------------- ukxG uHnr g1c} 4nEE YOcm AkT6 YctL VRae \u6839\u636e\u8bcd\u4e49\u4e0d\u96be\u731c\u51faflag\u4e3a\uff1a *CTF{7h1S Cu63 is_m4g1c}","title":"\u6392\u5217\u7ec4\u5408\uff0c\u7a77\u4e3e\u6c42\u89e3"},{"location":"ctf_write_up/2019/2019starctf/#obfuscating-macros-ii","text":"\u9898\u76ee\uff1a Obfuscating Macros II \u6839\u636e\u9898\u76ee\u6df7\u6dc6\u5b8femmmmmm\u4e0d\u61c2 \u8fd0\u884c\u4e0b\u7a0b\u5e8f 1 2 3 ./obfuscating_macros_II.out sss Failed IDA\u6253\u5f00\u627e\u5230main\u51fd\u6570\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 v21 = __readfsqword ( 0x28u ); std :: __cxx11 :: basic_string < char , std :: char_traits < char > , std :: allocator < char >>:: basic_string (); v16 = 0LL ; v17 = 0LL ; std :: operator >>< char , std :: char_traits < char > , std :: allocator < char >> ( & std :: cin , & v20 ); std :: __cxx11 :: basic_string < char , std :: char_traits < char > , std :: allocator < char >>:: length (); if ( v3 != 16 ) goto LABEL_9 ; std :: __cxx11 :: basic_string < char , std :: char_traits < char > , std :: allocator < char >>:: c_str (); v5 = * v4 ; std :: __cxx11 :: basic_string < char , std :: char_traits < char > , std :: allocator < char >>:: c_str (); encrypto ( v5 , * ( _QWORD * )( v6 + 8 )); v18 = v7 ; v19 = v8 ; sub_40465C ( & v16 , ( __int64 ) & v18 ); v9 = v17 ; v10 = std :: ostream :: operator << ( & std :: cout , v16 ); v11 = std :: operator <<< std :: char_traits < char >> ( v10 , ( __int64 ) & byte_407D38 ); v12 = std :: ostream :: operator << ( v11 , v9 ); std :: ostream :: operator << ( v12 , std :: endl < char , std :: char_traits < char >> ); if ( v16 != 0xA1E8895EB916B732LL || v17 != 0x50A2DCC51ED6C4A2LL ) { LABEL_9 : v14 = std :: operator <<< std :: char_traits < char >> (( __int64 ) & std :: cout , ( __int64 ) \"Failed\" ); std :: ostream :: operator << ( v14 , std :: endl < char , std :: char_traits < char >> ); } else { v13 = std :: operator <<< std :: char_traits < char >> (( __int64 ) & std :: cout , ( __int64 ) \"Congratulations!\" ); std :: ostream :: operator << ( v13 , std :: endl < char , std :: char_traits < char >> ); } std :: __cxx11 :: basic_string < char , std :: char_traits < char > , std :: allocator < char >>::~ basic_string ( & v20 ); return 0LL ;","title":"Obfuscating Macros II"},{"location":"ctf_write_up/2019/2019starctf/#_7","text":"\u6839\u636e\u8c03\u8bd5: \u9996\u5148\u5224\u65ad\u8f93\u51fa\u957f\u5ea6\u662f\u5426\u4e3a16\uff1a 1 2 if ( v3 != 16 ) goto LABEL_9 ; \u63a5\u7740\u8fdb\u5165encrypto\u51fd\u6570\u8fdb\u884c\u52a0\u5bc6,\u52a0\u5bc6\u540e\u5224\u65ad\uff1a 1 if ( v16 != 0xA1E8895EB916B732LL || v17 != 0x50A2DCC51ED6C4A2LL ) \u91cd\u70b9\u5c31\u662f\u5728encrypto\u51fd\u6570\u54af\u3002","title":"\u7a0b\u5e8f\u6d41\u7a0b"},{"location":"ctf_write_up/2019/2019starctf/#_8","text":"\u8fdb\u53bb\u4ee5\u540e\u53d1\u73b0\u6839\u672c\u770b\u4e0d\u61c2....\u8c03\u8bd5\u5927\u6cd5\u597d\uff01 \u9996\u5148\u662f\u5c06\u8f93\u5165\u5207\u6210\u4e24\u6bb5\uff0c\u957f\u5ea6\u4e3a8\uff1a \u63a5\u7740\u5728\u6808\u91cc\u9762\u770b\u54ea\u91cc\u5bf9\u8fd9\u4e24\u5757\u5730\u65b9\u8fdb\u884c\u4e86\u64cd\u4f5c\uff0c\u8fd9\u91cc\u6211\u8f93\u5165\u4e8611111111AAAAAAAA\uff1a \u5f97\u5230\uff1a \u9996\u5148\u6765\u5230\u4e86v16 = 0,\u5224\u65adv16 <= 0x3FF\uff0c\u90a3\u4e48\u56de\u5230\u8fd9\u91cc\u5c31\u662f\u4e00\u4e2a\u5faa\u73af\u54af\uff1a \u63a5\u7740\u7b2c\u4e00\u6bb5\u53d6\u53cd 1 v8 = ~ v7 ; \u63a5\u7740 1 if ( v7 & 1 ) \u4e3a\u771f\u5219 1 v8 ^=* v5 \u8fd9\u91cc\u770b\u5230v8 \u6307\u5411\u4e86v6\uff0cv5 \u6307\u5411\u4e86v7 \u63a5\u4e0b\u6765\u5c31\u662f 1 2 v6 = v8 v7 ~= v7 \u518d\u63a5\u7740\u6839\u636e\u8c03\u8bd5\u4e0d\u96be\u53d1\u73b0,\u63a5\u4e0b\u6765\u5c31\u662f\u5bf9\u6574\u4e00\u4e2a128\u4f4d\u5b57\u7b26\u8fdb\u884c\u5faa\u73af\u5de6\u79fb1\u4f4d. \u56e0\u4e3a\u4e00\u5f00\u59cb if(v7&1) \u4e3a\u771f\uff0c\u8fd9\u6b21\u6211\u4eec\u8f9300000000AAAAAAAA\uff1a \u5f97\u5230 v8^=*v5 \u6b64\u65f6v5\u53d8\u6210\u4e86\u6307\u5411~v7\uff0c\u800c\u4e4b\u540e\u5c31\u90fd\u4e00\u6837\u4e86\u3002 \u4e0d\u96be\u5199\u51fa\u52a0\u5bc6\u7b97\u6cd5: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 def Andf ( str ): return str & 0xFFFFFFFFFFFFFFFF def Rol ( str1 , str2 ): a = str1 >> 63 b = str2 >> 63 str2 <<= 1 str1 <<= 1 str2 |= a str1 |= b str1 , str2 = Andf ( str1 ), Andf ( str2 ) return str1 , str2 def Encrypto ( str1 , str2 ): if str1 & 1 : str2 ^= str1 else : str2 ^= ( ~ str1 ) str1 = ( ~ str1 ) str1 = Andf ( str1 ) str2 = Andf ( str2 ) str1 , str2 = Rol ( str1 , str2 ) tmp = str2 str2 += str1 str2 = Andf ( str2 ) str1 = tmp str1 , str2 = Rol ( str1 , str2 ) return str1 , str2 for i in range ( 0x400 ): str1 , str2 = Encrypto ( str1 , str2 ) \u5219\u89e3\u5bc6\u811a\u672c\u4e3a\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 def Andf ( str ): return str & 0xFFFFFFFFFFFFFFFF def Ror ( str1 , str2 ): a = ( str1 & 0x1 ) << 63 b = ( str2 & 0x1 ) << 63 str2 >>= 1 str1 >>= 1 str1 |= b str2 |= a str1 , str2 = Andf ( str1 ), Andf ( str2 ) return str1 , str2 def Decrypto ( str1 , str2 ): str1 , str2 = Ror ( str1 , str2 ) tmp = str2 tmp -= str1 tmp = Andf ( tmp ) str2 = str1 str1 = tmp str1 , str2 = Ror ( str1 , str2 ) str1 = ( ~ str1 ) str1 = Andf ( str1 ) if str1 & 1 : str2 ^= str1 else : str2 ^= ( ~ str1 ) str2 = Andf ( str2 ) return str1 , str2 str1 = 0xA1E8895EB916B732 str2 = 0x50A2DCC51ED6C4A2 for i in range ( 0x400 ): str1 , str2 = Decrypto ( str1 , str2 ) # print(hex(str1),hex(str2)) str1 = [ 0x6e , 0x55 , 0x66 , 0x7b , 0x46 , 0x54 , 0x43 , 0x2a ][:: - 1 ] str2 = [ 0x7d , 0x39 , 0x66 , 0x43 , 0x74 , 0x40 , 0x6c , 0x66 ][:: - 1 ] str = str1 + str2 print ( '' . join ( map ( chr , str ))) \u5f97\u5230flag\uff1a *CTF{fUnfl@tCf9}","title":"\u52a0\u5bc6\u51fd\u6570"},{"location":"ctf_write_up/2019/2019starctf/#_9","text":"1 2 3 4 ./obfuscating_macros_II.out *CTF{fUnfl@tCf9} 11666725874628474674 5810449208445420706 Congratulations!","title":"\u9a8c\u8bc1"},{"location":"ctf_write_up/exams/buuctf/introduction/","text":"\u7b80\u4ecb \u662f\u5317\u4eac\u8054\u5408\u5927\u5b66\u7684\u4e00\u4e2a\u5e73\u53f0,\u9898\u76ee\u6709\u5728\u66f4\u65b0\uff0c\u4f46\u662f\u4e2a\u4eba\u611f\u89c9\u9898\u76ee\u96be\u5ea6\u5f88\u8ff7\uff0c\u4e0d\u8fc7\u662f\u52a8\u6001\u79ef\u5206\u7684\u65b9\u5f0f,\u96be\u5ea6\u4e5f\u53ef\u4ee5\u770b\u51fa\u6765\u5c31\u662f\u4e86\u3002 \u6211\u4e5f\u628a\u6bcf\u9053\u539f\u9898\u90fd\u5bf9\u5e94\u4e0a\u4f20\u4e860.0 Write Up\u6301\u7eed\u66f4\u65b0\u3002 \u7ec3\u4e60\u5e73\u53f0\uff1a BUUCTF 2019.7.27 \u66f4\u65b0Reverse<-Dig the way","title":"\u7b80\u4ecb"},{"location":"ctf_write_up/exams/buuctf/introduction/#_1","text":"\u662f\u5317\u4eac\u8054\u5408\u5927\u5b66\u7684\u4e00\u4e2a\u5e73\u53f0,\u9898\u76ee\u6709\u5728\u66f4\u65b0\uff0c\u4f46\u662f\u4e2a\u4eba\u611f\u89c9\u9898\u76ee\u96be\u5ea6\u5f88\u8ff7\uff0c\u4e0d\u8fc7\u662f\u52a8\u6001\u79ef\u5206\u7684\u65b9\u5f0f,\u96be\u5ea6\u4e5f\u53ef\u4ee5\u770b\u51fa\u6765\u5c31\u662f\u4e86\u3002 \u6211\u4e5f\u628a\u6bcf\u9053\u539f\u9898\u90fd\u5bf9\u5e94\u4e0a\u4f20\u4e860.0 Write Up\u6301\u7eed\u66f4\u65b0\u3002 \u7ec3\u4e60\u5e73\u53f0\uff1a BUUCTF 2019.7.27 \u66f4\u65b0Reverse<-Dig the way","title":"\u7b80\u4ecb"},{"location":"ctf_write_up/exams/buuctf/misc/","text":"0x00 \u7b7e\u5230 flag{buu_ctf} 0x01 \u4e8c\u7ef4\u7801 \u9898\u76ee\uff1a \u4e8c\u7ef4\u7801 \u6253\u5f00\u6765\u662f\u5f20\u4e8c\u7ef4\u7801\uff0c\u624b\u673a\u626b\u4e00\u4e0b secret is here ,\u6ca1\u5565\u7528\u3002 010editor\u6253\u5f00\u53d1\u73b0zip\u6587\u4ef6\u5934\uff1a \u5bfc\u51fa\uff0c\u53d1\u73b0\u9700\u8981\u5bc6\u7801\uff0c\u6587\u4ef6\u540d\u63d0\u793a\u5bc6\u7801\u957f\u5ea6\u4e3a4\uff0c\u76f4\u63a5ARCHPR\u7206\u7834\uff0c\u5f97\u5230\u5bc6\u7801 7639 \u6253\u5f00\u5f97flag\uff1a CTF{vjpw_wnoei}\uff08 \u63d0\u4ea4\u65f6\u8981\u4fee\u6539CTF\u4e3aflag \uff09 0x02 N\u79cd\u65b9\u6cd5\u89e3\u51b3 \u9898\u76ee\uff1a N\u79cd\u65b9\u6cd5\u89e3\u51b3 \u62ff\u5230\u9898\u662f\u4e2aKEY.exe\uff0c\u65e0\u6cd5\u6253\u5f00\uff0cfile\u4e00\u4e0b\u53d1\u73b0\uff1a 1 2 file KEY . exe KEY . exe : ASCII text , with very long lines , with no line terminators 010editor\u6253\u5f00\uff1a 1 data : image /jpg;base64,iVBORw0KGgoAAAANSUhEUgAAAIUAAACFCAYAAAB12js8AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAArZSURBVHhe7ZKBitxIFgTv/396Tx564G1UouicKg19hwPCDcrMJ9m7/7n45zfdxe5Z3sJ7prHbf9rXO3P4lLvYPctbeM80dvtP+3pnDp9yF7tneQvvmcZu/2lf78zhU+5i9yxv4T3T2O0/7eud68OT2H3LCft0l/ae9ZlTo+23pPvX7/rwJHbfcsI+3aW9Z33m1Gj7Len+9bs+PIndt5ywT3dp71mfOTXafku6f/2uD09i9y0n7NNd2nvWZ06Ntt+S7l+/68MJc5O0OSWpcyexnFjfcsI+JW1ukpRfv+vDCXOTtDklqXMnsZxY33LCPiVtbpKUX7/rwwlzk7Q5JalzJ7GcWN9ywj4lbW6SlF+/68MJc5O0OSWpcyexnFjfcsI+JW1ukpRfv+vDCXOTWE7a/i72PstJ2zfsHnOTpPz6XR9OmJvEctL2d7H3WU7avmH3mJsk5dfv+nDC3CSWk7a/i73PctL2DbvH3CQpv37XhxPmJrGctP1d7H2Wk7Zv2D3mJkn59bs+nDA3ieWEfdNImylJnelp7H6bmyTl1+/6cMLcJJYT9k0jbaYkdaansfttbpKUX7/rwwlzk1hO2DeNtJmS1Jmexu63uUlSfv2uDyfMTWI5Yd800mZKUmd6Grvf5iZJ+fW7PjzJ7v12b33LSdtvsfuW75LuX7/rw5Ps3m/31rectP0Wu2/5Lun+9bs+PMnu/XZvfctJ22+x+5bvku5fv+vDk+zeb/fWt5y0/Ra7b/ku6f71+++HT0v+5l3+tK935vApyd+8y5/29c4cPiX5m3f5077emcOnJH/zLn/ar3d+/flBpI+cMDeNtJkSywn79BP5uK+yfzTmppE2U2I5YZ9+Ih/3VfaPxtw00mZKLCfs00/k477K/tGYm0baTInlhH36iSxflT78TpI605bdPbF7lhvct54mvWOaWJ6m4Z0kdaYtu3ti9yw3uG89TXrHNLE8TcM7SepMW3b3xO5ZbnDfepr0jmlieZqGd5LUmbbs7onds9zgvvU06R3TxPXcSxPrW07YpyR1pqTNKUmdKUmdk5LUaXzdWB/eYX3LCfuUpM6UtDklqTMlqXNSkjqNrxvrwzusbzlhn5LUmZI2pyR1piR1TkpSp/F1Y314h/UtJ+xTkjpT0uaUpM6UpM5JSeo0ft34+vOGNLqDfUosN7inhvUtJ+ybRtpMd0n39Goa3cE+JZYb3FPD+pYT9k0jbaa7pHt6NY3uYJ8Syw3uqWF9ywn7ppE2013SPb2aRnewT4nlBvfUsL7lhH3TSJvpLunecjWV7mCftqQbjSR1puR03tqSbkx/wrJqj7JPW9KNRpI6U3I6b21JN6Y/YVm1R9mnLelGI0mdKTmdt7akG9OfsKzao+zTlnSjkaTOlJzOW1vSjelPWFbp8NRImylJnWnL7r6F7zN3STcb32FppUNTI22mJHWmLbv7Fr7P3CXdbHyHpZUOTY20mZLUmbbs7lv4PnOXdLPxHZZWOjQ10mZKUmfasrtv4fvMXdLNxndYWunQlFhutHv2W42n+4bds7wl3VuuskSJ5Ua7Z7/VeLpv2D3LW9K95SpLlFhutHv2W42n+4bds7wl3VuuskSJ5Ua7Z7/VeLpv2D3LW9K97avp6GQ334X3KWlz+tukb5j+hO2/hX3Ebr4L71PS5vS3Sd8w/Qnbfwv7iN18F96npM3pb5O+YfoTtv8W9hG7+S68T0mb098mfcP0Jxz/W+x+FPethvUtN2y/m7fwnvm1+frzIOklDdy3Gta33LD9bt7Ce+bX5uvPg6SXNHDfaljfcsP2u3kL75lfm68/D5Je0sB9q2F9yw3b7+YtvGd+bb7+vCEN7ySpMzXSZrqL3bOcsN9Kns4T2uJRk6TO1Eib6S52z3LCfit5Ok9oi0dNkjpTI22mu9g9ywn7reTpPKEtHjVJ6kyNtJnuYvcsJ+y3kqfzxNLiEUosJ+xTYvkudt9yg3tqpM2d5Cf50mKJEssJ+5RYvovdt9zgnhppcyf5Sb60WKLEcsI+JZbvYvctN7inRtrcSX6SLy2WKLGcsE+J5bvYfcsN7qmRNneSn+RLK5UmbW4Sywn7lOzmhH3a0u7ZN99hadmRNjeJ5YR9SnZzwj5taffsm++wtOxIm5vEcsI+Jbs5YZ+2tHv2zXdYWnakzU1iOWGfkt2csE9b2j375jtcvTz+tuX0vrXF9sxNkjrTT+T6rvyx37ac3re22J65SVJn+olc35U/9tuW0/vWFtszN0nqTD+R67vyx37bcnrf2mJ75iZJneknUn+V/aWYUyNtpqTNqZE2UyNtGlvSjTsT9VvtKHNqpM2UtDk10mZqpE1jS7pxZ6J+qx1lTo20mZI2p0baTI20aWxJN+5M1G+1o8ypkTZT0ubUSJupkTaNLenGnYnl6TujO2zP3DTSZkp2c8L+0xppM32HpfWTIxPbMzeNtJmS3Zyw/7RG2kzfYWn95MjE9sxNI22mZDcn7D+tkTbTd1haPzkysT1z00ibKdnNCftPa6TN9B2uXh5/S9rcbEk37jR2+5SkzpSkzo4kdaavTg6/JW1utqQbdxq7fUpSZ0pSZ0eSOtNXJ4ffkjY3W9KNO43dPiWpMyWpsyNJnemrk8NvSZubLenGncZun5LUmZLU2ZGkzvTVWR/e0faJ7Xdzw/bMKbGc7PbNE1x3uqNtn9h+Nzdsz5wSy8lu3zzBdac72vaJ7Xdzw/bMKbGc7PbNE1x3uqNtn9h+Nzdsz5wSy8lu3zzBcsVewpyS1LmTWG7Y3nLCPm1JN05KLP/D8tRGzClJnTuJ5YbtLSfs05Z046TE8j8sT23EnJLUuZNYbtjecsI+bUk3Tkos/8Py1EbMKUmdO4nlhu0tJ+zTlnTjpMTyP/R/i8PwI//fJZYb3Jvv8Pd/il+WWG5wb77D3/8pflliucG9+Q5//6f4ZYnlBvfmO1y9PH7KFttbfhq+zySpMyVtbr7D1cvjp2yxveWn4ftMkjpT0ubmO1y9PH7KFttbfhq+zySpMyVtbr7D1cvjp2yxveWn4ftMkjpT0ubmO1y9ftRg9y0n7FPD+paTtk9O71sT13Mv7WD3LSfsU8P6lpO2T07vWxPXcy/tYPctJ+xTw/qWk7ZPTu9bE9dzL+1g9y0n7FPD+paTtk9O71sT1/P7EnOTWG5wb5LUmRptn3D/6b6+eX04YW4Syw3uTZI6U6PtE+4/3dc3rw8nzE1iucG9SVJnarR9wv2n+/rm9eGEuUksN7g3SepMjbZPuP90X9+8PpwwN0mb72pYfzcn1rf8NHwffXXWhxPmJmnzXQ3r7+bE+pafhu+jr876cMLcJG2+q2H93ZxY3/LT8H301VkfTpibpM13Nay/mxPrW34avo++OuvDCXOT7OZGu7e+5YT9XYnlhH36DlfvfsTcJLu50e6tbzlhf1diOWGfvsPVux8xN8lubrR761tO2N+VWE7Yp+9w9e5HzE2ymxvt3vqWE/Z3JZYT9uk7XL1+1GD3LX8avt8klhu2t5yc6F+/68OT2H3Ln4bvN4nlhu0tJyf61+/68CR23/Kn4ftNYrlhe8vJif71uz48id23/Gn4fpNYbtjecnKif/3+++HTnub0fd4zieUtvLfrO1y9PH7K05y+z3smsbyF93Z9h6uXx095mtP3ec8klrfw3q7vcPXy+ClPc/o+75nE8hbe2/Udzv9X+sv/OP/881/ SqtvcdpBh + wAAAABJRU5ErkJggg == \u5728\u7ebf\u5de5\u5177 \uff0cbase64\u8f6c\u56fe\u7247\uff1a \u5728\u7ebf\u626b\u4e00\u4e0b \uff0c\u5f97\u5230flag\uff1a KEY{dca57f966e4e4e31fd5b15417da63269}( \u63d0\u4ea4\u65f6KEY\u6539flag ) 0x03 \u91d1\u4e09\u80d6 \u9898\u76ee\uff1a \u91d1\u4e09\u80d6 \u6253\u5f00\u662f\u4e2agif\uff0cStegsolve\u6253\u5f00\uff0c\u9010\u5e27\u89c2\u770b\uff0c\u53d1\u73b0flag\uff1a flag{he11ohongke} 0x04 \u5927\u767d \u9898\u76ee\uff1a \u5927\u767d \u6839\u636e\u63d0\u793a\uff0c\u76f4\u63a5\u4fee\u6539png\u6587\u4ef6\u9ad8\u5ea6\uff0c\u5f97flag\uff1a flag{He1l0 d4 ba1} 0x05 \u57fa\u7840\u7834\u89e3 \u9898\u76ee\uff1a \u57fa\u7840\u7834\u89e3 \u6839\u636e\u63d0\u793a,\u56db\u4f4d\u5bc6\u7801\u76f4\u63a5\u8dd1\uff1a 2563 \u5f97\u5230 flag.txt \uff1a 1 ZmxhZ3s3MDM1NDMwMGE1MTAwYmE3ODA2ODgwNTY2MWI5M2E1Y30 = base64\u89e3\u5bc6\uff0c\u5f97flag\uff1a flag{70354300a5100ba78068805661b93a5c} 0x06 \u4f60\u7adf\u7136\u8d76\u6211\u8d70 \u9898\u76ee\uff1a \u4f60\u7adf\u7136\u8d76\u6211\u8d70 010editor\u6253\u5f00\uff0c\u5728\u6587\u4ef6\u5c3e\u5f97\u5230flag flag IS flag{stego is s0_bor1ing} 0x07 LSB \u9898\u76ee\uff1a LSB Stegsolve\u6253\u5f00\uff0c\u6839\u636e\u63d0\u793a\u4ee5\u53cared\uff0cblue\uff0cgreen\u4e09\u82720\u901a\u9053\u7684\u4e0d\u5bfb\u5e38\u566a\u70b9\uff1a Analyse->Data Extract->\u5bfc\u51fa\u4e09\u82720\u901a\u9053\u6587\u4ef6\u3002 \u6839\u636e\u6587\u4ef6\u5934\u53d1\u73b0\u662fpng\u6587\u4ef6\u3002\u4fee\u6539\u6587\u4ef6\u540e\u7f00\u540d\uff0c\u5f97\u4e00\u5f20\u4e8c\u7ef4\u7801\uff1a \u5728\u7ebf\u5de5\u5177 \u626b\uff0c\u5f97flag\uff1a flag{1sb i4 s0_Ea4y} 0x08 ningen \u9898\u76ee\uff1a ningen 010editor\u6253\u5f00\uff0c\u6587\u4ef6\u5c3e\u53d1\u73b0PK\u5934\uff0c\u4e3azip\uff0c\u590d\u5236\u4fdd\u5b58\uff0c\u53d1\u73b0\u6709\u5bc6\u7801\uff0c\u6839\u636e\u63d0\u793a\uff0c\u7206\u78344\u4f4d\u6570\u5b57\u5bc6\u7801\u5f97\uff1a 8368 \u89e3\u538b\u51faningen\u6587\u4ef6\uff0c\u5f97flag\uff1a flag{b025fc9ca797a67d2103bfbc407a6d5f} 0x09 rar \u9898\u76ee\uff1a rar \u6839\u636e\u63d0\u793a\uff0c\u5de5\u5177\u76f4\u63a5\u7206\u7834\u5f97\u5bc6\u7801\uff1a 8795 \u5f97flag\u6587\u4ef6: flag{1773c5da790bd3caff38e3decd180eb7} 0x0A qr \u9898\u76ee\uff1a qr \u76f4\u63a5\u626b\u51faflag\uff1a Flag{878865ce73370a4ce607d21ca01b5e59}(\u63d0\u4ea4\u65f6\u4fee\u6539F\u4e3af) 0x0B \u4e4c\u9547\u5cf0\u4f1a\u79cd\u56fe \u9898\u76ee\uff1a \u4e4c\u9547\u5cf0\u4f1a\u79cd\u56fe 010editor\u6253\u5f00\uff0c\u6587\u4ef6\u5c3e\u5f97flag\uff1a flag{97314e7864a8f62627b26f3f998c37f1} 0x0C \u6587\u4ef6\u4e2d\u7684\u79d8\u5bc6 \u9898\u76ee\uff1a \u6587\u4ef6\u4e2d\u7684\u79d8\u5bc6 010editor\u6253\u5f00\uff0c\u6587\u4ef6\u4e2d\u53d1\u73b0flag\uff1a \u5c0600\u5168\u90e8\u5220\u9664\uff0c\u5f97\uff1a flag{870c5a72806115cb5439345d8b014396} 0x0D \u5047\u5982\u7ed9\u6211\u4e09\u5929\u5149\u660e \u9898\u76ee\uff1a \u5047\u5982\u7ed9\u6211\u4e09\u5929\u5149\u660e \u89e3\u538b\u540e\u51fa\u73b0\u4e24\u4e2a\u6587\u4ef6\uff1apic.jpg\u548cmusci.zip\uff0c\u538b\u7f29\u5305\u9700\u8981\u5bc6\u7801\u3002 pic.jpg\u56fe\u7247\u7684\u5bc6\u6587\u4e3a\u76f2\u6587\uff0c\u89e3\u5bc6\u540e\u4e3a kmdonowg \u89e3\u538b\u51famisc.wav,\u64ad\u653e\u4e00\u4e0b\u53d1\u73b0\u662f\u6469\u65af\u7535\u7801\u3002\u4f7f\u7528audacity\u5206\u6790: \u957f\u77ed\u7528-.\u8868\u793a\uff1a 1 - . - . - .. - . . -- .--. . .. ----- ---.. --... ...-- ..--- ..--.. ..--- ...-- -.. --.. \u7136\u540e\u7528\u6469\u65af\u89e3\u7801\u5de5\u5177\u8fdb\u884c\u89e3\u7801\u5373\u53ef\u5f97\u5230flag\uff1a ctfwpei08732?23dz( \u63d0\u4ea4\u65f6ctf\u6362flag{,\u5e76\u5728\u672b\u5c3e\u8865} ) 0x0E \u955c\u5b50\u91cc\u9762\u7684\u4e16\u754c \u9898\u76ee\uff1a \u955c\u5b50\u91cc\u9762\u7684\u4e16\u754c \u6253\u5f00\u56fe\u7247\uff0c\u53eb\u6211\u4eec Look very closely ;) Stegsolve\u6253\u5f00\uff0c\u4ed4\u7ec6\u89c2\u770b\u6bcf\u4e2a\u901a\u9053\uff0c\u53d1\u73b0\u4e09\u8272\u96f6\u901a\u9053\u90fd\u6709\u5982\u4e0b\u5f02\u5e38\uff1a Analyse->Data Extract->Preview: \u590d\u5236\uff0c\u4fee\u6539\u683c\u5f0f\u5f97flag\uff1a flag{st3g0 saurus wr3cks} 0x0F FLAG \u9898\u76ee\uff1a FLAG \u6253\u5f00\u662f\u4e00\u5f20\u56fe\u7247,Stegsolve\u6253\u5f00\u5206\u6790\uff0c\u6ca1\u6709\u7279\u522b\u5f02\u5e38\u7684\u5730\u65b9\uff0c\u731c\u6d4b0\u901a\u9053\u95ee\u9898,Analyse->Data Extract->Preview: \u6587\u4ef6\u5934\u4e3aPK\uff0c\u5219\u4e3azip\u538b\u7f29\u5305\uff0cSave Bin\u5bfc\u51fa\uff0c\u89e3\u538b\u53d1\u73b0\u538b\u7f29\u5305\u635f\u574f\uff1a RAR\u4fee\u590d\u5373\u53ef\u89e3\u538b\uff0c\u5f97\u5230\u4e00\u4e2a\u6587\u4ef6\uff0cfile\u4e00\u4e0b\uff1a 1 1 : ELF 64 - bit LSB executable , x86 - 64 , version 1 ( SYSV ) , dynamically linked , interpreter / lib64 / l , for GNU / Linux 2 . 6 . 24 , BuildID [ sha1 ] = 8 df45089fa39fec83423ec37a944e81065d16bee , not stripped \u8fd0\u884c\u5f97flag\uff1a hctf{dd0gf4c3tok3yb0ard4g41n ~ }\uff08 \u63d0\u4ea4\u65f6hctf\u6539flag \uff09 0x10 wireshark \u9898\u76ee\uff1a wireshark \u9898\u76ee\u63d0\u793a\u662f\u767b\u5f55\u7f51\u7ad9\u627epassword\uff0c\u90a3\u5c31\u5173\u6ce8\u5bfb\u627eGET\u548cPOST\uff0c\u6700\u7ec8\u5728GET\u4e2d\u53d1\u73b0: flag{ffb7567a1d4f4abdffdb54e022f8facd} 0x11 \u6765\u9996\u6b4c\u5427 \u9898\u76ee: \u6765\u9996\u6b4c\u5427 \u89e3\u538b\u5f97\u5230steg100.wav\uff0c\u7528Audacity\u97f3\u9891\u5206\u6790\u8f6f\u4ef6\u6253\u5f00\uff1a \u731c\u6d4b\u7b2c\u4e00\u4e3aflag\uff0c\u653e\u5927\uff0c\u731c\u6d4b\u4e3a\u6469\u65af\u7535\u7801\uff1a \u5219\u6709\uff1a 1 ..... - ... - . - . ----. ..--- ..... -.... ....- ----. -.-. -... ----- .---- ---.. ---.. ..-. ..... ..--- . -.... .---- --... -.. --... ----- ----. ..--- ----. .---- ----. .---- -.-. \u89e3\u7801\u5f97flag\uff1a flag{5BC925649CB0188F52E617D70929191C} 0x12 \u7231\u56e0\u65af\u5766 \u9898\u76ee\uff1a \u7231\u56e0\u65af\u5766 \u4e0b\u8f7d\u89e3\u538b\u5f97\u5230\u4e00\u5f20\u56fe\u7247misc2.jpg\u3002 \u5c1d\u8bd5\u5bf9\u7740\u56fe\u7247binwalk\uff0c\u5206\u89e3\u51fa\u4e00\u4e2a\u52a0\u5bc6\u538b\u7f29\u5305\uff0c\u91cc\u9762\u5e26\u6709flag.txt\uff1a 1 2 3 4 5 6 7 8 9 $b inwalk - e misc2 . jpg DECIMAL HEXADECIMAL DESCRIPTION -------------------------------------------------------------------------------- 0 0 x0 JPEG image data , JFIF standard 1 . 01 30 0 x1E TIFF image data , big - endian , offset of first image directory : 8 4474 0 x117A Unix path : / www . w3 . org / 1999 / 02 / 22 - rdf - syntax - ns # \" /></x:xmpmeta> 68019 0 x109B3 Zip archive data , encrypted at least v1 . 0 to extract , compressed size : 51 , uncompressed size : 39 , name : flag . txt 68230 0 x10A86 End of Zip archive \u5907\u6ce8\u4fe1\u606f\u91cc\u6709\u4e00\u53e5 this_is_not_password \uff0c\u4e22\u8fdb\u53bb\u8bd5\u8bd5\uff1a \u89e3\u538b\u6210\u529f.........\u5f97flag\uff1a flag{dd22a92bf2cceb6c0cd0d6b83ff51606} 0x13 \u5c0f\u660e\u7684\u4fdd\u9669\u7bb1 \u9898\u76ee\uff1a \u5c0f\u660e\u7684\u4fdd\u9669\u7bb1 \u6253\u5f00\u5f97\u5230\u4e00\u5f20\u56fe\u7247\uff0cbinwalk\u63d0\u53d6\u51fa\u4e00\u4e2a\u52a0\u5bc6\u538b\u7f29\u5305\uff0c\u6839\u636e\u63d0\u793a\u7206\u7834\u51fa\u56db\u4f4d\u5bc6\u7801\uff1a 7869 ,\u5f97\u5230flag\uff1a flag{75a3d68bf071ee188c418ea6cf0bb043} 0x14 easycap \u9898\u76ee\uff1a easycap \u6d41\u91cf\u9898\uff0cwireshark\u8ffd\u8e2a\u4e00\u4e0bTCP\u6d41\u91cf,\u76f4\u63a5\u5f97flag\uff1a flag{385b87afc8671dee07550290d16a8071} 0x15 \u6885\u82b1\u9999\u81ea\u82e6\u5bd2\u6765 \u9898\u76ee\uff1a \u6885\u82b1\u9999\u81ea\u82e6\u5bd2\u6765 \u770b\u6ce8\u91ca\u4fe1\u606f\u6709\uff1a \u7531\u9898\u76ee \u56fe\u7a77\u5315\u89c1 \uff0c\u7528010editor\u6253\u5f00\uff0c\u53d1\u73b0\u56fe\u7247\u540e\u9762\u6709\u4e00\u5927\u4e32\u672a\u77e5\u7801\uff1a \u590d\u5236\u51fa\u6765\uff0c\u5230notepad++\uff1a 1 2 3 28372 C37290A28372C38290A28372C39 290 A28372C3130290A28372C3131290A .... hex->16\u8fdb\u5236\uff1a 1 2 3 ( 7 , 7 ) ( 7 , 8 ) .... \u6574\u7406\u4e00\u4e0b\uff1a 1 2 3 7 , 7 7 , 8 ... \u5199\u4e2a\u811a\u672c\u753b\u51fa\u6765\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 from PIL import Image , ImageDraw , ImageFilter f = open ( \"flag.txt\" , \"r\" ) width = 272 height = 272 img = Image . new ( 'RGB' , ( width , height ), ( 255 , 255 , 255 )) draw = ImageDraw . Draw ( img ) for lines in f : t = lines . strip () . split ( \",\" ) x , y = eval ( t [ 0 ]), eval ( t [ 1 ]) draw . point (( x , y ), fill = ( 0 , 0 , 0 )) img . save ( \"flag.bmp\" , \"bmp\" ) \u5f97\u5230\u4e00\u5f20\u4e8c\u7ef4\u7801\uff1a \u626b\u7801\u5f97flag: flag{40fc0a979f759c8892f4dc045e28b820}","title":"MISC"},{"location":"ctf_write_up/exams/buuctf/misc/#0x00","text":"flag{buu_ctf}","title":"0x00 \u7b7e\u5230"},{"location":"ctf_write_up/exams/buuctf/misc/#0x01","text":"\u9898\u76ee\uff1a \u4e8c\u7ef4\u7801 \u6253\u5f00\u6765\u662f\u5f20\u4e8c\u7ef4\u7801\uff0c\u624b\u673a\u626b\u4e00\u4e0b secret is here ,\u6ca1\u5565\u7528\u3002 010editor\u6253\u5f00\u53d1\u73b0zip\u6587\u4ef6\u5934\uff1a \u5bfc\u51fa\uff0c\u53d1\u73b0\u9700\u8981\u5bc6\u7801\uff0c\u6587\u4ef6\u540d\u63d0\u793a\u5bc6\u7801\u957f\u5ea6\u4e3a4\uff0c\u76f4\u63a5ARCHPR\u7206\u7834\uff0c\u5f97\u5230\u5bc6\u7801 7639 \u6253\u5f00\u5f97flag\uff1a CTF{vjpw_wnoei}\uff08 \u63d0\u4ea4\u65f6\u8981\u4fee\u6539CTF\u4e3aflag \uff09","title":"0x01 \u4e8c\u7ef4\u7801"},{"location":"ctf_write_up/exams/buuctf/misc/#0x02-n","text":"\u9898\u76ee\uff1a N\u79cd\u65b9\u6cd5\u89e3\u51b3 \u62ff\u5230\u9898\u662f\u4e2aKEY.exe\uff0c\u65e0\u6cd5\u6253\u5f00\uff0cfile\u4e00\u4e0b\u53d1\u73b0\uff1a 1 2 file KEY . exe KEY . exe : ASCII text , with very long lines , with no line terminators 010editor\u6253\u5f00\uff1a 1 data : image /jpg;base64,iVBORw0KGgoAAAANSUhEUgAAAIUAAACFCAYAAAB12js8AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAArZSURBVHhe7ZKBitxIFgTv/396Tx564G1UouicKg19hwPCDcrMJ9m7/7n45zfdxe5Z3sJ7prHbf9rXO3P4lLvYPctbeM80dvtP+3pnDp9yF7tneQvvmcZu/2lf78zhU+5i9yxv4T3T2O0/7eud68OT2H3LCft0l/ae9ZlTo+23pPvX7/rwJHbfcsI+3aW9Z33m1Gj7Len+9bs+PIndt5ywT3dp71mfOTXafku6f/2uD09i9y0n7NNd2nvWZ06Ntt+S7l+/68MJc5O0OSWpcyexnFjfcsI+JW1ukpRfv+vDCXOTtDklqXMnsZxY33LCPiVtbpKUX7/rwwlzk7Q5JalzJ7GcWN9ywj4lbW6SlF+/68MJc5O0OSWpcyexnFjfcsI+JW1ukpRfv+vDCXOTWE7a/i72PstJ2zfsHnOTpPz6XR9OmJvEctL2d7H3WU7avmH3mJsk5dfv+nDC3CSWk7a/i73PctL2DbvH3CQpv37XhxPmJrGctP1d7H2Wk7Zv2D3mJkn59bs+nDA3ieWEfdNImylJnelp7H6bmyTl1+/6cMLcJJYT9k0jbaYkdaansfttbpKUX7/rwwlzk1hO2DeNtJmS1Jmexu63uUlSfv2uDyfMTWI5Yd800mZKUmd6Grvf5iZJ+fW7PjzJ7v12b33LSdtvsfuW75LuX7/rw5Ps3m/31rectP0Wu2/5Lun+9bs+PMnu/XZvfctJ22+x+5bvku5fv+vDk+zeb/fWt5y0/Ra7b/ku6f71+++HT0v+5l3+tK935vApyd+8y5/29c4cPiX5m3f5077emcOnJH/zLn/ar3d+/flBpI+cMDeNtJkSywn79BP5uK+yfzTmppE2U2I5YZ9+Ih/3VfaPxtw00mZKLCfs00/k477K/tGYm0baTInlhH36iSxflT78TpI605bdPbF7lhvct54mvWOaWJ6m4Z0kdaYtu3ti9yw3uG89TXrHNLE8TcM7SepMW3b3xO5ZbnDfepr0jmlieZqGd5LUmbbs7onds9zgvvU06R3TxPXcSxPrW07YpyR1pqTNKUmdKUmdk5LUaXzdWB/eYX3LCfuUpM6UtDklqTMlqXNSkjqNrxvrwzusbzlhn5LUmZI2pyR1piR1TkpSp/F1Y314h/UtJ+xTkjpT0uaUpM6UpM5JSeo0ft34+vOGNLqDfUosN7inhvUtJ+ybRtpMd0n39Goa3cE+JZYb3FPD+pYT9k0jbaa7pHt6NY3uYJ8Syw3uqWF9ywn7ppE2013SPb2aRnewT4nlBvfUsL7lhH3TSJvpLunecjWV7mCftqQbjSR1puR03tqSbkx/wrJqj7JPW9KNRpI6U3I6b21JN6Y/YVm1R9mnLelGI0mdKTmdt7akG9OfsKzao+zTlnSjkaTOlJzOW1vSjelPWFbp8NRImylJnWnL7r6F7zN3STcb32FppUNTI22mJHWmLbv7Fr7P3CXdbHyHpZUOTY20mZLUmbbs7lv4PnOXdLPxHZZWOjQ10mZKUmfasrtv4fvMXdLNxndYWunQlFhutHv2W42n+4bds7wl3VuuskSJ5Ua7Z7/VeLpv2D3LW9K95SpLlFhutHv2W42n+4bds7wl3VuuskSJ5Ua7Z7/VeLpv2D3LW9K97avp6GQ334X3KWlz+tukb5j+hO2/hX3Ebr4L71PS5vS3Sd8w/Qnbfwv7iN18F96npM3pb5O+YfoTtv8W9hG7+S68T0mb098mfcP0Jxz/W+x+FPethvUtN2y/m7fwnvm1+frzIOklDdy3Gta33LD9bt7Ce+bX5uvPg6SXNHDfaljfcsP2u3kL75lfm68/D5Je0sB9q2F9yw3b7+YtvGd+bb7+vCEN7ySpMzXSZrqL3bOcsN9Kns4T2uJRk6TO1Eib6S52z3LCfit5Ok9oi0dNkjpTI22mu9g9ywn7reTpPKEtHjVJ6kyNtJnuYvcsJ+y3kqfzxNLiEUosJ+xTYvkudt9yg3tqpM2d5Cf50mKJEssJ+5RYvovdt9zgnhppcyf5Sb60WKLEcsI+JZbvYvctN7inRtrcSX6SLy2WKLGcsE+J5bvYfcsN7qmRNneSn+RLK5UmbW4Sywn7lOzmhH3a0u7ZN99hadmRNjeJ5YR9SnZzwj5taffsm++wtOxIm5vEcsI+Jbs5YZ+2tHv2zXdYWnakzU1iOWGfkt2csE9b2j375jtcvTz+tuX0vrXF9sxNkjrTT+T6rvyx37ac3re22J65SVJn+olc35U/9tuW0/vWFtszN0nqTD+R67vyx37bcnrf2mJ75iZJneknUn+V/aWYUyNtpqTNqZE2UyNtGlvSjTsT9VvtKHNqpM2UtDk10mZqpE1jS7pxZ6J+qx1lTo20mZI2p0baTI20aWxJN+5M1G+1o8ypkTZT0ubUSJupkTaNLenGnYnl6TujO2zP3DTSZkp2c8L+0xppM32HpfWTIxPbMzeNtJmS3Zyw/7RG2kzfYWn95MjE9sxNI22mZDcn7D+tkTbTd1haPzkysT1z00ibKdnNCftPa6TN9B2uXh5/S9rcbEk37jR2+5SkzpSkzo4kdaavTg6/JW1utqQbdxq7fUpSZ0pSZ0eSOtNXJ4ffkjY3W9KNO43dPiWpMyWpsyNJnemrk8NvSZubLenGncZun5LUmZLU2ZGkzvTVWR/e0faJ7Xdzw/bMKbGc7PbNE1x3uqNtn9h+Nzdsz5wSy8lu3zzBdac72vaJ7Xdzw/bMKbGc7PbNE1x3uqNtn9h+Nzdsz5wSy8lu3zzBcsVewpyS1LmTWG7Y3nLCPm1JN05KLP/D8tRGzClJnTuJ5YbtLSfs05Z046TE8j8sT23EnJLUuZNYbtjecsI+bUk3Tkos/8Py1EbMKUmdO4nlhu0tJ+zTlnTjpMTyP/R/i8PwI//fJZYb3Jvv8Pd/il+WWG5wb77D3/8pflliucG9+Q5//6f4ZYnlBvfmO1y9PH7KFttbfhq+zySpMyVtbr7D1cvjp2yxveWn4ftMkjpT0ubmO1y9PH7KFttbfhq+zySpMyVtbr7D1cvjp2yxveWn4ftMkjpT0ubmO1y9ftRg9y0n7FPD+paTtk9O71sT13Mv7WD3LSfsU8P6lpO2T07vWxPXcy/tYPctJ+xTw/qWk7ZPTu9bE9dzL+1g9y0n7FPD+paTtk9O71sT1/P7EnOTWG5wb5LUmRptn3D/6b6+eX04YW4Syw3uTZI6U6PtE+4/3dc3rw8nzE1iucG9SVJnarR9wv2n+/rm9eGEuUksN7g3SepMjbZPuP90X9+8PpwwN0mb72pYfzcn1rf8NHwffXXWhxPmJmnzXQ3r7+bE+pafhu+jr876cMLcJG2+q2H93ZxY3/LT8H301VkfTpibpM13Nay/mxPrW34avo++OuvDCXOT7OZGu7e+5YT9XYnlhH36DlfvfsTcJLu50e6tbzlhf1diOWGfvsPVux8xN8lubrR761tO2N+VWE7Yp+9w9e5HzE2ymxvt3vqWE/Z3JZYT9uk7XL1+1GD3LX8avt8klhu2t5yc6F+/68OT2H3Ln4bvN4nlhu0tJyf61+/68CR23/Kn4ftNYrlhe8vJif71uz48id23/Gn4fpNYbtjecnKif/3+++HTnub0fd4zieUtvLfrO1y9PH7K05y+z3smsbyF93Z9h6uXx095mtP3ec8klrfw3q7vcPXy+ClPc/o+75nE8hbe2/Udzv9X+sv/OP/881/ SqtvcdpBh + wAAAABJRU5ErkJggg == \u5728\u7ebf\u5de5\u5177 \uff0cbase64\u8f6c\u56fe\u7247\uff1a \u5728\u7ebf\u626b\u4e00\u4e0b \uff0c\u5f97\u5230flag\uff1a KEY{dca57f966e4e4e31fd5b15417da63269}( \u63d0\u4ea4\u65f6KEY\u6539flag )","title":"0x02 N\u79cd\u65b9\u6cd5\u89e3\u51b3"},{"location":"ctf_write_up/exams/buuctf/misc/#0x03","text":"\u9898\u76ee\uff1a \u91d1\u4e09\u80d6 \u6253\u5f00\u662f\u4e2agif\uff0cStegsolve\u6253\u5f00\uff0c\u9010\u5e27\u89c2\u770b\uff0c\u53d1\u73b0flag\uff1a flag{he11ohongke}","title":"0x03 \u91d1\u4e09\u80d6"},{"location":"ctf_write_up/exams/buuctf/misc/#0x04","text":"\u9898\u76ee\uff1a \u5927\u767d \u6839\u636e\u63d0\u793a\uff0c\u76f4\u63a5\u4fee\u6539png\u6587\u4ef6\u9ad8\u5ea6\uff0c\u5f97flag\uff1a flag{He1l0 d4 ba1}","title":"0x04 \u5927\u767d"},{"location":"ctf_write_up/exams/buuctf/misc/#0x05","text":"\u9898\u76ee\uff1a \u57fa\u7840\u7834\u89e3 \u6839\u636e\u63d0\u793a,\u56db\u4f4d\u5bc6\u7801\u76f4\u63a5\u8dd1\uff1a 2563 \u5f97\u5230 flag.txt \uff1a 1 ZmxhZ3s3MDM1NDMwMGE1MTAwYmE3ODA2ODgwNTY2MWI5M2E1Y30 = base64\u89e3\u5bc6\uff0c\u5f97flag\uff1a flag{70354300a5100ba78068805661b93a5c}","title":"0x05 \u57fa\u7840\u7834\u89e3"},{"location":"ctf_write_up/exams/buuctf/misc/#0x06","text":"\u9898\u76ee\uff1a \u4f60\u7adf\u7136\u8d76\u6211\u8d70 010editor\u6253\u5f00\uff0c\u5728\u6587\u4ef6\u5c3e\u5f97\u5230flag flag IS flag{stego is s0_bor1ing}","title":"0x06 \u4f60\u7adf\u7136\u8d76\u6211\u8d70"},{"location":"ctf_write_up/exams/buuctf/misc/#0x07-lsb","text":"\u9898\u76ee\uff1a LSB Stegsolve\u6253\u5f00\uff0c\u6839\u636e\u63d0\u793a\u4ee5\u53cared\uff0cblue\uff0cgreen\u4e09\u82720\u901a\u9053\u7684\u4e0d\u5bfb\u5e38\u566a\u70b9\uff1a Analyse->Data Extract->\u5bfc\u51fa\u4e09\u82720\u901a\u9053\u6587\u4ef6\u3002 \u6839\u636e\u6587\u4ef6\u5934\u53d1\u73b0\u662fpng\u6587\u4ef6\u3002\u4fee\u6539\u6587\u4ef6\u540e\u7f00\u540d\uff0c\u5f97\u4e00\u5f20\u4e8c\u7ef4\u7801\uff1a \u5728\u7ebf\u5de5\u5177 \u626b\uff0c\u5f97flag\uff1a flag{1sb i4 s0_Ea4y}","title":"0x07 LSB"},{"location":"ctf_write_up/exams/buuctf/misc/#0x08-ningen","text":"\u9898\u76ee\uff1a ningen 010editor\u6253\u5f00\uff0c\u6587\u4ef6\u5c3e\u53d1\u73b0PK\u5934\uff0c\u4e3azip\uff0c\u590d\u5236\u4fdd\u5b58\uff0c\u53d1\u73b0\u6709\u5bc6\u7801\uff0c\u6839\u636e\u63d0\u793a\uff0c\u7206\u78344\u4f4d\u6570\u5b57\u5bc6\u7801\u5f97\uff1a 8368 \u89e3\u538b\u51faningen\u6587\u4ef6\uff0c\u5f97flag\uff1a flag{b025fc9ca797a67d2103bfbc407a6d5f}","title":"0x08 ningen"},{"location":"ctf_write_up/exams/buuctf/misc/#0x09-rar","text":"\u9898\u76ee\uff1a rar \u6839\u636e\u63d0\u793a\uff0c\u5de5\u5177\u76f4\u63a5\u7206\u7834\u5f97\u5bc6\u7801\uff1a 8795 \u5f97flag\u6587\u4ef6: flag{1773c5da790bd3caff38e3decd180eb7}","title":"0x09 rar"},{"location":"ctf_write_up/exams/buuctf/misc/#0x0a-qr","text":"\u9898\u76ee\uff1a qr \u76f4\u63a5\u626b\u51faflag\uff1a Flag{878865ce73370a4ce607d21ca01b5e59}(\u63d0\u4ea4\u65f6\u4fee\u6539F\u4e3af)","title":"0x0A qr"},{"location":"ctf_write_up/exams/buuctf/misc/#0x0b","text":"\u9898\u76ee\uff1a \u4e4c\u9547\u5cf0\u4f1a\u79cd\u56fe 010editor\u6253\u5f00\uff0c\u6587\u4ef6\u5c3e\u5f97flag\uff1a flag{97314e7864a8f62627b26f3f998c37f1}","title":"0x0B \u4e4c\u9547\u5cf0\u4f1a\u79cd\u56fe"},{"location":"ctf_write_up/exams/buuctf/misc/#0x0c","text":"\u9898\u76ee\uff1a \u6587\u4ef6\u4e2d\u7684\u79d8\u5bc6 010editor\u6253\u5f00\uff0c\u6587\u4ef6\u4e2d\u53d1\u73b0flag\uff1a \u5c0600\u5168\u90e8\u5220\u9664\uff0c\u5f97\uff1a flag{870c5a72806115cb5439345d8b014396}","title":"0x0C \u6587\u4ef6\u4e2d\u7684\u79d8\u5bc6"},{"location":"ctf_write_up/exams/buuctf/misc/#0x0d","text":"\u9898\u76ee\uff1a \u5047\u5982\u7ed9\u6211\u4e09\u5929\u5149\u660e \u89e3\u538b\u540e\u51fa\u73b0\u4e24\u4e2a\u6587\u4ef6\uff1apic.jpg\u548cmusci.zip\uff0c\u538b\u7f29\u5305\u9700\u8981\u5bc6\u7801\u3002 pic.jpg\u56fe\u7247\u7684\u5bc6\u6587\u4e3a\u76f2\u6587\uff0c\u89e3\u5bc6\u540e\u4e3a kmdonowg \u89e3\u538b\u51famisc.wav,\u64ad\u653e\u4e00\u4e0b\u53d1\u73b0\u662f\u6469\u65af\u7535\u7801\u3002\u4f7f\u7528audacity\u5206\u6790: \u957f\u77ed\u7528-.\u8868\u793a\uff1a 1 - . - . - .. - . . -- .--. . .. ----- ---.. --... ...-- ..--- ..--.. ..--- ...-- -.. --.. \u7136\u540e\u7528\u6469\u65af\u89e3\u7801\u5de5\u5177\u8fdb\u884c\u89e3\u7801\u5373\u53ef\u5f97\u5230flag\uff1a ctfwpei08732?23dz( \u63d0\u4ea4\u65f6ctf\u6362flag{,\u5e76\u5728\u672b\u5c3e\u8865} )","title":"0x0D \u5047\u5982\u7ed9\u6211\u4e09\u5929\u5149\u660e"},{"location":"ctf_write_up/exams/buuctf/misc/#0x0e","text":"\u9898\u76ee\uff1a \u955c\u5b50\u91cc\u9762\u7684\u4e16\u754c \u6253\u5f00\u56fe\u7247\uff0c\u53eb\u6211\u4eec Look very closely ;) Stegsolve\u6253\u5f00\uff0c\u4ed4\u7ec6\u89c2\u770b\u6bcf\u4e2a\u901a\u9053\uff0c\u53d1\u73b0\u4e09\u8272\u96f6\u901a\u9053\u90fd\u6709\u5982\u4e0b\u5f02\u5e38\uff1a Analyse->Data Extract->Preview: \u590d\u5236\uff0c\u4fee\u6539\u683c\u5f0f\u5f97flag\uff1a flag{st3g0 saurus wr3cks}","title":"0x0E \u955c\u5b50\u91cc\u9762\u7684\u4e16\u754c"},{"location":"ctf_write_up/exams/buuctf/misc/#0x0f-flag","text":"\u9898\u76ee\uff1a FLAG \u6253\u5f00\u662f\u4e00\u5f20\u56fe\u7247,Stegsolve\u6253\u5f00\u5206\u6790\uff0c\u6ca1\u6709\u7279\u522b\u5f02\u5e38\u7684\u5730\u65b9\uff0c\u731c\u6d4b0\u901a\u9053\u95ee\u9898,Analyse->Data Extract->Preview: \u6587\u4ef6\u5934\u4e3aPK\uff0c\u5219\u4e3azip\u538b\u7f29\u5305\uff0cSave Bin\u5bfc\u51fa\uff0c\u89e3\u538b\u53d1\u73b0\u538b\u7f29\u5305\u635f\u574f\uff1a RAR\u4fee\u590d\u5373\u53ef\u89e3\u538b\uff0c\u5f97\u5230\u4e00\u4e2a\u6587\u4ef6\uff0cfile\u4e00\u4e0b\uff1a 1 1 : ELF 64 - bit LSB executable , x86 - 64 , version 1 ( SYSV ) , dynamically linked , interpreter / lib64 / l , for GNU / Linux 2 . 6 . 24 , BuildID [ sha1 ] = 8 df45089fa39fec83423ec37a944e81065d16bee , not stripped \u8fd0\u884c\u5f97flag\uff1a hctf{dd0gf4c3tok3yb0ard4g41n ~ }\uff08 \u63d0\u4ea4\u65f6hctf\u6539flag \uff09","title":"0x0F FLAG"},{"location":"ctf_write_up/exams/buuctf/misc/#0x10-wireshark","text":"\u9898\u76ee\uff1a wireshark \u9898\u76ee\u63d0\u793a\u662f\u767b\u5f55\u7f51\u7ad9\u627epassword\uff0c\u90a3\u5c31\u5173\u6ce8\u5bfb\u627eGET\u548cPOST\uff0c\u6700\u7ec8\u5728GET\u4e2d\u53d1\u73b0: flag{ffb7567a1d4f4abdffdb54e022f8facd}","title":"0x10 wireshark"},{"location":"ctf_write_up/exams/buuctf/misc/#0x11","text":"\u9898\u76ee: \u6765\u9996\u6b4c\u5427 \u89e3\u538b\u5f97\u5230steg100.wav\uff0c\u7528Audacity\u97f3\u9891\u5206\u6790\u8f6f\u4ef6\u6253\u5f00\uff1a \u731c\u6d4b\u7b2c\u4e00\u4e3aflag\uff0c\u653e\u5927\uff0c\u731c\u6d4b\u4e3a\u6469\u65af\u7535\u7801\uff1a \u5219\u6709\uff1a 1 ..... - ... - . - . ----. ..--- ..... -.... ....- ----. -.-. -... ----- .---- ---.. ---.. ..-. ..... ..--- . -.... .---- --... -.. --... ----- ----. ..--- ----. .---- ----. .---- -.-. \u89e3\u7801\u5f97flag\uff1a flag{5BC925649CB0188F52E617D70929191C}","title":"0x11 \u6765\u9996\u6b4c\u5427"},{"location":"ctf_write_up/exams/buuctf/misc/#0x12","text":"\u9898\u76ee\uff1a \u7231\u56e0\u65af\u5766 \u4e0b\u8f7d\u89e3\u538b\u5f97\u5230\u4e00\u5f20\u56fe\u7247misc2.jpg\u3002 \u5c1d\u8bd5\u5bf9\u7740\u56fe\u7247binwalk\uff0c\u5206\u89e3\u51fa\u4e00\u4e2a\u52a0\u5bc6\u538b\u7f29\u5305\uff0c\u91cc\u9762\u5e26\u6709flag.txt\uff1a 1 2 3 4 5 6 7 8 9 $b inwalk - e misc2 . jpg DECIMAL HEXADECIMAL DESCRIPTION -------------------------------------------------------------------------------- 0 0 x0 JPEG image data , JFIF standard 1 . 01 30 0 x1E TIFF image data , big - endian , offset of first image directory : 8 4474 0 x117A Unix path : / www . w3 . org / 1999 / 02 / 22 - rdf - syntax - ns # \" /></x:xmpmeta> 68019 0 x109B3 Zip archive data , encrypted at least v1 . 0 to extract , compressed size : 51 , uncompressed size : 39 , name : flag . txt 68230 0 x10A86 End of Zip archive \u5907\u6ce8\u4fe1\u606f\u91cc\u6709\u4e00\u53e5 this_is_not_password \uff0c\u4e22\u8fdb\u53bb\u8bd5\u8bd5\uff1a \u89e3\u538b\u6210\u529f.........\u5f97flag\uff1a flag{dd22a92bf2cceb6c0cd0d6b83ff51606}","title":"0x12 \u7231\u56e0\u65af\u5766"},{"location":"ctf_write_up/exams/buuctf/misc/#0x13","text":"\u9898\u76ee\uff1a \u5c0f\u660e\u7684\u4fdd\u9669\u7bb1 \u6253\u5f00\u5f97\u5230\u4e00\u5f20\u56fe\u7247\uff0cbinwalk\u63d0\u53d6\u51fa\u4e00\u4e2a\u52a0\u5bc6\u538b\u7f29\u5305\uff0c\u6839\u636e\u63d0\u793a\u7206\u7834\u51fa\u56db\u4f4d\u5bc6\u7801\uff1a 7869 ,\u5f97\u5230flag\uff1a flag{75a3d68bf071ee188c418ea6cf0bb043}","title":"0x13 \u5c0f\u660e\u7684\u4fdd\u9669\u7bb1"},{"location":"ctf_write_up/exams/buuctf/misc/#0x14-easycap","text":"\u9898\u76ee\uff1a easycap \u6d41\u91cf\u9898\uff0cwireshark\u8ffd\u8e2a\u4e00\u4e0bTCP\u6d41\u91cf,\u76f4\u63a5\u5f97flag\uff1a flag{385b87afc8671dee07550290d16a8071}","title":"0x14 easycap"},{"location":"ctf_write_up/exams/buuctf/misc/#0x15","text":"\u9898\u76ee\uff1a \u6885\u82b1\u9999\u81ea\u82e6\u5bd2\u6765 \u770b\u6ce8\u91ca\u4fe1\u606f\u6709\uff1a \u7531\u9898\u76ee \u56fe\u7a77\u5315\u89c1 \uff0c\u7528010editor\u6253\u5f00\uff0c\u53d1\u73b0\u56fe\u7247\u540e\u9762\u6709\u4e00\u5927\u4e32\u672a\u77e5\u7801\uff1a \u590d\u5236\u51fa\u6765\uff0c\u5230notepad++\uff1a 1 2 3 28372 C37290A28372C38290A28372C39 290 A28372C3130290A28372C3131290A .... hex->16\u8fdb\u5236\uff1a 1 2 3 ( 7 , 7 ) ( 7 , 8 ) .... \u6574\u7406\u4e00\u4e0b\uff1a 1 2 3 7 , 7 7 , 8 ... \u5199\u4e2a\u811a\u672c\u753b\u51fa\u6765\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 from PIL import Image , ImageDraw , ImageFilter f = open ( \"flag.txt\" , \"r\" ) width = 272 height = 272 img = Image . new ( 'RGB' , ( width , height ), ( 255 , 255 , 255 )) draw = ImageDraw . Draw ( img ) for lines in f : t = lines . strip () . split ( \",\" ) x , y = eval ( t [ 0 ]), eval ( t [ 1 ]) draw . point (( x , y ), fill = ( 0 , 0 , 0 )) img . save ( \"flag.bmp\" , \"bmp\" ) \u5f97\u5230\u4e00\u5f20\u4e8c\u7ef4\u7801\uff1a \u626b\u7801\u5f97flag: flag{40fc0a979f759c8892f4dc045e28b820}","title":"0x15 \u6885\u82b1\u9999\u81ea\u82e6\u5bd2\u6765"},{"location":"ctf_write_up/exams/buuctf/reverse/","text":"0x00 easyre \u9898\u76ee\uff1a easyre IDA\u6253\u5f00\uff0cmain\u51fd\u6570\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 int __cdecl main ( int argc , const char ** argv , const char ** envp ) { int b ; // [rsp+28h] [rbp-8h] int a ; // [rsp+2Ch] [rbp-4h] _main () ; scanf ( \" %d%d \" , & a , & b ) ; if ( a == b ) printf ( \" flag{this_Is_a_EaSyRe} \" ) ; else printf ( \" sorry,you can't get flag \" ) ; return 0 ; } 0x01 helloword \u9898\u76ee\uff1a helloworld jeb3\u6253\u5f00\uff0cMainActivity\uff1a 1 2 3 4 5 6 7 8 9 10 11 . method protected onCreate ( Bundle ) V . registers 6 00000000 invoke - super ActionBarActivity -> onCreate ( Bundle ) V , p0 , p1 00000006 const v3 , 0 x7F030018 0000000 C invoke - virtual MainActivity -> setContentView ( I ) V , p0 , v3 00000012 const - string v0 , \" flag{7631a988259a00816deda84afb29430a} \" 00000016 const - string v1 , \" xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx \" 0000001 A invoke - virtual String -> compareTo ( String ) I , v0 , v1 00000020 move - result v2 00000022 return - void . end method 0x02 reverse1 \u9898\u76ee\uff1a reverse1 IDA\u6253\u5f00\uff0c\u8ffd\u8e2a\u5b57\u7b26\u4e32\u5230\u4e3b\u8981\u51fd\u6570\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 __int64 sub_1400118C0 () { char * v0 ; // rdi signed __int64 i ; // rcx size_t v2 ; // rax size_t v3 ; // rax char v5 ; // [rsp+0h] [rbp-20h] int j ; // [rsp+24h] [rbp+4h] char Str1 ; // [rsp+48h] [rbp+28h] unsigned __int64 v8 ; // [rsp+128h] [rbp+108h] v0 = & v5 ; for ( i = 82 i64 ; i; --i ) { * ( _DWORD * ) v0 = - 858993460 ; v0 += 4 ; } for ( j = 0 ; ; ++j ) { v8 = j ; v2 = j_strlen ( Str2 ) ; if ( v8 > v2 ) break ; if ( Str2 [ j ] == 111 ) Str2 [ j ] = 48 ; } sub_1400111D1 ( \" input the flag: \" ) ; sub_14001128F ( \" %20s \" , & Str1 ) ; v3 = j_strlen ( Str2 ) ; if ( ! strncmp ( & Str1 , Str2 , v3 ) ) sub_1400111D1 ( \" this is the right flag! \\n \" ) ; else sub_1400111D1 ( \" wrong flag \\n \" ) ; sub_14001113B ( & v5 , & unk_140019D00 ) ; return 0 i64 ; } \u67e5\u770bStr2: 1 .data: 000000014001 C000 Str2 db '{ hello_world }' , 0 flag{hello_world} 0x03 reverse2 \u9898\u76ee \uff1a reverse2 IDA\u6253\u5f00\uff0c\u4e3b\u51fd\u6570\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 int __cdecl main ( int argc , const char ** argv , const char ** envp ) { int result ; // eax int stat_loc ; // [rsp+4h] [rbp-3Ch] int i ; // [rsp+8h] [rbp-38h] __pid_t pid ; // [rsp+Ch] [rbp-34h] char s2 ; // [rsp+10h] [rbp-30h] unsigned __int64 v8 ; // [rsp+28h] [rbp-18h] v8 = __readfsqword ( 0 x28u ) ; pid = fork () ; if ( pid ) { argv = ( const char ** ) & stat_loc ; waitpid ( pid , & stat_loc , 0 ) ; } else { for ( i = 0 ; i <= strlen(flag); ++i ) { if ( flag [ i ] == ' i ' || flag [ i ] == ' r ' ) flag [ i ] = ' 1 ' ; } } printf ( \" input the flag: \" , argv ) ; __isoc99_scanf ( \" %20s \" , & s2 ) ; if ( ! strcmp ( flag , & s2 ) ) result = puts ( \" this is the right flag! \" ) ; else result = puts ( \" wrong flag! \" ) ; return result ; } \u67e5\u770bflag\uff1a 1 2 3 .data: 0000000000601080 flag db '{' ; DATA XREF: main+34\u2191r .data: 0000000000601080 ; main+44\u2191r ... .data: 0000000000601081 aHackingForFun db ' hacking_for_fun }' , 0 \u7531\u4e8e\u524d\u9762\uff1a 1 2 3 4 5 for ( i = 0 ; i <= strlen(flag); ++i ) { if ( flag [ i ] == ' i ' || flag [ i ] == ' r ' ) flag [ i ] = ' 1 ' ; } so\uff0c\u6700\u7ec8flag\u4e3a: flag{hack1ng fo1 fun} 0x04 \u522e\u5f00\u6709\u5956 \u9898\u76ee\uff1a \u522e\u5f00\u6709\u5956 IDA\u6253\u5f00\uff0c\u67e5\u770b\u5b57\u7b26\u4e32\u53d1\u73b0base64 table\u8868 1 2 .rdata: 00407830 byte_407830 db 41 h ; DATA XREF: sub_401000+C0\u2191r .rdata: 00407831 aBcdefghijklmno db ' BCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789 +/=' , 0 \u6574\u7406\u4e00\u4e0b\uff1a 1 .rdata: 00407830 aAbcdefghijklmn db ' ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789 +/=' \u8ffd\u5230\u5224\u65ad\u51fd\u6570,\u6839\u636e\u7ecf\u9a8c\u4fee\u6539\u7c7b\u578b\u548c\u5927\u5c0f\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 BOOL __stdcall DialogFunc ( HWND hDlg , UINT a2 , WPARAM a3 , LPARAM a4 ) { const char * v4 ; // esi const char * v5 ; // edi int key [ 11 ]; // [esp+8h] [ebp-20030h] CHAR input [ 8 ]; // [esp+34h] [ebp-20004h] CHAR v9 ; // [esp+10034h] [ebp-10004h] CHAR v10 ; // [esp+10035h] [ebp-10003h] CHAR v11 ; // [esp+10036h] [ebp-10002h] if ( a2 == 272 ) return 1 ; if ( a2 != 273 ) return 0 ; if ( ( _WORD ) a3 == 1001 ) { memset ( input , 0 , 0xFFFFu ); GetDlgItemTextA ( hDlg , 1000 , input , 0xFFFF ); if ( strlen ( input ) == 8 ) { key [ 0 ] = 90 ; key [ 1 ] = 74 ; key [ 2 ] = 83 ; key [ 3 ] = 69 ; key [ 4 ] = 67 ; key [ 5 ] = 97 ; key [ 6 ] = 78 ; key [ 7 ] = 72 ; key [ 8 ] = 51 ; key [ 9 ] = 110 ; key [ 10 ] = 103 ; sub_4010F0 ( key , 0 , 10 ); memset ( & v9 , 0 , 0xFFFFu ); v9 = input [ 5 ]; v11 = input [ 7 ]; v10 = input [ 6 ]; v4 = base64 (( int ) & v9 , strlen ( & v9 )); memset ( & v9 , 0 , 0xFFFFu ); v10 = input [ 3 ]; v9 = input [ 2 ]; v11 = input [ 4 ]; v5 = base64 (( int ) & v9 , strlen ( & v9 )); if ( input [ 0 ] == key [ 0 ] + 34 && input [ 1 ] == key [ 4 ] && 4 * input [ 2 ] - 141 == 3 * key [ 2 ] && input [ 3 ] / 4 == 2 * ( key [ 7 ] / 9 ) && ! strcmp ( v4 , \"ak1w\" ) && ! strcmp ( v5 , \"V1Ax\" ) ) { MessageBoxA ( hDlg , \"U g3t 1T!\" , \"@_@\" , 0 ); } } return 0 ; } if ( ( _WORD ) a3 != 1 && ( _WORD ) a3 != 2 ) return 0 ; EndDialog ( hDlg , ( unsigned __int16 ) a3 ); return 1 ; } sub_4010F0(key, 0, 10): 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 int __cdecl sub_4010F0 ( int * a1 , int a2 , int num_10 ) { int result ; // eax int i ; // esi int v5 ; // ecx int v6 ; // edx result = num_10 ; for ( i = a2 ; i <= num_10; a2 = i ) { v5 = i ; v6 = a1 [ i ] ; if ( a2 < result && i < result ) { do { if ( v6 > a1 [ result ] ) { if ( i >= result ) break ; ++ i ; a1 [ v5 ] = a1 [ result ] ; if ( i >= result ) break ; while ( a1 [ i ] <= v6 ) { if ( ++ i >= result ) goto LABEL_13 ; } if ( i >= result ) break ; v5 = i ; a1 [ result ] = a1 [ i ] ; } -- result ; } while ( i < result ) ; } LABEL_13 : a1 [ result ] = v6 ; sub_4010F0 ( a1 , a2 , i - 1 ) ; result = num_10 ; ++ i ; } return result ; } \u7814\u7a76\u4e00\u4e0b\u5c31\u4f1a\u53d1\u73b0\u662f\u4e2a\u4ece\u5c0f\u5230\u5927\u7684\u6392\u5e8f\u3002 \u5219\u89e3\u5bc6\u811a\u672c\u5982\u4e0b\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 import base64 s2 = base64 . b64decode ( \"ak1w\" ) s1 = base64 . b64decode ( \"V1Ax\" ) key = [ 0 for i in xrange ( 11 ) ] key [ 0 ] = 90 key [ 1 ] = 74 key [ 2 ] = 83 key [ 3 ] = 69 key [ 4 ] = 67 key [ 5 ] = 97 key [ 6 ] = 78 key [ 7 ] = 72 key [ 8 ] = 51 key [ 9 ] = 110 key [ 10 ] = 103 key . sort () flag = chr ( key [ 0 ] + 34 ) + chr ( key [ 4 ]) + s1 + s2 print flag flag{UJWP1jMp} 0x05 rsa \u9898\u76ee\uff1a rsa \u6253\u5f00\u6765\u4e24\u4e2a\u6587\u4ef6,\u516c\u94a5\u5bc6\u6587\u90fd\u6709\uff0c\u89e3\u5bc6\u811a\u672c\u5982\u4e0b\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 from Crypto.PublicKey import RSA from Crypto.Cipher import PKCS1_v1_5 from Crypto.Util.number import inverse import base64 message = open ( 'flag.enc' , \"r\" ) cipher_text = message . read () f = open ( 'pub.key' , \"r\" ) publickey = f . read () publickey = RSA . importKey ( publickey ) # print(publickey.n) # print(publickey.e) n = 86934482296048119190666062003494800588905656017203025617216654058378322103517 e = 65537 p = 285960468890451637935629440372639283459 q = 304008741604601924494328155975272418463 r = ( p - 1 ) * ( q - 1 ) d = inverse ( e , r ) # print d privatekey = RSA . construct (( long ( n ), long ( e ), long ( d ), long ( p ), long ( q ))) key = PKCS1_v1_5 . new ( privatekey ) msg = key . decrypt ( cipher_text , e ) print msg flag{decrypt_256} \u53c2\u8003\uff1a RSA-ctf-wiki \u6574\u6570\u5206\u89e3 0x06 CrackRTF \u9898\u76ee\uff1a CrackRTF IDA\u6253\u5f00\uff0c\u8ffd\u8e2a\u5b57\u7b26\u4e32\u5230\u4e3b\u8981\u51fd\u6570\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 int main_0 () { DWORD v0 ; // eax DWORD v1 ; // eax CHAR String ; // [esp+4Ch] [ebp-310h] int v4 ; // [esp+150h] [ebp-20Ch] CHAR String1 ; // [esp+154h] [ebp-208h] char input [ 6 ] ; // [esp+258h] [ebp-104h] memset ( input , 0 , 0 x104u ) ; memset ( & String1 , 0 , 0 x104u ) ; v4 = 0 ; printf ( \" pls input the first passwd(1): \" ) ; scanf ( \" %s \" , input ) ; if ( strlen ( input ) != 6 ) { printf ( \" Must be 6 characters! \\n \" ) ; ExitProcess ( 0 ) ; } v4 = atoi ( input ) ; if ( v4 < 100000 ) ExitProcess ( 0 ) ; strcat ( input , \" @DBApp \" ) ; v0 = strlen ( input ) ; sub_40100A (( BYTE * ) input , v0 , & String1 ) ; if ( ! _strcmpi ( & String1 , \" 6E32D0943418C2C33385BC35A1470250DD8923A9 \" ) ) { printf ( \" continue... \\n\\n \" ) ; printf ( \" pls input the first passwd(2): \" ) ; memset ( & String , 0 , 0 x104u ) ; scanf ( \" %s \" , & String ) ; if ( strlen ( & String ) != 6 ) { printf ( \" Must be 6 characters! \\n \" ) ; ExitProcess ( 0 ) ; } strcat ( & String , input ) ; memset ( & String1 , 0 , 0 x104u ) ; v1 = strlen ( & String ) ; sub_401019 (( BYTE * ) & String , v1 , & String1 ) ; if ( ! _strcmpi ( \" 27019e688a4e62a649fd99cadaafdb4e \" , & String1 ) ) { if ( ! ( unsigned __int8 ) sub_40100F ( & String ) ) { printf ( \" Error!! \\n \" ) ; ExitProcess ( 0 ) ; } printf ( \" bye ~~ \\n \" ) ; } } return 0 ; } \u8f93\u5165\u4e24\u6b21\u9a8c\u8bc1flag\u3002 \u7b2c\u4e00\u6b21 hash\u503c\u5728\u7ebf\u7206\u7834\uff0c\u76f4\u63a5\u5f97\u7b2c\u4e00\u90e8\u5206123321\uff0c\u8fdb\u5165\u7b2c\u4e8c\u90e8\u5206 1 2 3 4 5 D :\\ CTF \\ Games \\ Exam \\ BUUCTF \\ CrackRTF > CrackRTF . exe pls input the first passwd ( 1 ) : 123321 continue ... pls input the first passwd ( 2 ) : \u7b2c\u4e8c\u6b21 \u65e0\u6cd5\u7206\u7834\uff0c\u89c2\u5bdf\u5230sub_40100F\u51fd\u6570\u4e2d\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 char __cdecl sub_4014D0 ( LPCSTR lpString ) { LPCVOID lpBuffer ; // [esp+50h] [ebp-1Ch] DWORD NumberOfBytesWritten ; // [esp+58h] [ebp-14h] DWORD nNumberOfBytesToWrite ; // [esp+5Ch] [ebp-10h] HGLOBAL hResData ; // [esp+60h] [ebp-Ch] HRSRC hResInfo ; // [esp+64h] [ebp-8h] HANDLE hFile ; // [esp+68h] [ebp-4h] hFile = 0 ; hResData = 0 ; nNumberOfBytesToWrite = 0 ; NumberOfBytesWritten = 0 ; hResInfo = FindResourceA ( 0 , ( LPCSTR ) 0 x65 , \" AAA \" ) ; if ( ! hResInfo ) return 0 ; nNumberOfBytesToWrite = SizeofResource ( 0 , hResInfo ) ; hResData = LoadResource ( 0 , hResInfo ) ; if ( ! hResData ) return 0 ; lpBuffer = LockResource ( hResData ) ; sub_401005 ( lpString , ( int ) lpBuffer , nNumberOfBytesToWrite ) ; hFile = CreateFileA ( \" dbapp.rtf \" , 0 x10000000u , 0 , 0 , 2 u , 0 x80u , 0 ) ; if ( hFile == ( HANDLE ) - 1 ) return 0 ; if ( ! WriteFile ( hFile , lpBuffer , nNumberOfBytesToWrite , & NumberOfBytesWritten , 0 ) ) return 0 ; CloseHandle ( hFile ) ; return 1 ; } \u4f1a\u751f\u6210\u4e00\u4e2adbapp.rtf\u6587\u4ef6\u3002 \u968f\u4fbf\u8f93\u5165123321\u5f97\uff0c\u6b64\u5904\u7528010editor\u6253\u5f00\uff1a \u5728\u751f\u6210\u6587\u4ef6\u524dsub_401005\u8fdb\u884c\u4e86\u5f02\u6216\u64cd\u4f5c\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 unsigned int __cdecl sub_401420 ( LPCSTR lpString , int a2 , int a3 ) { unsigned int result ; // eax unsigned int i ; // [esp+4Ch] [ebp-Ch] unsigned int v5 ; // [esp+54h] [ebp-4h] v5 = lstrlenA ( lpString ) ; for ( i = 0 ; ; ++i ) { result = i ; if ( i >= a3 ) break ; * ( _BYTE * )( i + a2 ) ^= lpString [ i % v5 ] ; } return result ; } \u5219\u53ef\u4ee5\u9006\u89e3\u51fa\u5f02\u6216\u56e0\u5b50: 1 2 3 4 5 6 s = [ 0 x34 , 0 x4f , 0 x72 , 0 x26 , 0 x14 , 0 x30 , 0 x5c , 0 x61 , 0 x6e , 0 x73 , 0 x69 , 0 x5c , 0 x61 , 0 x6e , 0 x73 , 0 x69 , 0 x63 , 0 x70 , 0 x28 , 0 x2a , 0 x33 , 0 x64 , 0 x2e , 0 x65 , 0 x65 , 0 x66 , 0 x66 , 0 x30 , 0 x5c , 0 x64 , 0 x65 , 0 x66 , 0 x6c , 0 x61 , 0 x6e , 0 x67 , 0 x7e , 0 x23 , 0 x33 , 0 x61 , 0 x2e , 0 x65 , 0 x65 , 0 x66 , 0 x6c , 0 x61 , 0 x6e , 0 x67 , 0 x66 , 0 x65 , 0 x32 , 0 x30 , 0 x35 , 0 x32 , 0 x34 , 0 x4f , 0 x66 , 0 x3d , 0 x1c , 0 x75 , 0 x74 , 0 x62 , 0 x6c , 0 x7b , 0 x5c , 0 x66 , 0 x30 , 0 x5c , 0 x66 , 0 x6d , 0 x6f , 0 x64 , 0 x2a , 0 x61 , 0 x6e , 0 x0e , 0 x14 , 0 x71 , 0 x72 , 0 x71 , 0 x36 , 0 x5c , 0 x66 , 0 x63 , 0 x68 , 0 x61 , 0 x72 , 0 x73 , 0 x65 , 0 x74 , 0 x7e , 0 x20 , 0 x34 , 0 x72 , 0 x2e , 0 x26 , 0 x63 , 0 x62 , 0 x5c , 0 x27 , 0 x63 , 0 x65 , 0 x5c , 0 x27 , 0 x63 , 0 x63 , 0 x5c , 0 x27 , 0 x2a , 0 x26 , 0 x3b , 0 x2f , 0 x0f , 0 x0c , 0 x0a , 0 x7b , 0 x5c , 0 x2a , 0 x5c , 0 x67 , 0 x65 , 0 x6e , 0 x65 , 0 x72 , 0 x61 , 0 x74 , 0 x20 , 0 x61 , 0 x20 , 0 x1f , 0 x01 , 0 x67 , 0 x74 , 0 x65 , 0 x64 , 0 x69 , 0 x74 , 0 x20 , 0 x35 , 0 x2e , 0 x34 , 0 x31 , 0 x2e , 0 x31 , 0 x7a , 0 x3d , 0 x31 , 0 x67 , 0 x43 , 0 x34 , 0 x3b , 0 x7d , 0 x5c , 0 x76 , 0 x69 , 0 x65 , 0 x77 , 0 x6b , 0 x69 , 0 x6e , 0 x64 , 0 x34 , 0 x13 , 0 x66 , 0 x63 , 0 x63 , 0 x2e , 0 x71 , 0 x61 , 0 x72 , 0 x64 , 0 x5c , 0 x6c , 0 x61 , 0 x6e , 0 x67 , 0 x32 , 0 x30 , 0 x35 , 0 x32 , 0 x13 , 0 x75 , 0 x30 , 0 x0e , 0 x14 , 0 x72 , 0 x32 , 0 x30 , 0 x20 , 0 x46 , 0 x6c , 0 x61 , 0 x67 , 0 x5c , 0 x7b , 0 x4e , 0 x30 , 0 x5f , 0 x02 , 0 x23 , 0 x72 , 0 x37 , 0 x2d , 0 x47 , 0 x72 , 0 x65 , 0 x65 , 0 x5f , 0 x42 , 0 x75 , 0 x67 , 0 x73 , 0 x5c , 0 x7d , 0 x5c , 0 x70 , 0 x2e , 0 x61 , 0 x0d , 0 x58 , 0 x0f , 0 x0c , 0 x0a , 0 x00 ] key = map ( ord , \" 123321123321@DBApp \" ) for i in xrange ( len ( s )) : s [ i ] ^= key [ i % len ( key ) ] \u5728\u672c\u5730\u65b0\u5efaRTF\u6587\u4ef6\uff0c\u53ef\u77e5\u6587\u4ef6\u59346\u4f4d\u5e94\u8be5\u4e3a \u201d{\\\\rtf1\u201c \uff0c\u5219\u53ef\u89e3\u51fa\u7b2c\u4e8c\u6b21\u8f93\u5165\u7684\u5b57\u7b26\uff1a 1 2 3 4 5 key = map ( ord , \" { \\\\ rtf1 \" ) for i in xrange ( len ( key )) : s [ i ] ^= key [ i ] print \"\" . join ( map ( chr , s [ 0 : 6 ] )) \u4e3a\uff1a ~!3a@0 \u8f93\u5165\u5f97\u6700\u7ec8rtf\u6587\u4ef6\uff0c\u91cc\u9762\u5c31\u6709flag\uff0c\u4e3a\uff1a Flag{N0 M0re Free_Bugs}\uff08 \u63d0\u4ea4\u65f6\u8981\u5c06F\u6539\u4e3af \uff09 0x07 crackMe \u9898\u76ee\uff1a crackMe \u89e3\u538b\u5f97crackMe.exe,\u6253\u5f00\uff1a 1 2 Come one ! Crack Me ~~~ user ( 6 - 16 letters or numbers ): user\u5df2\u7ecf\u7ed9\u51fa\uff0c\u4e3a welcomebeijing \u8f93\u5165\u540e\uff1a 1 password ( 6 - 16 letters or numbers ): IDA\u6253\u5f00\uff0c\u8ddf\u8e2a\u5b57\u7b26\u4e32\u5230\u4e3b\u8981\u51fd\u6570\uff0c\u6839\u636e\u7ecf\u9a8c\u7a0d\u505a\u4fee\u6539\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 int __usercall wmain @ < eax > ( int a1 @ < ebx > ) { FILE * v1 ; // eax FILE * v2 ; // eax char v4 ; // [esp+3h] [ebp-405h] char v5 ; // [esp+4h] [ebp-404h] char v6 ; // [esp+5h] [ebp-403h] char v7 ; // [esp+104h] [ebp-304h] char v8 ; // [esp+105h] [ebp-303h] char password [ 16 ] ; // [esp+204h] [ebp-204h] char user [ 16 ] ; // [esp+304h] [ebp-104h] printf ( \" Come one! Crack Me~~~ \\n \" ) ; user [ 0 ] = 0 ; memset ( & user [ 1 ], 0 , 0 xFFu ) ; password [ 0 ] = 0 ; memset ( & password [ 1 ], 0 , 0 xFFu ) ; while ( 1 ) { do { do { printf ( \" user(6-16 letters or numbers): \" ) ; scanf ( \" %s \" , user ) ; v1 = ( FILE * ) sub_3E24BE () ; fflush ( v1 ) ; } while ( ! ( unsigned __int8 ) sub_3E1000 ( user ) ) ; printf ( \" password(6-16 letters or numbers): \" ) ; scanf ( \" %s \" , password ) ; v2 = ( FILE * ) sub_3E24BE () ; fflush ( v2 ) ; } while ( ! ( unsigned __int8 ) sub_3E1000 ( password ) ) ; init_box ( user ) ; v7 = 0 ; memset ( & v8 , 0 , 0 xFFu ) ; v5 = 0 ; memset ( & v6 , 0 , 0 xFFu ) ; v4 = init_print ( & v7 , & v5 ) ; if ( check ( a1 , user , password ) ) { if ( v4 ) break ; } printf ( & v5 ) ; } printf ( & v7 ) ; return 0 ; } \u7531\u8c03\u8bd5\u5206\u6790\u5f97\uff1a init_box\u51fd\u6570\u4f1a\u5c06user\u8fdb\u884c\u4e00\u6ce2\u64cd\u4f5c\u751f\u6210\u4e00\u4e2abox\u7528\u4e8e\u540e\u9762\u7684\u5f02\u6216\u64cd\u4f5c\u3002 \u53ef\u4ee5\u76f4\u63a5\u5bfc\u51fa\uff0c\u4f46\u540e\u9762\u5176\u5b9e\u6ca1\u5fc5\u8981\u7528\u5230\u3002 init_print\u51fd\u6570\u4f1a\u521d\u59cb\u5316\u4e24\u4e2a\u8f93\u51fa\u5b57\u7b26\u4e32\uff0c\u4e00\u4e2a\u6210\u529f\u4e00\u4e2a\u5931\u8d25\uff0c\u4f46\u7531\u4e8e\u6709\u5f02\u5e38\u82b1\u6307\u4ee4\u5bfc\u81f4IDA\u65e0\u6cd5\u8bc6\u522b\u4e3a\u51fd\u6570\uff0c\u6839\u636e\u5206\u6790\uff0c\u76f4\u63a5\u5c06\u5f02\u5e38nop\u6389\u5c31\u53ef\u4ee5\u4e86 1 2 3 4 5 6 7 .text: 003 E11EA 0 nop .text: 003 E11EB 0 nop .text: 003 E11EC 0 nop .text: 003 E11ED 0 nop .text: 003 E11EE 0 nop .text: 003 E11EF 0 nop .text: 003 E11F0 0 aaa \u63a5\u7740\u5c31\u91cd\u8981\u7684check\u51fd\u6570\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 bool __cdecl check ( char * user , const char * password ) { int v3 ; // [esp+18h] [ebp-22Ch] unsigned int v4 ; // [esp+1Ch] [ebp-228h] unsigned int v5 ; // [esp+28h] [ebp-21Ch] unsigned int v6 ; // [esp+30h] [ebp-214h] char v7 ; // [esp+36h] [ebp-20Eh] char v8 ; // [esp+37h] [ebp-20Dh] char v9 ; // [esp+38h] [ebp-20Ch] unsigned __int8 v10 ; // [esp+39h] [ebp-20Bh] unsigned __int8 v11 ; // [esp+3Ah] [ebp-20Ah] char v12 ; // [esp+3Bh] [ebp-209h] int v13 ; // [esp+3Ch] [ebp-208h] char v14 ; // [esp+40h] [ebp-204h] char v15 ; // [esp+41h] [ebp-203h] _BYTE key [ 256 ] ; // [esp+140h] [ebp-104h] v4 = 0 ; v5 = 0 ; v11 = 0 ; v10 = 0 ; key [ 0 ] = 0 ; memset ( & check_num [ 1 ], 0 , 0 xFFu ) ; v14 = 0 ; memset ( & v15 , 0 , 0 xFFu ) ; v9 = 0 ; v6 = 0 ; v3 = 0 ; while ( v6 < strlen ( password ) ) { if ( isdigit ( password [ v6 ] ) ) { v8 = password [ v6 ] - 48 ; } else if ( isxdigit ( password [ v6 ] ) ) { if ( * ( _DWORD * )( * ( _DWORD * )( __readfsdword ( 0 x30u ) + 24 ) + 12 ) != 2 ) password [ v6 ] = 34 ; v8 = ( password [ v6 ] | 0 x20 ) - 87 ; } else { v8 = (( password [ v6 ] | 0 x20 ) - 97 ) % 6 + 10 ; } v9 = v8 + 16 * v9 ; if ( ! (( signed int )( v6 + 1 ) % 2 ) ) { * ( & v14 + v3 ++ ) = v9 ; v9 = 0 ; } ++ v6 ; } while ( ( signed int ) v5 < 8 ) { v10 += box [ ++ v11 ] ; v12 = box [ v11 ] ; v7 = box [ v10 ] ; box [ v10 ] = v12 ; box [ v11 ] = v7 ; if ( * ( _DWORD * )( __readfsdword ( 0 x30u ) + 104 ) & 0 x70 ) v12 = v10 + v11 ; key [ v5 ] = box [ ( unsigned __int8 )( v7 + v12 ) ] ^ * ( & v14 + v4 ) ; if ( * ( _DWORD * )( __readfsdword ( 0 x30u ) + 2 ) & 0 xFF ) { v10 = - 83 ; v11 = 43 ; } xor ( check_num , user , v5 ++ ) ; v4 = v5 ; if ( v5 >= & v14 + strlen ( & v14 ) + 1 - & v15 ) v4 = 0 ; } v13 = 0 ; check2 ( key , & check_num ) ; return check_num == 43924 ; } \u6839\u636e\u8c03\u8bd5\uff0c\u8f93\u5165\u7684password\u4f1a\u6bcf\u4e24\u4e2a\u4e3a\u4e00\u7ec4(\u7b2c\u4e00\u4e2awhile\u5c31\u662f\u5728\u5c06\u8f93\u5165\u8f6c\u4e3a\u4e24\u4e2a\u4e3a\u4e00\u7ec4\u7684\u5341\u516d\u8fdb\u5236\u5b57\u7b26)\uff0c\u6765\u4e0ebox\u4e2d\u7684\u7279\u5b9a\u4f4d\u7f6e\u7684\u6570\u5f02\u6216\uff0c\u5f97\u5230\u4e00\u7ec48\u4e2akey,\u540e\u8fdb\u5165check2\u8fdb\u884c\u9a8c\u8bc1\uff0c\u6700\u7ec8\u5f97\u5230 check_num == 43924 \u5219\u6210\u529f\u3002 check2: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 _DWORD * __usercall check2 @ < eax > ( int a1 @ < ebx > , _BYTE * key , _DWORD * a3 ) { int v3 ; // ST28_4 int v4 ; // ecx int v6 ; // edx int v8 ; // ST20_4 int v9 ; // eax int v10 ; // edi int v11 ; // ST1C_4 int v12 ; // edx char v13 ; // di int v14 ; // ST18_4 int v15 ; // eax int v16 ; // ST14_4 int v17 ; // edx char v18 ; // al int v19 ; // ST10_4 int v20 ; // ecx int v23 ; // ST0C_4 int v24 ; // eax _DWORD * result ; // eax int v26 ; // edx if ( * key == 100 ) { * a3 |= 4 u ; v4 = * a3 ; } else { * a3 ^= 3 u ; } v3 = * a3 ; if ( key [ 1 ] == 98 ) { _EAX = a3 ; * a3 |= 0 x14u ; v6 = * a3 ; } else { * a3 &= 0 x61u ; _EAX = ( _DWORD * ) * a3 ; } __asm { aam } if ( key [ 2 ] == 97 ) { * a3 |= 0 x84u ; v9 = * a3 ; } else { * a3 &= 0 xAu ; } v8 = * a3 ; v10 = ~ ( a1 >> - 91 ) ; if ( key [ 3 ] == 112 ) { * a3 |= 0 x114u ; v12 = * a3 ; } else { * a3 >>= 7 ; } v11 = * a3 ; v13 = v10 - 1 ; if ( key [ 4 ] == 112 ) { * a3 |= 0 x380u ; v15 = * a3 ; } else { * a3 *= 2 ; } v14 = * a3 ; if ( * ( _DWORD * )( * ( _DWORD * )( __readfsdword ( 0 x30u ) + 24 ) + 12 ) != 2 ) { if ( key [ 5 ] == 102 ) { * a3 |= 0 x2DCu ; v17 = * a3 ; } else { * a3 |= 0 x21u ; } v16 = * a3 ; } if ( key [ 5 ] == 115 ) { * a3 |= 0 xA04u ; v18 = ( char ) a3 ; v20 = * a3 ; } else { v18 = ( char ) a3 ; * a3 ^= 0 x1ADu ; } v19 = * a3 ; _AL = v18 - v13 ; __asm { daa } if ( key [ 6 ] == 101 ) { * a3 |= 0 x2310u ; v24 = * a3 ; } else { * a3 |= 0 x4Au ; } v23 = * a3 ; if ( key [ 7 ] == 99 ) { result = a3 ; * a3 |= 0 x8A10u ; v26 = * a3 ; } else { * a3 &= 0 x3A3u ; result = ( _DWORD * ) * a3 ; } return result ; } \u7531\u5206\u6790\u53ef\u77e5,key\u5e94\u8be5\u4e3a\uff1a key = [100, 98, 97, 112, 112, 115, 101, 99] \uff0c\u5373 dbappsec \uff08\u672c\u6765key[5]\u53ef\u80fd\u503c\u4e3a115\u6216102\u4f46\u524d\u9762\u7531\u505a\u8fc7\u4ee5dbappsec\u4e3a\u5bc6\u94a5\u7684\u9898\uff0c\u4fbf\u731c\u6d4b\u4e3adbappsec\uff09 \u63a5\u7740\uff0c\u6839\u636e\u8c03\u8bd5\u53ef\u77e5\uff0cxor\u51fd\u6570\u662f\u5c06key\u548cuser\u6bcf\u4f4d\u5bf9\u5e94\u5f02\u6216\u3002 \u63a5\u7740\u5728\u8c03\u8bd5\u4e2d\u5c06box\u53c2\u4e0e\u5f02\u6216\u7684\u4f4d\u6570\u63d0\u53d6\u51fa\u6765\uff0c\u5373\u53ef\uff0c\u4f46\u89e3\u51fa\u6765\u672c\u5730\u8f93\u5165\u5c31\u9519\u8bef\uff0c\u6545\u731c\u6d4b\u4e0b\u9762\u8fd9\u4e24\u5904\u5730\u65b9\u5c06\u5f02\u6216\u64cd\u4f5c\u8fdb\u884c\u4e86\u7c7b\u4f3c\u4e8e\u53cd\u8c03\u8bd5\u7684\u64cd\u4f5c\uff0c\u6545\u5c06\u8fd9\u4e24\u5904\u76f4\u63a5nop\u6389 1 2 if ( * ( _DWORD * )( __readfsdword ( 0 x30u ) + 104 ) & 0 x70 ) v12 = v10 + v11 ; 1 2 3 4 5 if ( * ( _DWORD * )( __readfsdword ( 0 x30u ) + 2 ) & 0 xFF ) { v10 = - 83 ; v11 = 43 ; } \u6700\u7ec8\u5f97\u5230\u89e3\u5bc6\u811a\u672c\uff1a 1 2 3 4 5 6 7 8 9 10 key = [ 100 , 98 , 97 , 112 , 112 , 115 , 101 , 99 ] print \"\" . join ( map ( chr , key )) xor = [ 0 x2A , 0 xD7 , 0 x92 , 0 xE9 , 0 x53 , 0 xE2 , 0 xC4 , 0 xCD ] user = \" welcomebeijing \" for i in xrange ( len ( key )) : key [ i ] ^= ord ( user [ i ] ) key [ i ] ^= xor [ i ] print hex ( key [ i ] ) [ 2 :] \u5f97\u5230\uff1a 39d09ffa4cfcc4cc \u672c\u5730\u8f93\u5165\u4e0d\u4f1a\u51fa\u73b0 Please try again \u5219\u731c\u6d4b\u901a\u8fc7\uff0c\u4f46md532\u4f4d\u5c0f\u5199hash\u52a0\u5bc6\u540e\u63d0\u4ea4\u5374\u4e0d\u5bf9\uff0c\u9677\u5165\u81ea\u95ed\u3002 \u540e\u7528cmd\u6253\u5f00crackMe.exe\u53d1\u73b0 39d09ffa4cfcc4cc \u662f\u9519\u8bef\u7684\uff01 \u6545\u7528cmd\u76f4\u63a5\u6253\u5f00\uff0c\u7528IDA attach\u4e0a\u53bb\u8c03\u8bd5\uff0cxor\u6570\u7ec4\u4e0d\u53d8\u4f46\u539f\u7a0b\u5e8f\u4e2dxor\u51fd\u6570\u4e2d\u4e0d\u6267\u884c\u5f02\u6216\u64cd\u4f5c\uff0c\u5b9e\u9645\u6beb\u65e0\u6548\u679c\u3002 \u56e0\u4e3a\u8c03\u8bd5\u76f4\u63a5\u8df3\u8fc7\uff0c\u5c31\u6ca1\u6709\u6ce8\u610f\u5230\u4e0b\u9762\u4f1a\u56e0\u4e3a\u7a97\u53e3\u7684\u4e0d\u540c\u800c\u4e0d\u540c\uff0c\u8fd8\u662ftcl..... 1 2 3 4 5 6 7 StartupInfo . dwX || StartupInfo . dwY || StartupInfo . dwXCountChars || StartupInfo . dwYCountChars || StartupInfo . dwFillAttribute || StartupInfo . dwXSize || StartupInfo . dwYSize \u6700\u7ec8\u89e3\u5bc6\u811a\u672c\u4e3a\uff1a 1 2 3 4 5 6 7 8 9 key = [ 100 , 98 , 97 , 112 , 112 , 115 , 101 , 99 ] print \"\" . join ( map ( chr , key )) xor = [ 0 x2A , 0 xD7 , 0 x92 , 0 xE9 , 0 x53 , 0 xE2 , 0 xC4 , 0 xCD ] user = \" welcomebeijing \" for i in xrange ( len ( key )) : key [ i ] ^= xor [ i ] print hex ( key [ i ] ) [ 2 :] \u5f97\u5230\u7b2c\u4e8c\u4e2a\u5bc6\u7801 4EB5F3992391A1AE 1 2 3 user ( 6 - 16 letters or numbers ): welcomebeijing password ( 6 - 16 letters or numbers ): 4 EB5F3992391A1AE Congratulations : \u4e4b\u540e\u8fdb\u884cmd5\u52a0\u5bc6\u540e\u63d0\u4ea4\uff0c\u5f97\u6b63\u786eflag: flag{d2be2981b84f2a905669995873d6a36c} 0x08 findit \u9898\u76ee\uff1a findint \u4e0b\u8f7d\u4e0b\u6765\u662f\u4e2aapk\u6587\u4ef6\uff0c\u5c31\u76f4\u63a5jeb\u6253\u5f00\uff0c\u6839\u636e\u5b57\u7b26\u4e32\u627e\u5230\u4e3b\u8981\u51fd\u6570\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 protected void onCreate ( Bundle arg8 ) { super . onCreate ( arg8 ); this . setContentView ( 0x7F030018 ); this . findViewById ( 0x7F05003D ). setOnClickListener ( new View$OnClickListener ( new char []{ 'T' , 'h' , 'i' , 's' , 'I' , 's' , 'T' , 'h' , 'e' , 'F' , 'l' , 'a' , 'g' , 'H' , 'o' , 'm' , 'e' }, this . findViewById ( 0x7F05003E ), new char []{ 'p' , 'v' , 'k' , 'q' , '{' , 'm' , '1' , '6' , '4' , '6' , '7' , '5' , '2' , '6' , '2' , '0' , '3' , '3' , 'l' , '4' , 'm' , '4' , '9' , 'l' , 'n' , 'p' , '7' , 'p' , '9' , 'm' , 'n' , 'k' , '2' , '8' , 'k' , '7' , '5' , '}' }, this . findViewById ( 0x7F05003F )) { public void onClick ( View arg13 ) { int v11 = 17 ; int v10 = 0x7A ; int v9 = 90 ; int v8 = 65 ; int v7 = 97 ; char [] v3 = new char [ v11 ]; char [] v4 = new char [ 38 ]; int v0 ; for ( v0 = 0 ; v0 < v11 ; ++ v0 ) { if ( this . val$a [ v0 ] >= 73 || this . val$a [ v0 ] < v8 ) { if ( this . val$a [ v0 ] < 105 && this . val$a [ v0 ] >= v7 ) { label_39 : v3 [ v0 ] = (( char )( this . val$a [ v0 ] + 18 )); goto label_44 ; } if ( this . val$a [ v0 ] >= v8 && this . val$a [ v0 ] <= v9 || this . val$a [ v0 ] >= v7 && this . val$a [ v0 ] <= v10 ) { v3 [ v0 ] = (( char )( this . val$a [ v0 ] - 8 )); goto label_44 ; } v3 [ v0 ] = this . val$a [ v0 ]; } else { goto label_39 ; } label_44: } if ( String . valueOf ( v3 ). equals ( this . val$edit . getText (). toString ())) { v0 = 0 ; goto label_18 ; } else { this . val$text . setText ( \"\u7b54\u6848\u9519\u4e86\u80bf\u4e48\u529e\u3002\u3002\u3002\u4e0d\u7ed9\u4f60\u53c8\u4e0d\u597d\u610f\u601d\u3002\u3002\u3002\u54ce\u5440\u597d\u7ea0\u7ed3\u554a~~~\" ); return ; label_18 : while ( v0 < 38 ) { if ( this . val$b [ v0 ] < v8 || this . val$b [ v0 ] > v9 ) { if ( this . val$b [ v0 ] >= v7 && this . val$b [ v0 ] <= v10 ) { label_80 : v4 [ v0 ] = (( char )( this . val$b [ v0 ] + 16 )); if (( v4 [ v0 ] <= v9 || v4 [ v0 ] >= v7 ) && v4 [ v0 ] < v10 ) { goto label_95 ; } v4 [ v0 ] = (( char )( v4 [ v0 ] - 26 )); goto label_95 ; } v4 [ v0 ] = this . val$b [ v0 ]; } else { goto label_80 ; } label_95: ++ v0 ; } this . val$text . setText ( String . valueOf ( v4 )); } } }); } \u89c2\u5bdf\u540e\u53d1\u73b0\u89e3\u9898\u65b9\u6cd5\u67092\uff1a 1.\u9006\u63a8\u51fa\u8f93\u5165 2.\u590d\u73b0flag\u751f\u6210\u8fc7\u7a0b \u6211\u8fd9\u91cc\u91c7\u7528\u7b2c2\u79cd\uff0c\u811a\u672c\u5982\u4e0b\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 flag = \" pvkq{m164675262033l4m49lnp7p9mnk28k75} \" flag = map ( ord , flag ) v11 = 17 v10 = 0 x7A v9 = 90 v8 = 65 v7 = 97 for i in xrange ( len ( flag )) : if flag [ i ] < v8 or flag [ i ] > v9 : if flag [ i ] >= v7 and flag [ i ] <= v10 : flag [ i ] += 16 if ( flag [ i ] <= v9 or flag [ i ] >= v7 ) and flag [ i ] < v10 : continue flag [ i ] = flag [ i ] - 26 continue else : flag [ i ] += 16 if ( flag [ i ] <= v9 or flag [ i ] >= v7 ) and flag [ i ] < v10 : continue flag [ i ] = flag [ i ] - 26 continue print \"\" . join ( map ( chr , flag )) \u5f97flag\uff1a flag{c164675262033b4c49bdf7f9cda28a75} 0x09 Dig the way \u9898\u76ee\uff1a Dig the way \u89e3\u538b\u5f97\u5230\u4e00\u4e2aida\u6570\u636e\u5e93\u6587\u4ef6\uff0c\u6253\u5f00\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 int __cdecl main ( int argc , const char ** argv , const char ** envp ) { int result ; // eax int v4 ; // ebx size_t v5 ; // eax int v6 ; // ebx char v7_20 [ 20 ] ; // [esp+1Ch] [ebp-48h] int v8 ; // [esp+30h] [ebp-34h] int v9 ; // [esp+34h] [ebp-30h] int v10 ; // [esp+38h] [ebp-2Ch] int v11 ; // [esp+3Ch] [ebp-28h] int v12 ; // [esp+40h] [ebp-24h] int v13 ; // [esp+44h] [ebp-20h] signed int ( __cdecl * func_ptr )( int , int , int ) ; // [esp+48h] [ebp-1Ch] int ( __cdecl * v15 )( int , int , int ) ; // [esp+4Ch] [ebp-18h] int ( __cdecl * v16 )( int , int , int ) ; // [esp+50h] [ebp-14h] int v17 ; // [esp+54h] [ebp-10h] int v18 ; // [esp+58h] [ebp-Ch] FILE * file_ptr ; // [esp+5Ch] [ebp-8h] __main () ; func_ptr = func0 ; v15 = func1 ; v16 = func2 ; v8 = 0 ; v9 = 1 ; v10 = 2 ; v11 = 3 ; v12 = 3 ; v13 = 4 ; file_ptr = fopen ( \" data \" , \" rb \" ) ; if ( ! file_ptr ) return - 1 ; fseek ( file_ptr , 0 , 2 ) ; v18 = ftell ( file_ptr ) ; fseek ( file_ptr , 0 , 0 ) ; v17 = ftell ( file_ptr ) ; if ( v17 ) { puts ( \" something wrong \" ) ; result = 0 ; } else { for ( i = 0 ; i < v18; ++i ) { v4 = i ; v7_20 [ v4 ] = fgetc ( file_ptr ) ; } v5 = strlen ( v7_20 ) ; if ( v5 <= v18 ) { v18 = v11 ; i = 0 ; v17 = v13 ; while ( i <= 2 ) { v6 = i + 1 ; * ( & v8 + v6 ) = ( * ( & func_ptr + i ))(( int ) & v8 , v12 , v13 ) ;// get v9,v10,v11 v12 = ++ i ; v13 = i + 1 ; } if ( v11 ) { result = - 1 ; } else { get_key ( v18 , v17 ) ; system ( \" PAUSE \" ) ; result = 0 ; } } else { result = - 1 ; } } return result ; } \u5206\u6790\u53ef\u77e5\u6700\u7ec8\u53ef\u76f4\u63a5\u7b80\u5316\u4e3aget key(3,4)\uff0c\u5206\u6790get key: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 int __cdecl get_key ( unsigned int a1 , unsigned int a2 ) { long double v2 ; // fst7 unsigned int v4 ; // [esp+70h] [ebp+8h] v4 = ( signed __int64 ) pow (( long double ) a1 , 0 . 9 ) ; v2 = pow (( long double ) a2 , 9 . 800000000000001 ) ; return printf ( \" flag: %x%x%x%x%x%x%x%x \\n \" , ( unsigned __int16 ) v4 , v4 >> 16 , ( unsigned __int16 )( signed __int64 ) v2 , ( unsigned int )( signed __int64 ) v2 >> 16 , ( unsigned int )( signed __int64 ) v2 >> 16 , ( unsigned __int16 )( signed __int64 ) v2 , v4 >> 16 , ( unsigned __int16 ) v4 ) ; } \u76f4\u63a5\u590d\u73b0\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 int get_key ( unsigned int a1 , unsigned int a2 ) { long double v2 ; unsigned int v4 ; v4 = ( signed long int ) pow (( long double ) a1 , 0 . 9 ) ; v2 = pow (( long double ) a2 , 9 . 800000000000001 ) ; return printf ( \" flag: %x%x%x%x%x%x%x%x \\n \" , ( unsigned __int16 ) v4 , v4 >> 16 , ( unsigned __int16 )( signed __int64 ) v2 , ( unsigned int )( signed __int64 ) v2 >> 16 , ( unsigned int )( signed __int64 ) v2 >> 16 , ( unsigned __int16 )( signed __int64 ) v2 , v4 >> 16 , ( unsigned __int16 ) v4 ) ; } get_key(3,4) ,\u89e3\u51fa\u6765 flag:202030cc203002 \u662f\u9519\u8bef\u7684\uff0c\u968f\u5373\u9677\u5165\u81ea\u95ed\uff0c\u5f85\u4ee5\u540e\u518d\u5427.....\u5982\u679c\u6709\u5e08\u5085\u80fd\u4e88\u4ee5\u6307\u5bfc\uff0c\u6211\u5c06\u4e0d\u80dc\u611f\u6fc0\uff01","title":"Reverse"},{"location":"ctf_write_up/exams/buuctf/reverse/#0x00-easyre","text":"\u9898\u76ee\uff1a easyre IDA\u6253\u5f00\uff0cmain\u51fd\u6570\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 int __cdecl main ( int argc , const char ** argv , const char ** envp ) { int b ; // [rsp+28h] [rbp-8h] int a ; // [rsp+2Ch] [rbp-4h] _main () ; scanf ( \" %d%d \" , & a , & b ) ; if ( a == b ) printf ( \" flag{this_Is_a_EaSyRe} \" ) ; else printf ( \" sorry,you can't get flag \" ) ; return 0 ; }","title":"0x00 easyre"},{"location":"ctf_write_up/exams/buuctf/reverse/#0x01-helloword","text":"\u9898\u76ee\uff1a helloworld jeb3\u6253\u5f00\uff0cMainActivity\uff1a 1 2 3 4 5 6 7 8 9 10 11 . method protected onCreate ( Bundle ) V . registers 6 00000000 invoke - super ActionBarActivity -> onCreate ( Bundle ) V , p0 , p1 00000006 const v3 , 0 x7F030018 0000000 C invoke - virtual MainActivity -> setContentView ( I ) V , p0 , v3 00000012 const - string v0 , \" flag{7631a988259a00816deda84afb29430a} \" 00000016 const - string v1 , \" xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx \" 0000001 A invoke - virtual String -> compareTo ( String ) I , v0 , v1 00000020 move - result v2 00000022 return - void . end method","title":"0x01 helloword"},{"location":"ctf_write_up/exams/buuctf/reverse/#0x02-reverse1","text":"\u9898\u76ee\uff1a reverse1 IDA\u6253\u5f00\uff0c\u8ffd\u8e2a\u5b57\u7b26\u4e32\u5230\u4e3b\u8981\u51fd\u6570\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 __int64 sub_1400118C0 () { char * v0 ; // rdi signed __int64 i ; // rcx size_t v2 ; // rax size_t v3 ; // rax char v5 ; // [rsp+0h] [rbp-20h] int j ; // [rsp+24h] [rbp+4h] char Str1 ; // [rsp+48h] [rbp+28h] unsigned __int64 v8 ; // [rsp+128h] [rbp+108h] v0 = & v5 ; for ( i = 82 i64 ; i; --i ) { * ( _DWORD * ) v0 = - 858993460 ; v0 += 4 ; } for ( j = 0 ; ; ++j ) { v8 = j ; v2 = j_strlen ( Str2 ) ; if ( v8 > v2 ) break ; if ( Str2 [ j ] == 111 ) Str2 [ j ] = 48 ; } sub_1400111D1 ( \" input the flag: \" ) ; sub_14001128F ( \" %20s \" , & Str1 ) ; v3 = j_strlen ( Str2 ) ; if ( ! strncmp ( & Str1 , Str2 , v3 ) ) sub_1400111D1 ( \" this is the right flag! \\n \" ) ; else sub_1400111D1 ( \" wrong flag \\n \" ) ; sub_14001113B ( & v5 , & unk_140019D00 ) ; return 0 i64 ; } \u67e5\u770bStr2: 1 .data: 000000014001 C000 Str2 db '{ hello_world }' , 0 flag{hello_world}","title":"0x02 reverse1"},{"location":"ctf_write_up/exams/buuctf/reverse/#0x03-reverse2","text":"\u9898\u76ee \uff1a reverse2 IDA\u6253\u5f00\uff0c\u4e3b\u51fd\u6570\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 int __cdecl main ( int argc , const char ** argv , const char ** envp ) { int result ; // eax int stat_loc ; // [rsp+4h] [rbp-3Ch] int i ; // [rsp+8h] [rbp-38h] __pid_t pid ; // [rsp+Ch] [rbp-34h] char s2 ; // [rsp+10h] [rbp-30h] unsigned __int64 v8 ; // [rsp+28h] [rbp-18h] v8 = __readfsqword ( 0 x28u ) ; pid = fork () ; if ( pid ) { argv = ( const char ** ) & stat_loc ; waitpid ( pid , & stat_loc , 0 ) ; } else { for ( i = 0 ; i <= strlen(flag); ++i ) { if ( flag [ i ] == ' i ' || flag [ i ] == ' r ' ) flag [ i ] = ' 1 ' ; } } printf ( \" input the flag: \" , argv ) ; __isoc99_scanf ( \" %20s \" , & s2 ) ; if ( ! strcmp ( flag , & s2 ) ) result = puts ( \" this is the right flag! \" ) ; else result = puts ( \" wrong flag! \" ) ; return result ; } \u67e5\u770bflag\uff1a 1 2 3 .data: 0000000000601080 flag db '{' ; DATA XREF: main+34\u2191r .data: 0000000000601080 ; main+44\u2191r ... .data: 0000000000601081 aHackingForFun db ' hacking_for_fun }' , 0 \u7531\u4e8e\u524d\u9762\uff1a 1 2 3 4 5 for ( i = 0 ; i <= strlen(flag); ++i ) { if ( flag [ i ] == ' i ' || flag [ i ] == ' r ' ) flag [ i ] = ' 1 ' ; } so\uff0c\u6700\u7ec8flag\u4e3a: flag{hack1ng fo1 fun}","title":"0x03 reverse2"},{"location":"ctf_write_up/exams/buuctf/reverse/#0x04","text":"\u9898\u76ee\uff1a \u522e\u5f00\u6709\u5956 IDA\u6253\u5f00\uff0c\u67e5\u770b\u5b57\u7b26\u4e32\u53d1\u73b0base64 table\u8868 1 2 .rdata: 00407830 byte_407830 db 41 h ; DATA XREF: sub_401000+C0\u2191r .rdata: 00407831 aBcdefghijklmno db ' BCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789 +/=' , 0 \u6574\u7406\u4e00\u4e0b\uff1a 1 .rdata: 00407830 aAbcdefghijklmn db ' ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789 +/=' \u8ffd\u5230\u5224\u65ad\u51fd\u6570,\u6839\u636e\u7ecf\u9a8c\u4fee\u6539\u7c7b\u578b\u548c\u5927\u5c0f\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 BOOL __stdcall DialogFunc ( HWND hDlg , UINT a2 , WPARAM a3 , LPARAM a4 ) { const char * v4 ; // esi const char * v5 ; // edi int key [ 11 ]; // [esp+8h] [ebp-20030h] CHAR input [ 8 ]; // [esp+34h] [ebp-20004h] CHAR v9 ; // [esp+10034h] [ebp-10004h] CHAR v10 ; // [esp+10035h] [ebp-10003h] CHAR v11 ; // [esp+10036h] [ebp-10002h] if ( a2 == 272 ) return 1 ; if ( a2 != 273 ) return 0 ; if ( ( _WORD ) a3 == 1001 ) { memset ( input , 0 , 0xFFFFu ); GetDlgItemTextA ( hDlg , 1000 , input , 0xFFFF ); if ( strlen ( input ) == 8 ) { key [ 0 ] = 90 ; key [ 1 ] = 74 ; key [ 2 ] = 83 ; key [ 3 ] = 69 ; key [ 4 ] = 67 ; key [ 5 ] = 97 ; key [ 6 ] = 78 ; key [ 7 ] = 72 ; key [ 8 ] = 51 ; key [ 9 ] = 110 ; key [ 10 ] = 103 ; sub_4010F0 ( key , 0 , 10 ); memset ( & v9 , 0 , 0xFFFFu ); v9 = input [ 5 ]; v11 = input [ 7 ]; v10 = input [ 6 ]; v4 = base64 (( int ) & v9 , strlen ( & v9 )); memset ( & v9 , 0 , 0xFFFFu ); v10 = input [ 3 ]; v9 = input [ 2 ]; v11 = input [ 4 ]; v5 = base64 (( int ) & v9 , strlen ( & v9 )); if ( input [ 0 ] == key [ 0 ] + 34 && input [ 1 ] == key [ 4 ] && 4 * input [ 2 ] - 141 == 3 * key [ 2 ] && input [ 3 ] / 4 == 2 * ( key [ 7 ] / 9 ) && ! strcmp ( v4 , \"ak1w\" ) && ! strcmp ( v5 , \"V1Ax\" ) ) { MessageBoxA ( hDlg , \"U g3t 1T!\" , \"@_@\" , 0 ); } } return 0 ; } if ( ( _WORD ) a3 != 1 && ( _WORD ) a3 != 2 ) return 0 ; EndDialog ( hDlg , ( unsigned __int16 ) a3 ); return 1 ; } sub_4010F0(key, 0, 10): 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 int __cdecl sub_4010F0 ( int * a1 , int a2 , int num_10 ) { int result ; // eax int i ; // esi int v5 ; // ecx int v6 ; // edx result = num_10 ; for ( i = a2 ; i <= num_10; a2 = i ) { v5 = i ; v6 = a1 [ i ] ; if ( a2 < result && i < result ) { do { if ( v6 > a1 [ result ] ) { if ( i >= result ) break ; ++ i ; a1 [ v5 ] = a1 [ result ] ; if ( i >= result ) break ; while ( a1 [ i ] <= v6 ) { if ( ++ i >= result ) goto LABEL_13 ; } if ( i >= result ) break ; v5 = i ; a1 [ result ] = a1 [ i ] ; } -- result ; } while ( i < result ) ; } LABEL_13 : a1 [ result ] = v6 ; sub_4010F0 ( a1 , a2 , i - 1 ) ; result = num_10 ; ++ i ; } return result ; } \u7814\u7a76\u4e00\u4e0b\u5c31\u4f1a\u53d1\u73b0\u662f\u4e2a\u4ece\u5c0f\u5230\u5927\u7684\u6392\u5e8f\u3002 \u5219\u89e3\u5bc6\u811a\u672c\u5982\u4e0b\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 import base64 s2 = base64 . b64decode ( \"ak1w\" ) s1 = base64 . b64decode ( \"V1Ax\" ) key = [ 0 for i in xrange ( 11 ) ] key [ 0 ] = 90 key [ 1 ] = 74 key [ 2 ] = 83 key [ 3 ] = 69 key [ 4 ] = 67 key [ 5 ] = 97 key [ 6 ] = 78 key [ 7 ] = 72 key [ 8 ] = 51 key [ 9 ] = 110 key [ 10 ] = 103 key . sort () flag = chr ( key [ 0 ] + 34 ) + chr ( key [ 4 ]) + s1 + s2 print flag flag{UJWP1jMp}","title":"0x04 \u522e\u5f00\u6709\u5956"},{"location":"ctf_write_up/exams/buuctf/reverse/#0x05-rsa","text":"\u9898\u76ee\uff1a rsa \u6253\u5f00\u6765\u4e24\u4e2a\u6587\u4ef6,\u516c\u94a5\u5bc6\u6587\u90fd\u6709\uff0c\u89e3\u5bc6\u811a\u672c\u5982\u4e0b\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 from Crypto.PublicKey import RSA from Crypto.Cipher import PKCS1_v1_5 from Crypto.Util.number import inverse import base64 message = open ( 'flag.enc' , \"r\" ) cipher_text = message . read () f = open ( 'pub.key' , \"r\" ) publickey = f . read () publickey = RSA . importKey ( publickey ) # print(publickey.n) # print(publickey.e) n = 86934482296048119190666062003494800588905656017203025617216654058378322103517 e = 65537 p = 285960468890451637935629440372639283459 q = 304008741604601924494328155975272418463 r = ( p - 1 ) * ( q - 1 ) d = inverse ( e , r ) # print d privatekey = RSA . construct (( long ( n ), long ( e ), long ( d ), long ( p ), long ( q ))) key = PKCS1_v1_5 . new ( privatekey ) msg = key . decrypt ( cipher_text , e ) print msg flag{decrypt_256} \u53c2\u8003\uff1a RSA-ctf-wiki \u6574\u6570\u5206\u89e3","title":"0x05 rsa"},{"location":"ctf_write_up/exams/buuctf/reverse/#0x06-crackrtf","text":"\u9898\u76ee\uff1a CrackRTF IDA\u6253\u5f00\uff0c\u8ffd\u8e2a\u5b57\u7b26\u4e32\u5230\u4e3b\u8981\u51fd\u6570\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 int main_0 () { DWORD v0 ; // eax DWORD v1 ; // eax CHAR String ; // [esp+4Ch] [ebp-310h] int v4 ; // [esp+150h] [ebp-20Ch] CHAR String1 ; // [esp+154h] [ebp-208h] char input [ 6 ] ; // [esp+258h] [ebp-104h] memset ( input , 0 , 0 x104u ) ; memset ( & String1 , 0 , 0 x104u ) ; v4 = 0 ; printf ( \" pls input the first passwd(1): \" ) ; scanf ( \" %s \" , input ) ; if ( strlen ( input ) != 6 ) { printf ( \" Must be 6 characters! \\n \" ) ; ExitProcess ( 0 ) ; } v4 = atoi ( input ) ; if ( v4 < 100000 ) ExitProcess ( 0 ) ; strcat ( input , \" @DBApp \" ) ; v0 = strlen ( input ) ; sub_40100A (( BYTE * ) input , v0 , & String1 ) ; if ( ! _strcmpi ( & String1 , \" 6E32D0943418C2C33385BC35A1470250DD8923A9 \" ) ) { printf ( \" continue... \\n\\n \" ) ; printf ( \" pls input the first passwd(2): \" ) ; memset ( & String , 0 , 0 x104u ) ; scanf ( \" %s \" , & String ) ; if ( strlen ( & String ) != 6 ) { printf ( \" Must be 6 characters! \\n \" ) ; ExitProcess ( 0 ) ; } strcat ( & String , input ) ; memset ( & String1 , 0 , 0 x104u ) ; v1 = strlen ( & String ) ; sub_401019 (( BYTE * ) & String , v1 , & String1 ) ; if ( ! _strcmpi ( \" 27019e688a4e62a649fd99cadaafdb4e \" , & String1 ) ) { if ( ! ( unsigned __int8 ) sub_40100F ( & String ) ) { printf ( \" Error!! \\n \" ) ; ExitProcess ( 0 ) ; } printf ( \" bye ~~ \\n \" ) ; } } return 0 ; } \u8f93\u5165\u4e24\u6b21\u9a8c\u8bc1flag\u3002","title":"0x06 CrackRTF"},{"location":"ctf_write_up/exams/buuctf/reverse/#_1","text":"hash\u503c\u5728\u7ebf\u7206\u7834\uff0c\u76f4\u63a5\u5f97\u7b2c\u4e00\u90e8\u5206123321\uff0c\u8fdb\u5165\u7b2c\u4e8c\u90e8\u5206 1 2 3 4 5 D :\\ CTF \\ Games \\ Exam \\ BUUCTF \\ CrackRTF > CrackRTF . exe pls input the first passwd ( 1 ) : 123321 continue ... pls input the first passwd ( 2 ) :","title":"\u7b2c\u4e00\u6b21"},{"location":"ctf_write_up/exams/buuctf/reverse/#_2","text":"\u65e0\u6cd5\u7206\u7834\uff0c\u89c2\u5bdf\u5230sub_40100F\u51fd\u6570\u4e2d\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 char __cdecl sub_4014D0 ( LPCSTR lpString ) { LPCVOID lpBuffer ; // [esp+50h] [ebp-1Ch] DWORD NumberOfBytesWritten ; // [esp+58h] [ebp-14h] DWORD nNumberOfBytesToWrite ; // [esp+5Ch] [ebp-10h] HGLOBAL hResData ; // [esp+60h] [ebp-Ch] HRSRC hResInfo ; // [esp+64h] [ebp-8h] HANDLE hFile ; // [esp+68h] [ebp-4h] hFile = 0 ; hResData = 0 ; nNumberOfBytesToWrite = 0 ; NumberOfBytesWritten = 0 ; hResInfo = FindResourceA ( 0 , ( LPCSTR ) 0 x65 , \" AAA \" ) ; if ( ! hResInfo ) return 0 ; nNumberOfBytesToWrite = SizeofResource ( 0 , hResInfo ) ; hResData = LoadResource ( 0 , hResInfo ) ; if ( ! hResData ) return 0 ; lpBuffer = LockResource ( hResData ) ; sub_401005 ( lpString , ( int ) lpBuffer , nNumberOfBytesToWrite ) ; hFile = CreateFileA ( \" dbapp.rtf \" , 0 x10000000u , 0 , 0 , 2 u , 0 x80u , 0 ) ; if ( hFile == ( HANDLE ) - 1 ) return 0 ; if ( ! WriteFile ( hFile , lpBuffer , nNumberOfBytesToWrite , & NumberOfBytesWritten , 0 ) ) return 0 ; CloseHandle ( hFile ) ; return 1 ; } \u4f1a\u751f\u6210\u4e00\u4e2adbapp.rtf\u6587\u4ef6\u3002 \u968f\u4fbf\u8f93\u5165123321\u5f97\uff0c\u6b64\u5904\u7528010editor\u6253\u5f00\uff1a \u5728\u751f\u6210\u6587\u4ef6\u524dsub_401005\u8fdb\u884c\u4e86\u5f02\u6216\u64cd\u4f5c\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 unsigned int __cdecl sub_401420 ( LPCSTR lpString , int a2 , int a3 ) { unsigned int result ; // eax unsigned int i ; // [esp+4Ch] [ebp-Ch] unsigned int v5 ; // [esp+54h] [ebp-4h] v5 = lstrlenA ( lpString ) ; for ( i = 0 ; ; ++i ) { result = i ; if ( i >= a3 ) break ; * ( _BYTE * )( i + a2 ) ^= lpString [ i % v5 ] ; } return result ; } \u5219\u53ef\u4ee5\u9006\u89e3\u51fa\u5f02\u6216\u56e0\u5b50: 1 2 3 4 5 6 s = [ 0 x34 , 0 x4f , 0 x72 , 0 x26 , 0 x14 , 0 x30 , 0 x5c , 0 x61 , 0 x6e , 0 x73 , 0 x69 , 0 x5c , 0 x61 , 0 x6e , 0 x73 , 0 x69 , 0 x63 , 0 x70 , 0 x28 , 0 x2a , 0 x33 , 0 x64 , 0 x2e , 0 x65 , 0 x65 , 0 x66 , 0 x66 , 0 x30 , 0 x5c , 0 x64 , 0 x65 , 0 x66 , 0 x6c , 0 x61 , 0 x6e , 0 x67 , 0 x7e , 0 x23 , 0 x33 , 0 x61 , 0 x2e , 0 x65 , 0 x65 , 0 x66 , 0 x6c , 0 x61 , 0 x6e , 0 x67 , 0 x66 , 0 x65 , 0 x32 , 0 x30 , 0 x35 , 0 x32 , 0 x34 , 0 x4f , 0 x66 , 0 x3d , 0 x1c , 0 x75 , 0 x74 , 0 x62 , 0 x6c , 0 x7b , 0 x5c , 0 x66 , 0 x30 , 0 x5c , 0 x66 , 0 x6d , 0 x6f , 0 x64 , 0 x2a , 0 x61 , 0 x6e , 0 x0e , 0 x14 , 0 x71 , 0 x72 , 0 x71 , 0 x36 , 0 x5c , 0 x66 , 0 x63 , 0 x68 , 0 x61 , 0 x72 , 0 x73 , 0 x65 , 0 x74 , 0 x7e , 0 x20 , 0 x34 , 0 x72 , 0 x2e , 0 x26 , 0 x63 , 0 x62 , 0 x5c , 0 x27 , 0 x63 , 0 x65 , 0 x5c , 0 x27 , 0 x63 , 0 x63 , 0 x5c , 0 x27 , 0 x2a , 0 x26 , 0 x3b , 0 x2f , 0 x0f , 0 x0c , 0 x0a , 0 x7b , 0 x5c , 0 x2a , 0 x5c , 0 x67 , 0 x65 , 0 x6e , 0 x65 , 0 x72 , 0 x61 , 0 x74 , 0 x20 , 0 x61 , 0 x20 , 0 x1f , 0 x01 , 0 x67 , 0 x74 , 0 x65 , 0 x64 , 0 x69 , 0 x74 , 0 x20 , 0 x35 , 0 x2e , 0 x34 , 0 x31 , 0 x2e , 0 x31 , 0 x7a , 0 x3d , 0 x31 , 0 x67 , 0 x43 , 0 x34 , 0 x3b , 0 x7d , 0 x5c , 0 x76 , 0 x69 , 0 x65 , 0 x77 , 0 x6b , 0 x69 , 0 x6e , 0 x64 , 0 x34 , 0 x13 , 0 x66 , 0 x63 , 0 x63 , 0 x2e , 0 x71 , 0 x61 , 0 x72 , 0 x64 , 0 x5c , 0 x6c , 0 x61 , 0 x6e , 0 x67 , 0 x32 , 0 x30 , 0 x35 , 0 x32 , 0 x13 , 0 x75 , 0 x30 , 0 x0e , 0 x14 , 0 x72 , 0 x32 , 0 x30 , 0 x20 , 0 x46 , 0 x6c , 0 x61 , 0 x67 , 0 x5c , 0 x7b , 0 x4e , 0 x30 , 0 x5f , 0 x02 , 0 x23 , 0 x72 , 0 x37 , 0 x2d , 0 x47 , 0 x72 , 0 x65 , 0 x65 , 0 x5f , 0 x42 , 0 x75 , 0 x67 , 0 x73 , 0 x5c , 0 x7d , 0 x5c , 0 x70 , 0 x2e , 0 x61 , 0 x0d , 0 x58 , 0 x0f , 0 x0c , 0 x0a , 0 x00 ] key = map ( ord , \" 123321123321@DBApp \" ) for i in xrange ( len ( s )) : s [ i ] ^= key [ i % len ( key ) ] \u5728\u672c\u5730\u65b0\u5efaRTF\u6587\u4ef6\uff0c\u53ef\u77e5\u6587\u4ef6\u59346\u4f4d\u5e94\u8be5\u4e3a \u201d{\\\\rtf1\u201c \uff0c\u5219\u53ef\u89e3\u51fa\u7b2c\u4e8c\u6b21\u8f93\u5165\u7684\u5b57\u7b26\uff1a 1 2 3 4 5 key = map ( ord , \" { \\\\ rtf1 \" ) for i in xrange ( len ( key )) : s [ i ] ^= key [ i ] print \"\" . join ( map ( chr , s [ 0 : 6 ] )) \u4e3a\uff1a ~!3a@0 \u8f93\u5165\u5f97\u6700\u7ec8rtf\u6587\u4ef6\uff0c\u91cc\u9762\u5c31\u6709flag\uff0c\u4e3a\uff1a Flag{N0 M0re Free_Bugs}\uff08 \u63d0\u4ea4\u65f6\u8981\u5c06F\u6539\u4e3af \uff09","title":"\u7b2c\u4e8c\u6b21"},{"location":"ctf_write_up/exams/buuctf/reverse/#0x07-crackme","text":"\u9898\u76ee\uff1a crackMe \u89e3\u538b\u5f97crackMe.exe,\u6253\u5f00\uff1a 1 2 Come one ! Crack Me ~~~ user ( 6 - 16 letters or numbers ): user\u5df2\u7ecf\u7ed9\u51fa\uff0c\u4e3a welcomebeijing \u8f93\u5165\u540e\uff1a 1 password ( 6 - 16 letters or numbers ): IDA\u6253\u5f00\uff0c\u8ddf\u8e2a\u5b57\u7b26\u4e32\u5230\u4e3b\u8981\u51fd\u6570\uff0c\u6839\u636e\u7ecf\u9a8c\u7a0d\u505a\u4fee\u6539\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 int __usercall wmain @ < eax > ( int a1 @ < ebx > ) { FILE * v1 ; // eax FILE * v2 ; // eax char v4 ; // [esp+3h] [ebp-405h] char v5 ; // [esp+4h] [ebp-404h] char v6 ; // [esp+5h] [ebp-403h] char v7 ; // [esp+104h] [ebp-304h] char v8 ; // [esp+105h] [ebp-303h] char password [ 16 ] ; // [esp+204h] [ebp-204h] char user [ 16 ] ; // [esp+304h] [ebp-104h] printf ( \" Come one! Crack Me~~~ \\n \" ) ; user [ 0 ] = 0 ; memset ( & user [ 1 ], 0 , 0 xFFu ) ; password [ 0 ] = 0 ; memset ( & password [ 1 ], 0 , 0 xFFu ) ; while ( 1 ) { do { do { printf ( \" user(6-16 letters or numbers): \" ) ; scanf ( \" %s \" , user ) ; v1 = ( FILE * ) sub_3E24BE () ; fflush ( v1 ) ; } while ( ! ( unsigned __int8 ) sub_3E1000 ( user ) ) ; printf ( \" password(6-16 letters or numbers): \" ) ; scanf ( \" %s \" , password ) ; v2 = ( FILE * ) sub_3E24BE () ; fflush ( v2 ) ; } while ( ! ( unsigned __int8 ) sub_3E1000 ( password ) ) ; init_box ( user ) ; v7 = 0 ; memset ( & v8 , 0 , 0 xFFu ) ; v5 = 0 ; memset ( & v6 , 0 , 0 xFFu ) ; v4 = init_print ( & v7 , & v5 ) ; if ( check ( a1 , user , password ) ) { if ( v4 ) break ; } printf ( & v5 ) ; } printf ( & v7 ) ; return 0 ; } \u7531\u8c03\u8bd5\u5206\u6790\u5f97\uff1a init_box\u51fd\u6570\u4f1a\u5c06user\u8fdb\u884c\u4e00\u6ce2\u64cd\u4f5c\u751f\u6210\u4e00\u4e2abox\u7528\u4e8e\u540e\u9762\u7684\u5f02\u6216\u64cd\u4f5c\u3002 \u53ef\u4ee5\u76f4\u63a5\u5bfc\u51fa\uff0c\u4f46\u540e\u9762\u5176\u5b9e\u6ca1\u5fc5\u8981\u7528\u5230\u3002 init_print\u51fd\u6570\u4f1a\u521d\u59cb\u5316\u4e24\u4e2a\u8f93\u51fa\u5b57\u7b26\u4e32\uff0c\u4e00\u4e2a\u6210\u529f\u4e00\u4e2a\u5931\u8d25\uff0c\u4f46\u7531\u4e8e\u6709\u5f02\u5e38\u82b1\u6307\u4ee4\u5bfc\u81f4IDA\u65e0\u6cd5\u8bc6\u522b\u4e3a\u51fd\u6570\uff0c\u6839\u636e\u5206\u6790\uff0c\u76f4\u63a5\u5c06\u5f02\u5e38nop\u6389\u5c31\u53ef\u4ee5\u4e86 1 2 3 4 5 6 7 .text: 003 E11EA 0 nop .text: 003 E11EB 0 nop .text: 003 E11EC 0 nop .text: 003 E11ED 0 nop .text: 003 E11EE 0 nop .text: 003 E11EF 0 nop .text: 003 E11F0 0 aaa \u63a5\u7740\u5c31\u91cd\u8981\u7684check\u51fd\u6570\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 bool __cdecl check ( char * user , const char * password ) { int v3 ; // [esp+18h] [ebp-22Ch] unsigned int v4 ; // [esp+1Ch] [ebp-228h] unsigned int v5 ; // [esp+28h] [ebp-21Ch] unsigned int v6 ; // [esp+30h] [ebp-214h] char v7 ; // [esp+36h] [ebp-20Eh] char v8 ; // [esp+37h] [ebp-20Dh] char v9 ; // [esp+38h] [ebp-20Ch] unsigned __int8 v10 ; // [esp+39h] [ebp-20Bh] unsigned __int8 v11 ; // [esp+3Ah] [ebp-20Ah] char v12 ; // [esp+3Bh] [ebp-209h] int v13 ; // [esp+3Ch] [ebp-208h] char v14 ; // [esp+40h] [ebp-204h] char v15 ; // [esp+41h] [ebp-203h] _BYTE key [ 256 ] ; // [esp+140h] [ebp-104h] v4 = 0 ; v5 = 0 ; v11 = 0 ; v10 = 0 ; key [ 0 ] = 0 ; memset ( & check_num [ 1 ], 0 , 0 xFFu ) ; v14 = 0 ; memset ( & v15 , 0 , 0 xFFu ) ; v9 = 0 ; v6 = 0 ; v3 = 0 ; while ( v6 < strlen ( password ) ) { if ( isdigit ( password [ v6 ] ) ) { v8 = password [ v6 ] - 48 ; } else if ( isxdigit ( password [ v6 ] ) ) { if ( * ( _DWORD * )( * ( _DWORD * )( __readfsdword ( 0 x30u ) + 24 ) + 12 ) != 2 ) password [ v6 ] = 34 ; v8 = ( password [ v6 ] | 0 x20 ) - 87 ; } else { v8 = (( password [ v6 ] | 0 x20 ) - 97 ) % 6 + 10 ; } v9 = v8 + 16 * v9 ; if ( ! (( signed int )( v6 + 1 ) % 2 ) ) { * ( & v14 + v3 ++ ) = v9 ; v9 = 0 ; } ++ v6 ; } while ( ( signed int ) v5 < 8 ) { v10 += box [ ++ v11 ] ; v12 = box [ v11 ] ; v7 = box [ v10 ] ; box [ v10 ] = v12 ; box [ v11 ] = v7 ; if ( * ( _DWORD * )( __readfsdword ( 0 x30u ) + 104 ) & 0 x70 ) v12 = v10 + v11 ; key [ v5 ] = box [ ( unsigned __int8 )( v7 + v12 ) ] ^ * ( & v14 + v4 ) ; if ( * ( _DWORD * )( __readfsdword ( 0 x30u ) + 2 ) & 0 xFF ) { v10 = - 83 ; v11 = 43 ; } xor ( check_num , user , v5 ++ ) ; v4 = v5 ; if ( v5 >= & v14 + strlen ( & v14 ) + 1 - & v15 ) v4 = 0 ; } v13 = 0 ; check2 ( key , & check_num ) ; return check_num == 43924 ; } \u6839\u636e\u8c03\u8bd5\uff0c\u8f93\u5165\u7684password\u4f1a\u6bcf\u4e24\u4e2a\u4e3a\u4e00\u7ec4(\u7b2c\u4e00\u4e2awhile\u5c31\u662f\u5728\u5c06\u8f93\u5165\u8f6c\u4e3a\u4e24\u4e2a\u4e3a\u4e00\u7ec4\u7684\u5341\u516d\u8fdb\u5236\u5b57\u7b26)\uff0c\u6765\u4e0ebox\u4e2d\u7684\u7279\u5b9a\u4f4d\u7f6e\u7684\u6570\u5f02\u6216\uff0c\u5f97\u5230\u4e00\u7ec48\u4e2akey,\u540e\u8fdb\u5165check2\u8fdb\u884c\u9a8c\u8bc1\uff0c\u6700\u7ec8\u5f97\u5230 check_num == 43924 \u5219\u6210\u529f\u3002 check2: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 _DWORD * __usercall check2 @ < eax > ( int a1 @ < ebx > , _BYTE * key , _DWORD * a3 ) { int v3 ; // ST28_4 int v4 ; // ecx int v6 ; // edx int v8 ; // ST20_4 int v9 ; // eax int v10 ; // edi int v11 ; // ST1C_4 int v12 ; // edx char v13 ; // di int v14 ; // ST18_4 int v15 ; // eax int v16 ; // ST14_4 int v17 ; // edx char v18 ; // al int v19 ; // ST10_4 int v20 ; // ecx int v23 ; // ST0C_4 int v24 ; // eax _DWORD * result ; // eax int v26 ; // edx if ( * key == 100 ) { * a3 |= 4 u ; v4 = * a3 ; } else { * a3 ^= 3 u ; } v3 = * a3 ; if ( key [ 1 ] == 98 ) { _EAX = a3 ; * a3 |= 0 x14u ; v6 = * a3 ; } else { * a3 &= 0 x61u ; _EAX = ( _DWORD * ) * a3 ; } __asm { aam } if ( key [ 2 ] == 97 ) { * a3 |= 0 x84u ; v9 = * a3 ; } else { * a3 &= 0 xAu ; } v8 = * a3 ; v10 = ~ ( a1 >> - 91 ) ; if ( key [ 3 ] == 112 ) { * a3 |= 0 x114u ; v12 = * a3 ; } else { * a3 >>= 7 ; } v11 = * a3 ; v13 = v10 - 1 ; if ( key [ 4 ] == 112 ) { * a3 |= 0 x380u ; v15 = * a3 ; } else { * a3 *= 2 ; } v14 = * a3 ; if ( * ( _DWORD * )( * ( _DWORD * )( __readfsdword ( 0 x30u ) + 24 ) + 12 ) != 2 ) { if ( key [ 5 ] == 102 ) { * a3 |= 0 x2DCu ; v17 = * a3 ; } else { * a3 |= 0 x21u ; } v16 = * a3 ; } if ( key [ 5 ] == 115 ) { * a3 |= 0 xA04u ; v18 = ( char ) a3 ; v20 = * a3 ; } else { v18 = ( char ) a3 ; * a3 ^= 0 x1ADu ; } v19 = * a3 ; _AL = v18 - v13 ; __asm { daa } if ( key [ 6 ] == 101 ) { * a3 |= 0 x2310u ; v24 = * a3 ; } else { * a3 |= 0 x4Au ; } v23 = * a3 ; if ( key [ 7 ] == 99 ) { result = a3 ; * a3 |= 0 x8A10u ; v26 = * a3 ; } else { * a3 &= 0 x3A3u ; result = ( _DWORD * ) * a3 ; } return result ; } \u7531\u5206\u6790\u53ef\u77e5,key\u5e94\u8be5\u4e3a\uff1a key = [100, 98, 97, 112, 112, 115, 101, 99] \uff0c\u5373 dbappsec \uff08\u672c\u6765key[5]\u53ef\u80fd\u503c\u4e3a115\u6216102\u4f46\u524d\u9762\u7531\u505a\u8fc7\u4ee5dbappsec\u4e3a\u5bc6\u94a5\u7684\u9898\uff0c\u4fbf\u731c\u6d4b\u4e3adbappsec\uff09 \u63a5\u7740\uff0c\u6839\u636e\u8c03\u8bd5\u53ef\u77e5\uff0cxor\u51fd\u6570\u662f\u5c06key\u548cuser\u6bcf\u4f4d\u5bf9\u5e94\u5f02\u6216\u3002 \u63a5\u7740\u5728\u8c03\u8bd5\u4e2d\u5c06box\u53c2\u4e0e\u5f02\u6216\u7684\u4f4d\u6570\u63d0\u53d6\u51fa\u6765\uff0c\u5373\u53ef\uff0c\u4f46\u89e3\u51fa\u6765\u672c\u5730\u8f93\u5165\u5c31\u9519\u8bef\uff0c\u6545\u731c\u6d4b\u4e0b\u9762\u8fd9\u4e24\u5904\u5730\u65b9\u5c06\u5f02\u6216\u64cd\u4f5c\u8fdb\u884c\u4e86\u7c7b\u4f3c\u4e8e\u53cd\u8c03\u8bd5\u7684\u64cd\u4f5c\uff0c\u6545\u5c06\u8fd9\u4e24\u5904\u76f4\u63a5nop\u6389 1 2 if ( * ( _DWORD * )( __readfsdword ( 0 x30u ) + 104 ) & 0 x70 ) v12 = v10 + v11 ; 1 2 3 4 5 if ( * ( _DWORD * )( __readfsdword ( 0 x30u ) + 2 ) & 0 xFF ) { v10 = - 83 ; v11 = 43 ; } \u6700\u7ec8\u5f97\u5230\u89e3\u5bc6\u811a\u672c\uff1a 1 2 3 4 5 6 7 8 9 10 key = [ 100 , 98 , 97 , 112 , 112 , 115 , 101 , 99 ] print \"\" . join ( map ( chr , key )) xor = [ 0 x2A , 0 xD7 , 0 x92 , 0 xE9 , 0 x53 , 0 xE2 , 0 xC4 , 0 xCD ] user = \" welcomebeijing \" for i in xrange ( len ( key )) : key [ i ] ^= ord ( user [ i ] ) key [ i ] ^= xor [ i ] print hex ( key [ i ] ) [ 2 :] \u5f97\u5230\uff1a 39d09ffa4cfcc4cc \u672c\u5730\u8f93\u5165\u4e0d\u4f1a\u51fa\u73b0 Please try again \u5219\u731c\u6d4b\u901a\u8fc7\uff0c\u4f46md532\u4f4d\u5c0f\u5199hash\u52a0\u5bc6\u540e\u63d0\u4ea4\u5374\u4e0d\u5bf9\uff0c\u9677\u5165\u81ea\u95ed\u3002 \u540e\u7528cmd\u6253\u5f00crackMe.exe\u53d1\u73b0 39d09ffa4cfcc4cc \u662f\u9519\u8bef\u7684\uff01 \u6545\u7528cmd\u76f4\u63a5\u6253\u5f00\uff0c\u7528IDA attach\u4e0a\u53bb\u8c03\u8bd5\uff0cxor\u6570\u7ec4\u4e0d\u53d8\u4f46\u539f\u7a0b\u5e8f\u4e2dxor\u51fd\u6570\u4e2d\u4e0d\u6267\u884c\u5f02\u6216\u64cd\u4f5c\uff0c\u5b9e\u9645\u6beb\u65e0\u6548\u679c\u3002 \u56e0\u4e3a\u8c03\u8bd5\u76f4\u63a5\u8df3\u8fc7\uff0c\u5c31\u6ca1\u6709\u6ce8\u610f\u5230\u4e0b\u9762\u4f1a\u56e0\u4e3a\u7a97\u53e3\u7684\u4e0d\u540c\u800c\u4e0d\u540c\uff0c\u8fd8\u662ftcl..... 1 2 3 4 5 6 7 StartupInfo . dwX || StartupInfo . dwY || StartupInfo . dwXCountChars || StartupInfo . dwYCountChars || StartupInfo . dwFillAttribute || StartupInfo . dwXSize || StartupInfo . dwYSize \u6700\u7ec8\u89e3\u5bc6\u811a\u672c\u4e3a\uff1a 1 2 3 4 5 6 7 8 9 key = [ 100 , 98 , 97 , 112 , 112 , 115 , 101 , 99 ] print \"\" . join ( map ( chr , key )) xor = [ 0 x2A , 0 xD7 , 0 x92 , 0 xE9 , 0 x53 , 0 xE2 , 0 xC4 , 0 xCD ] user = \" welcomebeijing \" for i in xrange ( len ( key )) : key [ i ] ^= xor [ i ] print hex ( key [ i ] ) [ 2 :] \u5f97\u5230\u7b2c\u4e8c\u4e2a\u5bc6\u7801 4EB5F3992391A1AE 1 2 3 user ( 6 - 16 letters or numbers ): welcomebeijing password ( 6 - 16 letters or numbers ): 4 EB5F3992391A1AE Congratulations : \u4e4b\u540e\u8fdb\u884cmd5\u52a0\u5bc6\u540e\u63d0\u4ea4\uff0c\u5f97\u6b63\u786eflag: flag{d2be2981b84f2a905669995873d6a36c}","title":"0x07 crackMe"},{"location":"ctf_write_up/exams/buuctf/reverse/#0x08-findit","text":"\u9898\u76ee\uff1a findint \u4e0b\u8f7d\u4e0b\u6765\u662f\u4e2aapk\u6587\u4ef6\uff0c\u5c31\u76f4\u63a5jeb\u6253\u5f00\uff0c\u6839\u636e\u5b57\u7b26\u4e32\u627e\u5230\u4e3b\u8981\u51fd\u6570\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 protected void onCreate ( Bundle arg8 ) { super . onCreate ( arg8 ); this . setContentView ( 0x7F030018 ); this . findViewById ( 0x7F05003D ). setOnClickListener ( new View$OnClickListener ( new char []{ 'T' , 'h' , 'i' , 's' , 'I' , 's' , 'T' , 'h' , 'e' , 'F' , 'l' , 'a' , 'g' , 'H' , 'o' , 'm' , 'e' }, this . findViewById ( 0x7F05003E ), new char []{ 'p' , 'v' , 'k' , 'q' , '{' , 'm' , '1' , '6' , '4' , '6' , '7' , '5' , '2' , '6' , '2' , '0' , '3' , '3' , 'l' , '4' , 'm' , '4' , '9' , 'l' , 'n' , 'p' , '7' , 'p' , '9' , 'm' , 'n' , 'k' , '2' , '8' , 'k' , '7' , '5' , '}' }, this . findViewById ( 0x7F05003F )) { public void onClick ( View arg13 ) { int v11 = 17 ; int v10 = 0x7A ; int v9 = 90 ; int v8 = 65 ; int v7 = 97 ; char [] v3 = new char [ v11 ]; char [] v4 = new char [ 38 ]; int v0 ; for ( v0 = 0 ; v0 < v11 ; ++ v0 ) { if ( this . val$a [ v0 ] >= 73 || this . val$a [ v0 ] < v8 ) { if ( this . val$a [ v0 ] < 105 && this . val$a [ v0 ] >= v7 ) { label_39 : v3 [ v0 ] = (( char )( this . val$a [ v0 ] + 18 )); goto label_44 ; } if ( this . val$a [ v0 ] >= v8 && this . val$a [ v0 ] <= v9 || this . val$a [ v0 ] >= v7 && this . val$a [ v0 ] <= v10 ) { v3 [ v0 ] = (( char )( this . val$a [ v0 ] - 8 )); goto label_44 ; } v3 [ v0 ] = this . val$a [ v0 ]; } else { goto label_39 ; } label_44: } if ( String . valueOf ( v3 ). equals ( this . val$edit . getText (). toString ())) { v0 = 0 ; goto label_18 ; } else { this . val$text . setText ( \"\u7b54\u6848\u9519\u4e86\u80bf\u4e48\u529e\u3002\u3002\u3002\u4e0d\u7ed9\u4f60\u53c8\u4e0d\u597d\u610f\u601d\u3002\u3002\u3002\u54ce\u5440\u597d\u7ea0\u7ed3\u554a~~~\" ); return ; label_18 : while ( v0 < 38 ) { if ( this . val$b [ v0 ] < v8 || this . val$b [ v0 ] > v9 ) { if ( this . val$b [ v0 ] >= v7 && this . val$b [ v0 ] <= v10 ) { label_80 : v4 [ v0 ] = (( char )( this . val$b [ v0 ] + 16 )); if (( v4 [ v0 ] <= v9 || v4 [ v0 ] >= v7 ) && v4 [ v0 ] < v10 ) { goto label_95 ; } v4 [ v0 ] = (( char )( v4 [ v0 ] - 26 )); goto label_95 ; } v4 [ v0 ] = this . val$b [ v0 ]; } else { goto label_80 ; } label_95: ++ v0 ; } this . val$text . setText ( String . valueOf ( v4 )); } } }); } \u89c2\u5bdf\u540e\u53d1\u73b0\u89e3\u9898\u65b9\u6cd5\u67092\uff1a 1.\u9006\u63a8\u51fa\u8f93\u5165 2.\u590d\u73b0flag\u751f\u6210\u8fc7\u7a0b \u6211\u8fd9\u91cc\u91c7\u7528\u7b2c2\u79cd\uff0c\u811a\u672c\u5982\u4e0b\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 flag = \" pvkq{m164675262033l4m49lnp7p9mnk28k75} \" flag = map ( ord , flag ) v11 = 17 v10 = 0 x7A v9 = 90 v8 = 65 v7 = 97 for i in xrange ( len ( flag )) : if flag [ i ] < v8 or flag [ i ] > v9 : if flag [ i ] >= v7 and flag [ i ] <= v10 : flag [ i ] += 16 if ( flag [ i ] <= v9 or flag [ i ] >= v7 ) and flag [ i ] < v10 : continue flag [ i ] = flag [ i ] - 26 continue else : flag [ i ] += 16 if ( flag [ i ] <= v9 or flag [ i ] >= v7 ) and flag [ i ] < v10 : continue flag [ i ] = flag [ i ] - 26 continue print \"\" . join ( map ( chr , flag )) \u5f97flag\uff1a flag{c164675262033b4c49bdf7f9cda28a75}","title":"0x08 findit"},{"location":"ctf_write_up/exams/buuctf/reverse/#0x09-dig-the-way","text":"\u9898\u76ee\uff1a Dig the way \u89e3\u538b\u5f97\u5230\u4e00\u4e2aida\u6570\u636e\u5e93\u6587\u4ef6\uff0c\u6253\u5f00\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 int __cdecl main ( int argc , const char ** argv , const char ** envp ) { int result ; // eax int v4 ; // ebx size_t v5 ; // eax int v6 ; // ebx char v7_20 [ 20 ] ; // [esp+1Ch] [ebp-48h] int v8 ; // [esp+30h] [ebp-34h] int v9 ; // [esp+34h] [ebp-30h] int v10 ; // [esp+38h] [ebp-2Ch] int v11 ; // [esp+3Ch] [ebp-28h] int v12 ; // [esp+40h] [ebp-24h] int v13 ; // [esp+44h] [ebp-20h] signed int ( __cdecl * func_ptr )( int , int , int ) ; // [esp+48h] [ebp-1Ch] int ( __cdecl * v15 )( int , int , int ) ; // [esp+4Ch] [ebp-18h] int ( __cdecl * v16 )( int , int , int ) ; // [esp+50h] [ebp-14h] int v17 ; // [esp+54h] [ebp-10h] int v18 ; // [esp+58h] [ebp-Ch] FILE * file_ptr ; // [esp+5Ch] [ebp-8h] __main () ; func_ptr = func0 ; v15 = func1 ; v16 = func2 ; v8 = 0 ; v9 = 1 ; v10 = 2 ; v11 = 3 ; v12 = 3 ; v13 = 4 ; file_ptr = fopen ( \" data \" , \" rb \" ) ; if ( ! file_ptr ) return - 1 ; fseek ( file_ptr , 0 , 2 ) ; v18 = ftell ( file_ptr ) ; fseek ( file_ptr , 0 , 0 ) ; v17 = ftell ( file_ptr ) ; if ( v17 ) { puts ( \" something wrong \" ) ; result = 0 ; } else { for ( i = 0 ; i < v18; ++i ) { v4 = i ; v7_20 [ v4 ] = fgetc ( file_ptr ) ; } v5 = strlen ( v7_20 ) ; if ( v5 <= v18 ) { v18 = v11 ; i = 0 ; v17 = v13 ; while ( i <= 2 ) { v6 = i + 1 ; * ( & v8 + v6 ) = ( * ( & func_ptr + i ))(( int ) & v8 , v12 , v13 ) ;// get v9,v10,v11 v12 = ++ i ; v13 = i + 1 ; } if ( v11 ) { result = - 1 ; } else { get_key ( v18 , v17 ) ; system ( \" PAUSE \" ) ; result = 0 ; } } else { result = - 1 ; } } return result ; } \u5206\u6790\u53ef\u77e5\u6700\u7ec8\u53ef\u76f4\u63a5\u7b80\u5316\u4e3aget key(3,4)\uff0c\u5206\u6790get key: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 int __cdecl get_key ( unsigned int a1 , unsigned int a2 ) { long double v2 ; // fst7 unsigned int v4 ; // [esp+70h] [ebp+8h] v4 = ( signed __int64 ) pow (( long double ) a1 , 0 . 9 ) ; v2 = pow (( long double ) a2 , 9 . 800000000000001 ) ; return printf ( \" flag: %x%x%x%x%x%x%x%x \\n \" , ( unsigned __int16 ) v4 , v4 >> 16 , ( unsigned __int16 )( signed __int64 ) v2 , ( unsigned int )( signed __int64 ) v2 >> 16 , ( unsigned int )( signed __int64 ) v2 >> 16 , ( unsigned __int16 )( signed __int64 ) v2 , v4 >> 16 , ( unsigned __int16 ) v4 ) ; } \u76f4\u63a5\u590d\u73b0\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 int get_key ( unsigned int a1 , unsigned int a2 ) { long double v2 ; unsigned int v4 ; v4 = ( signed long int ) pow (( long double ) a1 , 0 . 9 ) ; v2 = pow (( long double ) a2 , 9 . 800000000000001 ) ; return printf ( \" flag: %x%x%x%x%x%x%x%x \\n \" , ( unsigned __int16 ) v4 , v4 >> 16 , ( unsigned __int16 )( signed __int64 ) v2 , ( unsigned int )( signed __int64 ) v2 >> 16 , ( unsigned int )( signed __int64 ) v2 >> 16 , ( unsigned __int16 )( signed __int64 ) v2 , v4 >> 16 , ( unsigned __int16 ) v4 ) ; } get_key(3,4) ,\u89e3\u51fa\u6765 flag:202030cc203002 \u662f\u9519\u8bef\u7684\uff0c\u968f\u5373\u9677\u5165\u81ea\u95ed\uff0c\u5f85\u4ee5\u540e\u518d\u5427.....\u5982\u679c\u6709\u5e08\u5085\u80fd\u4e88\u4ee5\u6307\u5bfc\uff0c\u6211\u5c06\u4e0d\u80dc\u611f\u6fc0\uff01","title":"0x09 Dig the way"},{"location":"ctf_write_up/exams/old_bugku/introduction/","text":"\u4e00\u4e2aRE\u840c\u65b0\u7684\u65e7\u7248Bugku\u7ec3\u4e60\u4e4b\u65c5\uff0c\u82e5\u6709\u9519\u8bef\uff0c\u671b\u5927\u4f6c\u4eec\u8865\u5145\u65a7\u6b63\uff01 \u7ec3\u4e60\u5e73\u53f0\uff1a BugkuCTF \u3002","title":"\u7b80\u4ecb"},{"location":"ctf_write_up/exams/old_bugku/reverse/","text":"0x00 \u5165\u95e8\u9006\u5411 \u9898\u76ee\uff1a Bugku|\u5165\u95e8\u9006\u5411 \u89e3\u538b\u6587\u4ef6\uff0c\u5c06baby.exe\u7528ida\u6253\u5f00\uff0c\u4e3b\u51fd\u6570\u4e2d \"Hi~this is a babyre\" \u540e\u5c31 call _printf \u4e14\u4e0b\u9762\u4e3a\u4e00\u4e9b\u5341\u516d\u8fdb\u5236\u5b57\u7b26\u5219\u731c\u6d4b\u4e3aflag\u3002\u5bf9\u7740\u8fd9\u4e9b\u5341\u516d\u8fdb\u5236\u4e00\u987fR\u952e\u5c31\u80fd\u770b\u5230\u4e86\u3002 \u6ce8\u610f\u5b57\u7b26 \uff0c\u662f0\u4e0d\u662fo\u7b49\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 .text: 0040146 E mov dword ptr [ esp ], offset aHiThisIsABabyr ; \"Hi~ this is a babyre\" .text: 00401475 call _printf .text: 0040147 A mov byte ptr [ esp + 2 Fh ], 66 h .text: 0040147 F mov byte ptr [ esp + 2 Eh ], 6 Ch .text: 00401484 mov byte ptr [ esp + 2 Dh ], 61 h .text: 00401489 mov byte ptr [ esp + 2 Ch ], 67 h .text: 0040148 E mov byte ptr [ esp + 2 Bh ], 7 Bh .text: 00401493 mov byte ptr [ esp + 2 Ah ], 52 h .text: 00401498 mov byte ptr [ esp + 29 h ], 65 h .text: 0040149 D mov byte ptr [ esp + 28 h ], 5 Fh .text: 004014 A2 mov byte ptr [ esp + 27 h ], 31 h .text: 004014 A7 mov byte ptr [ esp + 26 h ], 73 h .text: 004014 AC mov byte ptr [ esp + 25 h ], 5 Fh .text: 004014 B1 mov byte ptr [ esp + 24 h ], 53 h .text: 004014 B6 mov byte ptr [ esp + 23 h ], 30 h .text: 004014 BB mov byte ptr [ esp + 22 h ], 5 Fh .text: 004014 C0 mov byte ptr [ esp + 21 h ], 43 h .text: 004014 C5 mov byte ptr [ esp + 20 h ], 30 h .text: 004014 CA mov byte ptr [ esp + 1 Fh ], 4 Fh .text: 004014 CF mov byte ptr [ esp + 1 Eh ], 4 Ch .text: 004014 D4 mov byte ptr [ esp + 1 Dh ], 7 Dh .text: 004014 D9 mov eax , 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 .text: 0040147 A mov byte ptr [ esp + 2 Fh ], ' f ' .text: 0040147 F mov byte ptr [ esp + 2 Eh ], ' l ' .text: 00401484 mov byte ptr [ esp + 2 Dh ], ' a ' .text: 00401489 mov byte ptr [ esp + 2 Ch ], ' g ' .text: 0040148 E mov byte ptr [ esp + 2 Bh ], '{' .text: 00401493 mov byte ptr [ esp + 2 Ah ], ' R ' .text: 00401498 mov byte ptr [ esp + 29 h ], ' e ' .text: 0040149 D mov byte ptr [ esp + 28 h ], ' _ ' .text: 004014 A2 mov byte ptr [ esp + 27 h ], ' 1 ' .text: 004014 A7 mov byte ptr [ esp + 26 h ], ' s ' .text: 004014 AC mov byte ptr [ esp + 25 h ], ' _ ' .text: 004014 B1 mov byte ptr [ esp + 24 h ], ' S ' .text: 004014 B6 mov byte ptr [ esp + 23 h ], ' 0 ' .text: 004014 BB mov byte ptr [ esp + 22 h ], ' _ ' .text: 004014 C0 mov byte ptr [ esp + 21 h ], ' C ' .text: 004014 C5 mov byte ptr [ esp + 20 h ], ' 0 ' .text: 004014 CA mov byte ptr [ esp + 1 Fh ], ' O ' .text: 004014 CF mov byte ptr [ esp + 1 Eh ], ' L ' .text: 004014 D4 mov byte ptr [ esp + 1 Dh ], '}' p.s. R\u952e\uff1a\u5b57\u7b26\u8f6c\u6362\u5feb\u6377\u952e 0x01 Easy_vb \u9898\u76ee\uff1a Bugku|Easy_vb \u4e0b\u8f7d\u6587\u4ef6\uff0c\u62c9\u8fdbIDA\u67e5\u770b\uff0c\u53d1\u73b0\u53ea\u6709\u4e00\u4e2a\u51fd\u6570\u3002\u89c2\u5bdf\uff0c\u5411\u4e0b\u7ee7\u7eed\u6d4f\u89c8\uff0c\u53d1\u73b0flag\u9690\u85cf\u5176\u4e2d\uff01 1 2 3 .text: 00401 A5C aMctfN3tRev1sE4 : ; DATA XREF: .text:004023A9\u2193o .text: 00401 A5C text \" UTF-16LE \" , ' MCTF { _N3t_Rev_1s_E4ay_ }' , 0 .text: 00401 A8C dd 14 h 0x02 Easy_Re \u9898\u76ee\uff1a Bugku|Easy_RE ida\u52a0\u8f7d\u6587\u4ef6\uff0c\u627e\u5230main\u51fd\u6570\u3002F5\u8f6c\u6362\u6210\u4f2ac\u4ee3\u7801\u3002 strcmp\u51fd\u6570 \u6bd4\u8f83v5\u548cv9\u3002\u8f93\u5165\u7684\u662fv9\uff0c\u6545\u67e5\u770bv5\u76f8\u5173 1 _mm_storeu_si128 (( __m128i * ) & v5 , _mm_loadu_si128 (( const __m128i * ) & xmmword_413E34 )); \u5219\u70b9\u8fdb\u53bb\u5230xmmword_413E34\u6240\u5728\u4f4d\u7f6e 1 2 .rdata: 00413 E34 xmmword_413E34 xmmword3074656D30633165577B465443545544h .rdata: 00413 E44 qword_413E44 dq7D465443545544h \u5bf9\u7740\u6570\u636e\u53f3\u952e\u76f4\u63a5 Undefined ,\u5feb\u6377\u952eA\u4e00\u4e0b\u5373\u5f97flag\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 .rdata: 00413 E34 unk_413E34 db 44 h ; D ; DATA XREF: _main+10\u2191r .rdata: 00413 E35 db 55 h ; U .rdata: 00413 E36 db 54 h ; T .rdata: 00413 E37 db 43 h ; C .rdata: 00413 E38 db 54 h ; T .rdata: 00413 E39 db 46 h ; F .rdata: 00413 E3A db 7 Bh ; { .rdata: 00413 E3B db 57 h ; W .rdata: 00413 E3C db 65 h ; e .rdata: 00413 E3D db 31 h ; 1 .rdata: 00413 E3E db 63 h ; c .rdata: 00413 E3F db 30 h ; 0 .rdata: 00413 E40 db 6 Dh ; m .rdata: 00413 E41 db 65 h ; e .rdata: 00413 E42 db 74 h ; t .rdata: 00413 E43 db 30 h ; 0 .rdata: 00413 E44 unk_413E44 db 44 h ; D ; DATA XREF: _main+27\u2191r .rdata: 00413 E45 db 55 h ; U .rdata: 00413 E46 db 54 h ; T .rdata: 00413 E47 db 43 h ; C .rdata: 00413 E48 db 54 h ; T .rdata: 00413 E49 db 46 h ; F .rdata: 00413 E4A db 7 Dh ; } P.S\u4e00\u5f00\u59cb\u53ea undefined xmmword_413E34 \u53d1\u73b0\u5927\u62ec\u53f7\u4e0d\u6210\u5bf9\uff0c\u624d\u53d1\u73b0\u4e0b\u9762\u8fd8\u6709\u4e00\u57570.0.... 0x03 \u6e38\u620f\u8fc7\u5173 \u9898\u76ee\uff1a Bugku|\u6e38\u620f\u8fc7\u5173 \u8fd0\u884c\u4e86\u4e00\u4e0b\uff0c\u53d1\u73b0\u662f\u4e2a\u5f00\u5173\u6e38\u620f\uff0c\u8f93\u5165\u6570\u5b57\u4f1a\u5c06\u5bf9\u5e94\u7684\u7f16\u7801\u7684\u5f00\u5173\uff0c\u4ee5\u53ca\u76f8\u90bb\u7684\u5f00\u5173\u8f6c\u5316\u5f00\u5173\u72b6\u6001\uff08\u5373\u7531\u5f00\u53d8\u5173 or \u7531\u5173\u53d8\u5f00\uff09\uff0c\u5f53\u6240\u6709\u5f00\u5173\u4e3a\u5173\u65f6\uff0c\u5f97\u5230flag\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 |------------\uff0f --------\u25b3--------| |------------\uff0f --------\u25cb--------| |------------\uff0f --------\u25c7--------| |------------\uff0f --------\u25a1--------| |--------------------|------------\uff0f --------\u2606--------| | |------------\uff0f --------\u25bd--------| | |------------\uff0f -----(\uffe3\u25bd\uffe3)\uff0f---| | |------------\uff0f -----(;\u00b0\u0414\u00b0)----| \u4e8c | | by 0x61 | | | |------------------------------------------------------| Play a game The n is the serial number of the lamp,and m is the state of the lamp If m of the Nth lamp is 1,it's on ,if not it's off At first all the lights were closed Now you can input n to change its state But you should pay attention to one thing,if you change the state of the Nth lamp,the state of (N-1)th and (N+1)th will be changed too When all lamps are on,flag will appear Now,input n input n,n(1-8) 1.\u25b3 2.\u25cb 3.\u25c7 4.\u25a1 5.\u2606 6.\u25bd 7.(\uffe3\u25bd\uffe3)\uff0f 8.(;\u00b0\u0414\u00b0) 0.restart n= \u7136\u540e....\u89c2\u5bdf\u4e86\u4e00\u4e0b...... \u89e3\u6cd5\u4e00 \u6570\u5b57\u4ece1\u8f93\u52308\u5373\u53ef\u5f97\u5230flag..... \u8fd9\u4e5f\u592a\u7b80\u5355\u4e86\u5427.....\u63a5\u4e0b\u6765\u62d6\u8fdbIDA\u770b\u770b\u3002 \u89e3\u6cd5\u4e8c shift+F12\uff0c\u6839\u636e\u8f93\u51fa\u627e\u5230\u4e3b\u8981\u4ee3\u7801\u4f4d\u7f6e\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 void __cdecl main_0 () { signed int i ; // [esp+DCh] [ebp-20h] int v1 ; // [esp+F4h] [ebp-8h] printf (( int ) & unk_50B110 ); printf (( int ) & unk_50B158 ); printf (( int ) & unk_50B1A0 ); printf (( int ) & unk_50B1E8 ); printf (( int ) & unk_50B230 ); printf (( int ) & unk_50B278 ); printf (( int ) & unk_50B2C0 ); printf (( int ) & unk_50B308 ); printf (( int ) \"\u4e8c | \\n \" ); printf (( int ) \"| by 0x61 | \\n \" ); printf (( int ) \"| | \\n \" ); printf (( int ) \"|------------------------------------------------------| \\n \" ); printf (( int ) \"Play a game \\n \" \"The n is the serial number of the lamp,and m is the state of the lamp \\n \" \"If m of the Nth lamp is 1,it's on ,if not it's off \\n \" \"At first all the lights were closed \\n \" ); printf (( int ) \"Now you can input n to change its state \\n \" ); printf (( int ) \"But you should pay attention to one thing,if you change the state of the Nth lamp,the state of (N-1)th and\" \" (N+1)th will be changed too \\n \" ); printf (( int ) \"When all lamps are on,flag will appear \\n \" ); printf (( int ) \"Now,input n \\n \" ); while ( 1 ) { while ( 1 ) { printf (( int ) \"input n,n(1-8) \\n \" ); sub_459418 (); printf (( int ) \"n=\" ); scanf ( \"%d\" , & v1 ); printf (( int ) \" \\n \" ); if ( v1 >= 0 && v1 <= 8 ) break ; printf (( int ) \"sorry,n error,try again \\n \" ); } if ( v1 ) { sub_4576D6 ( v1 - 1 ); } else { for ( i = 0 ; i < 8 ; ++ i ) { if ( ( unsigned int ) i >= 9 ) j____report_rangecheckfailure (); byte_532E28 [ i ] = 0 ; } } j__system ( \"CLS\" ); sub_458054 (); if ( byte_532E28 [ 0 ] == 1 && byte_532E28 [ 1 ] == 1 && byte_532E28 [ 2 ] == 1 && byte_532E28 [ 3 ] == 1 && byte_532E28 [ 4 ] == 1 && byte_532E28 [ 5 ] == 1 && byte_532E28 [ 6 ] == 1 && byte_532E28 [ 7 ] == 1 ) { sub_457AB4 (); } } } \u6700\u540e\u90a3\u4e00\u8fde\u4e32\u7684if\u8bed\u53e5\u770b\u7740\u5f88\u53ef\u7591\uff0c\u8fdb\u53bb sub_457AB4() \u770b\u4e00\u4e0b 1 2 3 4 int sub_457AB4 ( void ) { return sub_45E940 () ; } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 int sub_45E940 () { signed int i ; // [esp+D0h] [ebp-94h] char v2 [ 125 ] ; // [esp+DCh] [ebp-88h] printf (( int ) \" done!!! the flag is \" ) ; v2 [ 0 ] = 18 ; v2 [ 69 ] = 64 ; v2 [ 70 ] = 98 ; v2 [ 71 ] = 5 ; v2 [ 72 ] = 2 ; v2 [ 73 ] = 4 ; v2 [ 74 ] = 6 ; v2 [ 75 ] = 3 ; v2 [ 76 ] = 6 ; v2 [ 77 ] = 48 ; v2 [ 78 ] = 49 ; v2 [ 79 ] = 65 ; v2 [ 80 ] = 32 ; v2 [ 81 ] = 12 ; v2 [ 82 ] = 48 ; v2 [ 83 ] = 65 ; v2 [ 84 ] = 31 ; v2 [ 85 ] = 78 ; v2 [ 86 ] = 62 ; v2 [ 87 ] = 32 ; v2 [ 88 ] = 49 ; v2 [ 89 ] = 32 ; v2 [ 90 ] = 1 ; v2 [ 91 ] = 57 ; v2 [ 92 ] = 96 ; v2 [ 93 ] = 3 ; v2 [ 94 ] = 21 ; v2 [ 95 ] = 9 ; v2 [ 96 ] = 4 ; v2 [ 97 ] = 62 ; v2 [ 98 ] = 3 ; v2 [ 99 ] = 5 ; v2 [ 100 ] = 4 ; v2 [ 101 ] = 1 ; v2 [ 102 ] = 2 ; v2 [ 103 ] = 3 ; v2 [ 104 ] = 44 ; v2 [ 105 ] = 65 ; v2 [ 106 ] = 78 ; v2 [ 107 ] = 32 ; v2 [ 108 ] = 16 ; v2 [ 109 ] = 97 ; v2 [ 110 ] = 54 ; v2 [ 111 ] = 16 ; v2 [ 112 ] = 44 ; v2 [ 113 ] = 52 ; v2 [ 114 ] = 32 ; v2 [ 115 ] = 64 ; v2 [ 116 ] = 89 ; v2 [ 117 ] = 45 ; v2 [ 118 ] = 32 ; v2 [ 119 ] = 65 ; v2 [ 120 ] = 15 ; v2 [ 121 ] = 34 ; v2 [ 122 ] = 18 ; v2 [ 123 ] = 16 ; v2 [ 124 ] = 0 ; v2 [ 0 ] = 123 ; v2 [ 1 ] = 32 ; v2 [ 2 ] = 18 ; v2 [ 3 ] = 98 ; v2 [ 4 ] = 119 ; v2 [ 5 ] = 108 ; v2 [ 6 ] = 65 ; v2 [ 7 ] = 41 ; v2 [ 8 ] = 124 ; v2 [ 9 ] = 80 ; v2 [ 10 ] = 125 ; v2 [ 11 ] = 38 ; v2 [ 12 ] = 124 ; v2 [ 13 ] = 111 ; v2 [ 14 ] = 74 ; v2 [ 15 ] = 49 ; v2 [ 16 ] = 83 ; v2 [ 17 ] = 108 ; v2 [ 18 ] = 94 ; v2 [ 19 ] = 108 ; v2 [ 20 ] = 84 ; v2 [ 21 ] = 6 ; v2 [ 22 ] = 96 ; v2 [ 23 ] = 83 ; v2 [ 24 ] = 44 ; v2 [ 25 ] = 121 ; v2 [ 26 ] = 104 ; v2 [ 27 ] = 110 ; v2 [ 28 ] = 32 ; v2 [ 29 ] = 95 ; v2 [ 30 ] = 117 ; v2 [ 31 ] = 101 ; v2 [ 32 ] = 99 ; v2 [ 33 ] = 123 ; v2 [ 34 ] = 127 ; v2 [ 35 ] = 119 ; v2 [ 36 ] = 96 ; v2 [ 37 ] = 48 ; v2 [ 38 ] = 107 ; v2 [ 39 ] = 71 ; v2 [ 40 ] = 92 ; v2 [ 41 ] = 29 ; v2 [ 42 ] = 81 ; v2 [ 43 ] = 107 ; v2 [ 44 ] = 90 ; v2 [ 45 ] = 85 ; v2 [ 46 ] = 64 ; v2 [ 47 ] = 12 ; v2 [ 48 ] = 43 ; v2 [ 49 ] = 76 ; v2 [ 50 ] = 86 ; v2 [ 51 ] = 13 ; v2 [ 52 ] = 114 ; v2 [ 53 ] = 1 ; v2 [ 54 ] = 117 ; v2 [ 55 ] = 126 ; v2 [ 56 ] = 0 ; for ( i = 0 ; i < 56; ++i ) { v2 [ i ] ^= v2 [ i + 68 ] ; v2 [ i ] ^= 0 x13u ; } return printf (( int ) \" %s \\n \" ) ; } \u5728\u5176\u4e2d\u53d1\u73b0 printf((int)\"done!!! the flag is \"); ,\u90a3flag\u5c31\u5728\u8fd9\u54af\u3002 \u8fde\u89e3\u5bc6\u7b97\u6cd5\u90fd\u5199\u597d\u4e86\uff0c\u76f4\u63a5\u590d\u5236\u7c98\u8d34\u8fd0\u884c\u5c31\u5f97\u5230flag[p.s.\u4e3a\u4e86\u65b9\u4fbf\u89c2\u770b\uff0c\u6211\u5c06\u5176\u4fee\u6539\u4e3a\u957f\u5ea6\u4e3a125\u7684\u6570\u7ec4\u3002] flag\uff1azsctf{T9is_tOpic_1s_v5ry_int7resting_b6t_others_are_n0t} 0x04 \u9006\u5411\u5165\u95e8 \u9898\u76ee\uff1a Bugku|\u9006\u5411\u5165\u95e8 \u4e0b\u8f7d\u4e0b\u6765\u662f\u4e2aexe\u6587\u4ef6\uff0c\u8fd0\u884c\u65f6\u53d1\u73b0\u65e0\u6cd5\u8fd0\u884c\uff0c\u90a3\u5c31file\u4e00\u4e0b\uff1a 1 2 file admin . exe admin . exe : ASCII text , with very long lines , with no line terminators ASCII text,emmmmm\uff0c\u7528010 editor\u770b\u4e00\u4e0b\uff0c\u53d1\u73b0\u5176\u6587\u4ef6\u5934\u4e3a\uff1a 1 data : image / png ; base64 \u90a3\u53ef\u80fd\u662f\u4e2a\u56fe\u7247\u8f6c\u6210\u4e86base64\u7f16\u7801\uff0c\u5c06010 editor\u90a3\u4e00\u5927\u4e32\u5168\u90e8\u6254\u5230\u5728\u7ebf\u5de5\u5177\u91cc\u89e3\u4e00\u4e0b\uff0c\u5f97\u5230\u4e00\u4e2a\u4e8c\u7ef4\u7801\uff1a \u626b\u4e00\u626b\uff0c\u5f97\u5230flag\uff1a bugku{inde_9882ihsd8-0} 0x05 love \u9898\u76ee\uff1a Bugku|love \u6253\u5f00\uff0c\u8981\u6c42\u6211\u4eec\u8f93\u5165flag\uff0c\u968f\u4fbf\u8f93\u4e00\u4e2a\uff0c\u9519\u8bef\u4f1a\u663e\u793a wrong flag! \u62d6\u8fdbIDA\u770b\u4e00\u4e0b\uff0c\u627e\u5230\u4e3b\u51fd\u6570 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 __int64 main_0 () { int v0 ; // eax const char * v1 ; // eax size_t v2 ; // eax int v3 ; // edx __int64 v4 ; // ST08_8 signed int j ; // [esp+DCh] [ebp-ACh] signed int i ; // [esp+E8h] [ebp-A0h] signed int v8 ; // [esp+E8h] [ebp-A0h] char Dest [ 108 ]; // [esp+F4h] [ebp-94h] char Str ; // [esp+160h] [ebp-28h] char v11 ; // [esp+17Ch] [ebp-Ch] for ( i = 0 ; i < 100 ; ++ i ) { if ( ( unsigned int ) i >= 0x64 ) j____report_rangecheckfailure (); Dest [ i ] = 0 ; } sub_41132F ( \"please enter the flag:\" ); sub_411375 ( \"%20s\" , & Str ); //\u8f93\u5165\uff0c\u76f8\u5f53\u4e8escanf\uff08\uff09 v0 = j_strlen ( & Str ); v1 = ( const char * ) sub_4110BE (( int ) & Str , v0 , ( int ) & v11 ); //\u5bf9Str\u8fdb\u884cbase64\u52a0\u5bc6\u540e\u8fd4\u56de\u7ed9v1 strncpy ( Dest , v1 , 40u ); //\u5c06v1\u590d\u5236\u7ed9Dest v8 = j_strlen ( Dest ); for ( j = 0 ; j < v8 ; ++ j ) //\u518d\u8fdb\u884c\u4e00\u6b21\u52a0\u5bc6\u8fd0\u7b97 Dest [ j ] += j ; v2 = j_strlen ( Dest ); if ( ! strncmp ( Dest , Str2 , v2 ) ) //\u6bd4\u8f83Dest\u548cStr2,\u76f8\u7b49\u8fd4\u56de0,\u8f93\u51faright flag\uff01 sub_41132F ( \"rigth flag! \\n \" ); else sub_41132F ( \"wrong flag! \\n \" ); HIDWORD ( v4 ) = v3 ; LODWORD ( v4 ) = 0 ; return v4 ; } Str2: 1 .data: 0041 A034 Str2 db ' e3nifIH9b_C@n@dH ' , 0 ; DATA XREF: _main_0+142\u2191o sub_4110BE\u51fd\u6570\uff1a 1 2 3 4 void * __cdecl sub_4110BE ( int a1 , int a2 , int a3 ) { return sub_411AB0 (( char * ) a1 , a2 , ( int * ) a3 ); } sub_411AB0\u51fd\u6570\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 v11 = a2 ; v7 = 0 ; while ( v11 > 0 ) { byte_41A144 [ 2 ] = 0 ; byte_41A144 [ 1 ] = 0 ; byte_41A144 [ 0 ] = 0 ; for ( i = 0 ; i < 3 && v11 >= 1 ; ++ i ) { byte_41A144 [ i ] = * v13 ; -- v11 ; ++ v13 ; } if ( ! i ) break ; switch ( i ) { case 1 : * (( _BYTE * ) Dst + v7 ) = aAbcdefghijklmn [( signed int )( unsigned __int8 ) byte_41A144 [ 0 ] >> 2 ]; v4 = v7 + 1 ; * (( _BYTE * ) Dst + v4 ++ ) = aAbcdefghijklmn [(( byte_41A144 [ 1 ] & 0xF0 ) >> 4 ) | 16 * ( byte_41A144 [ 0 ] & 3 )]; * (( _BYTE * ) Dst + v4 ++ ) = aAbcdefghijklmn [ 64 ]; * (( _BYTE * ) Dst + v4 ) = aAbcdefghijklmn [ 64 ]; v7 = v4 + 1 ; break ; case 2 : * (( _BYTE * ) Dst + v7 ) = aAbcdefghijklmn [( signed int )( unsigned __int8 ) byte_41A144 [ 0 ] >> 2 ]; v5 = v7 + 1 ; * (( _BYTE * ) Dst + v5 ++ ) = aAbcdefghijklmn [(( byte_41A144 [ 1 ] & 0xF0 ) >> 4 ) | 16 * ( byte_41A144 [ 0 ] & 3 )]; * (( _BYTE * ) Dst + v5 ++ ) = aAbcdefghijklmn [(( byte_41A144 [ 2 ] & 0xC0 ) >> 6 ) | 4 * ( byte_41A144 [ 1 ] & 0xF )]; * (( _BYTE * ) Dst + v5 ) = aAbcdefghijklmn [ 64 ]; v7 = v5 + 1 ; break ; case 3 : * (( _BYTE * ) Dst + v7 ) = aAbcdefghijklmn [( signed int )( unsigned __int8 ) byte_41A144 [ 0 ] >> 2 ]; v6 = v7 + 1 ; * (( _BYTE * ) Dst + v6 ++ ) = aAbcdefghijklmn [(( byte_41A144 [ 1 ] & 0xF0 ) >> 4 ) | 16 * ( byte_41A144 [ 0 ] & 3 )]; * (( _BYTE * ) Dst + v6 ++ ) = aAbcdefghijklmn [(( byte_41A144 [ 2 ] & 0xC0 ) >> 6 ) | 4 * ( byte_41A144 [ 1 ] & 0xF )]; * (( _BYTE * ) Dst + v6 ) = aAbcdefghijklmn [ byte_41A144 [ 2 ] & 0x3F ]; v7 = v6 + 1 ; break ; } } * (( _BYTE * ) Dst + v7 ) = 0 ; return Dst ; } \u6570\u7ec4aAbcdefghijklmn\u70b9\u8fdb\u53bb\uff0c\u6807\u51c6\u7684base64 table 1 .rdata: 00417 B30 aAbcdefghijklmn db ' ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789 +/=' \u89e3\u5bc6\u4ee3\u7801\u5982\u4e0b\uff08python\u5b9e\u73b0\uff09\uff1a 1 2 3 4 5 6 7 import base64 s = \"e3nifIH9b_C@n@dH\" flag = '' for i in range ( len ( s )): flag += chr ( ord ( s [ i ]) - i ) flag = base64 . b64decode ( flag ) print ( flag ) \u5f97\u5230 flag{i_l0ve_you} 0x06 Mountain climbing \u9898\u76ee\uff1a Bugku|Mountain climbing \u8fd0\u884c\uff0c\u6839\u636e\u63d0\u793a\u5e94\u8be5\u662f\u901a\u8fc7\u8f93\u5165\u64cd\u4f5c\u6c42\u51fa maximum \u3002 1 input your key with your operation can get the maximum : \u7528IDA\u6253\u5f00\u540e\uff0c\u53ea\u6709\u4e00\u4e2astart\uff0c\u7a0b\u5e8f\u7528UPX\u52a0\u58f3\u4e86\uff0c\u7528 52pojie|UPX Unpacker \u5c31\u53ef\u4ee5\u8131\u58f3\uff0c\u4e5f\u53ef\u4ee5\u624b\u52a8\u8131\u58f30.0\u3002 \u5c06\u8131\u58f3\u540e\u7684\u7a0b\u5e8f\u8f7d\u5165IDA\uff0c\u627e\u5230\u4e3b\u51fd\u6570\uff0c\u5f00\u59cb\u5206\u6790\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 __int64 v1 ; // ST04_8 char v3 ; // [esp+0h] [ebp-160h] int v4 ; // [esp+D0h] [ebp-90h] int j ; // [esp+DCh] [ebp-84h] int i ; // [esp+E8h] [ebp-78h] char Str [ 104 ]; // [esp+F4h] [ebp-6Ch] srand ( 0xCu ); //\u8bbe\u7f6e\u968f\u673a\u6570\u79cd\u5b50 j_memset ( & unk_423D80 , 0 , 0x9C40u ); for ( i = 1 ; i <= 20 ; ++ i ) { for ( j = 1 ; j <= i ; ++ j ) dword_41A138 [ 100 * i + j ] = rand () % 100000 ; //\u4ea7\u751f\u968f\u673a\u6570\uff0c\u8303\u56f40~100000\uff0c\u4f46\u7531\u4e8e\u524d\u9762\u751f\u6210\u968f } //\u6570\u7684\u79cd\u5b50\u662f\u5b9a\u503c\uff0cso\uff0c\u8fd9\u91cc\u5176\u5b9e\u4e5f\u662f\u786e\u5b9a\u7684 (( void ( __cdecl * )( const char * , char )) sub_41134D )( \"input your key with your operation can get the maximum:\" , v3 ); sub_411249 ( \"%s\" , ( unsigned int ) Str ); if ( j_strlen ( Str ) == 19 ) //\u8f93\u5165\u7684\u64cd\u4f5c\u957f\u5ea6\u4e3a19 { sub_41114F ( Str ); //\u5bf9\u8f93\u5165\u7684key\u8fdb\u884c\u9884\u5904\u7406\uff0c\u5904\u7406\u540e\u4e3a\"L\"or\"R\" v4 = 0 ; j = 1 ; i = 1 ; dword_423D78 += dword_41A138 [ 101 ]; //\u5c06\u7b2c\u4e00\u884c\u7b2c\u4e00\u4e2a\u8d4b\u503c\u7ed9dword_423D78(\u7528\u6765\u8ba1\u7b97\u603b\u548c) while ( v4 < 19 ) { if ( Str [ v4 ] == 76 ) // chr(76) = 'L' { dword_423D78 += dword_41A138 [ 100 * ++ i + j ]; } else { if ( Str [ v4 ] != 82 ) // chr(82) = 'R' { (( void ( __cdecl * )( const char * , char )) sub_41134D )( \"error \\n \" , v3 ); system ( \"pause\" ); goto LABEL_18 ; } dword_423D78 += dword_41A138 [ 100 * ++ i + ++ j ]; } ++ v4 ; } sub_41134D ( \"your operation can get %d points \\n \" , dword_423D78 ); system ( \"pause\" ); } else { (( void ( __cdecl * )( const char * , char )) sub_41134D )( \"error \\n \" , v3 ); system ( \"pause\" ); } LABEL_18 : HIDWORD ( v1 ) = v0 ; LODWORD ( v1 ) = 0 ; return v1 ; } \u6839\u636e\u4e0a\u8ff0\u5206\u6790\uff0c\u53ef\u76f4\u63a5\u751f\u6210 Mountain \u8fdb\u5165 sub_41114F(Str); 1 2 3 4 int __cdecl sub_41114F () { return sub_411900 (); } 1 2 3 4 5 int sub_411900 () { sub_4110A5 ( nullsub_1 , ( char * ) sub_411994 - ( char * ) nullsub_1 , 4 ); return nullsub_1 (); } 1 2 3 4 int __cdecl sub_4110A5 ( LPCVOID lpAddress , int a2 , int a3 ) { return sub_411750 ( lpAddress , a2 , a3 ); } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 BOOL __cdecl sub_411750 ( LPCVOID lpAddress , int a2 , int a3 ) { int v3 ; // ST1C_4 DWORD flOldProtect ; // [esp+D4h] [ebp-2Ch] struct _MEMORY_BASIC_INFORMATION Buffer ; // [esp+E0h] [ebp-20h] VirtualQuery ( lpAddress , & Buffer , 0x1Cu ); VirtualProtect ( Buffer . BaseAddress , Buffer . RegionSize , 0x40u , & Buffer . Protect ); while ( 1 ) { v3 = a2 -- ; if ( ! v3 ) break ; * ( _BYTE * ) lpAddress ^= a3 ; lpAddress = ( char * ) lpAddress + 1 ; } return VirtualProtect ( Buffer . BaseAddress , Buffer . RegionSize , Buffer . Protect , & flOldProtect ); } \u4e0a\u8ff0\u5faa\u73af\u5bf9key\u8fdb\u884c\u9884\u5904\u7406\uff0c\u7c7b\u578b\u4e3abyte\uff0c\u95f4\u9694\u4e3achar\uff0c\u4e5f\u662f\u4e00\u4e2abyte\uff0c\u90a3\u5c31\u662f\u8bf4\u5bf9\u8f93\u5165\u7684key\u7684\u7b2c2,4,6.......\u62ff\u53bb\u4e0e a3 = 4 \u5f02\u6216\uff0c\u4e14\u5f02\u6216\u540e\u7684\u5b57\u7b26\u5fc5\u4e3a\"L\"or\"R\"\u3002 1 2 chr ( 76 ^ 4 ) = H chr ( 82 ^ 4 ) = V \u5219\u8f93\u5165\u7684\u4e3a\"R\"or\"L\"or\"H\"or\"V\" \u5219\u6c42\u51fa maximum \u548c key \u7684python\u4ee3\u7801\u5982\u4e0b\uff08 \u52a8\u6001\u89c4\u5212\u6cd5\u6c42\u89e3 \uff09\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 s = [[ 0 for i in xrange ( 20 )] for i in xrange ( 20 )] path = [[ 0 for i in xrange ( 20 )] for i in xrange ( 20 )] seed = 0xC def rand (): #\u751f\u6210\u968f\u673a\u6570\u7b97\u6cd5 global seed seed = seed * 0x343FD + 0x269EC3 return ( seed >> 16 ) & 0x7FFF for i in xrange ( 20 ): for j in xrange ( i + 1 ): s [ i ][ j ] = rand () % 100000 #\u751f\u6210\u968f\u673a\u6570 for i in xrange ( 19 , - 1 , - 1 ): #\u6c42\u89e3\u7b97\u6cd5 for j in xrange ( i - 1 , - 1 , - 1 ): if s [ i ][ j ] > s [ i ][ j + 1 ] : t = 'L' max = s [ i ][ j ] else : t = 'R' max = s [ i ][ j + 1 ] path [ i - 1 ][ j ] = t s [ i - 1 ][ j ] += max key = \"\" i = 0 j = 0 for i in xrange ( 19 ): #\u53d8\u6362 if path [ i ][ j ] == \"L\" : t = path [ i ][ j ] if i % 2 != 0 : t = chr ( ord ( t ) ^ 4 ) key += t else : t = path [ i ][ j ] if i % 2 != 0 : t = chr ( ord ( t ) ^ 4 ) key += t j += 1 print \"key = \" + key print \"maximum = \" + str ( s [ 0 ][ 0 ]) \u5f97\uff1a 1 2 key = RVRVRHLVRVLVLVRVLVL maxnum = 444740 \u5219flag\u4e3a zsctf{RVRVRHLVRVLVLVRVLVL} 1 2 3 \u6c42\u89e3\u7b97\u6cd5\u8bf4\u660e \uff1a maximum [ i ][ j ] \u8868\u793a\u7b2ci\u884c\u7b2cj\u5217\u7684\u6700\u5927\u6743\u503c \uff0c \u90a3\u4e48maximum [ i ][ j ] \u5305\u542b\u5b50\u95ee\u9898maximum [ i-1 ][ j-1 ] \u548cmaximum [ i-1 ][ j ] \u7684\u6700\u4f18\u89e3 \u3002 \u7136\u540e\u6211\u4eec\u5012\u63a8 , \u5219\u53ef\u5f97\u5230\u6211\u4eec\u7684\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b : maximum [ i ][ j ] = max { maximum [ i-1 ][ j ] , maximum [ i ][ j+1 ] } + maximum [ i ][ j ] ; 0X07 Take the maze \u9898\u76ee\uff1a Bugku|Take the maze \u6839\u636e\u9898\u76eemaze\u4f30\u8ba1\u662f\u4e2a\u8ff7\u5bab\u9898 \u4e0b\u8f7d\u4e0b\u6765 ConsoleApplication1.exe \uff0c\u8fd0\u884c 1 2 welcome to zsctf ! show me your key : \u8f7d\u5165IDA\uff0c\u901a\u8fc7\u5b57\u7b26\u4e32\u627e\u5230\u4e3b\u8981\u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 __int64 main_0 () { int v0 ; // ecx int v1 ; // edx __int64 v2 ; // ST00_8 signed int i ; // [esp+D0h] [ebp-48h] char key [ 24 ] ; // [esp+DCh] [ebp-3Ch] //\u672c\u6765\u8fd9\u91cc\u8bc6\u522b\u7684\u957f\u5ea6\u4e3a16,\u4f46\u770b\u5230\u4e0b\u9762\u53d1\u73b0\u957f\u5ea6\u5e94\u8be5\u662f24\uff0c\u5c31 //\u4fee\u6539\u4e86\u957f\u5ea6(\u987a\u4fbf\u628a\u540d\u5b57\u7ed9\u6539\u4e86) printf ( \" welcome to zsctf! \\n \" ) ; printf ( \" show me your key: \" ) ; scanf ( v0 , \" %s \" , key ) ; // \u8f93\u5165key if ( sub_45B1C7 () ) // \u8fd9\u91cc\u9762\u70b9\u8fdb\u53bb\u6700\u7ec8\u662f IsDebuggerPresent () != 0 j__exit ( 0 ) ; //\u662f\u4e2a\u53cd\u8c03\u8bd5\u7684\u51fd\u6570 if ( j__strlen ( key ) == 24 ) // key \u7684\u957f\u5ea6 { key [ 16 ] ^= 1 u ; // \u5bf9\u8f93\u5165key\u8fdb\u884c\u64cd\u4f5c sub_45C748 ( key ) ; for ( i = 0 ; i < 24; ++i ) { if ( ( key [ i ] < ' 0 ' || key [ i ] > ' 9 ' ) && ( key [ i ] < ' a ' || key [ i ] > ' f ' ) ) // \u5224\u65ad key \u7684\u5b57\u7b26\u662f\u5426\u5728 0 ~ 9 \u3001 a ~ f \u7684\u8303\u56f4\u5185 { key_error () ; goto LABEL_16 ; } } if ( check (( int * ) key ) ) { printf ( \" done!!!The flag is your input \\n \" ) ; sub_45D9C7 ( 4 ) ; sub_45E1B5 () ; // \u8f93\u51faflag.png } else { key_error () ; } } else { key_error () ; } LABEL_16 : HIDWORD ( v2 ) = v1 ; LODWORD ( v2 ) = 0 ; return v2 ; } \u5728\u5b57\u7b26\u4e32\u4e2d\u8fd8\u6709\u5f88\u591a printing ticket \uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 int sub_463AE0 () { FILE * v0 ; // STE0_4 printf ( \" \\n oh,wait! Take your ticket \\n \" ); printf ( \"printing ticket ... \\n \" ); sub_45D9C7 ( 2 ); printf ( \"printing ticket .... \\n \" ); sub_45D9C7 ( 2 ); printf ( \"printing ticket ..... \\n \" ); sub_45D9C7 ( 2 ); printf ( \"printing ticket ...... \\n \" ); sub_45D9C7 ( 2 ); printf ( \"printing ticket ....... \\n \" ); sub_45D9C7 ( 2 ); printf ( \"printing ticket ........ \\n \" ); sub_45D9C7 ( 2 ); printf ( \"printing ticket ......... \\n \" ); sub_45D9C7 ( 2 ); printf ( \"printing ticket .......... \\n \" ); sub_45D9C7 ( 2 ); printf ( \"printing ticket ........... \\n \" ); sub_45D9C7 ( 2 ); printf ( \"printing ticket ............ \\n \" ); sub_45D9C7 ( 2 ); printf ( \"printing ticket ............. \\n\\n\\n \" ); v0 = j__fopen ( \"flag.png\" , \"wb\" ); j__fwrite ( & unk_5409C0 , 1u , 0x78Au , v0 ); j__fclose ( v0 ); printf ( \"print finished,view the path to this file,you will get a png file,have a good time \\n\\n\\n \" ); return j__system ( \"pause\" ); } \u8fd9\u4e2a\u51fd\u6570\u6700\u540e\u662f\u4e00\u4e2a\u6587\u4ef6\u64cd\u4f5c\uff0c &unk_5409C0 \u5904\u7684\u5185\u5b58Dump\u51fa\u6765\uff0c\u957f\u5ea6\u4e3a0x78A\u3002Dump\u540e\u53d1\u73b0\u662f\u4e2a\u4e8c\u7ef4\u7801\uff1a dump-python\u811a\u672c\uff1a 1 2 3 4 5 6 fp = open ( \"ConsoleApplication1.exe\" , \"rb\" ) fp . seek ( 0xE45C0 ) data = fp . read ( 1930 ) fo = open ( \"flag.png\" , \"wb\" ) fo . write ( data ) fo . close () seek()\u7684\u5730\u5740\u7528010 editor\uff0cCtrl+F\u641c\u7d22\u540e\u627e\u5230\u3002\u5f53\u7136\u4e5f\u53ef\u4ee5\u7528010 editor\u76f4\u63a5\u590d\u5236\u51fa\u6765\u4fee\u6539\u540e\u7f00 .png \u3002 \u626b\u4e00\u626b\uff1a Congratulations! The flag is your input + \u201cDocupa\u201d \u8fd8\u662f\u4e56\u4e56\u5206\u6790check\u51fd\u6570 check\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 // \u4fee\u6539\u7c7b\u578b\uff0ckey\u662f\u4e00\u4e2a\u6307\u5411char\u7c7b\u578b\u7684\u6307\u9488 BOOL __cdecl sub_463480 ( char * key ) { int v1 ; // ST18_4 int v2 ; // ST18_4 BOOL result ; // eax int v4 ; // ST18_4 int a1 ; // [esp+D8h] [ebp-38h] int v6 ; // [esp+E4h] [ebp-2Ch] int v7 ; // [esp+F0h] [ebp-20h] int v8 ; // [esp+FCh] [ebp-14h] int v9 ; // [esp+108h] [ebp-8h] v9 = 0 ; v6 = 0 ; a1 = 0 ; while ( 2 ) { v1 = v9 ++ ; if ( v1 >= 12 ) // \u91cd\u590d12\u6b21 return a1 == 311 ; // a1 == 311 -> 1 if ( sub_45B1C7 () ) // \u53cd\u8c03\u8bd5\u51fd\u6570 j__exit ( 0 ); v2 = key [ v6 ++ ]; switch ( v2 ) // \u5224\u65ad\u7b2c\u4e00\u4e2a\u5b57\u7b26 { case '0' : v8 = 0 ; goto LABEL_12 ; case '1' : v8 = 1 ; goto LABEL_12 ; case '2' : v8 = 2 ; goto LABEL_12 ; case '3' : v8 = 3 ; goto LABEL_12 ; case '4' : v8 = 4 ; LABEL_12 : // \u5224\u65ad\u7b2c\u4e8c\u4e2a\u5b57\u7b26 v4 = key [ v6 ++ ]; switch ( v4 ) { case '5' : v7 = 5 ; goto LABEL_25 ; case '6' : v7 = 6 ; goto LABEL_25 ; case '7' : v7 = 7 ; goto LABEL_25 ; case '8' : v7 = 8 ; goto LABEL_25 ; case '9' : v7 = 9 ; goto LABEL_25 ; case 'a' : v7 = 10 ; goto LABEL_25 ; case 'b' : v7 = 11 ; goto LABEL_25 ; case 'c' : v7 = 12 ; goto LABEL_25 ; case 'd' : v7 = 13 ; goto LABEL_25 ; case 'e' : v7 = 14 ; goto LABEL_25 ; case 'f' : v7 = 15 ; LABEL_25 : // delru0123456789 // 0,2,3,6\u5bf9\u5e94\u8def\u5f84\u4e0b\uff0c\u5de6\uff0c\u53f3\uff0c\u4e0a // 56789abcdef\u5206\u522b\u5bf9\u5e94\u91cd\u590d0123456789\u6b21 switch ( op [ v8 ] ) // \u56db\u4e2a\u7ed3\u6784\u90fd\u5dee\u4e0d\u591a\uff0c\u5206\u6790\u5176\u4e2d\u4e00\u4e2a { case 'd' : sub_45CC4D ( & a1 , op [ v7 ] - '0' ); continue ; case 'l' : sub_45D0A3 (( int ) & a1 , op [ v7 ] - '0' ); continue ; case 'r' : sub_45CB0D (( int ) & a1 , op [ v7 ] - '0' ); continue ; case 'u' : sub_45D0E9 (( int ) & a1 , op [ v7 ] - '0' ); continue ; default : result = 0 ; break ; } break ; default : result = 0 ; break ; } break ; default : result = 0 ; break ; } return result ; } } \u8fd9\u91cc\u9762\u4e24\u4e2a\u5b57\u7b26\u4e3a\u4e00\u7ec4\uff0c\u8fdb\u884c\u5224\u65ad\uff0c\u6545\u53ef\u77e5\u5224\u65ad12\u6b21\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 int __cdecl sub_462D60 ( int * a1 , int a2 ) { int v2 ; // ST0C_4 int result ; // eax int i ; // [esp+E0h] [ebp-8h] for ( i = * a1 ; ; i += 26 ) { v2 = a2 -- ; if ( ! v2 ) // \u8d70\u7684\u6b21\u6570 break ; result = i / 26 ; if ( i / 26 > 10 ) // \u5224\u65ad\u662f\u5426\u8d8a\u754c return result ; result = i ; if ( dword_5404E4 [ i + 25 ] ^ dword_540004 [ i + 25 ] ) // \u5fc5\u987bdword_540548[i] == dword_540068[i]\u624d\u7ee7\u7eed,\u731c\u6d4b\u7528\u4e8e\u9650\u5b9a\u8def\u5f84\u3002\u8fd9\u91cc\u4fee\u6539\u4e86\u4e00\u4e0b\u6570\u7ec4\u957f\u5ea6\u6240\u4ee5\u5730\u5740\u53d8\u4e86 return result ; } result = ( int ) a1 ; * a1 = i ; return result ; } \u5206\u6790\u53e6\u5916\u4e09\u4e2a\u51fd\u6570\u53ef\u77e5\uff0c0 2 4 6 \u5206\u522b\u5bf9\u5e94 \u4e0b \u5de6 \u53f3 \u4e0a\uff08\u5176\u5b9e\u5bf9\u5e94\u7684\u5c31\u662f\u5355\u8bcd\u7684\u9996\u5b57\u6bcd\uff0c\u4e00\u5f00\u59cb\u6ca1\u770b\u51fa\u67650.0\uff09\uff0c\u4ee5\u53ca\u5750\u6807\u8303\u56f4\uff1a x\u2208[1, 24] y\u2208[1, 10] \u8fd8\u53ef\u4ee5\u53d1\u73b0\uff0c\u4e0a\u548c\u5de6\u5b8c\u5168\u4e0d\u80fd\u7528\uff0c\u53cd\u6b63\u6211\u662f\u6ca1\u770b\u61c2\u8fd9\u4e2a\u5f02\u6216\u5728\u5f02\u6216\u4ec0\u4e48......... \u4e0a\uff1a if ( dword_540004[i + 285] ^ dword_53FF98[i] ) 1 2 .rdata: 0053 FF98 ; int dword_53FF98[25] .rdata: 0053 FF98 dword_53FF98 dd ? ; DATA XREF: sub_464930+59\u2191r` \u5de6\uff1a if ( dword_540004[i + 310] ^ dword_53FFFC[i] ) 1 2 3 .rdata: 0053 FFFC ; int dword_53FFFC[] .rdata: 0053 FFFC dword_53FFFC dd ? ; DATA XREF: sub_4633D0+59\u2191r .rdata: 0053 FFFC _rdata ends \u91cd\u590d12\u6b21\uff0c\u9000\u51fa\u6761\u4ef6\u4e3aa1 == [311= 11 * 26 + 25]\u5e76\u4e14\u53e6\u5916\u53d1\u73b0\u662f+26\uff0c-26\uff0c++\uff0c\u2013\u2013\u731c\u6d4b\u662f26\u4e2a\u4e00\u884c \u7efc\u4e0a\uff0c \u731c\u6d4b\u8ff7\u5bab\u4e3a26*12\uff0c\u7531\u4e24\u4e2a\u6570\u7ec4\u5f02\u6216\u5f97\uff0c\u76f8\u540c\u4e3a\u5408\u6cd5\u8def\u5f84\uff0c\u4e0d\u540c\u4e3a\u975e\u6cd5\u8def\u5f84;\u6211\u4eec\u7684\u76ee\u6807\u662f\u4ece\u5de6\u4e0a\u89d2\u8d70\u5230\u53f3\u4e0a\u89d2\uff1b\u8f93\u5165\u7684key\u7b2c\u4e00\u4e2a\u5b57\u7b26\u51b3\u5b9a\u65b9\u5411\uff0c\u7b2c\u4e8c\u5b57\u7b26\u51b3\u5b9a\u6b65\u6570 \u624b\u52a8dump\u8ff7\u5bab\u5e76\u6253\u5370\uff1a \u8ff7\u5bab\uff08IDA\uff09\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 .data: 00540000 _data segment para public ' DATA ' use32 .data: 00540000 assume cs : _data .data: 00540000 ;org 540000h .data: 00540000 db 2 Ah ; * .data: 00540001 db 0 .data: 00540002 db 0 .data: 00540003 db 0 .data: 00540004 ; int dword_540004[311] .data: 00540004 dword_540004 dd 1 D4h , 14 Fh , 1 , 0 AAh , 0 E1h , 1 DFh , 167 h , 1 CFh , 1 D1h , 0 CEh , 92 h , 11 Ah , 148 h , 1 CEh , 1 ECh .data: 00540004 ; DATA XREF: sub_4644D0+59\u2191r .data: 00540004 dd 1 F0h , 1 BBh , 148 h , 1 B5h , 188 h , 69 h , 193 h , 9 Ah , 125 h , 17 Fh , 1 A6h , 0 D9h , 0 DBh , 18 Ch , 1 C0h .data: 00540004 dd 0 E3h , 110 h , 27 h , 172 h , 19 Dh , 0 A8h , 12 Ch , 24 h , 18 Bh , 0 CCh , 138 h , 143 h , 14 Eh , 0 AEh , 0 A5h .data: 00540004 dd 8 Eh , 0 D4h , 0 FEh , 171 h , 30 h , 91 h , 0 A3h , 102 h , 26 h , 168 h , 0 E0h , 0 F2h , 1 Eh , 117 h , 13 Dh .data: 00540004 dd 24 h , 0 BFh , 157 h , 121 h , 6 Bh , 29 h , 1 BBh , 109 h , 95 h , 1 BFh , 132 h , 187 h , 0 E6h , 173 h , 15 Fh .data: 00540004 dd 7 , 66 h , 18 Ah , 31 h , 82 h , 7 Ch , 55 h , 1 C7h , 101 h , 155 h , 1 D3h , 179 h , 1 B0h , 135 h , 1 BDh .data: 00540004 dd 1 B8h , 7 Fh , 144 h , 26 h , 27 h , 77 h , 53 h , 1 AEh , 2 Ah , 14 Eh , 74 h , 8 Ch , 9 Fh , 0 CDh , 1 AFh .data: 00540004 dd 1 DEh , 133 h , 0 AEh , 183 h , 16 h , 0 F6h , 1 A9h , 49 h , 10 Fh , 14 Ah , 116 h , 4 Ah , 62 h , 0 Dh , 1 E7h .data: 00540004 dd 123 h , 0 A2h , 89 h , 164 h , 10 Ch , 9 Ch , 4 Bh , 20 h , 35 h , 15 Fh , 97 h , 1 BAh , 0 E1h , 1 D3h , 1 AFh .data: 00540004 dd 6 Ch , 0 C0h , 8 , 152 h , 1 CAh , 120 h , 0 FEh , 180 h , 1 BEh , 19 Ah , 0 D2h , 103 h , 0 DEh , 59 h , 1 A7h .data: 00540004 dd 1 BFh , 7 , 1 Fh , 19 Eh , 0 A9h , 191 h , 5 Ch , 107 h , 9 Ch , 19 Bh , 168 h , 7 Dh , 26 h , 31 h , 1 E4h .data: 00540004 dd 60 h , 2 Ah , 67 h , 15 Fh , 124 h , 151 h , 177 h , 15 h , 61 h , 16 h , 15 Dh , 0 C8h , 0 A9h , 1 E5h , 11 Ah .data: 00540004 dd 0 EBh , 36 h , 1 F4h , 1 A3h , 1 B7h , 191 h , 121 h , 80 h , 1 D4h , 0 E5h , 18 Ah , 95 h , 1 E4h , 134 h , 1 A6h .data: 00540004 dd 137 h , 76 h , 13 Ah , 0 Fh , 136 h , 75 h , 1 B4h , 1 C4h , 65 h , 0 FAh , 14 h , 39 h , 12 Bh , 130 h , 0 E1h .data: 00540004 dd 9 , 159 h , 6 Eh , 1 EAh , 0 CBh , 0 C4h , 1 E6h , 5 Eh , 158 h , 18 h , 58 h , 13 Bh , 4 , 1 C1h , 0 C9h .data: 00540004 dd 1 CBh , 77 h , 51 h , 129 h , 12 Bh , 11 Ah , 5 Ah , 12 Bh , 0 Ah , 9 Eh , 1 D9h , 7 Bh , 27 h , 125 h , 27 h .data: 00540004 dd 0 B4h , 0 BFh , 9 Eh , 1 CBh , 0 C0h , 13 Ch , 185 h , 9 Dh , 0 Ch , 0 CBh , 87 h , 111 h , 38 h , 149 h , 93 h .data: 00540004 dd 16 Bh , 183 h , 178 h , 1 B2h , 172 h , 8 Fh , 159 h , 1 A1h , 17 Eh , 1 F3h , 143 h , 98 h , 16 h , 0 C8h , 3 Ah .data: 00540004 dd 1 DDh , 189 h , 186 h , 4 Ch , 0 D5h , 65 h , 0 Bh , 4 , 172 h , 16 Ah , 0 BDh , 192 h , 122 h , 100 h , 1 A8h .data: 00540004 dd 3 , 56 h , 0 B7h , 11 Eh , 59 h , 1 ABh , 76 h , 102 h , 14 Dh , 1 B1h , 0 AAh , 9 Bh , 0 DEh , 0 BEh , 1 DDh .data: 00540004 dd 14 Ah , 171 h , 0 C1h , 1 AAh , 38 h , 1 B3h , 32 h , 1 BAh , 0 Dh , 92 h , 3 Dh .data: 005404 E0 db 2 Ah ; * .data: 005404 E1 db 0 .data: 005404 E2 db 0 .data: 005404 E3 db 0 .data: 005404 E4 ; int dword_5404E4[311] .data: 005404 E4 dword_5404E4 dd 1 D5h , 14 Eh , 1 , 0 AAh , 0 E1h , 1 DFh , 167 h , 1 CEh , 1 D0h , 0 CFh , 93 h , 11 Bh , 149 h , 1 CFh , 1 EDh .data: 005404 E4 ; DATA XREF: sub_4644D0+60\u2191r .data: 005404 E4 dd 1 F1h , 1 BAh , 149 h , 1 B4h , 189 h , 68 h , 192 h , 9 Bh , 124 h , 17 Eh , 1 A6h , 0 D9h , 0 DAh , 18 Ch , 1 C1h .data: 005404 E4 dd 0 E2h , 111 h , 27 h , 173 h , 19 Ch , 0 A8h , 12 Ch , 24 h , 18 Bh , 0 CCh , 138 h , 143 h , 14 Eh , 0 AEh , 0 A5h .data: 005404 E4 dd 8 Eh , 0 D5h , 0 FFh , 170 h , 31 h , 90 h , 0 A2h , 102 h , 26 h , 168 h , 0 E1h , 0 F3h , 1 Fh , 117 h , 13 Ch .data: 005404 E4 dd 25 h , 0 BFh , 156 h , 120 h , 6 Ah , 28 h , 1 BAh , 108 h , 94 h , 1 BEh , 133 h , 187 h , 0 E7h , 172 h , 15 Eh .data: 005404 E4 dd 6 , 67 h , 18 Ah , 31 h , 83 h , 7 Dh , 54 h , 1 C6h , 100 h , 155 h , 1 D3h , 179 h , 1 B0h , 135 h , 1 BCh .data: 005404 E4 dd 1 B9h , 7 Eh , 145 h , 2 dup ( 27 h ), 77 h , 52 h , 1 AEh , 2 Bh , 14 Fh , 75 h , 8 Dh , 9 Eh , 0 CCh , 1 AFh , 1 DEh .data: 005404 E4 dd 132 h , 0 AFh , 182 h , 17 h , 0 F7h , 1 A8h , 48 h , 10 Eh , 14 Ah , 117 h , 4 Bh , 63 h , 0 Ch , 1 E6h , 122 h .data: 005404 E4 dd 0 A2h , 88 h , 165 h , 10 Dh , 9 Dh , 4 Ah , 21 h , 34 h , 15 Eh , 96 h , 1 BAh , 0 E1h , 1 D3h , 1 AFh , 6 Ch .data: 005404 E4 dd 0 C0h , 8 , 153 h , 1 CBh , 120 h , 0 FEh , 180 h , 1 BEh , 19 Ah , 0 D2h , 103 h , 0 DEh , 59 h , 1 A7h , 1 BEh .data: 005404 E4 dd 6 , 1 Eh , 19 Fh , 0 A8h , 190 h , 5 Dh , 106 h , 9 Dh , 19 Bh , 169 h , 7 Ch , 27 h , 31 h , 1 E5h , 61 h .data: 005404 E4 dd 2 Bh , 66 h , 15 Eh , 125 h , 150 h , 176 h , 14 h , 60 h , 17 h , 15 Dh , 0 C9h , 0 A8h , 1 E4h , 11 Bh , 0 EAh .data: 005404 E4 dd 37 h , 1 F5h , 1 A2h , 1 B6h , 191 h , 120 h , 81 h , 1 D5h , 0 E5h , 18 Bh , 94 h , 1 E5h , 135 h , 1 A7h , 136 h .data: 005404 E4 dd 77 h , 13 Bh , 0 Eh , 137 h , 74 h , 1 B4h , 1 C5h , 64 h , 0 FBh , 15 h , 38 h , 12 Ah , 131 h , 0 E0h , 8 .data: 005404 E4 dd 159 h , 6 Fh , 1 EBh , 0 CAh , 0 C4h , 1 E6h , 5 Eh , 158 h , 18 h , 59 h , 13 Ah , 5 , 1 C0h , 0 C8h , 1 CAh .data: 005404 E4 dd 77 h , 51 h , 128 h , 12 Ah , 11 Bh , 5 Bh , 12 Ah , 0 Bh , 9 Fh , 1 D8h , 7 Ah , 27 h , 124 h , 26 h , 0 B5h .data: 005404 E4 dd 0 BEh , 9 Fh , 1 CAh , 0 C1h , 13 Ch , 184 h , 9 Ch , 0 Dh , 0 CAh , 86 h , 110 h , 39 h , 148 h , 92 h , 16 Ah .data: 005404 E4 dd 182 h , 179 h , 1 B3h , 173 h , 8 Eh , 158 h , 1 A0h , 17 Eh , 1 F2h , 142 h , 99 h , 17 h , 0 C9h , 3 Bh , 1 DCh .data: 005404 E4 dd 189 h , 186 h , 4 Ch , 0 D5h , 65 h , 0 Bh , 4 , 172 h , 16 Ah , 0 BDh , 193 h , 123 h , 101 h , 1 A9h , 2 .data: 005404 E4 dd 57 h , 0 B6h , 11 Fh , 58 h , 1 AAh , 77 h , 103 h , 14 Ch , 1 B0h , 0 ABh , 9 Ah , 0 DFh , 0 BFh , 1 DCh , 14 Bh .data: 005404 E4 dd 170 h , 0 C0h , 1 ABh , 39 h , 1 B2h , 32 h , 1 BAh , 0 Dh , 92 h , 3 Dh \u7531\u4e8e\u731c\u6d4b\u8ff7\u5bab\u4e3a12*26=312\uff0c\u6240\u4ee5\u731c\u6d4b\u524d\u97622A\u4e5f\u5e94\u8be5\u662f\u5728\u8ff7\u5bab\u4e4b\u4e2d\uff08\u4e0d\u7136\u770b\u4e0d\u61c2\u4e24\u4e2a311\u4e2d\u95f4\u63d2\u7740\u4e00\u4e2a2A\u662f\u5e72\u561b\u7528\u7684.....\uff09 1 2 3 4 .data: 005404 E0 db 2 Ah ; * .data: 005404 E1 db 0 .data: 005404 E2 db 0 .data: 005404 E3 db 0 python\u811a\u672c\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 maze_0 = [ 42 , 468 , 335 , 1 , 170 , 225 , 479 , 359 , 463 , 465 , 206 , 146 , 282 , 328 , 462 , 492 , 496 , 443 , 328 , 437 , 392 , 105 , 403 , 154 , 293 , 383 , 422 , 217 , 219 , 396 , 448 , 227 , 272 , 39 , 370 , 413 , 168 , 300 , 36 , 395 , 204 , 312 , 323 , 334 , 174 , 165 , 142 , 212 , 254 , 369 , 48 , 145 , 163 , 258 , 38 , 360 , 224 , 242 , 30 , 279 , 317 , 36 , 191 , 343 , 289 , 107 , 41 , 443 , 265 , 149 , 447 , 306 , 391 , 230 , 371 , 351 , 7 , 102 , 394 , 49 , 130 , 124 , 85 , 455 , 257 , 341 , 467 , 377 , 432 , 309 , 445 , 440 , 127 , 324 , 38 , 39 , 119 , 83 , 430 , 42 , 334 , 116 , 140 , 159 , 205 , 431 , 478 , 307 , 174 , 387 , 22 , 246 , 425 , 73 , 271 , 330 , 278 , 74 , 98 , 13 , 487 , 291 , 162 , 137 , 356 , 268 , 156 , 75 , 32 , 53 , 351 , 151 , 442 , 225 , 467 , 431 , 108 , 192 , 8 , 338 , 458 , 288 , 254 , 384 , 446 , 410 , 210 , 259 , 222 , 89 , 423 , 447 , 7 , 31 , 414 , 169 , 401 , 92 , 263 , 156 , 411 , 360 , 125 , 38 , 49 , 484 , 96 , 42 , 103 , 351 , 292 , 337 , 375 , 21 , 97 , 22 , 349 , 200 , 169 , 485 , 282 , 235 , 54 , 500 , 419 , 439 , 401 , 289 , 128 , 468 , 229 , 394 , 149 , 484 , 308 , 422 , 311 , 118 , 314 , 15 , 310 , 117 , 436 , 452 , 101 , 250 , 20 , 57 , 299 , 304 , 225 , 9 , 345 , 110 , 490 , 203 , 196 , 486 , 94 , 344 , 24 , 88 , 315 , 4 , 449 , 201 , 459 , 119 , 81 , 297 , 299 , 282 , 90 , 299 , 10 , 158 , 473 , 123 , 39 , 293 , 39 , 180 , 191 , 158 , 459 , 192 , 316 , 389 , 157 , 12 , 203 , 135 , 273 , 56 , 329 , 147 , 363 , 387 , 376 , 434 , 370 , 143 , 345 , 417 , 382 , 499 , 323 , 152 , 22 , 200 , 58 , 477 , 393 , 390 , 76 , 213 , 101 , 11 , 4 , 370 , 362 , 189 , 402 , 290 , 256 , 424 , 3 , 86 , 183 , 286 , 89 , 427 , 118 , 258 , 333 , 433 , 170 , 155 , 222 , 190 , 477 , 330 , 369 , 193 , 426 , 56 , 435 , 50 , 442 , 13 , 146 , 61 ] maze_1 = [ 42 , 469 , 334 , 1 , 170 , 225 , 479 , 359 , 462 , 464 , 207 , 147 , 283 , 329 , 463 , 493 , 497 , 442 , 329 , 436 , 393 , 104 , 402 , 155 , 292 , 382 , 422 , 217 , 218 , 396 , 449 , 226 , 273 , 39 , 371 , 412 , 168 , 300 , 36 , 395 , 204 , 312 , 323 , 334 , 174 , 165 , 142 , 213 , 255 , 368 , 49 , 144 , 162 , 258 , 38 , 360 , 225 , 243 , 31 , 279 , 316 , 37 , 191 , 342 , 288 , 106 , 40 , 442 , 264 , 148 , 446 , 307 , 391 , 231 , 370 , 350 , 6 , 103 , 394 , 49 , 131 , 125 , 84 , 454 , 256 , 341 , 467 , 377 , 432 , 309 , 444 , 441 , 126 , 325 , 39 , 39 , 119 , 82 , 430 , 43 , 335 , 117 , 141 , 158 , 204 , 431 , 478 , 306 , 175 , 386 , 23 , 247 , 424 , 72 , 270 , 330 , 279 , 75 , 99 , 12 , 486 , 290 , 162 , 136 , 357 , 269 , 157 , 74 , 33 , 52 , 350 , 150 , 442 , 225 , 467 , 431 , 108 , 192 , 8 , 339 , 459 , 288 , 254 , 384 , 446 , 410 , 210 , 259 , 222 , 89 , 423 , 446 , 6 , 30 , 415 , 168 , 400 , 93 , 262 , 157 , 411 , 361 , 124 , 39 , 49 , 485 , 97 , 43 , 102 , 350 , 293 , 336 , 374 , 20 , 96 , 23 , 349 , 201 , 168 , 484 , 283 , 234 , 55 , 501 , 418 , 438 , 401 , 288 , 129 , 469 , 229 , 395 , 148 , 485 , 309 , 423 , 310 , 119 , 315 , 14 , 311 , 116 , 436 , 453 , 100 , 251 , 21 , 56 , 298 , 305 , 224 , 8 , 345 , 111 , 491 , 202 , 196 , 486 , 94 , 344 , 24 , 89 , 314 , 5 , 448 , 200 , 458 , 119 , 81 , 296 , 298 , 283 , 91 , 298 , 11 , 159 , 472 , 122 , 39 , 292 , 38 , 181 , 190 , 159 , 458 , 193 , 316 , 388 , 156 , 13 , 202 , 134 , 272 , 57 , 328 , 146 , 362 , 386 , 377 , 435 , 371 , 142 , 344 , 416 , 382 , 498 , 322 , 153 , 23 , 201 , 59 , 476 , 393 , 390 , 76 , 213 , 101 , 11 , 4 , 370 , 362 , 189 , 403 , 291 , 257 , 425 , 2 , 87 , 182 , 287 , 88 , 426 , 119 , 259 , 332 , 432 , 171 , 154 , 223 , 191 , 476 , 331 , 368 , 192 , 427 , 57 , 434 , 50 , 442 , 13 , 146 , 61 ] maze = \"\" for i in xrange ( len ( maze_0 )): if i % 26 == 0 : print maze maze = \"\" if maze_0 [ i ] == maze_1 [ i ] : maze += \"1 \" else : maze += \"0 \" print maze \u8ff7\u5bab\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 1 0 0 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 1 0 0 0 1 0 0 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 1 1 1 0 0 0 1 0 0 1 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 1 1 0 0 0 0 0 1 1 1 1 1 0 0 0 0 0 1 1 0 1 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 0 0 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 1 0 0 0 1 1 1 1 1 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 \u624b\u52a8\u8d70\u8ff7\u5bab\uff0c\u5f97 06360836063b0839073e0639 \u6700\u540e\u6765\u5206\u6790\u4e00\u4e0b\u4e3b\u51fd\u6570\u91cc\u7684\uff1a 1 2 key [ 16 ] ^= 1u ; // \u5bf9\u8f93\u5165\u5b57\u7b26\u8fdb\u884c\u64cd\u4f5c sub_45C748 ( key ); \u8fd9\u4e2a\u64cd\u4f5c\u51fd\u6570\u5c31\u662f\u4e2aVM\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 void __cdecl sub_4649E0 ( void * a1 ) { void * v1 ; // ST100_4 char * v2 ; // STF4_4 void * v3 ; // STE8_4 _DWORD * v4 ; // STDC_4 v1 = j__malloc ( 0x40u ); v2 = ( char * ) j__malloc ( 0x40u ); v3 = j__malloc ( 0x20u ); v4 = j__malloc ( 0x10u ); j__memset ( v2 , 0 , 0x40u ); j__memset ( v1 , 0 , 0x40u ); j__memset ( v3 , 0 , 0x20u ); j__memmove ( v1 , a1 , 24u ); * v4 = & byte_541178 ; v4 [ 1 ] = v3 ; v4 [ 2 ] = v2 + 128 ; v4 [ 3 ] = v1 ; sub_45DCD3 (( int ) v4 ); j__memmove ( a1 , v1 , 24u ); j__free ( v1 ); j__free ( v2 ); j__free ( v3 ); j__free ( v4 ); } \u76f4\u63a5\u52a8\u6001\u8c03\u8bd5\u731c\u7ed3\u679c\u5427....(\u540e\u9762\u518d\u6765\u9759\u6001\u5206\u6790\u4e00\u4e0b) \u8f93\u5165\u6d4b\u8bd5\u5b57\u7b2624\u4e2a1\u65f6\u53d1\u73b0\u8fd9\u4e2a\u51fd\u6570\u7684\u64cd\u4f5c\u5c31\u662f\u8f93\u5165\u5f02\u6216\u4f4d\u6570 \u89e3\u5bc6\u811a\u672c\uff1a 1 2 3 4 5 6 key = list ( \"06360836063b0839073e0639\" ) key [ 16 ] = chr ( ord ( key [ 16 ]) ^ 1 ) flag = \"\" for i in range ( 24 ): flag += chr ( ord ( key [ i ]) ^ i ) print flag \u5f97\uff1a 07154=518?9i<5=6!&!v$#%. \u6700\u540e\u5728\u5b57\u7b26\u4e32\u540e\u9762\u52a0\u4e0a\u524d\u9762\u7684 Docupa \u5f97flag\uff1a zsctf{07154=518?9i<5=6!&!v$#%.Docupa} 0x08 file \u65e0\u58f3\uff0c\u8f7d\u5165IDA\uff0c\u5206\u6790\u4e3b\u51fd\u6570 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 int __cdecl main ( int argc , const char ** argv , const char ** envp ) { const char * v3 ; // rsi const char ** v5 ; // [rsp+0h] [rbp-1A0h] int i ; // [rsp+1Ch] [rbp-184h] int v7 ; // [rsp+20h] [rbp-180h] signed int j ; // [rsp+24h] [rbp-17Ch] int k ; // [rsp+28h] [rbp-178h] FILE * v10 ; // [rsp+30h] [rbp-170h] _BYTE * v11 ; // [rsp+40h] [rbp-160h] _BYTE * v12 ; // [rsp+48h] [rbp-158h] int v13 [ 64 ]; // [rsp+50h] [rbp-150h] char file [ 72 ]; // [rsp+150h] [rbp-50h] unsigned __int64 v15 ; // [rsp+198h] [rbp-8h] v5 = argv ; v15 = __readfsqword ( 0x28u ); v10 = fopen ( argv [ 1 ], \"r\" ); if ( ! v10 ) __assert_fail ( \"file!=NULL\" , \"file.c\" , 0x8Fu , \"main\" ); for ( i = 0 ; ; ++ i ) { v3 = \"%c\" ; if ( ( unsigned int ) __isoc99_fscanf ( v10 , \"%c\" , & file [ i ]) == - 1 ) // \u8bfb\u53d6\u6587\u4ef6 break ; } v7 = 0 ; v11 = ( _BYTE * ) encode ( flllag ); // base64\u52a0\u5bc6\uff0c\u4f46\u540e\u9762\u6ca1\u7528\u5230\uff0c\u611f\u89c9\u662f\u7528\u6765\u6df7\u6dc6\u7684 v12 = ( _BYTE * ) encode ( sttr_home ); // sttr_home = \"664e06226625425d562e766e042d422c072c45692d125c7e6552606954646643\" // flllag = \"flag{hello_player_come_on_hahah}\" for ( j = 0 ; j <= 63 ; j += 2 ) { v3 = ( const char * )( unsigned int ) sttr_home [ j + 1 ]; v13 [ v7 ++ ] = sub_400EB9 (( unsigned int ) sttr_home [ j ], v3 ); // \u5bf9sttr_home\u8fdb\u884c\u64cd\u4f5c\u540e\u5b58\u50a8\u5728v13\u4e2d } * v11 = encode ( flllag ); for ( k = 0 ; k < v7 ; ++ k ) { if ( * flllag != ( k ^ file [ k ] ^ v13 [ k ]) ) // \u5224\u65ad\uff0c\u53ef\u77e5file[k] = v13[k] ^ flllag[k] ^ k { printf ( \"Your file is wrong!! try again\" , v5 ); return 0 ; } ++ flllag ; } * v12 = encode ( sttr_home ); printf ( \"the flag is file's MD5 Congratulations!\" , v3 , v5 ); // flag\u6700\u540e\u4e3a\u8f93\u5165\u6587\u4ef6\u7684MD5\u503c return 0 ; } \u8fd0\u884c\u7a0b\u5e8f\u65f6\u4f20\u9012\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u4e3a\u4e00\u4e2a\u6587\u4ef6\u540d\uff0c\u5e76\u6253\u5f00\u8be5\u6587\u4ef6\u3002 \u5224\u65ad\u8bed\u53e5 if ( *flllag != (k ^ file[k] ^ v13[k]) ) \u53ef\u77e5 file[k] = v13[k] ^ flllag[k] ^ k flllag[]\u5df2\u77e5\uff0c\u63a5\u4e0b\u6765\u89e3\u51b3v13[] 1 2 3 4 5 for ( j = 0 ; j <= 63; j += 2 ) { v3 = ( const char * )( unsigned int ) sttr_home [ j + 1 ] ; v13 [ v7 ++ ] = sub_400EB9 (( unsigned int ) sttr_home [ j ], v3 ) ; } 1 2 3 4 5 6 7 __int64 __fastcall sub_400EB9 ( char a1 , char a2 ) { int v2 ; // ebx v2 = 16 * ( unsigned __int64 ) sub_400E6A (( unsigned int ) a1 ) ; return v2 + ( unsigned int ) sub_400E6A (( unsigned int ) a2 ) ; } 1 2 3 4 5 6 7 8 9 10 signed __int64 __fastcall sub_400E6A ( char a1 ) { if ( a1 > ' / ' && a1 <= ' 9 ' ) // 0 ~ 9 return ( unsigned int )( a1 - 48 ) ; // A ~ F if ( a1 > ' @ ' && a1 <= ' F ' ) return ( unsigned int )( a1 - 55 ) ; // \u4e0d\u5728a ~ f if ( a1 <= ' ` ' || a1 > ' f ' ) return 0 xFFFFFFFFLL ; return ( unsigned int )( a1 - 87 ) ; // a ~ f } \u8fd9\u91cc\u628a\u4f20\u5165\u7684\u5b57\u7b26\u5224\u65ad\u5728\u54ea\u4e2a\u533a\u95f4\uff0c\u7136\u540e\u5206\u522b\u8fd4\u56de\u4e0d\u540c\u7684\u503c\u3002 \u5219v13[]\u89e3\u5bc6\u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 sttr_home = \"664e06226625425d562e766e042d422c072c45692d125c7e6552606954646643\" v13 = [] def fuction2 ( a ): if a > 47 and a <= 57 : return a - 48 if a > 64 and a <= 70 : return a - 55 if a <= 96 or a > 102 : return 0xFFFFFFFF return a - 87 def fuction1 ( a , b ): return 16 * fuction2 ( ord ( a )) + fuction2 ( ord ( b )) for i in xrange ( 0 , len ( sttr_home ), 2 ): v13 . append ( fuction1 ( sttr_home [ i ], sttr_home [ i + 1 ])) \u5219\u53ef\u89e3\u51fafile[]\uff0c\u5e76\u5199\u5165\u6587\u4ef6file.txt: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 sttr_home = \" 664e06226625425d562e766e042d422c072c45692d125c7e6552606954646643 \" flllag = \" flag{hello_player_come_on_hahah} \" v13 = [] file = [] def fuction2 ( a ) : if a > 47 and a <= 57 : return a - 48 if a > 64 and a <= 70 : return a - 55 if a <= 96 or a > 102 : return 0 xFFFFFFFF return a - 87 def fuction1 ( a , b ) : return 16 * fuction2 ( ord ( a )) + fuction2 ( ord ( b )) for i in xrange ( 0 , len ( sttr_home ) , 2 ) : v13 . append ( fuction1 ( sttr_home [ i ], sttr_home [ i + 1 ] )) fp = open ( \" file.txt \" , \" w \" ) for i in xrange ( len ( flllag )) : file . append ( chr ( i ^ v13 [ i ] ^ ord ( flllag [ i ] ))) fp . writelines ( file ) fp . close () 1 2 . / file file . txt the flag is file ' s MD5 Congratulations ! \u987a\u4fbf\u628aMD5\u503c\u4e5f\u7b97\u51fa\u6765\uff1a 1 2 3 4 5 6 7 8 fp = open ( \"file.txt\" , \"rb\" ) md5_obj = hashlib . md5 () md5_obj . update ( fp . read ()) hash_code = md5_obj . hexdigest () md5 = str ( hash_code ) . lower () fp . close () print \"flag{\" + md5 + \"}\" \u5219\u6700\u7ec8flag\u4e3a flag{914a7b9df69eab5b74b9edb7070e53e8}","title":"Reverse"},{"location":"ctf_write_up/exams/old_bugku/reverse/#0x00","text":"\u9898\u76ee\uff1a Bugku|\u5165\u95e8\u9006\u5411 \u89e3\u538b\u6587\u4ef6\uff0c\u5c06baby.exe\u7528ida\u6253\u5f00\uff0c\u4e3b\u51fd\u6570\u4e2d \"Hi~this is a babyre\" \u540e\u5c31 call _printf \u4e14\u4e0b\u9762\u4e3a\u4e00\u4e9b\u5341\u516d\u8fdb\u5236\u5b57\u7b26\u5219\u731c\u6d4b\u4e3aflag\u3002\u5bf9\u7740\u8fd9\u4e9b\u5341\u516d\u8fdb\u5236\u4e00\u987fR\u952e\u5c31\u80fd\u770b\u5230\u4e86\u3002 \u6ce8\u610f\u5b57\u7b26 \uff0c\u662f0\u4e0d\u662fo\u7b49\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 .text: 0040146 E mov dword ptr [ esp ], offset aHiThisIsABabyr ; \"Hi~ this is a babyre\" .text: 00401475 call _printf .text: 0040147 A mov byte ptr [ esp + 2 Fh ], 66 h .text: 0040147 F mov byte ptr [ esp + 2 Eh ], 6 Ch .text: 00401484 mov byte ptr [ esp + 2 Dh ], 61 h .text: 00401489 mov byte ptr [ esp + 2 Ch ], 67 h .text: 0040148 E mov byte ptr [ esp + 2 Bh ], 7 Bh .text: 00401493 mov byte ptr [ esp + 2 Ah ], 52 h .text: 00401498 mov byte ptr [ esp + 29 h ], 65 h .text: 0040149 D mov byte ptr [ esp + 28 h ], 5 Fh .text: 004014 A2 mov byte ptr [ esp + 27 h ], 31 h .text: 004014 A7 mov byte ptr [ esp + 26 h ], 73 h .text: 004014 AC mov byte ptr [ esp + 25 h ], 5 Fh .text: 004014 B1 mov byte ptr [ esp + 24 h ], 53 h .text: 004014 B6 mov byte ptr [ esp + 23 h ], 30 h .text: 004014 BB mov byte ptr [ esp + 22 h ], 5 Fh .text: 004014 C0 mov byte ptr [ esp + 21 h ], 43 h .text: 004014 C5 mov byte ptr [ esp + 20 h ], 30 h .text: 004014 CA mov byte ptr [ esp + 1 Fh ], 4 Fh .text: 004014 CF mov byte ptr [ esp + 1 Eh ], 4 Ch .text: 004014 D4 mov byte ptr [ esp + 1 Dh ], 7 Dh .text: 004014 D9 mov eax , 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 .text: 0040147 A mov byte ptr [ esp + 2 Fh ], ' f ' .text: 0040147 F mov byte ptr [ esp + 2 Eh ], ' l ' .text: 00401484 mov byte ptr [ esp + 2 Dh ], ' a ' .text: 00401489 mov byte ptr [ esp + 2 Ch ], ' g ' .text: 0040148 E mov byte ptr [ esp + 2 Bh ], '{' .text: 00401493 mov byte ptr [ esp + 2 Ah ], ' R ' .text: 00401498 mov byte ptr [ esp + 29 h ], ' e ' .text: 0040149 D mov byte ptr [ esp + 28 h ], ' _ ' .text: 004014 A2 mov byte ptr [ esp + 27 h ], ' 1 ' .text: 004014 A7 mov byte ptr [ esp + 26 h ], ' s ' .text: 004014 AC mov byte ptr [ esp + 25 h ], ' _ ' .text: 004014 B1 mov byte ptr [ esp + 24 h ], ' S ' .text: 004014 B6 mov byte ptr [ esp + 23 h ], ' 0 ' .text: 004014 BB mov byte ptr [ esp + 22 h ], ' _ ' .text: 004014 C0 mov byte ptr [ esp + 21 h ], ' C ' .text: 004014 C5 mov byte ptr [ esp + 20 h ], ' 0 ' .text: 004014 CA mov byte ptr [ esp + 1 Fh ], ' O ' .text: 004014 CF mov byte ptr [ esp + 1 Eh ], ' L ' .text: 004014 D4 mov byte ptr [ esp + 1 Dh ], '}' p.s. R\u952e\uff1a\u5b57\u7b26\u8f6c\u6362\u5feb\u6377\u952e","title":"0x00 \u5165\u95e8\u9006\u5411"},{"location":"ctf_write_up/exams/old_bugku/reverse/#0x01-easy_vb","text":"\u9898\u76ee\uff1a Bugku|Easy_vb \u4e0b\u8f7d\u6587\u4ef6\uff0c\u62c9\u8fdbIDA\u67e5\u770b\uff0c\u53d1\u73b0\u53ea\u6709\u4e00\u4e2a\u51fd\u6570\u3002\u89c2\u5bdf\uff0c\u5411\u4e0b\u7ee7\u7eed\u6d4f\u89c8\uff0c\u53d1\u73b0flag\u9690\u85cf\u5176\u4e2d\uff01 1 2 3 .text: 00401 A5C aMctfN3tRev1sE4 : ; DATA XREF: .text:004023A9\u2193o .text: 00401 A5C text \" UTF-16LE \" , ' MCTF { _N3t_Rev_1s_E4ay_ }' , 0 .text: 00401 A8C dd 14 h","title":"0x01 Easy_vb"},{"location":"ctf_write_up/exams/old_bugku/reverse/#0x02-easy_re","text":"\u9898\u76ee\uff1a Bugku|Easy_RE ida\u52a0\u8f7d\u6587\u4ef6\uff0c\u627e\u5230main\u51fd\u6570\u3002F5\u8f6c\u6362\u6210\u4f2ac\u4ee3\u7801\u3002 strcmp\u51fd\u6570 \u6bd4\u8f83v5\u548cv9\u3002\u8f93\u5165\u7684\u662fv9\uff0c\u6545\u67e5\u770bv5\u76f8\u5173 1 _mm_storeu_si128 (( __m128i * ) & v5 , _mm_loadu_si128 (( const __m128i * ) & xmmword_413E34 )); \u5219\u70b9\u8fdb\u53bb\u5230xmmword_413E34\u6240\u5728\u4f4d\u7f6e 1 2 .rdata: 00413 E34 xmmword_413E34 xmmword3074656D30633165577B465443545544h .rdata: 00413 E44 qword_413E44 dq7D465443545544h \u5bf9\u7740\u6570\u636e\u53f3\u952e\u76f4\u63a5 Undefined ,\u5feb\u6377\u952eA\u4e00\u4e0b\u5373\u5f97flag\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 .rdata: 00413 E34 unk_413E34 db 44 h ; D ; DATA XREF: _main+10\u2191r .rdata: 00413 E35 db 55 h ; U .rdata: 00413 E36 db 54 h ; T .rdata: 00413 E37 db 43 h ; C .rdata: 00413 E38 db 54 h ; T .rdata: 00413 E39 db 46 h ; F .rdata: 00413 E3A db 7 Bh ; { .rdata: 00413 E3B db 57 h ; W .rdata: 00413 E3C db 65 h ; e .rdata: 00413 E3D db 31 h ; 1 .rdata: 00413 E3E db 63 h ; c .rdata: 00413 E3F db 30 h ; 0 .rdata: 00413 E40 db 6 Dh ; m .rdata: 00413 E41 db 65 h ; e .rdata: 00413 E42 db 74 h ; t .rdata: 00413 E43 db 30 h ; 0 .rdata: 00413 E44 unk_413E44 db 44 h ; D ; DATA XREF: _main+27\u2191r .rdata: 00413 E45 db 55 h ; U .rdata: 00413 E46 db 54 h ; T .rdata: 00413 E47 db 43 h ; C .rdata: 00413 E48 db 54 h ; T .rdata: 00413 E49 db 46 h ; F .rdata: 00413 E4A db 7 Dh ; } P.S\u4e00\u5f00\u59cb\u53ea undefined xmmword_413E34 \u53d1\u73b0\u5927\u62ec\u53f7\u4e0d\u6210\u5bf9\uff0c\u624d\u53d1\u73b0\u4e0b\u9762\u8fd8\u6709\u4e00\u57570.0....","title":"0x02 Easy_Re"},{"location":"ctf_write_up/exams/old_bugku/reverse/#0x03","text":"\u9898\u76ee\uff1a Bugku|\u6e38\u620f\u8fc7\u5173 \u8fd0\u884c\u4e86\u4e00\u4e0b\uff0c\u53d1\u73b0\u662f\u4e2a\u5f00\u5173\u6e38\u620f\uff0c\u8f93\u5165\u6570\u5b57\u4f1a\u5c06\u5bf9\u5e94\u7684\u7f16\u7801\u7684\u5f00\u5173\uff0c\u4ee5\u53ca\u76f8\u90bb\u7684\u5f00\u5173\u8f6c\u5316\u5f00\u5173\u72b6\u6001\uff08\u5373\u7531\u5f00\u53d8\u5173 or \u7531\u5173\u53d8\u5f00\uff09\uff0c\u5f53\u6240\u6709\u5f00\u5173\u4e3a\u5173\u65f6\uff0c\u5f97\u5230flag\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 |------------\uff0f --------\u25b3--------| |------------\uff0f --------\u25cb--------| |------------\uff0f --------\u25c7--------| |------------\uff0f --------\u25a1--------| |--------------------|------------\uff0f --------\u2606--------| | |------------\uff0f --------\u25bd--------| | |------------\uff0f -----(\uffe3\u25bd\uffe3)\uff0f---| | |------------\uff0f -----(;\u00b0\u0414\u00b0)----| \u4e8c | | by 0x61 | | | |------------------------------------------------------| Play a game The n is the serial number of the lamp,and m is the state of the lamp If m of the Nth lamp is 1,it's on ,if not it's off At first all the lights were closed Now you can input n to change its state But you should pay attention to one thing,if you change the state of the Nth lamp,the state of (N-1)th and (N+1)th will be changed too When all lamps are on,flag will appear Now,input n input n,n(1-8) 1.\u25b3 2.\u25cb 3.\u25c7 4.\u25a1 5.\u2606 6.\u25bd 7.(\uffe3\u25bd\uffe3)\uff0f 8.(;\u00b0\u0414\u00b0) 0.restart n= \u7136\u540e....\u89c2\u5bdf\u4e86\u4e00\u4e0b......","title":"0x03 \u6e38\u620f\u8fc7\u5173"},{"location":"ctf_write_up/exams/old_bugku/reverse/#_1","text":"\u6570\u5b57\u4ece1\u8f93\u52308\u5373\u53ef\u5f97\u5230flag..... \u8fd9\u4e5f\u592a\u7b80\u5355\u4e86\u5427.....\u63a5\u4e0b\u6765\u62d6\u8fdbIDA\u770b\u770b\u3002","title":"\u89e3\u6cd5\u4e00"},{"location":"ctf_write_up/exams/old_bugku/reverse/#_2","text":"shift+F12\uff0c\u6839\u636e\u8f93\u51fa\u627e\u5230\u4e3b\u8981\u4ee3\u7801\u4f4d\u7f6e\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 void __cdecl main_0 () { signed int i ; // [esp+DCh] [ebp-20h] int v1 ; // [esp+F4h] [ebp-8h] printf (( int ) & unk_50B110 ); printf (( int ) & unk_50B158 ); printf (( int ) & unk_50B1A0 ); printf (( int ) & unk_50B1E8 ); printf (( int ) & unk_50B230 ); printf (( int ) & unk_50B278 ); printf (( int ) & unk_50B2C0 ); printf (( int ) & unk_50B308 ); printf (( int ) \"\u4e8c | \\n \" ); printf (( int ) \"| by 0x61 | \\n \" ); printf (( int ) \"| | \\n \" ); printf (( int ) \"|------------------------------------------------------| \\n \" ); printf (( int ) \"Play a game \\n \" \"The n is the serial number of the lamp,and m is the state of the lamp \\n \" \"If m of the Nth lamp is 1,it's on ,if not it's off \\n \" \"At first all the lights were closed \\n \" ); printf (( int ) \"Now you can input n to change its state \\n \" ); printf (( int ) \"But you should pay attention to one thing,if you change the state of the Nth lamp,the state of (N-1)th and\" \" (N+1)th will be changed too \\n \" ); printf (( int ) \"When all lamps are on,flag will appear \\n \" ); printf (( int ) \"Now,input n \\n \" ); while ( 1 ) { while ( 1 ) { printf (( int ) \"input n,n(1-8) \\n \" ); sub_459418 (); printf (( int ) \"n=\" ); scanf ( \"%d\" , & v1 ); printf (( int ) \" \\n \" ); if ( v1 >= 0 && v1 <= 8 ) break ; printf (( int ) \"sorry,n error,try again \\n \" ); } if ( v1 ) { sub_4576D6 ( v1 - 1 ); } else { for ( i = 0 ; i < 8 ; ++ i ) { if ( ( unsigned int ) i >= 9 ) j____report_rangecheckfailure (); byte_532E28 [ i ] = 0 ; } } j__system ( \"CLS\" ); sub_458054 (); if ( byte_532E28 [ 0 ] == 1 && byte_532E28 [ 1 ] == 1 && byte_532E28 [ 2 ] == 1 && byte_532E28 [ 3 ] == 1 && byte_532E28 [ 4 ] == 1 && byte_532E28 [ 5 ] == 1 && byte_532E28 [ 6 ] == 1 && byte_532E28 [ 7 ] == 1 ) { sub_457AB4 (); } } } \u6700\u540e\u90a3\u4e00\u8fde\u4e32\u7684if\u8bed\u53e5\u770b\u7740\u5f88\u53ef\u7591\uff0c\u8fdb\u53bb sub_457AB4() \u770b\u4e00\u4e0b 1 2 3 4 int sub_457AB4 ( void ) { return sub_45E940 () ; } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 int sub_45E940 () { signed int i ; // [esp+D0h] [ebp-94h] char v2 [ 125 ] ; // [esp+DCh] [ebp-88h] printf (( int ) \" done!!! the flag is \" ) ; v2 [ 0 ] = 18 ; v2 [ 69 ] = 64 ; v2 [ 70 ] = 98 ; v2 [ 71 ] = 5 ; v2 [ 72 ] = 2 ; v2 [ 73 ] = 4 ; v2 [ 74 ] = 6 ; v2 [ 75 ] = 3 ; v2 [ 76 ] = 6 ; v2 [ 77 ] = 48 ; v2 [ 78 ] = 49 ; v2 [ 79 ] = 65 ; v2 [ 80 ] = 32 ; v2 [ 81 ] = 12 ; v2 [ 82 ] = 48 ; v2 [ 83 ] = 65 ; v2 [ 84 ] = 31 ; v2 [ 85 ] = 78 ; v2 [ 86 ] = 62 ; v2 [ 87 ] = 32 ; v2 [ 88 ] = 49 ; v2 [ 89 ] = 32 ; v2 [ 90 ] = 1 ; v2 [ 91 ] = 57 ; v2 [ 92 ] = 96 ; v2 [ 93 ] = 3 ; v2 [ 94 ] = 21 ; v2 [ 95 ] = 9 ; v2 [ 96 ] = 4 ; v2 [ 97 ] = 62 ; v2 [ 98 ] = 3 ; v2 [ 99 ] = 5 ; v2 [ 100 ] = 4 ; v2 [ 101 ] = 1 ; v2 [ 102 ] = 2 ; v2 [ 103 ] = 3 ; v2 [ 104 ] = 44 ; v2 [ 105 ] = 65 ; v2 [ 106 ] = 78 ; v2 [ 107 ] = 32 ; v2 [ 108 ] = 16 ; v2 [ 109 ] = 97 ; v2 [ 110 ] = 54 ; v2 [ 111 ] = 16 ; v2 [ 112 ] = 44 ; v2 [ 113 ] = 52 ; v2 [ 114 ] = 32 ; v2 [ 115 ] = 64 ; v2 [ 116 ] = 89 ; v2 [ 117 ] = 45 ; v2 [ 118 ] = 32 ; v2 [ 119 ] = 65 ; v2 [ 120 ] = 15 ; v2 [ 121 ] = 34 ; v2 [ 122 ] = 18 ; v2 [ 123 ] = 16 ; v2 [ 124 ] = 0 ; v2 [ 0 ] = 123 ; v2 [ 1 ] = 32 ; v2 [ 2 ] = 18 ; v2 [ 3 ] = 98 ; v2 [ 4 ] = 119 ; v2 [ 5 ] = 108 ; v2 [ 6 ] = 65 ; v2 [ 7 ] = 41 ; v2 [ 8 ] = 124 ; v2 [ 9 ] = 80 ; v2 [ 10 ] = 125 ; v2 [ 11 ] = 38 ; v2 [ 12 ] = 124 ; v2 [ 13 ] = 111 ; v2 [ 14 ] = 74 ; v2 [ 15 ] = 49 ; v2 [ 16 ] = 83 ; v2 [ 17 ] = 108 ; v2 [ 18 ] = 94 ; v2 [ 19 ] = 108 ; v2 [ 20 ] = 84 ; v2 [ 21 ] = 6 ; v2 [ 22 ] = 96 ; v2 [ 23 ] = 83 ; v2 [ 24 ] = 44 ; v2 [ 25 ] = 121 ; v2 [ 26 ] = 104 ; v2 [ 27 ] = 110 ; v2 [ 28 ] = 32 ; v2 [ 29 ] = 95 ; v2 [ 30 ] = 117 ; v2 [ 31 ] = 101 ; v2 [ 32 ] = 99 ; v2 [ 33 ] = 123 ; v2 [ 34 ] = 127 ; v2 [ 35 ] = 119 ; v2 [ 36 ] = 96 ; v2 [ 37 ] = 48 ; v2 [ 38 ] = 107 ; v2 [ 39 ] = 71 ; v2 [ 40 ] = 92 ; v2 [ 41 ] = 29 ; v2 [ 42 ] = 81 ; v2 [ 43 ] = 107 ; v2 [ 44 ] = 90 ; v2 [ 45 ] = 85 ; v2 [ 46 ] = 64 ; v2 [ 47 ] = 12 ; v2 [ 48 ] = 43 ; v2 [ 49 ] = 76 ; v2 [ 50 ] = 86 ; v2 [ 51 ] = 13 ; v2 [ 52 ] = 114 ; v2 [ 53 ] = 1 ; v2 [ 54 ] = 117 ; v2 [ 55 ] = 126 ; v2 [ 56 ] = 0 ; for ( i = 0 ; i < 56; ++i ) { v2 [ i ] ^= v2 [ i + 68 ] ; v2 [ i ] ^= 0 x13u ; } return printf (( int ) \" %s \\n \" ) ; } \u5728\u5176\u4e2d\u53d1\u73b0 printf((int)\"done!!! the flag is \"); ,\u90a3flag\u5c31\u5728\u8fd9\u54af\u3002 \u8fde\u89e3\u5bc6\u7b97\u6cd5\u90fd\u5199\u597d\u4e86\uff0c\u76f4\u63a5\u590d\u5236\u7c98\u8d34\u8fd0\u884c\u5c31\u5f97\u5230flag[p.s.\u4e3a\u4e86\u65b9\u4fbf\u89c2\u770b\uff0c\u6211\u5c06\u5176\u4fee\u6539\u4e3a\u957f\u5ea6\u4e3a125\u7684\u6570\u7ec4\u3002] flag\uff1azsctf{T9is_tOpic_1s_v5ry_int7resting_b6t_others_are_n0t}","title":"\u89e3\u6cd5\u4e8c"},{"location":"ctf_write_up/exams/old_bugku/reverse/#0x04","text":"\u9898\u76ee\uff1a Bugku|\u9006\u5411\u5165\u95e8 \u4e0b\u8f7d\u4e0b\u6765\u662f\u4e2aexe\u6587\u4ef6\uff0c\u8fd0\u884c\u65f6\u53d1\u73b0\u65e0\u6cd5\u8fd0\u884c\uff0c\u90a3\u5c31file\u4e00\u4e0b\uff1a 1 2 file admin . exe admin . exe : ASCII text , with very long lines , with no line terminators ASCII text,emmmmm\uff0c\u7528010 editor\u770b\u4e00\u4e0b\uff0c\u53d1\u73b0\u5176\u6587\u4ef6\u5934\u4e3a\uff1a 1 data : image / png ; base64 \u90a3\u53ef\u80fd\u662f\u4e2a\u56fe\u7247\u8f6c\u6210\u4e86base64\u7f16\u7801\uff0c\u5c06010 editor\u90a3\u4e00\u5927\u4e32\u5168\u90e8\u6254\u5230\u5728\u7ebf\u5de5\u5177\u91cc\u89e3\u4e00\u4e0b\uff0c\u5f97\u5230\u4e00\u4e2a\u4e8c\u7ef4\u7801\uff1a \u626b\u4e00\u626b\uff0c\u5f97\u5230flag\uff1a bugku{inde_9882ihsd8-0}","title":"0x04 \u9006\u5411\u5165\u95e8"},{"location":"ctf_write_up/exams/old_bugku/reverse/#0x05-love","text":"\u9898\u76ee\uff1a Bugku|love \u6253\u5f00\uff0c\u8981\u6c42\u6211\u4eec\u8f93\u5165flag\uff0c\u968f\u4fbf\u8f93\u4e00\u4e2a\uff0c\u9519\u8bef\u4f1a\u663e\u793a wrong flag! \u62d6\u8fdbIDA\u770b\u4e00\u4e0b\uff0c\u627e\u5230\u4e3b\u51fd\u6570 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 __int64 main_0 () { int v0 ; // eax const char * v1 ; // eax size_t v2 ; // eax int v3 ; // edx __int64 v4 ; // ST08_8 signed int j ; // [esp+DCh] [ebp-ACh] signed int i ; // [esp+E8h] [ebp-A0h] signed int v8 ; // [esp+E8h] [ebp-A0h] char Dest [ 108 ]; // [esp+F4h] [ebp-94h] char Str ; // [esp+160h] [ebp-28h] char v11 ; // [esp+17Ch] [ebp-Ch] for ( i = 0 ; i < 100 ; ++ i ) { if ( ( unsigned int ) i >= 0x64 ) j____report_rangecheckfailure (); Dest [ i ] = 0 ; } sub_41132F ( \"please enter the flag:\" ); sub_411375 ( \"%20s\" , & Str ); //\u8f93\u5165\uff0c\u76f8\u5f53\u4e8escanf\uff08\uff09 v0 = j_strlen ( & Str ); v1 = ( const char * ) sub_4110BE (( int ) & Str , v0 , ( int ) & v11 ); //\u5bf9Str\u8fdb\u884cbase64\u52a0\u5bc6\u540e\u8fd4\u56de\u7ed9v1 strncpy ( Dest , v1 , 40u ); //\u5c06v1\u590d\u5236\u7ed9Dest v8 = j_strlen ( Dest ); for ( j = 0 ; j < v8 ; ++ j ) //\u518d\u8fdb\u884c\u4e00\u6b21\u52a0\u5bc6\u8fd0\u7b97 Dest [ j ] += j ; v2 = j_strlen ( Dest ); if ( ! strncmp ( Dest , Str2 , v2 ) ) //\u6bd4\u8f83Dest\u548cStr2,\u76f8\u7b49\u8fd4\u56de0,\u8f93\u51faright flag\uff01 sub_41132F ( \"rigth flag! \\n \" ); else sub_41132F ( \"wrong flag! \\n \" ); HIDWORD ( v4 ) = v3 ; LODWORD ( v4 ) = 0 ; return v4 ; } Str2: 1 .data: 0041 A034 Str2 db ' e3nifIH9b_C@n@dH ' , 0 ; DATA XREF: _main_0+142\u2191o sub_4110BE\u51fd\u6570\uff1a 1 2 3 4 void * __cdecl sub_4110BE ( int a1 , int a2 , int a3 ) { return sub_411AB0 (( char * ) a1 , a2 , ( int * ) a3 ); } sub_411AB0\u51fd\u6570\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 v11 = a2 ; v7 = 0 ; while ( v11 > 0 ) { byte_41A144 [ 2 ] = 0 ; byte_41A144 [ 1 ] = 0 ; byte_41A144 [ 0 ] = 0 ; for ( i = 0 ; i < 3 && v11 >= 1 ; ++ i ) { byte_41A144 [ i ] = * v13 ; -- v11 ; ++ v13 ; } if ( ! i ) break ; switch ( i ) { case 1 : * (( _BYTE * ) Dst + v7 ) = aAbcdefghijklmn [( signed int )( unsigned __int8 ) byte_41A144 [ 0 ] >> 2 ]; v4 = v7 + 1 ; * (( _BYTE * ) Dst + v4 ++ ) = aAbcdefghijklmn [(( byte_41A144 [ 1 ] & 0xF0 ) >> 4 ) | 16 * ( byte_41A144 [ 0 ] & 3 )]; * (( _BYTE * ) Dst + v4 ++ ) = aAbcdefghijklmn [ 64 ]; * (( _BYTE * ) Dst + v4 ) = aAbcdefghijklmn [ 64 ]; v7 = v4 + 1 ; break ; case 2 : * (( _BYTE * ) Dst + v7 ) = aAbcdefghijklmn [( signed int )( unsigned __int8 ) byte_41A144 [ 0 ] >> 2 ]; v5 = v7 + 1 ; * (( _BYTE * ) Dst + v5 ++ ) = aAbcdefghijklmn [(( byte_41A144 [ 1 ] & 0xF0 ) >> 4 ) | 16 * ( byte_41A144 [ 0 ] & 3 )]; * (( _BYTE * ) Dst + v5 ++ ) = aAbcdefghijklmn [(( byte_41A144 [ 2 ] & 0xC0 ) >> 6 ) | 4 * ( byte_41A144 [ 1 ] & 0xF )]; * (( _BYTE * ) Dst + v5 ) = aAbcdefghijklmn [ 64 ]; v7 = v5 + 1 ; break ; case 3 : * (( _BYTE * ) Dst + v7 ) = aAbcdefghijklmn [( signed int )( unsigned __int8 ) byte_41A144 [ 0 ] >> 2 ]; v6 = v7 + 1 ; * (( _BYTE * ) Dst + v6 ++ ) = aAbcdefghijklmn [(( byte_41A144 [ 1 ] & 0xF0 ) >> 4 ) | 16 * ( byte_41A144 [ 0 ] & 3 )]; * (( _BYTE * ) Dst + v6 ++ ) = aAbcdefghijklmn [(( byte_41A144 [ 2 ] & 0xC0 ) >> 6 ) | 4 * ( byte_41A144 [ 1 ] & 0xF )]; * (( _BYTE * ) Dst + v6 ) = aAbcdefghijklmn [ byte_41A144 [ 2 ] & 0x3F ]; v7 = v6 + 1 ; break ; } } * (( _BYTE * ) Dst + v7 ) = 0 ; return Dst ; } \u6570\u7ec4aAbcdefghijklmn\u70b9\u8fdb\u53bb\uff0c\u6807\u51c6\u7684base64 table 1 .rdata: 00417 B30 aAbcdefghijklmn db ' ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789 +/=' \u89e3\u5bc6\u4ee3\u7801\u5982\u4e0b\uff08python\u5b9e\u73b0\uff09\uff1a 1 2 3 4 5 6 7 import base64 s = \"e3nifIH9b_C@n@dH\" flag = '' for i in range ( len ( s )): flag += chr ( ord ( s [ i ]) - i ) flag = base64 . b64decode ( flag ) print ( flag ) \u5f97\u5230 flag{i_l0ve_you}","title":"0x05 love"},{"location":"ctf_write_up/exams/old_bugku/reverse/#0x06-mountain-climbing","text":"\u9898\u76ee\uff1a Bugku|Mountain climbing \u8fd0\u884c\uff0c\u6839\u636e\u63d0\u793a\u5e94\u8be5\u662f\u901a\u8fc7\u8f93\u5165\u64cd\u4f5c\u6c42\u51fa maximum \u3002 1 input your key with your operation can get the maximum : \u7528IDA\u6253\u5f00\u540e\uff0c\u53ea\u6709\u4e00\u4e2astart\uff0c\u7a0b\u5e8f\u7528UPX\u52a0\u58f3\u4e86\uff0c\u7528 52pojie|UPX Unpacker \u5c31\u53ef\u4ee5\u8131\u58f3\uff0c\u4e5f\u53ef\u4ee5\u624b\u52a8\u8131\u58f30.0\u3002 \u5c06\u8131\u58f3\u540e\u7684\u7a0b\u5e8f\u8f7d\u5165IDA\uff0c\u627e\u5230\u4e3b\u51fd\u6570\uff0c\u5f00\u59cb\u5206\u6790\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 __int64 v1 ; // ST04_8 char v3 ; // [esp+0h] [ebp-160h] int v4 ; // [esp+D0h] [ebp-90h] int j ; // [esp+DCh] [ebp-84h] int i ; // [esp+E8h] [ebp-78h] char Str [ 104 ]; // [esp+F4h] [ebp-6Ch] srand ( 0xCu ); //\u8bbe\u7f6e\u968f\u673a\u6570\u79cd\u5b50 j_memset ( & unk_423D80 , 0 , 0x9C40u ); for ( i = 1 ; i <= 20 ; ++ i ) { for ( j = 1 ; j <= i ; ++ j ) dword_41A138 [ 100 * i + j ] = rand () % 100000 ; //\u4ea7\u751f\u968f\u673a\u6570\uff0c\u8303\u56f40~100000\uff0c\u4f46\u7531\u4e8e\u524d\u9762\u751f\u6210\u968f } //\u6570\u7684\u79cd\u5b50\u662f\u5b9a\u503c\uff0cso\uff0c\u8fd9\u91cc\u5176\u5b9e\u4e5f\u662f\u786e\u5b9a\u7684 (( void ( __cdecl * )( const char * , char )) sub_41134D )( \"input your key with your operation can get the maximum:\" , v3 ); sub_411249 ( \"%s\" , ( unsigned int ) Str ); if ( j_strlen ( Str ) == 19 ) //\u8f93\u5165\u7684\u64cd\u4f5c\u957f\u5ea6\u4e3a19 { sub_41114F ( Str ); //\u5bf9\u8f93\u5165\u7684key\u8fdb\u884c\u9884\u5904\u7406\uff0c\u5904\u7406\u540e\u4e3a\"L\"or\"R\" v4 = 0 ; j = 1 ; i = 1 ; dword_423D78 += dword_41A138 [ 101 ]; //\u5c06\u7b2c\u4e00\u884c\u7b2c\u4e00\u4e2a\u8d4b\u503c\u7ed9dword_423D78(\u7528\u6765\u8ba1\u7b97\u603b\u548c) while ( v4 < 19 ) { if ( Str [ v4 ] == 76 ) // chr(76) = 'L' { dword_423D78 += dword_41A138 [ 100 * ++ i + j ]; } else { if ( Str [ v4 ] != 82 ) // chr(82) = 'R' { (( void ( __cdecl * )( const char * , char )) sub_41134D )( \"error \\n \" , v3 ); system ( \"pause\" ); goto LABEL_18 ; } dword_423D78 += dword_41A138 [ 100 * ++ i + ++ j ]; } ++ v4 ; } sub_41134D ( \"your operation can get %d points \\n \" , dword_423D78 ); system ( \"pause\" ); } else { (( void ( __cdecl * )( const char * , char )) sub_41134D )( \"error \\n \" , v3 ); system ( \"pause\" ); } LABEL_18 : HIDWORD ( v1 ) = v0 ; LODWORD ( v1 ) = 0 ; return v1 ; } \u6839\u636e\u4e0a\u8ff0\u5206\u6790\uff0c\u53ef\u76f4\u63a5\u751f\u6210 Mountain \u8fdb\u5165 sub_41114F(Str); 1 2 3 4 int __cdecl sub_41114F () { return sub_411900 (); } 1 2 3 4 5 int sub_411900 () { sub_4110A5 ( nullsub_1 , ( char * ) sub_411994 - ( char * ) nullsub_1 , 4 ); return nullsub_1 (); } 1 2 3 4 int __cdecl sub_4110A5 ( LPCVOID lpAddress , int a2 , int a3 ) { return sub_411750 ( lpAddress , a2 , a3 ); } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 BOOL __cdecl sub_411750 ( LPCVOID lpAddress , int a2 , int a3 ) { int v3 ; // ST1C_4 DWORD flOldProtect ; // [esp+D4h] [ebp-2Ch] struct _MEMORY_BASIC_INFORMATION Buffer ; // [esp+E0h] [ebp-20h] VirtualQuery ( lpAddress , & Buffer , 0x1Cu ); VirtualProtect ( Buffer . BaseAddress , Buffer . RegionSize , 0x40u , & Buffer . Protect ); while ( 1 ) { v3 = a2 -- ; if ( ! v3 ) break ; * ( _BYTE * ) lpAddress ^= a3 ; lpAddress = ( char * ) lpAddress + 1 ; } return VirtualProtect ( Buffer . BaseAddress , Buffer . RegionSize , Buffer . Protect , & flOldProtect ); } \u4e0a\u8ff0\u5faa\u73af\u5bf9key\u8fdb\u884c\u9884\u5904\u7406\uff0c\u7c7b\u578b\u4e3abyte\uff0c\u95f4\u9694\u4e3achar\uff0c\u4e5f\u662f\u4e00\u4e2abyte\uff0c\u90a3\u5c31\u662f\u8bf4\u5bf9\u8f93\u5165\u7684key\u7684\u7b2c2,4,6.......\u62ff\u53bb\u4e0e a3 = 4 \u5f02\u6216\uff0c\u4e14\u5f02\u6216\u540e\u7684\u5b57\u7b26\u5fc5\u4e3a\"L\"or\"R\"\u3002 1 2 chr ( 76 ^ 4 ) = H chr ( 82 ^ 4 ) = V \u5219\u8f93\u5165\u7684\u4e3a\"R\"or\"L\"or\"H\"or\"V\" \u5219\u6c42\u51fa maximum \u548c key \u7684python\u4ee3\u7801\u5982\u4e0b\uff08 \u52a8\u6001\u89c4\u5212\u6cd5\u6c42\u89e3 \uff09\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 s = [[ 0 for i in xrange ( 20 )] for i in xrange ( 20 )] path = [[ 0 for i in xrange ( 20 )] for i in xrange ( 20 )] seed = 0xC def rand (): #\u751f\u6210\u968f\u673a\u6570\u7b97\u6cd5 global seed seed = seed * 0x343FD + 0x269EC3 return ( seed >> 16 ) & 0x7FFF for i in xrange ( 20 ): for j in xrange ( i + 1 ): s [ i ][ j ] = rand () % 100000 #\u751f\u6210\u968f\u673a\u6570 for i in xrange ( 19 , - 1 , - 1 ): #\u6c42\u89e3\u7b97\u6cd5 for j in xrange ( i - 1 , - 1 , - 1 ): if s [ i ][ j ] > s [ i ][ j + 1 ] : t = 'L' max = s [ i ][ j ] else : t = 'R' max = s [ i ][ j + 1 ] path [ i - 1 ][ j ] = t s [ i - 1 ][ j ] += max key = \"\" i = 0 j = 0 for i in xrange ( 19 ): #\u53d8\u6362 if path [ i ][ j ] == \"L\" : t = path [ i ][ j ] if i % 2 != 0 : t = chr ( ord ( t ) ^ 4 ) key += t else : t = path [ i ][ j ] if i % 2 != 0 : t = chr ( ord ( t ) ^ 4 ) key += t j += 1 print \"key = \" + key print \"maximum = \" + str ( s [ 0 ][ 0 ]) \u5f97\uff1a 1 2 key = RVRVRHLVRVLVLVRVLVL maxnum = 444740 \u5219flag\u4e3a zsctf{RVRVRHLVRVLVLVRVLVL} 1 2 3 \u6c42\u89e3\u7b97\u6cd5\u8bf4\u660e \uff1a maximum [ i ][ j ] \u8868\u793a\u7b2ci\u884c\u7b2cj\u5217\u7684\u6700\u5927\u6743\u503c \uff0c \u90a3\u4e48maximum [ i ][ j ] \u5305\u542b\u5b50\u95ee\u9898maximum [ i-1 ][ j-1 ] \u548cmaximum [ i-1 ][ j ] \u7684\u6700\u4f18\u89e3 \u3002 \u7136\u540e\u6211\u4eec\u5012\u63a8 , \u5219\u53ef\u5f97\u5230\u6211\u4eec\u7684\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b : maximum [ i ][ j ] = max { maximum [ i-1 ][ j ] , maximum [ i ][ j+1 ] } + maximum [ i ][ j ] ;","title":"0x06 Mountain climbing"},{"location":"ctf_write_up/exams/old_bugku/reverse/#0x07-take-the-maze","text":"\u9898\u76ee\uff1a Bugku|Take the maze \u6839\u636e\u9898\u76eemaze\u4f30\u8ba1\u662f\u4e2a\u8ff7\u5bab\u9898 \u4e0b\u8f7d\u4e0b\u6765 ConsoleApplication1.exe \uff0c\u8fd0\u884c 1 2 welcome to zsctf ! show me your key : \u8f7d\u5165IDA\uff0c\u901a\u8fc7\u5b57\u7b26\u4e32\u627e\u5230\u4e3b\u8981\u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 __int64 main_0 () { int v0 ; // ecx int v1 ; // edx __int64 v2 ; // ST00_8 signed int i ; // [esp+D0h] [ebp-48h] char key [ 24 ] ; // [esp+DCh] [ebp-3Ch] //\u672c\u6765\u8fd9\u91cc\u8bc6\u522b\u7684\u957f\u5ea6\u4e3a16,\u4f46\u770b\u5230\u4e0b\u9762\u53d1\u73b0\u957f\u5ea6\u5e94\u8be5\u662f24\uff0c\u5c31 //\u4fee\u6539\u4e86\u957f\u5ea6(\u987a\u4fbf\u628a\u540d\u5b57\u7ed9\u6539\u4e86) printf ( \" welcome to zsctf! \\n \" ) ; printf ( \" show me your key: \" ) ; scanf ( v0 , \" %s \" , key ) ; // \u8f93\u5165key if ( sub_45B1C7 () ) // \u8fd9\u91cc\u9762\u70b9\u8fdb\u53bb\u6700\u7ec8\u662f IsDebuggerPresent () != 0 j__exit ( 0 ) ; //\u662f\u4e2a\u53cd\u8c03\u8bd5\u7684\u51fd\u6570 if ( j__strlen ( key ) == 24 ) // key \u7684\u957f\u5ea6 { key [ 16 ] ^= 1 u ; // \u5bf9\u8f93\u5165key\u8fdb\u884c\u64cd\u4f5c sub_45C748 ( key ) ; for ( i = 0 ; i < 24; ++i ) { if ( ( key [ i ] < ' 0 ' || key [ i ] > ' 9 ' ) && ( key [ i ] < ' a ' || key [ i ] > ' f ' ) ) // \u5224\u65ad key \u7684\u5b57\u7b26\u662f\u5426\u5728 0 ~ 9 \u3001 a ~ f \u7684\u8303\u56f4\u5185 { key_error () ; goto LABEL_16 ; } } if ( check (( int * ) key ) ) { printf ( \" done!!!The flag is your input \\n \" ) ; sub_45D9C7 ( 4 ) ; sub_45E1B5 () ; // \u8f93\u51faflag.png } else { key_error () ; } } else { key_error () ; } LABEL_16 : HIDWORD ( v2 ) = v1 ; LODWORD ( v2 ) = 0 ; return v2 ; } \u5728\u5b57\u7b26\u4e32\u4e2d\u8fd8\u6709\u5f88\u591a printing ticket \uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 int sub_463AE0 () { FILE * v0 ; // STE0_4 printf ( \" \\n oh,wait! Take your ticket \\n \" ); printf ( \"printing ticket ... \\n \" ); sub_45D9C7 ( 2 ); printf ( \"printing ticket .... \\n \" ); sub_45D9C7 ( 2 ); printf ( \"printing ticket ..... \\n \" ); sub_45D9C7 ( 2 ); printf ( \"printing ticket ...... \\n \" ); sub_45D9C7 ( 2 ); printf ( \"printing ticket ....... \\n \" ); sub_45D9C7 ( 2 ); printf ( \"printing ticket ........ \\n \" ); sub_45D9C7 ( 2 ); printf ( \"printing ticket ......... \\n \" ); sub_45D9C7 ( 2 ); printf ( \"printing ticket .......... \\n \" ); sub_45D9C7 ( 2 ); printf ( \"printing ticket ........... \\n \" ); sub_45D9C7 ( 2 ); printf ( \"printing ticket ............ \\n \" ); sub_45D9C7 ( 2 ); printf ( \"printing ticket ............. \\n\\n\\n \" ); v0 = j__fopen ( \"flag.png\" , \"wb\" ); j__fwrite ( & unk_5409C0 , 1u , 0x78Au , v0 ); j__fclose ( v0 ); printf ( \"print finished,view the path to this file,you will get a png file,have a good time \\n\\n\\n \" ); return j__system ( \"pause\" ); } \u8fd9\u4e2a\u51fd\u6570\u6700\u540e\u662f\u4e00\u4e2a\u6587\u4ef6\u64cd\u4f5c\uff0c &unk_5409C0 \u5904\u7684\u5185\u5b58Dump\u51fa\u6765\uff0c\u957f\u5ea6\u4e3a0x78A\u3002Dump\u540e\u53d1\u73b0\u662f\u4e2a\u4e8c\u7ef4\u7801\uff1a dump-python\u811a\u672c\uff1a 1 2 3 4 5 6 fp = open ( \"ConsoleApplication1.exe\" , \"rb\" ) fp . seek ( 0xE45C0 ) data = fp . read ( 1930 ) fo = open ( \"flag.png\" , \"wb\" ) fo . write ( data ) fo . close () seek()\u7684\u5730\u5740\u7528010 editor\uff0cCtrl+F\u641c\u7d22\u540e\u627e\u5230\u3002\u5f53\u7136\u4e5f\u53ef\u4ee5\u7528010 editor\u76f4\u63a5\u590d\u5236\u51fa\u6765\u4fee\u6539\u540e\u7f00 .png \u3002 \u626b\u4e00\u626b\uff1a Congratulations! The flag is your input + \u201cDocupa\u201d \u8fd8\u662f\u4e56\u4e56\u5206\u6790check\u51fd\u6570 check\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 // \u4fee\u6539\u7c7b\u578b\uff0ckey\u662f\u4e00\u4e2a\u6307\u5411char\u7c7b\u578b\u7684\u6307\u9488 BOOL __cdecl sub_463480 ( char * key ) { int v1 ; // ST18_4 int v2 ; // ST18_4 BOOL result ; // eax int v4 ; // ST18_4 int a1 ; // [esp+D8h] [ebp-38h] int v6 ; // [esp+E4h] [ebp-2Ch] int v7 ; // [esp+F0h] [ebp-20h] int v8 ; // [esp+FCh] [ebp-14h] int v9 ; // [esp+108h] [ebp-8h] v9 = 0 ; v6 = 0 ; a1 = 0 ; while ( 2 ) { v1 = v9 ++ ; if ( v1 >= 12 ) // \u91cd\u590d12\u6b21 return a1 == 311 ; // a1 == 311 -> 1 if ( sub_45B1C7 () ) // \u53cd\u8c03\u8bd5\u51fd\u6570 j__exit ( 0 ); v2 = key [ v6 ++ ]; switch ( v2 ) // \u5224\u65ad\u7b2c\u4e00\u4e2a\u5b57\u7b26 { case '0' : v8 = 0 ; goto LABEL_12 ; case '1' : v8 = 1 ; goto LABEL_12 ; case '2' : v8 = 2 ; goto LABEL_12 ; case '3' : v8 = 3 ; goto LABEL_12 ; case '4' : v8 = 4 ; LABEL_12 : // \u5224\u65ad\u7b2c\u4e8c\u4e2a\u5b57\u7b26 v4 = key [ v6 ++ ]; switch ( v4 ) { case '5' : v7 = 5 ; goto LABEL_25 ; case '6' : v7 = 6 ; goto LABEL_25 ; case '7' : v7 = 7 ; goto LABEL_25 ; case '8' : v7 = 8 ; goto LABEL_25 ; case '9' : v7 = 9 ; goto LABEL_25 ; case 'a' : v7 = 10 ; goto LABEL_25 ; case 'b' : v7 = 11 ; goto LABEL_25 ; case 'c' : v7 = 12 ; goto LABEL_25 ; case 'd' : v7 = 13 ; goto LABEL_25 ; case 'e' : v7 = 14 ; goto LABEL_25 ; case 'f' : v7 = 15 ; LABEL_25 : // delru0123456789 // 0,2,3,6\u5bf9\u5e94\u8def\u5f84\u4e0b\uff0c\u5de6\uff0c\u53f3\uff0c\u4e0a // 56789abcdef\u5206\u522b\u5bf9\u5e94\u91cd\u590d0123456789\u6b21 switch ( op [ v8 ] ) // \u56db\u4e2a\u7ed3\u6784\u90fd\u5dee\u4e0d\u591a\uff0c\u5206\u6790\u5176\u4e2d\u4e00\u4e2a { case 'd' : sub_45CC4D ( & a1 , op [ v7 ] - '0' ); continue ; case 'l' : sub_45D0A3 (( int ) & a1 , op [ v7 ] - '0' ); continue ; case 'r' : sub_45CB0D (( int ) & a1 , op [ v7 ] - '0' ); continue ; case 'u' : sub_45D0E9 (( int ) & a1 , op [ v7 ] - '0' ); continue ; default : result = 0 ; break ; } break ; default : result = 0 ; break ; } break ; default : result = 0 ; break ; } return result ; } } \u8fd9\u91cc\u9762\u4e24\u4e2a\u5b57\u7b26\u4e3a\u4e00\u7ec4\uff0c\u8fdb\u884c\u5224\u65ad\uff0c\u6545\u53ef\u77e5\u5224\u65ad12\u6b21\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 int __cdecl sub_462D60 ( int * a1 , int a2 ) { int v2 ; // ST0C_4 int result ; // eax int i ; // [esp+E0h] [ebp-8h] for ( i = * a1 ; ; i += 26 ) { v2 = a2 -- ; if ( ! v2 ) // \u8d70\u7684\u6b21\u6570 break ; result = i / 26 ; if ( i / 26 > 10 ) // \u5224\u65ad\u662f\u5426\u8d8a\u754c return result ; result = i ; if ( dword_5404E4 [ i + 25 ] ^ dword_540004 [ i + 25 ] ) // \u5fc5\u987bdword_540548[i] == dword_540068[i]\u624d\u7ee7\u7eed,\u731c\u6d4b\u7528\u4e8e\u9650\u5b9a\u8def\u5f84\u3002\u8fd9\u91cc\u4fee\u6539\u4e86\u4e00\u4e0b\u6570\u7ec4\u957f\u5ea6\u6240\u4ee5\u5730\u5740\u53d8\u4e86 return result ; } result = ( int ) a1 ; * a1 = i ; return result ; } \u5206\u6790\u53e6\u5916\u4e09\u4e2a\u51fd\u6570\u53ef\u77e5\uff0c0 2 4 6 \u5206\u522b\u5bf9\u5e94 \u4e0b \u5de6 \u53f3 \u4e0a\uff08\u5176\u5b9e\u5bf9\u5e94\u7684\u5c31\u662f\u5355\u8bcd\u7684\u9996\u5b57\u6bcd\uff0c\u4e00\u5f00\u59cb\u6ca1\u770b\u51fa\u67650.0\uff09\uff0c\u4ee5\u53ca\u5750\u6807\u8303\u56f4\uff1a x\u2208[1, 24] y\u2208[1, 10] \u8fd8\u53ef\u4ee5\u53d1\u73b0\uff0c\u4e0a\u548c\u5de6\u5b8c\u5168\u4e0d\u80fd\u7528\uff0c\u53cd\u6b63\u6211\u662f\u6ca1\u770b\u61c2\u8fd9\u4e2a\u5f02\u6216\u5728\u5f02\u6216\u4ec0\u4e48......... \u4e0a\uff1a if ( dword_540004[i + 285] ^ dword_53FF98[i] ) 1 2 .rdata: 0053 FF98 ; int dword_53FF98[25] .rdata: 0053 FF98 dword_53FF98 dd ? ; DATA XREF: sub_464930+59\u2191r` \u5de6\uff1a if ( dword_540004[i + 310] ^ dword_53FFFC[i] ) 1 2 3 .rdata: 0053 FFFC ; int dword_53FFFC[] .rdata: 0053 FFFC dword_53FFFC dd ? ; DATA XREF: sub_4633D0+59\u2191r .rdata: 0053 FFFC _rdata ends \u91cd\u590d12\u6b21\uff0c\u9000\u51fa\u6761\u4ef6\u4e3aa1 == [311= 11 * 26 + 25]\u5e76\u4e14\u53e6\u5916\u53d1\u73b0\u662f+26\uff0c-26\uff0c++\uff0c\u2013\u2013\u731c\u6d4b\u662f26\u4e2a\u4e00\u884c \u7efc\u4e0a\uff0c \u731c\u6d4b\u8ff7\u5bab\u4e3a26*12\uff0c\u7531\u4e24\u4e2a\u6570\u7ec4\u5f02\u6216\u5f97\uff0c\u76f8\u540c\u4e3a\u5408\u6cd5\u8def\u5f84\uff0c\u4e0d\u540c\u4e3a\u975e\u6cd5\u8def\u5f84;\u6211\u4eec\u7684\u76ee\u6807\u662f\u4ece\u5de6\u4e0a\u89d2\u8d70\u5230\u53f3\u4e0a\u89d2\uff1b\u8f93\u5165\u7684key\u7b2c\u4e00\u4e2a\u5b57\u7b26\u51b3\u5b9a\u65b9\u5411\uff0c\u7b2c\u4e8c\u5b57\u7b26\u51b3\u5b9a\u6b65\u6570 \u624b\u52a8dump\u8ff7\u5bab\u5e76\u6253\u5370\uff1a \u8ff7\u5bab\uff08IDA\uff09\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 .data: 00540000 _data segment para public ' DATA ' use32 .data: 00540000 assume cs : _data .data: 00540000 ;org 540000h .data: 00540000 db 2 Ah ; * .data: 00540001 db 0 .data: 00540002 db 0 .data: 00540003 db 0 .data: 00540004 ; int dword_540004[311] .data: 00540004 dword_540004 dd 1 D4h , 14 Fh , 1 , 0 AAh , 0 E1h , 1 DFh , 167 h , 1 CFh , 1 D1h , 0 CEh , 92 h , 11 Ah , 148 h , 1 CEh , 1 ECh .data: 00540004 ; DATA XREF: sub_4644D0+59\u2191r .data: 00540004 dd 1 F0h , 1 BBh , 148 h , 1 B5h , 188 h , 69 h , 193 h , 9 Ah , 125 h , 17 Fh , 1 A6h , 0 D9h , 0 DBh , 18 Ch , 1 C0h .data: 00540004 dd 0 E3h , 110 h , 27 h , 172 h , 19 Dh , 0 A8h , 12 Ch , 24 h , 18 Bh , 0 CCh , 138 h , 143 h , 14 Eh , 0 AEh , 0 A5h .data: 00540004 dd 8 Eh , 0 D4h , 0 FEh , 171 h , 30 h , 91 h , 0 A3h , 102 h , 26 h , 168 h , 0 E0h , 0 F2h , 1 Eh , 117 h , 13 Dh .data: 00540004 dd 24 h , 0 BFh , 157 h , 121 h , 6 Bh , 29 h , 1 BBh , 109 h , 95 h , 1 BFh , 132 h , 187 h , 0 E6h , 173 h , 15 Fh .data: 00540004 dd 7 , 66 h , 18 Ah , 31 h , 82 h , 7 Ch , 55 h , 1 C7h , 101 h , 155 h , 1 D3h , 179 h , 1 B0h , 135 h , 1 BDh .data: 00540004 dd 1 B8h , 7 Fh , 144 h , 26 h , 27 h , 77 h , 53 h , 1 AEh , 2 Ah , 14 Eh , 74 h , 8 Ch , 9 Fh , 0 CDh , 1 AFh .data: 00540004 dd 1 DEh , 133 h , 0 AEh , 183 h , 16 h , 0 F6h , 1 A9h , 49 h , 10 Fh , 14 Ah , 116 h , 4 Ah , 62 h , 0 Dh , 1 E7h .data: 00540004 dd 123 h , 0 A2h , 89 h , 164 h , 10 Ch , 9 Ch , 4 Bh , 20 h , 35 h , 15 Fh , 97 h , 1 BAh , 0 E1h , 1 D3h , 1 AFh .data: 00540004 dd 6 Ch , 0 C0h , 8 , 152 h , 1 CAh , 120 h , 0 FEh , 180 h , 1 BEh , 19 Ah , 0 D2h , 103 h , 0 DEh , 59 h , 1 A7h .data: 00540004 dd 1 BFh , 7 , 1 Fh , 19 Eh , 0 A9h , 191 h , 5 Ch , 107 h , 9 Ch , 19 Bh , 168 h , 7 Dh , 26 h , 31 h , 1 E4h .data: 00540004 dd 60 h , 2 Ah , 67 h , 15 Fh , 124 h , 151 h , 177 h , 15 h , 61 h , 16 h , 15 Dh , 0 C8h , 0 A9h , 1 E5h , 11 Ah .data: 00540004 dd 0 EBh , 36 h , 1 F4h , 1 A3h , 1 B7h , 191 h , 121 h , 80 h , 1 D4h , 0 E5h , 18 Ah , 95 h , 1 E4h , 134 h , 1 A6h .data: 00540004 dd 137 h , 76 h , 13 Ah , 0 Fh , 136 h , 75 h , 1 B4h , 1 C4h , 65 h , 0 FAh , 14 h , 39 h , 12 Bh , 130 h , 0 E1h .data: 00540004 dd 9 , 159 h , 6 Eh , 1 EAh , 0 CBh , 0 C4h , 1 E6h , 5 Eh , 158 h , 18 h , 58 h , 13 Bh , 4 , 1 C1h , 0 C9h .data: 00540004 dd 1 CBh , 77 h , 51 h , 129 h , 12 Bh , 11 Ah , 5 Ah , 12 Bh , 0 Ah , 9 Eh , 1 D9h , 7 Bh , 27 h , 125 h , 27 h .data: 00540004 dd 0 B4h , 0 BFh , 9 Eh , 1 CBh , 0 C0h , 13 Ch , 185 h , 9 Dh , 0 Ch , 0 CBh , 87 h , 111 h , 38 h , 149 h , 93 h .data: 00540004 dd 16 Bh , 183 h , 178 h , 1 B2h , 172 h , 8 Fh , 159 h , 1 A1h , 17 Eh , 1 F3h , 143 h , 98 h , 16 h , 0 C8h , 3 Ah .data: 00540004 dd 1 DDh , 189 h , 186 h , 4 Ch , 0 D5h , 65 h , 0 Bh , 4 , 172 h , 16 Ah , 0 BDh , 192 h , 122 h , 100 h , 1 A8h .data: 00540004 dd 3 , 56 h , 0 B7h , 11 Eh , 59 h , 1 ABh , 76 h , 102 h , 14 Dh , 1 B1h , 0 AAh , 9 Bh , 0 DEh , 0 BEh , 1 DDh .data: 00540004 dd 14 Ah , 171 h , 0 C1h , 1 AAh , 38 h , 1 B3h , 32 h , 1 BAh , 0 Dh , 92 h , 3 Dh .data: 005404 E0 db 2 Ah ; * .data: 005404 E1 db 0 .data: 005404 E2 db 0 .data: 005404 E3 db 0 .data: 005404 E4 ; int dword_5404E4[311] .data: 005404 E4 dword_5404E4 dd 1 D5h , 14 Eh , 1 , 0 AAh , 0 E1h , 1 DFh , 167 h , 1 CEh , 1 D0h , 0 CFh , 93 h , 11 Bh , 149 h , 1 CFh , 1 EDh .data: 005404 E4 ; DATA XREF: sub_4644D0+60\u2191r .data: 005404 E4 dd 1 F1h , 1 BAh , 149 h , 1 B4h , 189 h , 68 h , 192 h , 9 Bh , 124 h , 17 Eh , 1 A6h , 0 D9h , 0 DAh , 18 Ch , 1 C1h .data: 005404 E4 dd 0 E2h , 111 h , 27 h , 173 h , 19 Ch , 0 A8h , 12 Ch , 24 h , 18 Bh , 0 CCh , 138 h , 143 h , 14 Eh , 0 AEh , 0 A5h .data: 005404 E4 dd 8 Eh , 0 D5h , 0 FFh , 170 h , 31 h , 90 h , 0 A2h , 102 h , 26 h , 168 h , 0 E1h , 0 F3h , 1 Fh , 117 h , 13 Ch .data: 005404 E4 dd 25 h , 0 BFh , 156 h , 120 h , 6 Ah , 28 h , 1 BAh , 108 h , 94 h , 1 BEh , 133 h , 187 h , 0 E7h , 172 h , 15 Eh .data: 005404 E4 dd 6 , 67 h , 18 Ah , 31 h , 83 h , 7 Dh , 54 h , 1 C6h , 100 h , 155 h , 1 D3h , 179 h , 1 B0h , 135 h , 1 BCh .data: 005404 E4 dd 1 B9h , 7 Eh , 145 h , 2 dup ( 27 h ), 77 h , 52 h , 1 AEh , 2 Bh , 14 Fh , 75 h , 8 Dh , 9 Eh , 0 CCh , 1 AFh , 1 DEh .data: 005404 E4 dd 132 h , 0 AFh , 182 h , 17 h , 0 F7h , 1 A8h , 48 h , 10 Eh , 14 Ah , 117 h , 4 Bh , 63 h , 0 Ch , 1 E6h , 122 h .data: 005404 E4 dd 0 A2h , 88 h , 165 h , 10 Dh , 9 Dh , 4 Ah , 21 h , 34 h , 15 Eh , 96 h , 1 BAh , 0 E1h , 1 D3h , 1 AFh , 6 Ch .data: 005404 E4 dd 0 C0h , 8 , 153 h , 1 CBh , 120 h , 0 FEh , 180 h , 1 BEh , 19 Ah , 0 D2h , 103 h , 0 DEh , 59 h , 1 A7h , 1 BEh .data: 005404 E4 dd 6 , 1 Eh , 19 Fh , 0 A8h , 190 h , 5 Dh , 106 h , 9 Dh , 19 Bh , 169 h , 7 Ch , 27 h , 31 h , 1 E5h , 61 h .data: 005404 E4 dd 2 Bh , 66 h , 15 Eh , 125 h , 150 h , 176 h , 14 h , 60 h , 17 h , 15 Dh , 0 C9h , 0 A8h , 1 E4h , 11 Bh , 0 EAh .data: 005404 E4 dd 37 h , 1 F5h , 1 A2h , 1 B6h , 191 h , 120 h , 81 h , 1 D5h , 0 E5h , 18 Bh , 94 h , 1 E5h , 135 h , 1 A7h , 136 h .data: 005404 E4 dd 77 h , 13 Bh , 0 Eh , 137 h , 74 h , 1 B4h , 1 C5h , 64 h , 0 FBh , 15 h , 38 h , 12 Ah , 131 h , 0 E0h , 8 .data: 005404 E4 dd 159 h , 6 Fh , 1 EBh , 0 CAh , 0 C4h , 1 E6h , 5 Eh , 158 h , 18 h , 59 h , 13 Ah , 5 , 1 C0h , 0 C8h , 1 CAh .data: 005404 E4 dd 77 h , 51 h , 128 h , 12 Ah , 11 Bh , 5 Bh , 12 Ah , 0 Bh , 9 Fh , 1 D8h , 7 Ah , 27 h , 124 h , 26 h , 0 B5h .data: 005404 E4 dd 0 BEh , 9 Fh , 1 CAh , 0 C1h , 13 Ch , 184 h , 9 Ch , 0 Dh , 0 CAh , 86 h , 110 h , 39 h , 148 h , 92 h , 16 Ah .data: 005404 E4 dd 182 h , 179 h , 1 B3h , 173 h , 8 Eh , 158 h , 1 A0h , 17 Eh , 1 F2h , 142 h , 99 h , 17 h , 0 C9h , 3 Bh , 1 DCh .data: 005404 E4 dd 189 h , 186 h , 4 Ch , 0 D5h , 65 h , 0 Bh , 4 , 172 h , 16 Ah , 0 BDh , 193 h , 123 h , 101 h , 1 A9h , 2 .data: 005404 E4 dd 57 h , 0 B6h , 11 Fh , 58 h , 1 AAh , 77 h , 103 h , 14 Ch , 1 B0h , 0 ABh , 9 Ah , 0 DFh , 0 BFh , 1 DCh , 14 Bh .data: 005404 E4 dd 170 h , 0 C0h , 1 ABh , 39 h , 1 B2h , 32 h , 1 BAh , 0 Dh , 92 h , 3 Dh \u7531\u4e8e\u731c\u6d4b\u8ff7\u5bab\u4e3a12*26=312\uff0c\u6240\u4ee5\u731c\u6d4b\u524d\u97622A\u4e5f\u5e94\u8be5\u662f\u5728\u8ff7\u5bab\u4e4b\u4e2d\uff08\u4e0d\u7136\u770b\u4e0d\u61c2\u4e24\u4e2a311\u4e2d\u95f4\u63d2\u7740\u4e00\u4e2a2A\u662f\u5e72\u561b\u7528\u7684.....\uff09 1 2 3 4 .data: 005404 E0 db 2 Ah ; * .data: 005404 E1 db 0 .data: 005404 E2 db 0 .data: 005404 E3 db 0 python\u811a\u672c\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 maze_0 = [ 42 , 468 , 335 , 1 , 170 , 225 , 479 , 359 , 463 , 465 , 206 , 146 , 282 , 328 , 462 , 492 , 496 , 443 , 328 , 437 , 392 , 105 , 403 , 154 , 293 , 383 , 422 , 217 , 219 , 396 , 448 , 227 , 272 , 39 , 370 , 413 , 168 , 300 , 36 , 395 , 204 , 312 , 323 , 334 , 174 , 165 , 142 , 212 , 254 , 369 , 48 , 145 , 163 , 258 , 38 , 360 , 224 , 242 , 30 , 279 , 317 , 36 , 191 , 343 , 289 , 107 , 41 , 443 , 265 , 149 , 447 , 306 , 391 , 230 , 371 , 351 , 7 , 102 , 394 , 49 , 130 , 124 , 85 , 455 , 257 , 341 , 467 , 377 , 432 , 309 , 445 , 440 , 127 , 324 , 38 , 39 , 119 , 83 , 430 , 42 , 334 , 116 , 140 , 159 , 205 , 431 , 478 , 307 , 174 , 387 , 22 , 246 , 425 , 73 , 271 , 330 , 278 , 74 , 98 , 13 , 487 , 291 , 162 , 137 , 356 , 268 , 156 , 75 , 32 , 53 , 351 , 151 , 442 , 225 , 467 , 431 , 108 , 192 , 8 , 338 , 458 , 288 , 254 , 384 , 446 , 410 , 210 , 259 , 222 , 89 , 423 , 447 , 7 , 31 , 414 , 169 , 401 , 92 , 263 , 156 , 411 , 360 , 125 , 38 , 49 , 484 , 96 , 42 , 103 , 351 , 292 , 337 , 375 , 21 , 97 , 22 , 349 , 200 , 169 , 485 , 282 , 235 , 54 , 500 , 419 , 439 , 401 , 289 , 128 , 468 , 229 , 394 , 149 , 484 , 308 , 422 , 311 , 118 , 314 , 15 , 310 , 117 , 436 , 452 , 101 , 250 , 20 , 57 , 299 , 304 , 225 , 9 , 345 , 110 , 490 , 203 , 196 , 486 , 94 , 344 , 24 , 88 , 315 , 4 , 449 , 201 , 459 , 119 , 81 , 297 , 299 , 282 , 90 , 299 , 10 , 158 , 473 , 123 , 39 , 293 , 39 , 180 , 191 , 158 , 459 , 192 , 316 , 389 , 157 , 12 , 203 , 135 , 273 , 56 , 329 , 147 , 363 , 387 , 376 , 434 , 370 , 143 , 345 , 417 , 382 , 499 , 323 , 152 , 22 , 200 , 58 , 477 , 393 , 390 , 76 , 213 , 101 , 11 , 4 , 370 , 362 , 189 , 402 , 290 , 256 , 424 , 3 , 86 , 183 , 286 , 89 , 427 , 118 , 258 , 333 , 433 , 170 , 155 , 222 , 190 , 477 , 330 , 369 , 193 , 426 , 56 , 435 , 50 , 442 , 13 , 146 , 61 ] maze_1 = [ 42 , 469 , 334 , 1 , 170 , 225 , 479 , 359 , 462 , 464 , 207 , 147 , 283 , 329 , 463 , 493 , 497 , 442 , 329 , 436 , 393 , 104 , 402 , 155 , 292 , 382 , 422 , 217 , 218 , 396 , 449 , 226 , 273 , 39 , 371 , 412 , 168 , 300 , 36 , 395 , 204 , 312 , 323 , 334 , 174 , 165 , 142 , 213 , 255 , 368 , 49 , 144 , 162 , 258 , 38 , 360 , 225 , 243 , 31 , 279 , 316 , 37 , 191 , 342 , 288 , 106 , 40 , 442 , 264 , 148 , 446 , 307 , 391 , 231 , 370 , 350 , 6 , 103 , 394 , 49 , 131 , 125 , 84 , 454 , 256 , 341 , 467 , 377 , 432 , 309 , 444 , 441 , 126 , 325 , 39 , 39 , 119 , 82 , 430 , 43 , 335 , 117 , 141 , 158 , 204 , 431 , 478 , 306 , 175 , 386 , 23 , 247 , 424 , 72 , 270 , 330 , 279 , 75 , 99 , 12 , 486 , 290 , 162 , 136 , 357 , 269 , 157 , 74 , 33 , 52 , 350 , 150 , 442 , 225 , 467 , 431 , 108 , 192 , 8 , 339 , 459 , 288 , 254 , 384 , 446 , 410 , 210 , 259 , 222 , 89 , 423 , 446 , 6 , 30 , 415 , 168 , 400 , 93 , 262 , 157 , 411 , 361 , 124 , 39 , 49 , 485 , 97 , 43 , 102 , 350 , 293 , 336 , 374 , 20 , 96 , 23 , 349 , 201 , 168 , 484 , 283 , 234 , 55 , 501 , 418 , 438 , 401 , 288 , 129 , 469 , 229 , 395 , 148 , 485 , 309 , 423 , 310 , 119 , 315 , 14 , 311 , 116 , 436 , 453 , 100 , 251 , 21 , 56 , 298 , 305 , 224 , 8 , 345 , 111 , 491 , 202 , 196 , 486 , 94 , 344 , 24 , 89 , 314 , 5 , 448 , 200 , 458 , 119 , 81 , 296 , 298 , 283 , 91 , 298 , 11 , 159 , 472 , 122 , 39 , 292 , 38 , 181 , 190 , 159 , 458 , 193 , 316 , 388 , 156 , 13 , 202 , 134 , 272 , 57 , 328 , 146 , 362 , 386 , 377 , 435 , 371 , 142 , 344 , 416 , 382 , 498 , 322 , 153 , 23 , 201 , 59 , 476 , 393 , 390 , 76 , 213 , 101 , 11 , 4 , 370 , 362 , 189 , 403 , 291 , 257 , 425 , 2 , 87 , 182 , 287 , 88 , 426 , 119 , 259 , 332 , 432 , 171 , 154 , 223 , 191 , 476 , 331 , 368 , 192 , 427 , 57 , 434 , 50 , 442 , 13 , 146 , 61 ] maze = \"\" for i in xrange ( len ( maze_0 )): if i % 26 == 0 : print maze maze = \"\" if maze_0 [ i ] == maze_1 [ i ] : maze += \"1 \" else : maze += \"0 \" print maze \u8ff7\u5bab\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 1 0 0 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 1 0 0 0 1 0 0 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 1 1 1 0 0 0 1 0 0 1 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 1 1 0 0 0 0 0 1 1 1 1 1 0 0 0 0 0 1 1 0 1 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 0 0 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 1 0 0 0 1 1 1 1 1 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 \u624b\u52a8\u8d70\u8ff7\u5bab\uff0c\u5f97 06360836063b0839073e0639 \u6700\u540e\u6765\u5206\u6790\u4e00\u4e0b\u4e3b\u51fd\u6570\u91cc\u7684\uff1a 1 2 key [ 16 ] ^= 1u ; // \u5bf9\u8f93\u5165\u5b57\u7b26\u8fdb\u884c\u64cd\u4f5c sub_45C748 ( key ); \u8fd9\u4e2a\u64cd\u4f5c\u51fd\u6570\u5c31\u662f\u4e2aVM\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 void __cdecl sub_4649E0 ( void * a1 ) { void * v1 ; // ST100_4 char * v2 ; // STF4_4 void * v3 ; // STE8_4 _DWORD * v4 ; // STDC_4 v1 = j__malloc ( 0x40u ); v2 = ( char * ) j__malloc ( 0x40u ); v3 = j__malloc ( 0x20u ); v4 = j__malloc ( 0x10u ); j__memset ( v2 , 0 , 0x40u ); j__memset ( v1 , 0 , 0x40u ); j__memset ( v3 , 0 , 0x20u ); j__memmove ( v1 , a1 , 24u ); * v4 = & byte_541178 ; v4 [ 1 ] = v3 ; v4 [ 2 ] = v2 + 128 ; v4 [ 3 ] = v1 ; sub_45DCD3 (( int ) v4 ); j__memmove ( a1 , v1 , 24u ); j__free ( v1 ); j__free ( v2 ); j__free ( v3 ); j__free ( v4 ); } \u76f4\u63a5\u52a8\u6001\u8c03\u8bd5\u731c\u7ed3\u679c\u5427....(\u540e\u9762\u518d\u6765\u9759\u6001\u5206\u6790\u4e00\u4e0b) \u8f93\u5165\u6d4b\u8bd5\u5b57\u7b2624\u4e2a1\u65f6\u53d1\u73b0\u8fd9\u4e2a\u51fd\u6570\u7684\u64cd\u4f5c\u5c31\u662f\u8f93\u5165\u5f02\u6216\u4f4d\u6570 \u89e3\u5bc6\u811a\u672c\uff1a 1 2 3 4 5 6 key = list ( \"06360836063b0839073e0639\" ) key [ 16 ] = chr ( ord ( key [ 16 ]) ^ 1 ) flag = \"\" for i in range ( 24 ): flag += chr ( ord ( key [ i ]) ^ i ) print flag \u5f97\uff1a 07154=518?9i<5=6!&!v$#%. \u6700\u540e\u5728\u5b57\u7b26\u4e32\u540e\u9762\u52a0\u4e0a\u524d\u9762\u7684 Docupa \u5f97flag\uff1a zsctf{07154=518?9i<5=6!&!v$#%.Docupa}","title":"0X07  Take the maze"},{"location":"ctf_write_up/exams/old_bugku/reverse/#0x08-file","text":"\u65e0\u58f3\uff0c\u8f7d\u5165IDA\uff0c\u5206\u6790\u4e3b\u51fd\u6570 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 int __cdecl main ( int argc , const char ** argv , const char ** envp ) { const char * v3 ; // rsi const char ** v5 ; // [rsp+0h] [rbp-1A0h] int i ; // [rsp+1Ch] [rbp-184h] int v7 ; // [rsp+20h] [rbp-180h] signed int j ; // [rsp+24h] [rbp-17Ch] int k ; // [rsp+28h] [rbp-178h] FILE * v10 ; // [rsp+30h] [rbp-170h] _BYTE * v11 ; // [rsp+40h] [rbp-160h] _BYTE * v12 ; // [rsp+48h] [rbp-158h] int v13 [ 64 ]; // [rsp+50h] [rbp-150h] char file [ 72 ]; // [rsp+150h] [rbp-50h] unsigned __int64 v15 ; // [rsp+198h] [rbp-8h] v5 = argv ; v15 = __readfsqword ( 0x28u ); v10 = fopen ( argv [ 1 ], \"r\" ); if ( ! v10 ) __assert_fail ( \"file!=NULL\" , \"file.c\" , 0x8Fu , \"main\" ); for ( i = 0 ; ; ++ i ) { v3 = \"%c\" ; if ( ( unsigned int ) __isoc99_fscanf ( v10 , \"%c\" , & file [ i ]) == - 1 ) // \u8bfb\u53d6\u6587\u4ef6 break ; } v7 = 0 ; v11 = ( _BYTE * ) encode ( flllag ); // base64\u52a0\u5bc6\uff0c\u4f46\u540e\u9762\u6ca1\u7528\u5230\uff0c\u611f\u89c9\u662f\u7528\u6765\u6df7\u6dc6\u7684 v12 = ( _BYTE * ) encode ( sttr_home ); // sttr_home = \"664e06226625425d562e766e042d422c072c45692d125c7e6552606954646643\" // flllag = \"flag{hello_player_come_on_hahah}\" for ( j = 0 ; j <= 63 ; j += 2 ) { v3 = ( const char * )( unsigned int ) sttr_home [ j + 1 ]; v13 [ v7 ++ ] = sub_400EB9 (( unsigned int ) sttr_home [ j ], v3 ); // \u5bf9sttr_home\u8fdb\u884c\u64cd\u4f5c\u540e\u5b58\u50a8\u5728v13\u4e2d } * v11 = encode ( flllag ); for ( k = 0 ; k < v7 ; ++ k ) { if ( * flllag != ( k ^ file [ k ] ^ v13 [ k ]) ) // \u5224\u65ad\uff0c\u53ef\u77e5file[k] = v13[k] ^ flllag[k] ^ k { printf ( \"Your file is wrong!! try again\" , v5 ); return 0 ; } ++ flllag ; } * v12 = encode ( sttr_home ); printf ( \"the flag is file's MD5 Congratulations!\" , v3 , v5 ); // flag\u6700\u540e\u4e3a\u8f93\u5165\u6587\u4ef6\u7684MD5\u503c return 0 ; } \u8fd0\u884c\u7a0b\u5e8f\u65f6\u4f20\u9012\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u4e3a\u4e00\u4e2a\u6587\u4ef6\u540d\uff0c\u5e76\u6253\u5f00\u8be5\u6587\u4ef6\u3002 \u5224\u65ad\u8bed\u53e5 if ( *flllag != (k ^ file[k] ^ v13[k]) ) \u53ef\u77e5 file[k] = v13[k] ^ flllag[k] ^ k flllag[]\u5df2\u77e5\uff0c\u63a5\u4e0b\u6765\u89e3\u51b3v13[] 1 2 3 4 5 for ( j = 0 ; j <= 63; j += 2 ) { v3 = ( const char * )( unsigned int ) sttr_home [ j + 1 ] ; v13 [ v7 ++ ] = sub_400EB9 (( unsigned int ) sttr_home [ j ], v3 ) ; } 1 2 3 4 5 6 7 __int64 __fastcall sub_400EB9 ( char a1 , char a2 ) { int v2 ; // ebx v2 = 16 * ( unsigned __int64 ) sub_400E6A (( unsigned int ) a1 ) ; return v2 + ( unsigned int ) sub_400E6A (( unsigned int ) a2 ) ; } 1 2 3 4 5 6 7 8 9 10 signed __int64 __fastcall sub_400E6A ( char a1 ) { if ( a1 > ' / ' && a1 <= ' 9 ' ) // 0 ~ 9 return ( unsigned int )( a1 - 48 ) ; // A ~ F if ( a1 > ' @ ' && a1 <= ' F ' ) return ( unsigned int )( a1 - 55 ) ; // \u4e0d\u5728a ~ f if ( a1 <= ' ` ' || a1 > ' f ' ) return 0 xFFFFFFFFLL ; return ( unsigned int )( a1 - 87 ) ; // a ~ f } \u8fd9\u91cc\u628a\u4f20\u5165\u7684\u5b57\u7b26\u5224\u65ad\u5728\u54ea\u4e2a\u533a\u95f4\uff0c\u7136\u540e\u5206\u522b\u8fd4\u56de\u4e0d\u540c\u7684\u503c\u3002 \u5219v13[]\u89e3\u5bc6\u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 sttr_home = \"664e06226625425d562e766e042d422c072c45692d125c7e6552606954646643\" v13 = [] def fuction2 ( a ): if a > 47 and a <= 57 : return a - 48 if a > 64 and a <= 70 : return a - 55 if a <= 96 or a > 102 : return 0xFFFFFFFF return a - 87 def fuction1 ( a , b ): return 16 * fuction2 ( ord ( a )) + fuction2 ( ord ( b )) for i in xrange ( 0 , len ( sttr_home ), 2 ): v13 . append ( fuction1 ( sttr_home [ i ], sttr_home [ i + 1 ])) \u5219\u53ef\u89e3\u51fafile[]\uff0c\u5e76\u5199\u5165\u6587\u4ef6file.txt: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 sttr_home = \" 664e06226625425d562e766e042d422c072c45692d125c7e6552606954646643 \" flllag = \" flag{hello_player_come_on_hahah} \" v13 = [] file = [] def fuction2 ( a ) : if a > 47 and a <= 57 : return a - 48 if a > 64 and a <= 70 : return a - 55 if a <= 96 or a > 102 : return 0 xFFFFFFFF return a - 87 def fuction1 ( a , b ) : return 16 * fuction2 ( ord ( a )) + fuction2 ( ord ( b )) for i in xrange ( 0 , len ( sttr_home ) , 2 ) : v13 . append ( fuction1 ( sttr_home [ i ], sttr_home [ i + 1 ] )) fp = open ( \" file.txt \" , \" w \" ) for i in xrange ( len ( flllag )) : file . append ( chr ( i ^ v13 [ i ] ^ ord ( flllag [ i ] ))) fp . writelines ( file ) fp . close () 1 2 . / file file . txt the flag is file ' s MD5 Congratulations ! \u987a\u4fbf\u628aMD5\u503c\u4e5f\u7b97\u51fa\u6765\uff1a 1 2 3 4 5 6 7 8 fp = open ( \"file.txt\" , \"rb\" ) md5_obj = hashlib . md5 () md5_obj . update ( fp . read ()) hash_code = md5_obj . hexdigest () md5 = str ( hash_code ) . lower () fp . close () print \"flag{\" + md5 + \"}\" \u5219\u6700\u7ec8flag\u4e3a flag{914a7b9df69eab5b74b9edb7070e53e8}","title":"0x08 file"},{"location":"ctf_write_up/exams/shiyanba/introduction/","text":"\u4e00\u4e2aRE\u840c\u65b0\u7684\u5b9e\u9a8c\u5427\u9006\u5411\u7ec3\u4e60\u4e4b\u65c5... \u55ef\uff0c\u662f\u6311\u7740\u505a\u7684\uff0c\u6709\u4e9b\u5b9e\u5728\u662f\u4e0d\u4f1a....... \u9898\u76ee\u8f83\u96be\uff0cWrite Up\u6301\u7eed\u66f4\u65b0 \u7ec3\u4e60\u5e73\u53f0: \u5b9e\u9a8c\u5427","title":"\u7b80\u4ecb"},{"location":"ctf_write_up/exams/shiyanba/reverse/","text":"\u6709\u4e00\u4e2a\u7a0b\u5e8f\u52a0\u5bc6\u5f97\u5982\u4e0b\u5bc6\u6587 \u9898\u76ee: \u6709\u4e00\u4e2a\u7a0b\u5e8f\u52a0\u5bc6\u5f97\u5982\u4e0b\u5bc6\u6587 \u770b\u5230pyc\u6587\u4ef6\u80af\u5b9a\u662f\u53cd\u7f16\u8bd1\u7684\u5566\uff0c\u8fd9\u91cc\u6211\u7528\u7684\u662f uncompyle2 \u3002\uff08\u518d\u6b21\u6012\u5938\u5b50\u7cfb\u7edf\uff09 \u5b89\u88c5\u8fc7\u7a0b\u5982\u4e0b\uff1a 1 2 3 git clone https : // github . com / wibiti / uncompyle2 cd uncompyle2 python setup . py install \u7136\u540e\u8fdb\u884c\u53cd\u7f16\u8bd1 1 uncompyle2 reverse300 . pyc > reverse300 . py \u63a5\u4e0b\u6765\u6253\u5f00reverse300.py\u67e5\u770b\u4ee3\u7801 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 # 2019.04.13 21:35:38 DST #Embedded file name: ./rev200.py import sys from hashlib import md5 import base64 from time import time from datetime import datetime UC_KEY = '123456789' def authcode ( string , operation = 'DECODE' , key = UC_KEY , expiry = 0 ): ckey_length = 4 if key == '' : key = md5 ( UC_KEY . encode ( 'utf-8' )) . hexdigest () else : key = md5 ( key . encode ( 'utf-8' )) . hexdigest () keya = md5 ( key [ 0 : 16 ] . encode ( 'utf-8' )) . hexdigest () keyb = md5 ( key [ 16 : 32 ] . encode ( 'utf-8' )) . hexdigest () if ckey_length == 0 : keyc = '' elif operation == 'DECODE' : keyc = string [ 0 : ckey_length ] elif operation == 'ENCODE' : keyc = md5 ( str ( datetime . now () . microsecond ) . encode ( 'utf-8' )) . hexdigest ()[ - ckey_length :] else : return cryptkey = keya + md5 (( keya + keyc ) . encode ( 'utf-8' )) . hexdigest () key_length = len ( cryptkey ) if operation == 'DECODE' : string = base64 . b64decode ( string [ ckey_length :]) elif operation == 'ENCODE' : if expiry == 0 : string = '0000000000' + md5 (( string + keyb ) . encode ( 'utf-8' )) . hexdigest ()[ 0 : 16 ] + string else : string = ' %10d ' % ( expiry + int ( time ())) + md5 (( string + keyb ) . encode ( 'utf-8' )) . hexdigest ()[ 0 : 16 ] + string else : return string_length = len ( string ) result = '' box = range ( 256 ) rndkey = [ 0 ] * 256 for i in range ( 256 ): rndkey [ i ] = ord ( cryptkey [ i % key_length ]) j = 0 for i in range ( 256 ): j = ( j + box [ i ] + rndkey [ i ]) % 256 tmp = box [ i ] box [ i ] = box [ j ] box [ j ] = tmp a = j = 0 for i in range ( string_length ): a = ( a + 1 ) % 256 j = ( j + box [ a ]) % 256 tmp = box [ a ] box [ a ] = box [ j ] box [ j ] = tmp result += chr ( ord ( string [ i ]) ^ box [( box [ a ] + box [ j ]) % 256 ]) if operation == 'DECODE' : if not result [ 0 : 10 ] . isdigit () or int ( result [ 0 : 10 ]) == 0 or int ( result [ 0 : 10 ]) - int ( time ()) > 0 : if result [ 10 : 26 ] == md5 ( result [ 26 :] . encode ( 'utf-8' ) + keyb ) . hexdigest ()[ 0 : 16 ]: return result [ 26 :] else : return '' else : return '' else : return keyc + base64 . b64encode ( result ) if __name__ == '__main__' : if len ( sys . argv ) < 3 : exit ( 1 ) ex = 20 for i in range ( 1 , len ( sys . argv ), 2 ): a = sys . argv [ i ] b = sys . argv [ i + 1 ] if a == '-t' : ex = int ( b ) elif a == '-e' : encoded = authcode ( b , 'ENCODE' , expiry = ex ) print encoded elif a == '-d' : decoded = authcode ( b , 'DECODE' , expiry = ex ) print decoded +++ okay decompyling reverse300 . pyc # decompiled 1 files: 1 okay, 0 failed, 0 verify failed # 2019.04.13 21:35:38 DST \u89e3\u6cd5\u4e00 \u67e5\u770b\u4e3b\u51fd\u6570\uff0c\u56e0\u4e3a\u6d89\u53ca\u89e3\u5bc6\uff0c\u90a3\u76f4\u63a5\u53bb\u770bdecode\u3002 \u770b\u5230 return ' '\u76f4\u63a5\u8fdb\u884c\u4fee\u6539\uff0c\u628a\u540e\u4e24\u4e2a return ' ' \u6539\u4e3a return result[26:], \u4fdd\u5b58\u3002 \u6838\u5fc3\u4ee3\u7801\u5982\u4e0b\uff1a 1 2 3 4 5 6 7 8 9 10 if operation == 'DECODE' : if not result [ 0 : 10 ] . isdigit () or int ( result [ 0 : 10 ]) == 0 or int ( result [ 0 : 10 ]) - int ( time ()) > 0 : if result [ 10 : 26 ] == md5 ( result [ 26 :] . encode ( 'utf-8' ) + keyb ) . hexdigest ()[ 0 : 16 ]: return result [ 26 :] else : return '' #\u4fee\u6539\u8fd9\u91cc else : return '' #\u548c\u8fd9\u91cc else : return keyc + base64 . b64encode ( result ) \u6b64\u65f6\u6267\u884c 1 python reverse300 . py - d 0 be6770IigHXZpz9hQYR1fpl15R0z9MUalmYEPhJeEN / sRklL6wQw5yQ7SAyT6tKGJNY0AxnyzS / L7zWQII = \u7136\u540e\u5c31\u6389\u5751\u91cc\u4e86 1 2 3 4 5 6 python reverse300 . py - d 0 be6770 IigHXZpz9hQYR1fpl15R0z9MUalmYEPhJeEN / sRklL6wQw5yQ7SAyT6tKGJNY0AxnyzS / L7zWQII = File \"reverse300.py\" , line 87 +++ okay decompyling reverse300 . pyc ^ SyntaxError : invalid syntax \u6539\u4e00\u4e0b\uff0c\u5b8c\u7f8e\u8fd0\u884c\uff01 1 2 3 python reverse300 . py - d 0 be 6770 IigHXZpz9hQYR1fpl15R0z9MUalmYEPhJeEN / sRklL6wQw5yQ7SAyT6tKGJNY0AxnyzS / L7zWQII = DUTCTF { 2 u0_chu_14i_d3_5hi_h3n74i } \u89e3\u6cd5\u4e8c \u5206\u6790\u52a0\u5bc6\u7b97\u6cd5\u81ea\u5df1\u5199\u51fa\u89e3\u5bc6\u7b97\u6cd5\uff1a\uff08\u8fd9\u662f\u5927\u4f6c\u6559\u7684\uff01tql@-@!\uff09 1 2 3 4 5 6 7 8 9 10 11 12 13 from hashlib import md5 from Crypto.Cipher import ARC4 UC_KEY = '123456789' key = md5 ( UC_KEY . encode ( 'utf-8' )) . hexdigest () cipher = '0be6770IigHXZpz9hQYR1fpl15R0z9MUalmYEPhJeEN/sRklL6wQw5yQ7SAyT6tKGJNY0AxnyzS/L7zWQII=' keyc = cipher [ 0 : 4 ] cipher = cipher [ 4 :] cipher = cipher . decode ( 'base64' ) keya = md5 ( key [ 0 : 16 ] . encode ( 'utf-8' )) . hexdigest () keyb = md5 ( key [ 16 : 32 ] . encode ( 'utf-8' )) . hexdigest () cryptkey = keya + md5 (( keya + keyc ) . encode ( 'utf-8' )) . hexdigest () rc4 = ARC4 . new ( cryptkey ) print ( rc4 . decrypt ( cipher )) \u603b\u7ed3 \uff1a\u8fd9\u9053\u9898\u4e0d\u96be\uff0c\u4f46\u662f\u6211\u4ece\u672a\u9047\u89c1\u8fc7\u53cd\u7f16\u8bd1pyc\u6587\u4ef6\uff0c\u4e00\u5f00\u59cb\u6709\u70b9\u61f5\uff0c\u540e\u6765\u67e5\u5230\u53ef\u4ee5\u6709 uncompyle2 \u8fd9\u79cd\u795e\u5947\u5de5\u5177\uff01Nice\uff01\u5b66\u5230\u4e86\uff01\u7136\u540e\u53bb\u95ee\u5927\u4f6c\uff0c\u5927\u4f6c\u63d0\u4f9b\u4e86\u7b2c\u4e8c\u79cd\u89e3\u6cd5\uff0c\u76f4\u63a5\u5206\u6790\u52a0\u5bc6\u8fc7\u7a0b\uff0cARC4\u548cmd5\uff0c\u7b97\u662f\u521d\u6b65\u5f00\u59cb\u63a5\u89e6\u73b0\u4ee3\u5bc6\u7801\u4e86\u5427\uff01 \uff08dalao\u8bf4\u8fd9\u4e1c\u897f\u8981\u4e00\u773c\u5c31\u80fd\u770b\u51fa\u6765\u554a\uff0c\u4efb\u91cd\u800c\u9053\u8fdc\u5440......\uff09 \u5206\u9053\u626c\u9573 \u9898\u76ee\uff1a \u5206\u9053\u626c\u9573 \u7b2c\u4e00\u6b65\uff0cfile 1 2 file rev2.exe rev2.exe: PE32 executable (console) Intel 80386, for MS Windows \u62d6\u8fdbIDA\u770b\u4e00\u4e0b\u3002 \u6838\u5fc3\u4ee3\u7801\u53ca\u5206\u6790\u5982\u4e0b\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 v3 = 0 ; memset ( & v4 , 0 , 0x74u ); v5 = 0 ; v6 = 0 ; strcpy ( v2 , \"********* * ** * ** ** * ** ** * #* ** **** ** *********\" ); v1 = & v2 [ 9 ]; //\u8fd9\u91cc\u6211\u4fee\u6539\u4e86v2\u7684\u7c7b\u578b\uff0cchar v2 -> char v2[65],\u4fbf\u4e8e\u7406\u89e3 printf ( \"Please input your key: \\n \" ); gets ( & v3 ); if ( strlen ( & v3 ) != 22 ) // key\u957f\u5ea6\u4e3a22 { printf ( \"Sorry you are wrong! \\n \" ); system ( \"pause\" ); exit ( 1 ); } v9 = 0 ; do { v8 = * ( & v3 + v9 ); if ( v8 != 'k' && v8 != 'j' && v8 != 'h' && v8 != 'l' ) // \u5e94\u8be5\u662f\u4e0a\u4e0b\u5de6\u53f3\u7684\u610f\u601d { printf ( \"Sorry you are wrong! \\n \" ); system ( \"pause\" ); exit ( 2 ); } v7 = * ( & v3 + v9 ); switch ( v7 ) { case 'h' : // \u540e\u9000\u4e00\u6b65 if ( -- v1 < v2 || v1 > & v2 [ 64 ] || ( result = ( char * ) * v1 , result == ( char * ) '*' ) ) // \u5224\u65ad\u8d8a\u754c or \u649e\u5899 { printf ( \"Sorry you are wrong! \\n \" ); system ( \"pause\" ); exit ( 3 ); } if ( * v1 == '#' ) // #\u5e94\u8be5\u662f\u51fa\u53e3\uff0c*\u5e94\u8be5\u662f\u5899 { LABEL_41 : printf ( \"Good! \\n \" ); system ( \"pause\" ); exit ( 0 ); } break ; case 'j' : v1 += 8 ; // \u524d\u8fdb\u516b\u6b65 if ( v1 < v2 || v1 > & v2 [ 64 ] || * v1 == '*' ) { printf ( \"Sorry you are wrong! \\n \" ); system ( \"pause\" ); exit ( 3 ); } result = ( char * ) * v1 ; if ( result == '#' ) goto LABEL_41 ; break ; case 'k' : v1 -= 8 ; // \u540e\u9000\u516b\u6b65 if ( v1 < v2 || v1 > & v2 [ 64 ] || * v1 == '*' ) { printf ( \"Sorry you are wrong! \\n \" ); system ( \"pause\" ); exit ( 3 ); } result = v1 ; if ( * v1 == 35 ) goto LABEL_41 ; break ; default : if ( ++ v1 < v2 || v1 > & v2 [ 64 ] || * v1 == 42 ) // \u524d\u8fdb\u4e00\u6b65 { printf ( \"Sorry you are wrong! \\n \" ); system ( \"pause\" ); exit ( 4 ); } result = v1 ; if ( * v1 == '#' ) goto LABEL_41 ; break ; } ++ v9 ; } while ( v9 < 25 ); return result ; \u51fd\u6570\u8bf4\u660e\uff1astrcpy\u662f\u4e00\u79cdC\u8bed\u8a00\u7684\u6807\u51c6\u5e93\u51fd\u6570\uff0cstrcpy\u628a\u542b\u6709'\\0'\u7ed3\u675f\u7b26\u7684\u5b57\u7b26\u4e32\u590d\u5236\u5230\u53e6\u4e00\u4e2a\u5730\u5740\u7a7a\u95f4\uff0c\u8fd4\u56de\u503c\u7684\u7c7b\u578b\u4e3achar \u3002* \u5206\u6790\u4ee3\u7801\u540e\uff0c\u8fd9\u91cc\u5c31\u4e24\u79cd\u65b9\u6cd5\uff0c\u7b2c\u4e00\u79cd\u904d\u5386\uff0c\u6c42\u51fa\u6240\u6709\u53ef\u80fd\u6027\u6765\u6c42\u51fa\u6700\u4f18\u89e3\uff0c\u4f46\u65e2\u8d39\u65f6\u53c8\u8d39\u529b\u3002 \u6545\u6211\u91c7\u53d6\u4e86\u7b2c\u4e8c\u79cd\u65b9\u6cd5\u3002 \u7531\u4e8e\u9898\u76ee strcpy(v2, \"********* * ** * ** ** * ** ** * #* ** **** ** *********\"); \u5df2\u7ecf\u5c06\u8ff7\u5bab\u7684\u5927\u81f4\u60c5\u51b5\u7ed9\u6211\u4eec\u753b\u4e86\u51fa\u6765\uff0c\u90a3\u6211\u4eec\u76f4\u63a5\u624b\u52a8\u8fd8\u539f\u8fd9\u4e2a8*8\u7684\u8ff7\u5bab\u5373\u53ef\u3002 1 2 3 4 5 6 7 8 ******** * * * * * ** * * * ** * * * #* * * **** * * * ******** \u800c\u201d j \u524d\u8fdb\u516b\u6b65\u201c\u53ef\u7406\u89e3\u4e3a\u5411\u524d\uff0c\u201d k \u540e\u9000\u516b\u6b65\u201c\u7406\u89e3\u4e3a\u5411\u540e\uff0c\u201d l \u524d\u8fdb\u4e00\u6b65\u201c\u4e3a\u5411\u53f3\uff0c\u201d h \u540e\u9000\u4e00\u6b65\u201c\u4e3a\u5411\u5de6 \u76ee\u6d4b\u89e3\u9898\u6cd5\uff1ajjjjjlllllkkkkkhhhjjjl \u5b9e\u9a8c\u89c2\u5bdf \u9898\u76ee\uff1a \u5b9e\u9a8c\u89c2\u5bdf File \u4e00\u4e0b 64\u4f4dELF\u3002 \u9898\u76ee\u53eb\u9006\u5411\u89c2\u5bdf\uff0c\u90a3\u6211\u4eec\u5c31\u76f4\u63a5IDA\u770b\u4e00\u4e0b\uff0c\u8fdb\u5165mian\u51fd\u6570\uff0c\u4ee3\u7801\u5982\u4e0b\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 if ( argc <= 1 ) { puts ( \"usage ./rev50 password\" ); } else { src = ' sedecrem ' ; //8315162673632404845LL,\u6309R\u5b57\u7b26\u8f6c\u6362\u4e00\u4e0b v6 = 0 ; v7 = 0 ; v8 = 0 ; memcpy ( & dest , & src , 9uLL ); for ( i = 0 ; i <= 999 ; ++ i ) { if ( ! strcmp ( argv [ 1 ], ( & dict )[ i ]) && ! strcmp ( & dest , ( & dict )[ i ]) ) { puts ( \"Good password ! \" ); goto LABEL_10 ; } } puts ( \"Bad ! password\" ); } LABEL_10 : puts ( & byte_40252A ); \u51fd\u6570\u8bf4\u660e\uff1a 1.memcpy():C \u5e93\u51fd\u6570 void *memcpy(void *str1, const void *str2, size_t n) \u4ece\u5b58\u50a8\u533a str2 \u590d\u5236 n \u4e2a\u5b57\u7b26\u5230\u5b58\u50a8\u533a str1\u3002 2.int strncmp ( const char * str1, const char * str2, size_t n ); \u82e5str1\u4e0estr2\u7684\u524dn\u4e2a\u5b57\u7b26\u76f8\u540c\uff0c\u5219\u8fd4\u56de0\uff1b\u82e5s1\u5927\u4e8es2\uff0c\u5219\u8fd4\u56de\u5927\u4e8e0\u7684\u503c\uff1b\u82e5s1 \u5c0f\u4e8es2\uff0c\u5219\u8fd4\u56de\u5c0f\u4e8e0\u7684\u503c\u3002 \u90a3\u8981\u6253\u5370\u51faGood password\uff0c\u90a3\u4e0d\u5c31\u5e94\u8be5\u8ba9 !strcmp(argv[1], (&dict)[i]) && !strcmp(&dest, (&dict)[i]) \u90fd\u4e3a1\u561b\uff0c\u90a3\u6211\u4eec\u8f93\u5165\u7684\u5c31\u5e94\u8be5\u548cdest\u4e00\u6837.......\u771f\u7684\u6709\u8fd9\u4e48\u7b80\u5355\u5417\uff1f 1 2 . / rev50 sedecrem Bad ! password emmmmmm\u8fd9\u91cc\u6211\u5c31\u60f3\u5230\u4e86\uff0c\u50a8\u5b58\u65b9\u5f0f\u7684\u4e0d\u540c\uff0c\u6545\u76f4\u63a5\u628a\u5b57\u7b26\u4e32\u53cd\u8f6c\u4e00\u4e0b\uff1a 1 2 . / rev50 mercedes Good password ! \u8d44\u6599: \u5927\u7aef\u5e8f\u548c\u5c0f\u7aef\u5e8f defcamp \u9898\u76ee\uff1a defcamp File\u4e00\u4e0b\uff0c64\u4f4d ELF 1 2 $ file r200.bak r200.bak: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/l, for GNU/Linux 2.6.24, BuildID[sha1]=22e68980e521b43c90688ed0693df78150b10211, stripped \u8fd0\u884c\u4e00\u4e0b\uff0c\u8981\u6c42\u6211\u4eec\u8f93\u5165password 1 2 $ ./r200.bak Enter the password: \u62d6\u8fdbIDA\uff0c\u8ffd\u8e2a\u5b57\u7b26\u4e32\u5230main\u51fd\u6570\uff0c\u63d0\u53d6\u4ee3\u7801\uff1a \uff08\u4e3a\u4e86\u4fbf\u4e8e\u89c2\u770b\uff0c\u6211\u4fee\u6539\u4e86\u51fd\u6570\u540d\uff09 1 2 3 4 5 6 7 8 9 10 11 12 13 printf ( \"Enter the password: \" , a2 , a3 ); if ( ! fgets ( & s , 7 , stdin ) ) return 0LL ; if ( ( unsigned int ) check_password (( __int64 ) & s ) ) { puts ( \"Incorrect password!\" ); result = 1LL ; } else { puts ( \"Nice!\" ); result = 0LL ; } \u90a3\u91cd\u70b9\u5e94\u8be5\u5c31\u5728check_password()\u91cc\u54af\uff0c\u8fdb\u53bb,\uff0c\u4ee3\u7801\u5982\u4e0b 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 v6 = 0LL ; v7 = 0LL ; v8 = 0LL ; v9 [ 0 ] = 5 ; v9 [ 1 ] = 2 ; v9 [ 2 ] = 7 ; v9 [ 3 ] = 2 ; v9 [ 4 ] = 5 ; v9 [ 5 ] = 6 ; for ( i = 0 ; i <= 5 ; ++ i ) { v5 = qword_601080 ; v4 = 0 ; while ( v5 ) { if ( * ( v5 + 4 ) == * ( i + a1 ) ) { v4 = * v5 ; break ; } v5 = * ( v5 + 8 ); } * ( & v6 + i ) = v4 ; } for ( j = 0 ; j <= 5 ; ++ j ) { if ( * ( & v6 + j ) != v9 [ j ] ) return 1LL ; } return 0LL ; } \u7406\u89e3\u4e00\u4e0b\uff0c\u8f93\u5165\u7684\u503c\u52a0\u5bc6\u4e4b\u540e\u8981\u7b49\u4e8e5\uff0c2\uff0c7\uff0c2\uff0c5\uff0c6\uff0c\u6211\u4eec\u7406\u89e3\u4e00\u4e0b\u89e3\u5bc6\u7b97\u6cd5\u5c31\u53ef\u4ee5\u5f97\u5230flag\u4e86\u3002 \u770b\u5230v5=qword 60180,\u800cqword 60180\u5728\u4e3b\u51fd\u6570\u4e5f\u51fa\u73b0\u8fc7\uff0c\u8fc7\u53bb\u4e3b\u51fd\u6570\u770b\u4e00\u4e0b: 1 2 3 4 5 6 7 8 9 for ( i = 1 ; i <= 10 ; ++ i ) { v3 = malloc ( 0x10uLL ); * v3 = i ; * ( v3 + 4 ) = * v3 + 109 ; a3 = qword_601080 ; * ( v3 + 1 ) = qword_601080 ; qword_601080 = v3 ; } \u6211\u4eec\u770b\u5230\u8868\u4e2d\u5171\u670910\u4e2a\u5143\u7d20\uff0c\u6bcf\u4e2a\u5143\u7d2016\u4e2a\u5b57\u8282\uff0c\u5bf9\u5e94\u7684\u503c\u6bcf\u4e2a\u90fd\u8981\u52a0\u4e0a109\uff0c\u90a3\u53cd\u8fc7\u6765\u60f3\uff0c\u6211\u4eec\u5bf9\u5e94\u7684\u5c31\u5e94\u8be5\u662f114\uff0c111\uff0c116\uff0c111\uff0c114\uff0c115,ASCII\u7801\u8f6c\u6362\u4e00\u4e0b\u5f97rotors 1 2 3 $ ./r200.bak Enter the password: rotors Nice! \u7ed3\u679c\u5c31\u5f88Nice\uff01 debug \u9898\u76ee\uff1a debug32 \u62ff\u5230\u9898\uff0c\u5148file\u4e00\u4e0b 1 debug32: ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), dynamically linked, interpreter /lib/ld-, for GNU/Linux 2.6.32, BuildID[sha1]=46b87dea3b50c74ec8cde885ccc9a4d9e5e260f3, stripped \u662f\u4e2a32\u4f4d\u7684ELF\u6587\u4ef6\uff0c\u8fd0\u884c\u4e00\u4e0b ./debug32 ,\u4ec0\u4e48\u90fd\u6ca1\u6709\uff1f \u62c9\u8fdbIDA\u67e5\u770b\u4e00\u4e0b\uff0c\u53d1\u73b0main\u51fd\u6570\u4e2d\u8fd8\u771f\u7684\u4ec0\u4e48\u90fd\u6ca1\u6709 1 2 3 int __cdecl main (){ return 0 ; } shift+f12(\u67e5\u627e\u6240\u6709\u5b57\u7b26\u4e32)\uff0c\u53d1\u73b0 .rodata:080485F0 0000000E C Printing flag \uff0c\u4e8e\u662f\u8ddf\u8e2a\u627e\u5230sub 804849B(); sub 804849B()\u8fd9\u4e2a\u51fd\u6570\u4e2d\u662f\u5411\u5c4f\u5e55\u4e2d\u6253\u5370flag\u7684\uff0c\u89e3\u9898\u65b9\u6cd5\u6709\u4e8c\uff1a \u4e00 . \u76f4\u63a5\u590d\u5236sub_824849B()\u51fd\u6570\u4ee3\u7801\u5230VSCode\uff0c\u6dfb\u52a0\u5934\u6587\u4ef6\u548cmian()\uff0c\u8fd9\u91cc\u6ce8\u610f\uff0c\u5728\u6700\u540e\u8981\u4f7f\u5176\u505c\u6b62\uff0c\u6545\u5728\u6700\u540e v3[5] = 0 ,\u4ee3\u7801\u5982\u4e0b\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 #include <stdio.h> int main () { int i , j ; unsigned int v3 [ 5 ]; v3 [ 0 ] = 377943446 ; v3 [ 1 ] = 1447490871 ; v3 [ 2 ] = 1987467046 ; v3 [ 3 ] = 938813270 ; v3 [ 4 ] = 3334903478 ; for ( i = 0 ; i <= 4 ; ++ i ) { for ( j = v3 [ i ]; j ; j >>= 8 ) putchar (( char )((( unsigned __int8 ) j >> 4 ) | 16 * j )); } return 0 ; } \u4e8c.main\u51fd\u6570\u4e2d\u8c03\u7528\u8fd9\u4e2a\u51fd\u6570\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u7528GDB\u6765\u4f7f\u4e3b\u51fd\u6570\u8c03\u7528\u8fd9\u4e2a\u6253\u5370flag\u7684\u8fd9\u4e2a\u51fd\u6570 \uff08z\u8fd9\u91cc\u53c2\u8003\u4e86\u7f51\u4e0a\u5927\u4f6c\u7684writeup0.0\uff09 \u8c03\u8bd5\u8fc7\u7a0b \u9996\u5148\u52a0\u8f7d\u6587\u4ef6 1 gdb debug32 \u7136\u540e\u518d\u4e3b\u51fd\u6570\u8bbe\u7f6e\u65ad\u70b9 1 2 gdb - peda $ break __libc_start_main Breakpoint 1 at 0 x8048370 \u7136\u540e\u8fd0\u884c\u8be5\u7a0b\u5e8f 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 gdb-peda$ run Starting program: /root/file/debug32 [----------------------------------registers-----------------------------------] EAX: 0xf7ffd918 --> 0x0 EBX: 0xf7ffd000 --> 0x22f3c ECX: 0xffffd154 --> 0xffffd32b (\"/root/file/debug32\") EDX: 0xf7fe9880 (push ebp) ESI: 0x1 EDI: 0x80483a0 (xor ebp,ebp) EBP: 0x0 ESP: 0xffffd12c --> 0x80483c1 (hlt) EIP: 0xf7e1c540 (<__libc_start_main>: call 0xf7f21289) EFLAGS: 0x292 (carry parity ADJUST zero SIGN trap INTERRUPT direction overflow) [-------------------------------------code-------------------------------------] 0xf7e1c53a: xchg ax,ax 0xf7e1c53c: xchg ax,ax 0xf7e1c53e: xchg ax,ax => 0xf7e1c540 <__libc_start_main>: call 0xf7f21289 0xf7e1c545 <__libc_start_main+5>: add eax,0x197abb 0xf7e1c54a <__libc_start_main+10>: push ebp 0xf7e1c54b <__libc_start_main+11>: push edi 0xf7e1c54c <__libc_start_main+12>: push esi No argument [------------------------------------stack-------------------------------------] 0000| 0xffffd12c --> 0x80483c1 (hlt) 0004| 0xffffd130 --> 0x804855a (push ebp) 0008| 0xffffd134 --> 0x1 0012| 0xffffd138 --> 0xffffd154 --> 0xffffd32b (\"/root/file/debug32\") 0016| 0xffffd13c --> 0x8048570 (push ebp) 0020| 0xffffd140 --> 0x80485d0 (repz ret) 0024| 0xffffd144 --> 0xf7fe9880 (push ebp) 0028| 0xffffd148 --> 0xffffd14c --> 0xf7ffd918 --> 0x0 [------------------------------------------------------------------------------] Legend: code, data, rodata, value Breakpoint 1, 0xf7e1c540 in __libc_start_main () from /lib32/libc.so.6 gdb-peda$ \u4fee\u6539EIP\u7684\u503c\u4e3a\u8fd9\u4e2a\u51fd\u6570\u7684\u8d77\u5730\u5740 1 gdb-peda$ set $eip = 0x804849b \u7136\u540e\u7ee7\u7eed\u8fd0\u884c\u7a0b\u5e8f\u5373\u5f97flag 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 gdb-peda$ c Continuing. Printing flag i_has_debugger_skill Program received signal SIGSEGV, Segmentation fault. [----------------------------------registers-----------------------------------] EAX: 0x0 EBX: 0xf7ffd000 --> 0x22f3c ECX: 0xf7fb5870 --> 0x0 EDX: 0xa ('\\n') ESI: 0x1 EDI: 0x80483a0 (xor ebp,ebp) EBP: 0x0 ESP: 0xffffd130 --> 0x804855a (push ebp) EIP: 0x80483c1 (hlt) EFLAGS: 0x10246 (carry PARITY adjust ZERO sign trap INTERRUPT direction overflow) [-------------------------------------code-------------------------------------] 0x80483b6: push esi 0x80483b7: push 0x804855a 0x80483bc: call 0x8048370 <__libc_start_main@plt> => 0x80483c1: hlt 0x80483c2: xchg ax,ax 0x80483c4: xchg ax,ax 0x80483c6: xchg ax,ax 0x80483c8: xchg ax,ax [------------------------------------stack-------------------------------------] 0000| 0xffffd130 --> 0x804855a (push ebp) 0004| 0xffffd134 --> 0x1 0008| 0xffffd138 --> 0xffffd154 --> 0xffffd32b (\"/root/file/debug32\") 0012| 0xffffd13c --> 0x8048570 (push ebp) 0016| 0xffffd140 --> 0x80485d0 (repz ret) 0020| 0xffffd144 --> 0xf7fe9880 (push ebp) 0024| 0xffffd148 --> 0xffffd14c --> 0xf7ffd918 --> 0x0 0028| 0xffffd14c --> 0xf7ffd918 --> 0x0 [------------------------------------------------------------------------------] Legend: code, data, rodata, value Stopped reason: SIGSEGV 0x080483c1 in ?? () flag\uff1aflag{i has debugger_skill} \u603b\u7ed3\uff1a\u7b2c\u4e00\u79cd\u65b9\u6cd5\u7a0d\u5fae\u6709\u70b9\u6ca1\u6709\u6280\u672f\u542b\u91cf\uff0c\u51fa\u9898\u4eba\u610f\u601d\u5e94\u8be5\u662f\u5e0c\u671b\u6211\u4eec\u8fd0\u7528\u7b2c\u4e8c\u79cd\u65b9\u5f0f\u6765\u89e3\u51b3\uff0c\u8fd9\u91cc\u6211\u4e5f\u5b66\u5230\u4e00\u79cd\u65b0\u7684\u5de5\u5177 GDB \u3002","title":"Reverse"},{"location":"ctf_write_up/exams/shiyanba/reverse/#_1","text":"\u9898\u76ee: \u6709\u4e00\u4e2a\u7a0b\u5e8f\u52a0\u5bc6\u5f97\u5982\u4e0b\u5bc6\u6587 \u770b\u5230pyc\u6587\u4ef6\u80af\u5b9a\u662f\u53cd\u7f16\u8bd1\u7684\u5566\uff0c\u8fd9\u91cc\u6211\u7528\u7684\u662f uncompyle2 \u3002\uff08\u518d\u6b21\u6012\u5938\u5b50\u7cfb\u7edf\uff09 \u5b89\u88c5\u8fc7\u7a0b\u5982\u4e0b\uff1a 1 2 3 git clone https : // github . com / wibiti / uncompyle2 cd uncompyle2 python setup . py install \u7136\u540e\u8fdb\u884c\u53cd\u7f16\u8bd1 1 uncompyle2 reverse300 . pyc > reverse300 . py \u63a5\u4e0b\u6765\u6253\u5f00reverse300.py\u67e5\u770b\u4ee3\u7801 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 # 2019.04.13 21:35:38 DST #Embedded file name: ./rev200.py import sys from hashlib import md5 import base64 from time import time from datetime import datetime UC_KEY = '123456789' def authcode ( string , operation = 'DECODE' , key = UC_KEY , expiry = 0 ): ckey_length = 4 if key == '' : key = md5 ( UC_KEY . encode ( 'utf-8' )) . hexdigest () else : key = md5 ( key . encode ( 'utf-8' )) . hexdigest () keya = md5 ( key [ 0 : 16 ] . encode ( 'utf-8' )) . hexdigest () keyb = md5 ( key [ 16 : 32 ] . encode ( 'utf-8' )) . hexdigest () if ckey_length == 0 : keyc = '' elif operation == 'DECODE' : keyc = string [ 0 : ckey_length ] elif operation == 'ENCODE' : keyc = md5 ( str ( datetime . now () . microsecond ) . encode ( 'utf-8' )) . hexdigest ()[ - ckey_length :] else : return cryptkey = keya + md5 (( keya + keyc ) . encode ( 'utf-8' )) . hexdigest () key_length = len ( cryptkey ) if operation == 'DECODE' : string = base64 . b64decode ( string [ ckey_length :]) elif operation == 'ENCODE' : if expiry == 0 : string = '0000000000' + md5 (( string + keyb ) . encode ( 'utf-8' )) . hexdigest ()[ 0 : 16 ] + string else : string = ' %10d ' % ( expiry + int ( time ())) + md5 (( string + keyb ) . encode ( 'utf-8' )) . hexdigest ()[ 0 : 16 ] + string else : return string_length = len ( string ) result = '' box = range ( 256 ) rndkey = [ 0 ] * 256 for i in range ( 256 ): rndkey [ i ] = ord ( cryptkey [ i % key_length ]) j = 0 for i in range ( 256 ): j = ( j + box [ i ] + rndkey [ i ]) % 256 tmp = box [ i ] box [ i ] = box [ j ] box [ j ] = tmp a = j = 0 for i in range ( string_length ): a = ( a + 1 ) % 256 j = ( j + box [ a ]) % 256 tmp = box [ a ] box [ a ] = box [ j ] box [ j ] = tmp result += chr ( ord ( string [ i ]) ^ box [( box [ a ] + box [ j ]) % 256 ]) if operation == 'DECODE' : if not result [ 0 : 10 ] . isdigit () or int ( result [ 0 : 10 ]) == 0 or int ( result [ 0 : 10 ]) - int ( time ()) > 0 : if result [ 10 : 26 ] == md5 ( result [ 26 :] . encode ( 'utf-8' ) + keyb ) . hexdigest ()[ 0 : 16 ]: return result [ 26 :] else : return '' else : return '' else : return keyc + base64 . b64encode ( result ) if __name__ == '__main__' : if len ( sys . argv ) < 3 : exit ( 1 ) ex = 20 for i in range ( 1 , len ( sys . argv ), 2 ): a = sys . argv [ i ] b = sys . argv [ i + 1 ] if a == '-t' : ex = int ( b ) elif a == '-e' : encoded = authcode ( b , 'ENCODE' , expiry = ex ) print encoded elif a == '-d' : decoded = authcode ( b , 'DECODE' , expiry = ex ) print decoded +++ okay decompyling reverse300 . pyc # decompiled 1 files: 1 okay, 0 failed, 0 verify failed # 2019.04.13 21:35:38 DST","title":"\u6709\u4e00\u4e2a\u7a0b\u5e8f\u52a0\u5bc6\u5f97\u5982\u4e0b\u5bc6\u6587"},{"location":"ctf_write_up/exams/shiyanba/reverse/#_2","text":"\u67e5\u770b\u4e3b\u51fd\u6570\uff0c\u56e0\u4e3a\u6d89\u53ca\u89e3\u5bc6\uff0c\u90a3\u76f4\u63a5\u53bb\u770bdecode\u3002 \u770b\u5230 return ' '\u76f4\u63a5\u8fdb\u884c\u4fee\u6539\uff0c\u628a\u540e\u4e24\u4e2a return ' ' \u6539\u4e3a return result[26:], \u4fdd\u5b58\u3002 \u6838\u5fc3\u4ee3\u7801\u5982\u4e0b\uff1a 1 2 3 4 5 6 7 8 9 10 if operation == 'DECODE' : if not result [ 0 : 10 ] . isdigit () or int ( result [ 0 : 10 ]) == 0 or int ( result [ 0 : 10 ]) - int ( time ()) > 0 : if result [ 10 : 26 ] == md5 ( result [ 26 :] . encode ( 'utf-8' ) + keyb ) . hexdigest ()[ 0 : 16 ]: return result [ 26 :] else : return '' #\u4fee\u6539\u8fd9\u91cc else : return '' #\u548c\u8fd9\u91cc else : return keyc + base64 . b64encode ( result ) \u6b64\u65f6\u6267\u884c 1 python reverse300 . py - d 0 be6770IigHXZpz9hQYR1fpl15R0z9MUalmYEPhJeEN / sRklL6wQw5yQ7SAyT6tKGJNY0AxnyzS / L7zWQII = \u7136\u540e\u5c31\u6389\u5751\u91cc\u4e86 1 2 3 4 5 6 python reverse300 . py - d 0 be6770 IigHXZpz9hQYR1fpl15R0z9MUalmYEPhJeEN / sRklL6wQw5yQ7SAyT6tKGJNY0AxnyzS / L7zWQII = File \"reverse300.py\" , line 87 +++ okay decompyling reverse300 . pyc ^ SyntaxError : invalid syntax \u6539\u4e00\u4e0b\uff0c\u5b8c\u7f8e\u8fd0\u884c\uff01 1 2 3 python reverse300 . py - d 0 be 6770 IigHXZpz9hQYR1fpl15R0z9MUalmYEPhJeEN / sRklL6wQw5yQ7SAyT6tKGJNY0AxnyzS / L7zWQII = DUTCTF { 2 u0_chu_14i_d3_5hi_h3n74i }","title":"\u89e3\u6cd5\u4e00"},{"location":"ctf_write_up/exams/shiyanba/reverse/#_3","text":"\u5206\u6790\u52a0\u5bc6\u7b97\u6cd5\u81ea\u5df1\u5199\u51fa\u89e3\u5bc6\u7b97\u6cd5\uff1a\uff08\u8fd9\u662f\u5927\u4f6c\u6559\u7684\uff01tql@-@!\uff09 1 2 3 4 5 6 7 8 9 10 11 12 13 from hashlib import md5 from Crypto.Cipher import ARC4 UC_KEY = '123456789' key = md5 ( UC_KEY . encode ( 'utf-8' )) . hexdigest () cipher = '0be6770IigHXZpz9hQYR1fpl15R0z9MUalmYEPhJeEN/sRklL6wQw5yQ7SAyT6tKGJNY0AxnyzS/L7zWQII=' keyc = cipher [ 0 : 4 ] cipher = cipher [ 4 :] cipher = cipher . decode ( 'base64' ) keya = md5 ( key [ 0 : 16 ] . encode ( 'utf-8' )) . hexdigest () keyb = md5 ( key [ 16 : 32 ] . encode ( 'utf-8' )) . hexdigest () cryptkey = keya + md5 (( keya + keyc ) . encode ( 'utf-8' )) . hexdigest () rc4 = ARC4 . new ( cryptkey ) print ( rc4 . decrypt ( cipher )) \u603b\u7ed3 \uff1a\u8fd9\u9053\u9898\u4e0d\u96be\uff0c\u4f46\u662f\u6211\u4ece\u672a\u9047\u89c1\u8fc7\u53cd\u7f16\u8bd1pyc\u6587\u4ef6\uff0c\u4e00\u5f00\u59cb\u6709\u70b9\u61f5\uff0c\u540e\u6765\u67e5\u5230\u53ef\u4ee5\u6709 uncompyle2 \u8fd9\u79cd\u795e\u5947\u5de5\u5177\uff01Nice\uff01\u5b66\u5230\u4e86\uff01\u7136\u540e\u53bb\u95ee\u5927\u4f6c\uff0c\u5927\u4f6c\u63d0\u4f9b\u4e86\u7b2c\u4e8c\u79cd\u89e3\u6cd5\uff0c\u76f4\u63a5\u5206\u6790\u52a0\u5bc6\u8fc7\u7a0b\uff0cARC4\u548cmd5\uff0c\u7b97\u662f\u521d\u6b65\u5f00\u59cb\u63a5\u89e6\u73b0\u4ee3\u5bc6\u7801\u4e86\u5427\uff01 \uff08dalao\u8bf4\u8fd9\u4e1c\u897f\u8981\u4e00\u773c\u5c31\u80fd\u770b\u51fa\u6765\u554a\uff0c\u4efb\u91cd\u800c\u9053\u8fdc\u5440......\uff09","title":"\u89e3\u6cd5\u4e8c"},{"location":"ctf_write_up/exams/shiyanba/reverse/#_4","text":"\u9898\u76ee\uff1a \u5206\u9053\u626c\u9573 \u7b2c\u4e00\u6b65\uff0cfile 1 2 file rev2.exe rev2.exe: PE32 executable (console) Intel 80386, for MS Windows \u62d6\u8fdbIDA\u770b\u4e00\u4e0b\u3002 \u6838\u5fc3\u4ee3\u7801\u53ca\u5206\u6790\u5982\u4e0b\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 v3 = 0 ; memset ( & v4 , 0 , 0x74u ); v5 = 0 ; v6 = 0 ; strcpy ( v2 , \"********* * ** * ** ** * ** ** * #* ** **** ** *********\" ); v1 = & v2 [ 9 ]; //\u8fd9\u91cc\u6211\u4fee\u6539\u4e86v2\u7684\u7c7b\u578b\uff0cchar v2 -> char v2[65],\u4fbf\u4e8e\u7406\u89e3 printf ( \"Please input your key: \\n \" ); gets ( & v3 ); if ( strlen ( & v3 ) != 22 ) // key\u957f\u5ea6\u4e3a22 { printf ( \"Sorry you are wrong! \\n \" ); system ( \"pause\" ); exit ( 1 ); } v9 = 0 ; do { v8 = * ( & v3 + v9 ); if ( v8 != 'k' && v8 != 'j' && v8 != 'h' && v8 != 'l' ) // \u5e94\u8be5\u662f\u4e0a\u4e0b\u5de6\u53f3\u7684\u610f\u601d { printf ( \"Sorry you are wrong! \\n \" ); system ( \"pause\" ); exit ( 2 ); } v7 = * ( & v3 + v9 ); switch ( v7 ) { case 'h' : // \u540e\u9000\u4e00\u6b65 if ( -- v1 < v2 || v1 > & v2 [ 64 ] || ( result = ( char * ) * v1 , result == ( char * ) '*' ) ) // \u5224\u65ad\u8d8a\u754c or \u649e\u5899 { printf ( \"Sorry you are wrong! \\n \" ); system ( \"pause\" ); exit ( 3 ); } if ( * v1 == '#' ) // #\u5e94\u8be5\u662f\u51fa\u53e3\uff0c*\u5e94\u8be5\u662f\u5899 { LABEL_41 : printf ( \"Good! \\n \" ); system ( \"pause\" ); exit ( 0 ); } break ; case 'j' : v1 += 8 ; // \u524d\u8fdb\u516b\u6b65 if ( v1 < v2 || v1 > & v2 [ 64 ] || * v1 == '*' ) { printf ( \"Sorry you are wrong! \\n \" ); system ( \"pause\" ); exit ( 3 ); } result = ( char * ) * v1 ; if ( result == '#' ) goto LABEL_41 ; break ; case 'k' : v1 -= 8 ; // \u540e\u9000\u516b\u6b65 if ( v1 < v2 || v1 > & v2 [ 64 ] || * v1 == '*' ) { printf ( \"Sorry you are wrong! \\n \" ); system ( \"pause\" ); exit ( 3 ); } result = v1 ; if ( * v1 == 35 ) goto LABEL_41 ; break ; default : if ( ++ v1 < v2 || v1 > & v2 [ 64 ] || * v1 == 42 ) // \u524d\u8fdb\u4e00\u6b65 { printf ( \"Sorry you are wrong! \\n \" ); system ( \"pause\" ); exit ( 4 ); } result = v1 ; if ( * v1 == '#' ) goto LABEL_41 ; break ; } ++ v9 ; } while ( v9 < 25 ); return result ; \u51fd\u6570\u8bf4\u660e\uff1astrcpy\u662f\u4e00\u79cdC\u8bed\u8a00\u7684\u6807\u51c6\u5e93\u51fd\u6570\uff0cstrcpy\u628a\u542b\u6709'\\0'\u7ed3\u675f\u7b26\u7684\u5b57\u7b26\u4e32\u590d\u5236\u5230\u53e6\u4e00\u4e2a\u5730\u5740\u7a7a\u95f4\uff0c\u8fd4\u56de\u503c\u7684\u7c7b\u578b\u4e3achar \u3002* \u5206\u6790\u4ee3\u7801\u540e\uff0c\u8fd9\u91cc\u5c31\u4e24\u79cd\u65b9\u6cd5\uff0c\u7b2c\u4e00\u79cd\u904d\u5386\uff0c\u6c42\u51fa\u6240\u6709\u53ef\u80fd\u6027\u6765\u6c42\u51fa\u6700\u4f18\u89e3\uff0c\u4f46\u65e2\u8d39\u65f6\u53c8\u8d39\u529b\u3002 \u6545\u6211\u91c7\u53d6\u4e86\u7b2c\u4e8c\u79cd\u65b9\u6cd5\u3002 \u7531\u4e8e\u9898\u76ee strcpy(v2, \"********* * ** * ** ** * ** ** * #* ** **** ** *********\"); \u5df2\u7ecf\u5c06\u8ff7\u5bab\u7684\u5927\u81f4\u60c5\u51b5\u7ed9\u6211\u4eec\u753b\u4e86\u51fa\u6765\uff0c\u90a3\u6211\u4eec\u76f4\u63a5\u624b\u52a8\u8fd8\u539f\u8fd9\u4e2a8*8\u7684\u8ff7\u5bab\u5373\u53ef\u3002 1 2 3 4 5 6 7 8 ******** * * * * * ** * * * ** * * * #* * * **** * * * ******** \u800c\u201d j \u524d\u8fdb\u516b\u6b65\u201c\u53ef\u7406\u89e3\u4e3a\u5411\u524d\uff0c\u201d k \u540e\u9000\u516b\u6b65\u201c\u7406\u89e3\u4e3a\u5411\u540e\uff0c\u201d l \u524d\u8fdb\u4e00\u6b65\u201c\u4e3a\u5411\u53f3\uff0c\u201d h \u540e\u9000\u4e00\u6b65\u201c\u4e3a\u5411\u5de6 \u76ee\u6d4b\u89e3\u9898\u6cd5\uff1ajjjjjlllllkkkkkhhhjjjl","title":"\u5206\u9053\u626c\u9573"},{"location":"ctf_write_up/exams/shiyanba/reverse/#_5","text":"\u9898\u76ee\uff1a \u5b9e\u9a8c\u89c2\u5bdf File \u4e00\u4e0b 64\u4f4dELF\u3002 \u9898\u76ee\u53eb\u9006\u5411\u89c2\u5bdf\uff0c\u90a3\u6211\u4eec\u5c31\u76f4\u63a5IDA\u770b\u4e00\u4e0b\uff0c\u8fdb\u5165mian\u51fd\u6570\uff0c\u4ee3\u7801\u5982\u4e0b\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 if ( argc <= 1 ) { puts ( \"usage ./rev50 password\" ); } else { src = ' sedecrem ' ; //8315162673632404845LL,\u6309R\u5b57\u7b26\u8f6c\u6362\u4e00\u4e0b v6 = 0 ; v7 = 0 ; v8 = 0 ; memcpy ( & dest , & src , 9uLL ); for ( i = 0 ; i <= 999 ; ++ i ) { if ( ! strcmp ( argv [ 1 ], ( & dict )[ i ]) && ! strcmp ( & dest , ( & dict )[ i ]) ) { puts ( \"Good password ! \" ); goto LABEL_10 ; } } puts ( \"Bad ! password\" ); } LABEL_10 : puts ( & byte_40252A ); \u51fd\u6570\u8bf4\u660e\uff1a 1.memcpy():C \u5e93\u51fd\u6570 void *memcpy(void *str1, const void *str2, size_t n) \u4ece\u5b58\u50a8\u533a str2 \u590d\u5236 n \u4e2a\u5b57\u7b26\u5230\u5b58\u50a8\u533a str1\u3002 2.int strncmp ( const char * str1, const char * str2, size_t n ); \u82e5str1\u4e0estr2\u7684\u524dn\u4e2a\u5b57\u7b26\u76f8\u540c\uff0c\u5219\u8fd4\u56de0\uff1b\u82e5s1\u5927\u4e8es2\uff0c\u5219\u8fd4\u56de\u5927\u4e8e0\u7684\u503c\uff1b\u82e5s1 \u5c0f\u4e8es2\uff0c\u5219\u8fd4\u56de\u5c0f\u4e8e0\u7684\u503c\u3002 \u90a3\u8981\u6253\u5370\u51faGood password\uff0c\u90a3\u4e0d\u5c31\u5e94\u8be5\u8ba9 !strcmp(argv[1], (&dict)[i]) && !strcmp(&dest, (&dict)[i]) \u90fd\u4e3a1\u561b\uff0c\u90a3\u6211\u4eec\u8f93\u5165\u7684\u5c31\u5e94\u8be5\u548cdest\u4e00\u6837.......\u771f\u7684\u6709\u8fd9\u4e48\u7b80\u5355\u5417\uff1f 1 2 . / rev50 sedecrem Bad ! password emmmmmm\u8fd9\u91cc\u6211\u5c31\u60f3\u5230\u4e86\uff0c\u50a8\u5b58\u65b9\u5f0f\u7684\u4e0d\u540c\uff0c\u6545\u76f4\u63a5\u628a\u5b57\u7b26\u4e32\u53cd\u8f6c\u4e00\u4e0b\uff1a 1 2 . / rev50 mercedes Good password ! \u8d44\u6599: \u5927\u7aef\u5e8f\u548c\u5c0f\u7aef\u5e8f","title":"\u5b9e\u9a8c\u89c2\u5bdf"},{"location":"ctf_write_up/exams/shiyanba/reverse/#defcamp","text":"\u9898\u76ee\uff1a defcamp File\u4e00\u4e0b\uff0c64\u4f4d ELF 1 2 $ file r200.bak r200.bak: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/l, for GNU/Linux 2.6.24, BuildID[sha1]=22e68980e521b43c90688ed0693df78150b10211, stripped \u8fd0\u884c\u4e00\u4e0b\uff0c\u8981\u6c42\u6211\u4eec\u8f93\u5165password 1 2 $ ./r200.bak Enter the password: \u62d6\u8fdbIDA\uff0c\u8ffd\u8e2a\u5b57\u7b26\u4e32\u5230main\u51fd\u6570\uff0c\u63d0\u53d6\u4ee3\u7801\uff1a \uff08\u4e3a\u4e86\u4fbf\u4e8e\u89c2\u770b\uff0c\u6211\u4fee\u6539\u4e86\u51fd\u6570\u540d\uff09 1 2 3 4 5 6 7 8 9 10 11 12 13 printf ( \"Enter the password: \" , a2 , a3 ); if ( ! fgets ( & s , 7 , stdin ) ) return 0LL ; if ( ( unsigned int ) check_password (( __int64 ) & s ) ) { puts ( \"Incorrect password!\" ); result = 1LL ; } else { puts ( \"Nice!\" ); result = 0LL ; } \u90a3\u91cd\u70b9\u5e94\u8be5\u5c31\u5728check_password()\u91cc\u54af\uff0c\u8fdb\u53bb,\uff0c\u4ee3\u7801\u5982\u4e0b 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 v6 = 0LL ; v7 = 0LL ; v8 = 0LL ; v9 [ 0 ] = 5 ; v9 [ 1 ] = 2 ; v9 [ 2 ] = 7 ; v9 [ 3 ] = 2 ; v9 [ 4 ] = 5 ; v9 [ 5 ] = 6 ; for ( i = 0 ; i <= 5 ; ++ i ) { v5 = qword_601080 ; v4 = 0 ; while ( v5 ) { if ( * ( v5 + 4 ) == * ( i + a1 ) ) { v4 = * v5 ; break ; } v5 = * ( v5 + 8 ); } * ( & v6 + i ) = v4 ; } for ( j = 0 ; j <= 5 ; ++ j ) { if ( * ( & v6 + j ) != v9 [ j ] ) return 1LL ; } return 0LL ; } \u7406\u89e3\u4e00\u4e0b\uff0c\u8f93\u5165\u7684\u503c\u52a0\u5bc6\u4e4b\u540e\u8981\u7b49\u4e8e5\uff0c2\uff0c7\uff0c2\uff0c5\uff0c6\uff0c\u6211\u4eec\u7406\u89e3\u4e00\u4e0b\u89e3\u5bc6\u7b97\u6cd5\u5c31\u53ef\u4ee5\u5f97\u5230flag\u4e86\u3002 \u770b\u5230v5=qword 60180,\u800cqword 60180\u5728\u4e3b\u51fd\u6570\u4e5f\u51fa\u73b0\u8fc7\uff0c\u8fc7\u53bb\u4e3b\u51fd\u6570\u770b\u4e00\u4e0b: 1 2 3 4 5 6 7 8 9 for ( i = 1 ; i <= 10 ; ++ i ) { v3 = malloc ( 0x10uLL ); * v3 = i ; * ( v3 + 4 ) = * v3 + 109 ; a3 = qword_601080 ; * ( v3 + 1 ) = qword_601080 ; qword_601080 = v3 ; } \u6211\u4eec\u770b\u5230\u8868\u4e2d\u5171\u670910\u4e2a\u5143\u7d20\uff0c\u6bcf\u4e2a\u5143\u7d2016\u4e2a\u5b57\u8282\uff0c\u5bf9\u5e94\u7684\u503c\u6bcf\u4e2a\u90fd\u8981\u52a0\u4e0a109\uff0c\u90a3\u53cd\u8fc7\u6765\u60f3\uff0c\u6211\u4eec\u5bf9\u5e94\u7684\u5c31\u5e94\u8be5\u662f114\uff0c111\uff0c116\uff0c111\uff0c114\uff0c115,ASCII\u7801\u8f6c\u6362\u4e00\u4e0b\u5f97rotors 1 2 3 $ ./r200.bak Enter the password: rotors Nice! \u7ed3\u679c\u5c31\u5f88Nice\uff01","title":"defcamp"},{"location":"ctf_write_up/exams/shiyanba/reverse/#debug","text":"\u9898\u76ee\uff1a debug32 \u62ff\u5230\u9898\uff0c\u5148file\u4e00\u4e0b 1 debug32: ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), dynamically linked, interpreter /lib/ld-, for GNU/Linux 2.6.32, BuildID[sha1]=46b87dea3b50c74ec8cde885ccc9a4d9e5e260f3, stripped \u662f\u4e2a32\u4f4d\u7684ELF\u6587\u4ef6\uff0c\u8fd0\u884c\u4e00\u4e0b ./debug32 ,\u4ec0\u4e48\u90fd\u6ca1\u6709\uff1f \u62c9\u8fdbIDA\u67e5\u770b\u4e00\u4e0b\uff0c\u53d1\u73b0main\u51fd\u6570\u4e2d\u8fd8\u771f\u7684\u4ec0\u4e48\u90fd\u6ca1\u6709 1 2 3 int __cdecl main (){ return 0 ; } shift+f12(\u67e5\u627e\u6240\u6709\u5b57\u7b26\u4e32)\uff0c\u53d1\u73b0 .rodata:080485F0 0000000E C Printing flag \uff0c\u4e8e\u662f\u8ddf\u8e2a\u627e\u5230sub 804849B(); sub 804849B()\u8fd9\u4e2a\u51fd\u6570\u4e2d\u662f\u5411\u5c4f\u5e55\u4e2d\u6253\u5370flag\u7684\uff0c\u89e3\u9898\u65b9\u6cd5\u6709\u4e8c\uff1a \u4e00 . \u76f4\u63a5\u590d\u5236sub_824849B()\u51fd\u6570\u4ee3\u7801\u5230VSCode\uff0c\u6dfb\u52a0\u5934\u6587\u4ef6\u548cmian()\uff0c\u8fd9\u91cc\u6ce8\u610f\uff0c\u5728\u6700\u540e\u8981\u4f7f\u5176\u505c\u6b62\uff0c\u6545\u5728\u6700\u540e v3[5] = 0 ,\u4ee3\u7801\u5982\u4e0b\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 #include <stdio.h> int main () { int i , j ; unsigned int v3 [ 5 ]; v3 [ 0 ] = 377943446 ; v3 [ 1 ] = 1447490871 ; v3 [ 2 ] = 1987467046 ; v3 [ 3 ] = 938813270 ; v3 [ 4 ] = 3334903478 ; for ( i = 0 ; i <= 4 ; ++ i ) { for ( j = v3 [ i ]; j ; j >>= 8 ) putchar (( char )((( unsigned __int8 ) j >> 4 ) | 16 * j )); } return 0 ; } \u4e8c.main\u51fd\u6570\u4e2d\u8c03\u7528\u8fd9\u4e2a\u51fd\u6570\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u7528GDB\u6765\u4f7f\u4e3b\u51fd\u6570\u8c03\u7528\u8fd9\u4e2a\u6253\u5370flag\u7684\u8fd9\u4e2a\u51fd\u6570 \uff08z\u8fd9\u91cc\u53c2\u8003\u4e86\u7f51\u4e0a\u5927\u4f6c\u7684writeup0.0\uff09 \u8c03\u8bd5\u8fc7\u7a0b \u9996\u5148\u52a0\u8f7d\u6587\u4ef6 1 gdb debug32 \u7136\u540e\u518d\u4e3b\u51fd\u6570\u8bbe\u7f6e\u65ad\u70b9 1 2 gdb - peda $ break __libc_start_main Breakpoint 1 at 0 x8048370 \u7136\u540e\u8fd0\u884c\u8be5\u7a0b\u5e8f 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 gdb-peda$ run Starting program: /root/file/debug32 [----------------------------------registers-----------------------------------] EAX: 0xf7ffd918 --> 0x0 EBX: 0xf7ffd000 --> 0x22f3c ECX: 0xffffd154 --> 0xffffd32b (\"/root/file/debug32\") EDX: 0xf7fe9880 (push ebp) ESI: 0x1 EDI: 0x80483a0 (xor ebp,ebp) EBP: 0x0 ESP: 0xffffd12c --> 0x80483c1 (hlt) EIP: 0xf7e1c540 (<__libc_start_main>: call 0xf7f21289) EFLAGS: 0x292 (carry parity ADJUST zero SIGN trap INTERRUPT direction overflow) [-------------------------------------code-------------------------------------] 0xf7e1c53a: xchg ax,ax 0xf7e1c53c: xchg ax,ax 0xf7e1c53e: xchg ax,ax => 0xf7e1c540 <__libc_start_main>: call 0xf7f21289 0xf7e1c545 <__libc_start_main+5>: add eax,0x197abb 0xf7e1c54a <__libc_start_main+10>: push ebp 0xf7e1c54b <__libc_start_main+11>: push edi 0xf7e1c54c <__libc_start_main+12>: push esi No argument [------------------------------------stack-------------------------------------] 0000| 0xffffd12c --> 0x80483c1 (hlt) 0004| 0xffffd130 --> 0x804855a (push ebp) 0008| 0xffffd134 --> 0x1 0012| 0xffffd138 --> 0xffffd154 --> 0xffffd32b (\"/root/file/debug32\") 0016| 0xffffd13c --> 0x8048570 (push ebp) 0020| 0xffffd140 --> 0x80485d0 (repz ret) 0024| 0xffffd144 --> 0xf7fe9880 (push ebp) 0028| 0xffffd148 --> 0xffffd14c --> 0xf7ffd918 --> 0x0 [------------------------------------------------------------------------------] Legend: code, data, rodata, value Breakpoint 1, 0xf7e1c540 in __libc_start_main () from /lib32/libc.so.6 gdb-peda$ \u4fee\u6539EIP\u7684\u503c\u4e3a\u8fd9\u4e2a\u51fd\u6570\u7684\u8d77\u5730\u5740 1 gdb-peda$ set $eip = 0x804849b \u7136\u540e\u7ee7\u7eed\u8fd0\u884c\u7a0b\u5e8f\u5373\u5f97flag 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 gdb-peda$ c Continuing. Printing flag i_has_debugger_skill Program received signal SIGSEGV, Segmentation fault. [----------------------------------registers-----------------------------------] EAX: 0x0 EBX: 0xf7ffd000 --> 0x22f3c ECX: 0xf7fb5870 --> 0x0 EDX: 0xa ('\\n') ESI: 0x1 EDI: 0x80483a0 (xor ebp,ebp) EBP: 0x0 ESP: 0xffffd130 --> 0x804855a (push ebp) EIP: 0x80483c1 (hlt) EFLAGS: 0x10246 (carry PARITY adjust ZERO sign trap INTERRUPT direction overflow) [-------------------------------------code-------------------------------------] 0x80483b6: push esi 0x80483b7: push 0x804855a 0x80483bc: call 0x8048370 <__libc_start_main@plt> => 0x80483c1: hlt 0x80483c2: xchg ax,ax 0x80483c4: xchg ax,ax 0x80483c6: xchg ax,ax 0x80483c8: xchg ax,ax [------------------------------------stack-------------------------------------] 0000| 0xffffd130 --> 0x804855a (push ebp) 0004| 0xffffd134 --> 0x1 0008| 0xffffd138 --> 0xffffd154 --> 0xffffd32b (\"/root/file/debug32\") 0012| 0xffffd13c --> 0x8048570 (push ebp) 0016| 0xffffd140 --> 0x80485d0 (repz ret) 0020| 0xffffd144 --> 0xf7fe9880 (push ebp) 0024| 0xffffd148 --> 0xffffd14c --> 0xf7ffd918 --> 0x0 0028| 0xffffd14c --> 0xf7ffd918 --> 0x0 [------------------------------------------------------------------------------] Legend: code, data, rodata, value Stopped reason: SIGSEGV 0x080483c1 in ?? () flag\uff1aflag{i has debugger_skill} \u603b\u7ed3\uff1a\u7b2c\u4e00\u79cd\u65b9\u6cd5\u7a0d\u5fae\u6709\u70b9\u6ca1\u6709\u6280\u672f\u542b\u91cf\uff0c\u51fa\u9898\u4eba\u610f\u601d\u5e94\u8be5\u662f\u5e0c\u671b\u6211\u4eec\u8fd0\u7528\u7b2c\u4e8c\u79cd\u65b9\u5f0f\u6765\u89e3\u51b3\uff0c\u8fd9\u91cc\u6211\u4e5f\u5b66\u5230\u4e00\u79cd\u65b0\u7684\u5de5\u5177 GDB \u3002","title":"debug"},{"location":"misc/big_little_ending/","text":"\u5927\u7aef\u6a21\u5f0f\u548c\u5c0f\u7aef\u6a21\u5f0f\u7684\u8d77\u6e90 \u5173\u4e8e\u5927\u7aef\u5c0f\u7aef\u540d\u8bcd\u7684\u7531\u6765\uff0c\u6709\u4e00\u4e2a\u6709\u8da3\u7684\u6545\u4e8b\uff0c\u6765\u81ea\u4e8eJonathan Swift\u7684\u300a\u683c\u5229\u4f5b\u6e38\u8bb0\u300b\uff1a Lilliput\u548cBlefuscu\u8fd9\u4e24\u4e2a\u5f3a\u56fd\u5728\u8fc7\u53bb\u768436\u4e2a\u6708\u4e2d\u4e00\u76f4\u5728\u82e6\u6218\u3002\u6218\u4e89\u7684\u539f\u56e0\uff1a\u5927\u5bb6\u90fd\u77e5\u9053\uff0c \u5403\u9e21\u86cb\u7684\u65f6\u5019\uff0c\u539f\u59cb\u7684\u65b9\u6cd5\u662f\u6253\u7834\u9e21\u86cb\u8f83\u5927\u7684\u4e00\u7aef\uff0c\u53ef\u4ee5\u90a3\u65f6\u7684\u7687\u5e1d\u7684\u7956\u7236\u7531\u4e8e\u5c0f\u65f6\u4faf\u5403\u9e21\u86cb\uff0c \u6309\u8fd9\u79cd\u65b9\u6cd5\u628a\u624b\u6307\u5f04\u7834\u4e86\uff0c\u56e0\u6b64\u4ed6\u7684\u7236\u4eb2\uff0c\u5c31\u4e0b\u4ee4\uff0c\u547d\u4ee4\u6240\u6709\u7684\u5b50\u6c11\u5403\u9e21\u86cb\u7684\u65f6\u5019\uff0c \u5fc5\u987b\u5148\u6253\u7834\u9e21\u86cb\u8f83\u5c0f\u7684\u4e00\u7aef\uff0c\u8fdd\u4ee4\u8005\u91cd\u7f5a\u3002\u7136\u540e\u8001\u767e\u59d3\u5bf9\u6b64\u6cd5\u4ee4\u6781\u4e3a\u53cd\u611f\uff0c\u671f\u95f4\u53d1\u751f\u4e86\u591a\u6b21\u53db\u4e71\uff0c \u5176\u4e2d\u4e00\u4e2a\u7687\u5e1d\u56e0\u6b64\u9001\u547d\uff0c\u53e6\u4e00\u4e2a\u4e22\u4e86\u738b\u4f4d\uff0c\u4ea7\u751f\u53db\u4e71\u7684\u539f\u56e0\u5c31\u662f\u53e6\u4e00\u4e2a\u56fd\u5bb6Blefuscu\u7684\u56fd\u738b\u5927\u81e3\u717d\u52a8\u8d77\u6765\u7684\uff0c\u53db\u4e71\u5e73\u606f\u540e\uff0c\u5c31\u9003\u5230\u8fd9\u4e2a\u5e1d\u56fd\u907f\u96be\u3002\u636e\u4f30\u8ba1\uff0c\u5148\u540e\u51e0\u6b21\u670911000\u4f59\u4eba\u60c5\u613f\u6b7b\u4e5f\u4e0d\u80af\u53bb \u6253\u7834\u9e21\u86cb\u8f83\u5c0f\u7684\u7aef\u5403\u9e21\u86cb\u3002\u8fd9\u4e2a\u5176\u5b9e\u8bbd\u523a\u5f53\u65f6\u82f1\u56fd\u548c\u6cd5\u56fd\u4e4b\u95f4\u6301\u7eed\u7684\u51b2\u7a81\u3002 Danny Cohen\u4e00\u4f4d\u7f51\u7edc\u534f\u8bae\u7684\u5f00\u521b\u8005\uff0c\u7b2c\u4e00\u6b21\u4f7f\u7528\u8fd9\u4e24\u4e2a\u672f\u8bed\u6307\u4ee3\u5b57\u8282\u987a\u5e8f\uff0c\u540e\u6765\u5c31\u88ab\u5927\u5bb6\u5e7f\u6cdb\u63a5\u53d7\u3002 Big-Endian\u548cLittle-Endian\u7684\u5b9a\u4e49\u5982\u4e0b 1) Little-Endian\u5c31\u662f\u4f4e\u4f4d\u5b57\u8282\u6392\u653e\u5728\u5185\u5b58\u7684\u4f4e\u5730\u5740\u7aef\uff0c\u9ad8\u4f4d\u5b57\u8282\u6392\u653e\u5728\u5185\u5b58\u7684\u9ad8\u5730\u5740\u7aef\u3002 2) Big-Endian\u5c31\u662f\u9ad8\u4f4d\u5b57\u8282\u6392\u653e\u5728\u5185\u5b58\u7684\u4f4e\u5730\u5740\u7aef\uff0c\u4f4e\u4f4d\u5b57\u8282\u6392\u653e\u5728\u5185\u5b58\u7684\u9ad8\u5730\u5740\u7aef\u3002 \u4e3e\u4e00\u4e2a\u4f8b\u5b50\uff0c\u6bd4\u5982\u6570\u5b570x12 34 56 78\u5728\u5185\u5b58\u4e2d\u7684\u8868\u793a\u5f62\u5f0f\u4e3a\uff1a 1)\u5927\u7aef\u6a21\u5f0f\uff1a \u4f4e\u5730\u5740 \u9ad8\u5730\u5740 0x12 0x34 0x56 0x78 2)\u5c0f\u7aef\u6a21\u5f0f\uff1a \u4f4e\u5730\u5740 \u9ad8\u5730\u5740 0x78 0x56 0x34 0x12 \u53ef\u89c1\uff0c\u5927\u7aef\u6a21\u5f0f\u548c\u5b57\u7b26\u4e32\u7684\u5b58\u50a8\u6a21\u5f0f\u7c7b\u4f3c\u3002 3)\u4e0b\u9762\u662f\u4e24\u4e2a\u5177\u4f53\u4f8b\u5b50\uff1a 16bit\u5bbd\u7684\u65700x1234\u5728Little-endian\u6a21\u5f0f\uff08\u4ee5\u53caBig-endian\u6a21\u5f0f\uff09CPU\u5185\u5b58\u4e2d\u7684\u5b58\u653e\u65b9\u5f0f\uff08\u5047\u8bbe\u4ece\u5730\u57400x4000\u5f00\u59cb\u5b58\u653e\uff09\u4e3a\uff1a \u5185\u5b58\u5730\u5740 \u5c0f\u7aef\u6a21\u5f0f\u5b58\u653e\u5185\u5bb9 \u5927\u7aef\u6a21\u5f0f\u5b58\u653e\u5185\u5bb9 0x4000 0x34 0x12 0x4001 0x12 0x34 \u00b732bit\u5bbd\u7684\u65700x12345678\u5728Little-endian\u6a21\u5f0f\u4ee5\u53caBig-endian\u6a21\u5f0f\uff09CPU\u5185\u5b58\u4e2d\u7684\u5b58\u653e\u65b9\u5f0f\uff08\u5047\u8bbe\u4ece\u5730\u57400x4000\u5f00\u59cb\u5b58\u653e\uff09\u4e3a\uff1a \u5185\u5b58\u5730\u5740 \u5c0f\u7aef\u6a21\u5f0f\u5b58\u653e\u5185\u5bb9 \u5927\u7aef\u6a21\u5f0f\u5b58\u653e\u5185\u5bb9 0x400 0x78 0x12 0x4001 0x56 0x34 0x4002 0x34 0x56 0x4003 0x12 0x78 4)\u5927\u7aef\u5c0f\u7aef\u6ca1\u6709\u8c01\u4f18\u8c01\u52a3\uff0c\u5404\u81ea\u4f18\u52bf\u4fbf\u662f\u5bf9\u65b9\u52a3\u52bf\uff1a \u5c0f\u7aef\u6a21\u5f0f \uff1a\u5f3a\u5236\u8f6c\u6362\u6570\u636e\u4e0d\u9700\u8981\u8c03\u6574\u5b57\u8282\u5185\u5bb9\uff0c1\u30012\u30014\u5b57\u8282\u7684\u5b58\u50a8\u65b9\u5f0f\u4e00\u6837\u3002 \u5927\u7aef\u6a21\u5f0f \uff1a\u7b26\u53f7\u4f4d\u7684\u5224\u5b9a\u56fa\u5b9a\u4e3a\u7b2c\u4e00\u4e2a\u5b57\u8282\uff0c\u5bb9\u6613\u5224\u65ad\u6b63\u8d1f\u3002 \u6570\u7ec4\u5728\u5927\u7aef\u5c0f\u7aef\u60c5\u51b5\u4e0b\u7684\u5b58\u50a8 \u4ee5unsigned int value = 0x12345678\u4e3a\u4f8b\uff0c\u5206\u522b\u770b\u770b\u5728\u4e24\u79cd\u5b57\u8282\u5e8f\u4e0b\u5176\u5b58\u50a8\u60c5\u51b5\uff0c\u6211\u4eec\u53ef\u4ee5\u7528unsigned char buf[4]\u6765\u8868\u793avalue\uff1a Big-Endian: \u4f4e\u5730\u5740\u5b58\u653e\u9ad8\u4f4d\uff0c\u5982\u4e0b\uff1a \u9ad8\u5730\u5740 buf[3] (0x78) \u4f4e\u4f4d buf[2] (0x56) buf[1] (0x34) buf[0] (0x12) \u9ad8\u4f4d \u4f4e\u5730\u5740 Little-Endian: \u4f4e\u5730\u5740\u5b58\u653e\u4f4e\u4f4d\uff0c\u5982\u4e0b\uff1a \u9ad8\u5730\u5740 buf[3] (0x12) \u9ad8\u4f4d buf[2] (0x34) buf[1] (0x56) buf[0] (0x78) \u4f4e\u4f4d \u4f4e\u5730\u5740 \u4e3a\u4ec0\u4e48\u4f1a\u6709\u5927\u5c0f\u7aef\u6a21\u5f0f\u4e4b\u5206 \u8fd9\u662f\u56e0\u4e3a\u5728\u8ba1\u7b97\u673a\u7cfb\u7edf\u4e2d\uff0c\u6211\u4eec\u662f\u4ee5\u5b57\u8282\u4e3a\u5355\u4f4d\u7684\uff0c\u6bcf\u4e2a\u5730\u5740\u5355\u5143\u90fd\u5bf9\u5e94\u7740\u4e00\u4e2a\u5b57\u8282\uff0c\u4e00\u4e2a\u5b57\u8282\u4e3a8bit\u3002 \u4f46\u662f\u5728C\u8bed\u8a00\u4e2d\u9664\u4e868bit\u7684char\u4e4b\u5916\uff0c\u8fd8\u670916bit\u7684short\u578b\uff0c32bit\u7684long\u578b\uff08\u8981\u770b\u5177\u4f53\u7684\u7f16\u8bd1\u5668\uff09\uff0c \u53e6\u5916\uff0c\u5bf9\u4e8e\u4f4d\u6570\u5927\u4e8e8\u4f4d\u7684\u5904\u7406\u5668\uff0c\u4f8b\u598216\u4f4d\u6216\u800532\u4f4d\u7684\u5904\u7406\u5668\uff0c\u7531\u4e8e\u5bc4\u5b58\u5668\u5bbd\u5ea6\u5927\u4e8e\u4e00\u4e2a\u5b57\u8282\uff0c \u90a3\u4e48\u5fc5\u7136\u5b58\u5728\u7740\u4e00\u4e2a\u5982\u679c\u5c06\u591a\u4e2a\u5b57\u8282\u5b89\u6392\u7684\u95ee\u9898\u3002\u56e0\u6b64\u5c31\u5bfc\u81f4\u4e86\u5927\u7aef\u5b58\u50a8\u6a21\u5f0f\u548c\u5c0f\u7aef\u5b58\u50a8\u6a21\u5f0f\u3002 \u4f8b\u5982\u4e00\u4e2a16bit\u7684short\u578bx\uff0c\u5728\u5185\u5b58\u4e2d\u7684\u5730\u5740\u4e3a0x0010\uff0cx\u7684\u503c\u4e3a0x1122\uff0c\u90a3\u4e480x11\u4e3a\u9ad8\u5b57\u8282\uff0c 0x22\u4e3a\u4f4e\u5b57\u8282\u3002\u5bf9\u4e8e\u5927\u7aef\u6a21\u5f0f\uff0c\u5c31\u5c060x11\u653e\u5728\u4f4e\u5730\u5740\u4e2d\uff0c\u53730x0010\u4e2d\uff0c0x22\u653e\u5728\u9ad8\u5730\u5740\u4e2d\uff0c \u53730x0011\u4e2d\u3002\u5c0f\u7aef\u6a21\u5f0f\uff0c\u521a\u597d\u76f8\u53cd\u3002\u6211\u4eec\u5e38\u7528\u7684X86\u7ed3\u6784\u662f\u5c0f\u7aef\u6a21\u5f0f\uff0c\u800cKEIL C51\u5219\u4e3a\u5927\u7aef\u6a21\u5f0f\u3002 \u5f88\u591a\u7684ARM\uff0cDSP\u90fd\u4e3a\u5c0f\u7aef\u6a21\u5f0f\u3002\u6709\u4e9bARM\u5904\u7406\u5668\u8fd8\u53ef\u4ee5\u7531\u786c\u4ef6\u6765\u9009\u62e9\u662f\u5927\u7aef\u6a21\u5f0f\u8fd8\u662f\u5c0f\u7aef\u6a21\u5f0f\u3002 \u53c2\u8003\u8d44\u6599\uff1a https://blog.csdn.net/ce123_zhouwei/article/details/6971544 http://radishes.top/2018/10/07/2018-10-07-\u5c0f\u7aef\u6a21\u5f0f\u548c\u5927\u7aef\u6a21\u5f0f","title":"\u5927\u7aef\u5e8f\u548c\u5c0f\u7aef\u5e8f"},{"location":"misc/big_little_ending/#_1","text":"\u5173\u4e8e\u5927\u7aef\u5c0f\u7aef\u540d\u8bcd\u7684\u7531\u6765\uff0c\u6709\u4e00\u4e2a\u6709\u8da3\u7684\u6545\u4e8b\uff0c\u6765\u81ea\u4e8eJonathan Swift\u7684\u300a\u683c\u5229\u4f5b\u6e38\u8bb0\u300b\uff1a Lilliput\u548cBlefuscu\u8fd9\u4e24\u4e2a\u5f3a\u56fd\u5728\u8fc7\u53bb\u768436\u4e2a\u6708\u4e2d\u4e00\u76f4\u5728\u82e6\u6218\u3002\u6218\u4e89\u7684\u539f\u56e0\uff1a\u5927\u5bb6\u90fd\u77e5\u9053\uff0c \u5403\u9e21\u86cb\u7684\u65f6\u5019\uff0c\u539f\u59cb\u7684\u65b9\u6cd5\u662f\u6253\u7834\u9e21\u86cb\u8f83\u5927\u7684\u4e00\u7aef\uff0c\u53ef\u4ee5\u90a3\u65f6\u7684\u7687\u5e1d\u7684\u7956\u7236\u7531\u4e8e\u5c0f\u65f6\u4faf\u5403\u9e21\u86cb\uff0c \u6309\u8fd9\u79cd\u65b9\u6cd5\u628a\u624b\u6307\u5f04\u7834\u4e86\uff0c\u56e0\u6b64\u4ed6\u7684\u7236\u4eb2\uff0c\u5c31\u4e0b\u4ee4\uff0c\u547d\u4ee4\u6240\u6709\u7684\u5b50\u6c11\u5403\u9e21\u86cb\u7684\u65f6\u5019\uff0c \u5fc5\u987b\u5148\u6253\u7834\u9e21\u86cb\u8f83\u5c0f\u7684\u4e00\u7aef\uff0c\u8fdd\u4ee4\u8005\u91cd\u7f5a\u3002\u7136\u540e\u8001\u767e\u59d3\u5bf9\u6b64\u6cd5\u4ee4\u6781\u4e3a\u53cd\u611f\uff0c\u671f\u95f4\u53d1\u751f\u4e86\u591a\u6b21\u53db\u4e71\uff0c \u5176\u4e2d\u4e00\u4e2a\u7687\u5e1d\u56e0\u6b64\u9001\u547d\uff0c\u53e6\u4e00\u4e2a\u4e22\u4e86\u738b\u4f4d\uff0c\u4ea7\u751f\u53db\u4e71\u7684\u539f\u56e0\u5c31\u662f\u53e6\u4e00\u4e2a\u56fd\u5bb6Blefuscu\u7684\u56fd\u738b\u5927\u81e3\u717d\u52a8\u8d77\u6765\u7684\uff0c\u53db\u4e71\u5e73\u606f\u540e\uff0c\u5c31\u9003\u5230\u8fd9\u4e2a\u5e1d\u56fd\u907f\u96be\u3002\u636e\u4f30\u8ba1\uff0c\u5148\u540e\u51e0\u6b21\u670911000\u4f59\u4eba\u60c5\u613f\u6b7b\u4e5f\u4e0d\u80af\u53bb \u6253\u7834\u9e21\u86cb\u8f83\u5c0f\u7684\u7aef\u5403\u9e21\u86cb\u3002\u8fd9\u4e2a\u5176\u5b9e\u8bbd\u523a\u5f53\u65f6\u82f1\u56fd\u548c\u6cd5\u56fd\u4e4b\u95f4\u6301\u7eed\u7684\u51b2\u7a81\u3002 Danny Cohen\u4e00\u4f4d\u7f51\u7edc\u534f\u8bae\u7684\u5f00\u521b\u8005\uff0c\u7b2c\u4e00\u6b21\u4f7f\u7528\u8fd9\u4e24\u4e2a\u672f\u8bed\u6307\u4ee3\u5b57\u8282\u987a\u5e8f\uff0c\u540e\u6765\u5c31\u88ab\u5927\u5bb6\u5e7f\u6cdb\u63a5\u53d7\u3002","title":"\u5927\u7aef\u6a21\u5f0f\u548c\u5c0f\u7aef\u6a21\u5f0f\u7684\u8d77\u6e90"},{"location":"misc/big_little_ending/#big-endianlittle-endian","text":"1) Little-Endian\u5c31\u662f\u4f4e\u4f4d\u5b57\u8282\u6392\u653e\u5728\u5185\u5b58\u7684\u4f4e\u5730\u5740\u7aef\uff0c\u9ad8\u4f4d\u5b57\u8282\u6392\u653e\u5728\u5185\u5b58\u7684\u9ad8\u5730\u5740\u7aef\u3002 2) Big-Endian\u5c31\u662f\u9ad8\u4f4d\u5b57\u8282\u6392\u653e\u5728\u5185\u5b58\u7684\u4f4e\u5730\u5740\u7aef\uff0c\u4f4e\u4f4d\u5b57\u8282\u6392\u653e\u5728\u5185\u5b58\u7684\u9ad8\u5730\u5740\u7aef\u3002 \u4e3e\u4e00\u4e2a\u4f8b\u5b50\uff0c\u6bd4\u5982\u6570\u5b570x12 34 56 78\u5728\u5185\u5b58\u4e2d\u7684\u8868\u793a\u5f62\u5f0f\u4e3a\uff1a 1)\u5927\u7aef\u6a21\u5f0f\uff1a \u4f4e\u5730\u5740 \u9ad8\u5730\u5740 0x12 0x34 0x56 0x78 2)\u5c0f\u7aef\u6a21\u5f0f\uff1a \u4f4e\u5730\u5740 \u9ad8\u5730\u5740 0x78 0x56 0x34 0x12 \u53ef\u89c1\uff0c\u5927\u7aef\u6a21\u5f0f\u548c\u5b57\u7b26\u4e32\u7684\u5b58\u50a8\u6a21\u5f0f\u7c7b\u4f3c\u3002 3)\u4e0b\u9762\u662f\u4e24\u4e2a\u5177\u4f53\u4f8b\u5b50\uff1a 16bit\u5bbd\u7684\u65700x1234\u5728Little-endian\u6a21\u5f0f\uff08\u4ee5\u53caBig-endian\u6a21\u5f0f\uff09CPU\u5185\u5b58\u4e2d\u7684\u5b58\u653e\u65b9\u5f0f\uff08\u5047\u8bbe\u4ece\u5730\u57400x4000\u5f00\u59cb\u5b58\u653e\uff09\u4e3a\uff1a \u5185\u5b58\u5730\u5740 \u5c0f\u7aef\u6a21\u5f0f\u5b58\u653e\u5185\u5bb9 \u5927\u7aef\u6a21\u5f0f\u5b58\u653e\u5185\u5bb9 0x4000 0x34 0x12 0x4001 0x12 0x34 \u00b732bit\u5bbd\u7684\u65700x12345678\u5728Little-endian\u6a21\u5f0f\u4ee5\u53caBig-endian\u6a21\u5f0f\uff09CPU\u5185\u5b58\u4e2d\u7684\u5b58\u653e\u65b9\u5f0f\uff08\u5047\u8bbe\u4ece\u5730\u57400x4000\u5f00\u59cb\u5b58\u653e\uff09\u4e3a\uff1a \u5185\u5b58\u5730\u5740 \u5c0f\u7aef\u6a21\u5f0f\u5b58\u653e\u5185\u5bb9 \u5927\u7aef\u6a21\u5f0f\u5b58\u653e\u5185\u5bb9 0x400 0x78 0x12 0x4001 0x56 0x34 0x4002 0x34 0x56 0x4003 0x12 0x78 4)\u5927\u7aef\u5c0f\u7aef\u6ca1\u6709\u8c01\u4f18\u8c01\u52a3\uff0c\u5404\u81ea\u4f18\u52bf\u4fbf\u662f\u5bf9\u65b9\u52a3\u52bf\uff1a \u5c0f\u7aef\u6a21\u5f0f \uff1a\u5f3a\u5236\u8f6c\u6362\u6570\u636e\u4e0d\u9700\u8981\u8c03\u6574\u5b57\u8282\u5185\u5bb9\uff0c1\u30012\u30014\u5b57\u8282\u7684\u5b58\u50a8\u65b9\u5f0f\u4e00\u6837\u3002 \u5927\u7aef\u6a21\u5f0f \uff1a\u7b26\u53f7\u4f4d\u7684\u5224\u5b9a\u56fa\u5b9a\u4e3a\u7b2c\u4e00\u4e2a\u5b57\u8282\uff0c\u5bb9\u6613\u5224\u65ad\u6b63\u8d1f\u3002","title":"Big-Endian\u548cLittle-Endian\u7684\u5b9a\u4e49\u5982\u4e0b"},{"location":"misc/big_little_ending/#_2","text":"\u4ee5unsigned int value = 0x12345678\u4e3a\u4f8b\uff0c\u5206\u522b\u770b\u770b\u5728\u4e24\u79cd\u5b57\u8282\u5e8f\u4e0b\u5176\u5b58\u50a8\u60c5\u51b5\uff0c\u6211\u4eec\u53ef\u4ee5\u7528unsigned char buf[4]\u6765\u8868\u793avalue\uff1a Big-Endian: \u4f4e\u5730\u5740\u5b58\u653e\u9ad8\u4f4d\uff0c\u5982\u4e0b\uff1a \u9ad8\u5730\u5740 buf[3] (0x78) \u4f4e\u4f4d buf[2] (0x56) buf[1] (0x34) buf[0] (0x12) \u9ad8\u4f4d \u4f4e\u5730\u5740 Little-Endian: \u4f4e\u5730\u5740\u5b58\u653e\u4f4e\u4f4d\uff0c\u5982\u4e0b\uff1a \u9ad8\u5730\u5740 buf[3] (0x12) \u9ad8\u4f4d buf[2] (0x34) buf[1] (0x56) buf[0] (0x78) \u4f4e\u4f4d \u4f4e\u5730\u5740","title":"\u6570\u7ec4\u5728\u5927\u7aef\u5c0f\u7aef\u60c5\u51b5\u4e0b\u7684\u5b58\u50a8"},{"location":"misc/big_little_ending/#_3","text":"\u8fd9\u662f\u56e0\u4e3a\u5728\u8ba1\u7b97\u673a\u7cfb\u7edf\u4e2d\uff0c\u6211\u4eec\u662f\u4ee5\u5b57\u8282\u4e3a\u5355\u4f4d\u7684\uff0c\u6bcf\u4e2a\u5730\u5740\u5355\u5143\u90fd\u5bf9\u5e94\u7740\u4e00\u4e2a\u5b57\u8282\uff0c\u4e00\u4e2a\u5b57\u8282\u4e3a8bit\u3002 \u4f46\u662f\u5728C\u8bed\u8a00\u4e2d\u9664\u4e868bit\u7684char\u4e4b\u5916\uff0c\u8fd8\u670916bit\u7684short\u578b\uff0c32bit\u7684long\u578b\uff08\u8981\u770b\u5177\u4f53\u7684\u7f16\u8bd1\u5668\uff09\uff0c \u53e6\u5916\uff0c\u5bf9\u4e8e\u4f4d\u6570\u5927\u4e8e8\u4f4d\u7684\u5904\u7406\u5668\uff0c\u4f8b\u598216\u4f4d\u6216\u800532\u4f4d\u7684\u5904\u7406\u5668\uff0c\u7531\u4e8e\u5bc4\u5b58\u5668\u5bbd\u5ea6\u5927\u4e8e\u4e00\u4e2a\u5b57\u8282\uff0c \u90a3\u4e48\u5fc5\u7136\u5b58\u5728\u7740\u4e00\u4e2a\u5982\u679c\u5c06\u591a\u4e2a\u5b57\u8282\u5b89\u6392\u7684\u95ee\u9898\u3002\u56e0\u6b64\u5c31\u5bfc\u81f4\u4e86\u5927\u7aef\u5b58\u50a8\u6a21\u5f0f\u548c\u5c0f\u7aef\u5b58\u50a8\u6a21\u5f0f\u3002 \u4f8b\u5982\u4e00\u4e2a16bit\u7684short\u578bx\uff0c\u5728\u5185\u5b58\u4e2d\u7684\u5730\u5740\u4e3a0x0010\uff0cx\u7684\u503c\u4e3a0x1122\uff0c\u90a3\u4e480x11\u4e3a\u9ad8\u5b57\u8282\uff0c 0x22\u4e3a\u4f4e\u5b57\u8282\u3002\u5bf9\u4e8e\u5927\u7aef\u6a21\u5f0f\uff0c\u5c31\u5c060x11\u653e\u5728\u4f4e\u5730\u5740\u4e2d\uff0c\u53730x0010\u4e2d\uff0c0x22\u653e\u5728\u9ad8\u5730\u5740\u4e2d\uff0c \u53730x0011\u4e2d\u3002\u5c0f\u7aef\u6a21\u5f0f\uff0c\u521a\u597d\u76f8\u53cd\u3002\u6211\u4eec\u5e38\u7528\u7684X86\u7ed3\u6784\u662f\u5c0f\u7aef\u6a21\u5f0f\uff0c\u800cKEIL C51\u5219\u4e3a\u5927\u7aef\u6a21\u5f0f\u3002 \u5f88\u591a\u7684ARM\uff0cDSP\u90fd\u4e3a\u5c0f\u7aef\u6a21\u5f0f\u3002\u6709\u4e9bARM\u5904\u7406\u5668\u8fd8\u53ef\u4ee5\u7531\u786c\u4ef6\u6765\u9009\u62e9\u662f\u5927\u7aef\u6a21\u5f0f\u8fd8\u662f\u5c0f\u7aef\u6a21\u5f0f\u3002 \u53c2\u8003\u8d44\u6599\uff1a https://blog.csdn.net/ce123_zhouwei/article/details/6971544 http://radishes.top/2018/10/07/2018-10-07-\u5c0f\u7aef\u6a21\u5f0f\u548c\u5927\u7aef\u6a21\u5f0f","title":"\u4e3a\u4ec0\u4e48\u4f1a\u6709\u5927\u5c0f\u7aef\u6a21\u5f0f\u4e4b\u5206"},{"location":"misc/python_script/","text":"\u6574\u7406\u4e00\u4e9b\u7528\u8fc7\u7684python\u811a\u672c \u8ba1\u7b97\u6587\u4ef6md5 1 2 3 4 5 6 fp = open ( \"file.txt\" , \"rb\" ) md5_obj = hashlib . md5 () md5_obj . update ( fp . read ()) hash_code = md5_obj . hexdigest () md5 = str ( hash_code ) . lower () fp . close () \u8ba1\u7b97\u5b57\u7b26\u4e32md5 1 2 3 4 5 def md5 ( str ): import hashlib m = hashlib . md5 () m . update ( str ) return m . hexdigest () C\u8bed\u8a00rand() 1 2 3 4 def rand (): global seed seed = seed * 0x343FD + 0x269EC3 return ( seed >> 16 ) & 0x7FFF \u51ef\u6492\u5bc6\u780126\u6b21 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 #coding:utf-8 upperDict = [ 'A' , 'B' , 'C' , 'D' , 'E' , 'F' , 'G' , 'H' , 'I' , 'J' , 'K' , 'L' , 'M' , 'N' , 'O' , 'P' , 'Q' , 'R' , 'S' , 'T' , 'U' , 'V' , 'W' , 'X' , 'Y' , 'Z' ] lowerDict = [ 'a' , 'b' , 'c' , 'd' , 'e' , 'f' , 'g' , 'h' , 'i' , 'j' , 'k' , 'l' , 'm' , 'n' , 'o' , 'p' , 'q' , 'r' , 's' , 't' , 'u' , 'v' , 'w' , 'x' , 'y' , 'z' ] def cesarWithLetter ( ciphertext , offset ): ''' \u51ef\u6492\u5bc6\u7801 : \u53ea\u8f6c\u6362\u5b57\u6bcd(\u5305\u62ec\u5927\u5199\u5c0f\u5199) \u53c2\u6570 : ciphertext : \u660e\u6587 offset : \u504f\u79fb\u91cf ''' result = \"\" for ch in ciphertext : if ch . isupper (): result = result + upperDict [(( upperDict . index ( ch ) + offset ) % 26 )] elif ch . islower (): result = result + lowerDict [(( lowerDict . index ( ch ) + offset ) % 26 )] elif ch . isdigit (): result = result + ch else : result = result + ch return result def printAllResult ( ciphertext ): ''' \u6253\u5370\u6240\u6709\u504f\u79fb\u7ed3\u679c ''' for i in range ( len ( upperDict )): print cesarWithLetter ( ciphertext , i ) ciphertext = raw_input ( \"Please input the words :\" ) printAllResult ( ciphertext )","title":"python\u811a\u672c"},{"location":"misc/python_script/#md5","text":"1 2 3 4 5 6 fp = open ( \"file.txt\" , \"rb\" ) md5_obj = hashlib . md5 () md5_obj . update ( fp . read ()) hash_code = md5_obj . hexdigest () md5 = str ( hash_code ) . lower () fp . close ()","title":"\u8ba1\u7b97\u6587\u4ef6md5"},{"location":"misc/python_script/#md5_1","text":"1 2 3 4 5 def md5 ( str ): import hashlib m = hashlib . md5 () m . update ( str ) return m . hexdigest ()","title":"\u8ba1\u7b97\u5b57\u7b26\u4e32md5"},{"location":"misc/python_script/#crand","text":"1 2 3 4 def rand (): global seed seed = seed * 0x343FD + 0x269EC3 return ( seed >> 16 ) & 0x7FFF","title":"C\u8bed\u8a00rand()"},{"location":"misc/python_script/#26","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 #coding:utf-8 upperDict = [ 'A' , 'B' , 'C' , 'D' , 'E' , 'F' , 'G' , 'H' , 'I' , 'J' , 'K' , 'L' , 'M' , 'N' , 'O' , 'P' , 'Q' , 'R' , 'S' , 'T' , 'U' , 'V' , 'W' , 'X' , 'Y' , 'Z' ] lowerDict = [ 'a' , 'b' , 'c' , 'd' , 'e' , 'f' , 'g' , 'h' , 'i' , 'j' , 'k' , 'l' , 'm' , 'n' , 'o' , 'p' , 'q' , 'r' , 's' , 't' , 'u' , 'v' , 'w' , 'x' , 'y' , 'z' ] def cesarWithLetter ( ciphertext , offset ): ''' \u51ef\u6492\u5bc6\u7801 : \u53ea\u8f6c\u6362\u5b57\u6bcd(\u5305\u62ec\u5927\u5199\u5c0f\u5199) \u53c2\u6570 : ciphertext : \u660e\u6587 offset : \u504f\u79fb\u91cf ''' result = \"\" for ch in ciphertext : if ch . isupper (): result = result + upperDict [(( upperDict . index ( ch ) + offset ) % 26 )] elif ch . islower (): result = result + lowerDict [(( lowerDict . index ( ch ) + offset ) % 26 )] elif ch . isdigit (): result = result + ch else : result = result + ch return result def printAllResult ( ciphertext ): ''' \u6253\u5370\u6240\u6709\u504f\u79fb\u7ed3\u679c ''' for i in range ( len ( upperDict )): print cesarWithLetter ( ciphertext , i ) ciphertext = raw_input ( \"Please input the words :\" ) printAllResult ( ciphertext )","title":"\u51ef\u6492\u5bc6\u780126\u6b21"},{"location":"misc/how_to_ask_questions_the_smart_way/before_you_ask/","text":"\u5728\u4f60\u51c6\u5907\u8981\u901a\u8fc7\u7535\u5b50\u90ae\u4ef6\u3001\u65b0\u95fb\u7fa4\u7ec4\u6216\u8005\u804a\u5929\u5ba4\u63d0\u51fa\u6280\u672f\u95ee\u9898\u524d\uff0c\u8bf7\u5148\u505a\u5230\u4ee5\u4e0b\u4e8b\u60c5\uff1a \u5c1d\u8bd5\u5728\u4f60\u51c6\u5907\u63d0\u95ee\u7684\u8bba\u575b\u7684\u65e7\u6587\u7ae0\u4e2d\u641c\u7d22\u7b54\u6848; \u5c1d\u8bd5\u4e0a\u7f51\u641c\u7d22\u4ee5\u627e\u5230\u7b54\u6848; \u5c1d\u8bd5\u9605\u8bfb\u624b\u518c\u4ee5\u627e\u5230\u7b54\u6848; \u5c1d\u8bd5\u9605\u8bfb\u5e38\u89c1\u95ee\u9898\u6587\u4ef6\uff08FAQ\uff09\u4ee5\u627e\u5230\u7b54\u6848; \u5c1d\u8bd5\u81ea\u5df1\u68c0\u67e5\u6216\u8bd5\u9a8c\u4ee5\u627e\u5230\u7b54\u6848; \u5411\u4f60\u8eab\u8fb9\u7684\u5f3a\u8005\u670b\u53cb\u6253\u542c\u4ee5\u627e\u5230\u7b54\u6848; \u5982\u679c\u4f60\u662f\u7a0b\u5e8f\u5f00\u53d1\u8005\uff0c\u8bf7\u5c1d\u8bd5\u9605\u8bfb\u6e90\u4ee3\u7801\u4ee5\u627e\u5230\u7b54\u6848\u3002 \u5f53\u4f60\u63d0\u51fa\u95ee\u9898\u7684\u65f6\u5019\uff0c\u8bf7\u5148\u8868\u660e\u4f60\u5df2\u7ecf\u505a\u4e86\u4e0a\u8ff0\u7684\u52aa\u529b\uff1b\u8fd9\u5c06\u6709\u52a9\u4e8e\u6811\u7acb\u4f60\u5e76\u4e0d\u662f\u4e00\u4e2a\u4e0d\u52b3\u800c\u83b7\u4e14\u6d6a\u8d39\u522b\u4eba\u7684\u65f6\u95f4\u7684\u63d0\u95ee\u8005\u3002\u5982\u679c\u4f60\u80fd\u4e00\u5e76\u8868\u8fbe\u5728\u505a\u4e86\u4e0a\u8ff0\u52aa\u529b\u7684\u8fc7\u7a0b\u4e2d\u6240\u5b66\u5230\u7684\u4e1c\u897f\u4f1a\u66f4\u597d\uff0c\u56e0\u4e3a\u6211\u4eec\u66f4\u4e50\u4e8e\u56de\u7b54\u90a3\u4e9b\u8868\u73b0\u51fa\u80fd\u4ece\u7b54\u6848\u4e2d\u5b66\u4e60\u7684\u4eba\u7684\u95ee\u9898\u3002 \u8fd0\u7528\u67d0\u4e9b\u7b56\u7565\uff0c\u6bd4\u5982\u5148\u7528 Google \u641c\u7d22\u4f60\u6240\u9047\u5230\u7684\u5404\u79cd\u9519\u8bef\u4fe1\u606f\uff08\u65e2\u641c\u7d22 Google \u8bba\u575b \uff0c\u4e5f\u641c\u7d22\u7f51\u9875\uff09\uff0c\u8fd9\u6837\u5f88\u53ef\u80fd\u76f4\u63a5\u5c31\u627e\u5230\u4e86\u80fd\u89e3\u51b3\u95ee\u9898\u7684\u6587\u4ef6\u6216\u90ae\u4ef6\u5217\u8868\u7ebf\u7d22\u3002\u5373\u4f7f\u6ca1\u6709\u7ed3\u679c\uff0c\u5728\u90ae\u4ef6\u5217\u8868\u6216\u65b0\u95fb\u7ec4\u5bfb\u6c42\u5e2e\u52a9\u65f6\u52a0\u4e0a\u4e00\u53e5 \u6211\u5728 Google \u4e2d\u641c\u8fc7\u4e0b\u5217\u53e5\u5b50\u4f46\u6ca1\u6709\u627e\u5230\u4ec0\u4e48\u6709\u7528\u7684\u4e1c\u897f \u4e5f\u662f\u4ef6\u597d\u4e8b\uff0c\u5373\u4f7f\u5b83\u53ea\u662f\u8868\u660e\u4e86\u641c\u7d22\u5f15\u64ce\u4e0d\u80fd\u63d0\u4f9b\u54ea\u4e9b\u5e2e\u52a9\u3002\u8fd9\u4e48\u505a\uff08\u52a0\u4e0a\u641c\u7d22\u8fc7\u7684\u5b57\u4e32\uff09\u4e5f\u8ba9\u9047\u5230\u76f8\u4f3c\u95ee\u9898\u7684\u5176\u4ed6\u4eba\u80fd\u88ab\u641c\u7d22\u5f15\u64ce\u5f15\u5bfc\u5230\u4f60\u7684\u63d0\u95ee\u6765\u3002 \u522b\u7740\u6025\uff0c\u4e0d\u8981\u6307\u671b\u51e0\u79d2\u949f\u7684 Google \u641c\u7d22\u5c31\u80fd\u89e3\u51b3\u4e00\u4e2a\u590d\u6742\u7684\u95ee\u9898\u3002\u5728\u5411\u4e13\u5bb6\u6c42\u52a9\u4e4b\u524d\uff0c\u518d\u9605\u8bfb\u4e00\u4e0b\u5e38\u89c1\u95ee\u9898\u6587\u4ef6\uff08FAQ\uff09\u3001\u653e\u8f7b\u677e\u3001\u5750\u8212\u670d\u4e00\u4e9b\uff0c\u518d\u82b1\u70b9\u65f6\u95f4\u601d\u8003\u4e00\u4e0b\u8fd9\u4e2a\u95ee\u9898\u3002\u76f8\u4fe1\u6211\u4eec\uff0c\u4ed6\u4eec\u80fd\u4ece\u4f60\u7684\u63d0\u95ee\u770b\u51fa\u4f60\u505a\u4e86\u591a\u5c11\u9605\u8bfb\u4e0e\u601d\u8003\uff0c\u5982\u679c\u4f60\u662f\u6709\u5907\u800c\u6765\uff0c\u5c06\u66f4\u6709\u53ef\u80fd\u5f97\u5230\u89e3\u7b54\u3002\u4e0d\u8981\u5c06\u6240\u6709\u95ee\u9898\u4e00\u80a1\u8111\u62cb\u51fa\uff0c\u53ea\u56e0\u4f60\u7684\u7b2c\u4e00\u6b21\u641c\u7d22\u6ca1\u6709\u627e\u5230\u7b54\u6848\uff08\u6216\u8005\u627e\u5230\u592a\u591a\u7b54\u6848\uff09\u3002 \u51c6\u5907\u597d\u4f60\u7684\u95ee\u9898\uff0c\u518d\u5c06\u95ee\u9898\u4ed4\u7ec6\u7684\u601d\u8003\u8fc7\u4e00\u904d\uff0c\u56e0\u4e3a\u8349\u7387\u7684\u53d1\u95ee\u53ea\u80fd\u5f97\u5230\u8349\u7387\u7684\u56de\u7b54\uff0c\u6216\u8005\u6839\u672c\u5f97\u4e0d\u5230\u4efb\u4f55\u7b54\u6848\u3002\u8d8a\u662f\u80fd\u8868\u73b0\u51fa\u5728\u5bfb\u6c42\u5e2e\u52a9\u524d\u4f60\u4e3a\u89e3\u51b3\u95ee\u9898\u6240\u4ed8\u51fa\u7684\u52aa\u529b\uff0c\u4f60\u8d8a\u6709\u53ef\u80fd\u5f97\u5230\u5b9e\u8d28\u6027\u7684\u5e2e\u52a9\u3002 \u5c0f\u5fc3\u522b\u95ee\u9519\u4e86\u95ee\u9898\u3002\u5982\u679c\u4f60\u7684\u95ee\u9898\u57fa\u4e8e\u9519\u8bef\u7684\u5047\u8bbe\uff0c\u67d0\u4e2a\u666e\u901a\u9ed1\u5ba2\uff08J. Random Hacker\uff09\u591a\u534a\u4f1a\u4e00\u8fb9\u5728\u5fc3\u91cc\u60f3\u7740\u8822\u95ee\u9898\u2026\uff0c \u4e00\u8fb9\u7528\u65e0\u610f\u4e49\u7684\u5b57\u9762\u89e3\u91ca\u6765\u7b54\u590d\u4f60\uff0c\u5e0c\u671b\u7740\u4f60\u4f1a\u4ece\u95ee\u9898\u7684\u56de\u7b54\uff08\u800c\u975e\u4f60\u60f3\u5f97\u5230\u7684\u7b54\u6848\uff09\u4e2d\u6c72\u53d6\u6559\u8bad\u3002 \u7edd\u4e0d\u8981\u81ea\u4ee5\u4e3a\u591f\u683c\u5f97\u5230\u7b54\u6848\uff0c\u4f60\u6ca1\u6709\uff1b\u4f60\u5e76\u6ca1\u6709\u3002\u6bd5\u7adf\u4f60\u6ca1\u6709\u4e3a\u8fd9\u79cd\u670d\u52a1\u652f\u4ed8\u4efb\u4f55\u62a5\u916c\u3002\u4f60\u5c06\u4f1a\u662f\u81ea\u5df1\u53bb\u6323\u5230\u4e00\u4e2a\u7b54\u6848\uff0c\u9760\u63d0\u51fa\u6709\u5185\u6db5\u7684\u3001\u6709\u8da3\u7684\u3001\u6709\u601d\u7ef4\u6fc0\u52b1\u4f5c\u7528\u7684\u95ee\u9898 \u2014\u2014 \u4e00\u4e2a\u6709\u6f5c\u529b\u80fd\u8d21\u732e\u793e\u533a\u7ecf\u9a8c\u7684\u95ee\u9898\uff0c\u800c\u4e0d\u4ec5\u4ec5\u662f\u88ab\u52a8\u7684\u4ece\u4ed6\u4eba\u5904\u7d22\u53d6\u77e5\u8bc6\u3002 \u53e6\u4e00\u65b9\u9762\uff0c\u8868\u660e\u4f60\u613f\u610f\u5728\u627e\u7b54\u6848\u7684\u8fc7\u7a0b\u4e2d\u505a\u70b9\u4ec0\u4e48\u662f\u4e00\u4e2a\u975e\u5e38\u597d\u7684\u5f00\u7aef\u3002\u8c01\u80fd\u7ed9\u70b9\u63d0\u793a\uff1f\u3001\u6211\u7684\u8fd9\u4e2a\u4f8b\u5b50\u91cc\u7f3a\u4e86\u4ec0\u4e48\uff1f\u4ee5\u53ca\u6211\u5e94\u8be5\u68c0\u67e5\u4ec0\u4e48\u5730\u65b9\u6bd4\u8bf7\u628a\u6211\u9700\u8981\u7684\u786e\u5207\u7684\u8fc7\u7a0b\u8d34\u51fa\u6765\u66f4\u5bb9\u6613\u5f97\u5230\u7b54\u590d\u3002\u56e0\u4e3a\u4f60\u8868\u73b0\u51fa\u53ea\u8981\u6709\u4eba\u80fd\u6307\u4e2a\u6b63\u786e\u65b9\u5411\uff0c\u4f60\u5c31\u6709\u5b8c\u6210\u5b83\u7684\u80fd\u529b\u548c\u51b3\u5fc3\u3002","title":"\u5728\u63d0\u95ee\u4e4b\u524d"},{"location":"misc/how_to_ask_questions_the_smart_way/good_and_bad_questions/","text":"\u6700\u540e\uff0c\u6211\u5c06\u900f\u8fc7\u4e3e\u4e00\u4e9b\u4f8b\u5b50\uff0c\u6765\u8bf4\u660e\u600e\u6837\u806a\u660e\u7684\u63d0\u95ee\uff1b\u540c\u4e00\u4e2a\u95ee\u9898\u7684\u4e24\u79cd\u95ee\u6cd5\u88ab\u653e\u5728\u4e00\u8d77\uff0c\u4e00\u79cd\u662f\u611a\u8822\u7684\uff0c\u53e6\u4e00\u79cd\u624d\u662f\u660e\u667a\u7684\u3002 \u8822\u95ee\u9898\uff1a \u6211\u53ef\u4ee5\u5728\u54ea\u513f\u627e\u5230\u5173\u4e8e Foonly Flurbamatic \u7684\u8d44\u6599\uff1f \u8fd9\u79cd\u95ee\u6cd5\u65e0\u975e\u60f3\u5f97\u5230 STFW \u8fd9\u6837\u7684\u56de\u7b54\u3002 \u806a\u660e\u95ee\u9898\uff1a \u6211\u7528 Google \u641c\u7d22\u8fc7 \"Foonly Flurbamatic 2600\"\uff0c\u4f46\u662f\u6ca1\u627e\u5230\u6709\u7528\u7684\u7ed3\u679c\u3002\u8c01\u77e5\u9053\u4e0a\u54ea\u513f\u53bb\u627e\u5bf9\u8fd9\u79cd\u8bbe\u5907\u7f16\u7a0b\u7684\u8d44\u6599\uff1f \u8fd9\u4e2a\u95ee\u9898\u5df2\u7ecf STFW \u8fc7\u4e86\uff0c\u770b\u8d77\u6765\u4ed6\u771f\u7684\u9047\u5230\u4e86\u9ebb\u70e6\u3002 \u8822\u95ee\u9898\uff1a \u6211\u4ece foo \u9879\u76ee\u627e\u6765\u7684\u6e90\u7801\u6ca1\u6cd5\u7f16\u8bd1\u3002\u5b83\u600e\u4e48\u8fd9\u4e48\u70c2? \u4ed6\u89c9\u5f97\u90fd\u662f\u522b\u4eba\u7684\u9519\uff0c\u8fd9\u4e2a\u50b2\u6162\u81ea\u5927\u7684\u63d0\u95ee\u8005\u3002 \u806a\u660e\u95ee\u9898\uff1a foo \u9879\u76ee\u4ee3\u7801\u5728 Nulix 6.2 \u7248\u4e0b\u65e0\u6cd5\u7f16\u8bd1\u901a\u8fc7\u3002\u6211\u8bfb\u8fc7\u4e86 FAQ\uff0c\u4f46\u91cc\u9762\u6ca1\u6709\u63d0\u5230\u8ddf Nulix \u6709\u5173\u7684\u95ee\u9898\u3002\u8fd9\u662f\u6211\u7f16\u8bd1\u8fc7\u7a0b\u7684\u8bb0\u5f55\uff0c\u6211\u6709\u4ec0\u4e48\u505a\u7684\u4e0d\u5bf9\u7684\u5730\u65b9\u5417\uff1f \u63d0\u95ee\u8005\u5df2\u7ecf\u6307\u660e\u4e86\u73af\u5883\uff0c\u4e5f\u8bfb\u8fc7\u4e86 FAQ\uff0c\u8fd8\u5217\u51fa\u4e86\u9519\u8bef\uff0c\u5e76\u4e14\u4ed6\u6ca1\u6709\u628a\u95ee\u9898\u7684\u8d23\u4efb\u63a8\u5230\u522b\u4eba\u5934\u4e0a\uff0c\u4ed6\u7684\u95ee\u9898\u503c\u5f97\u88ab\u5173\u6ce8\u3002 \u8822\u95ee\u9898\uff1a \u6211\u7684\u4e3b\u673a\u677f\u6709\u95ee\u9898\u4e86\uff0c\u8c01\u6765\u5e2e\u6211\uff1f \u67d0\u9ed1\u5ba2\u5bf9\u8fd9\u7c7b\u95ee\u9898\u7684\u56de\u7b54\u901a\u5e38\u662f\uff1a \u597d\u7684\uff0c\u8fd8\u8981\u5e2e\u4f60\u62cd\u62cd\u80cc\u548c\u6362\u5c3f\u5e03\u5417\uff1f \uff0c\u7136\u540e\u6309\u4e0b\u5220\u9664\u952e\u3002 \u806a\u660e\u95ee\u9898\uff1a \u6211\u5728 S2464 \u4e3b\u673a\u677f\u4e0a\u8bd5\u8fc7\u4e86 X \u3001 Y \u548c Z \uff0c\u4f46\u6ca1\u4ec0\u4e48\u4f5c\u7528\uff0c\u6211\u53c8\u8bd5\u4e86 A \u3001 B \u548c C \u3002\u8bf7\u6ce8\u610f\u5f53\u6211\u5c1d\u8bd5 C \u65f6\u7684\u5947\u602a\u73b0\u8c61\u3002\u663e\u7136 florbish \u6b63\u5728 grommicking\uff0c\u4f46\u7ed3\u679c\u51fa\u4eba\u610f\u6599\u3002\u901a\u5e38\u5728 Athlon MP \u4e3b\u673a\u677f\u4e0a\u5f15\u8d77 grommicking \u7684\u539f\u56e0\u662f\u4ec0\u4e48\uff1f\u6709\u8c01\u77e5\u9053\u63a5\u4e0b\u6765\u6211\u8be5\u505a\u4e9b\u4ec0\u4e48\u6d4b\u8bd5\u624d\u80fd\u627e\u51fa\u95ee\u9898\uff1f \u8fd9\u4e2a\u5bb6\u4f19\uff0c\u4ece\u53e6\u4e00\u4e2a\u89d2\u5ea6\u6765\u770b\uff0c\u503c\u5f97\u53bb\u56de\u7b54\u4ed6\u3002\u4ed6\u8868\u73b0\u51fa\u4e86\u89e3\u51b3\u95ee\u9898\u7684\u80fd\u529b\uff0c\u800c\u4e0d\u662f\u5750\u7b49\u5929\u4e0a\u6389\u7b54\u6848\u3002 \u5728\u6700\u540e\u4e00\u4e2a\u95ee\u9898\u4e2d\uff0c\u6ce8\u610f\u544a\u8bc9\u6211\u7b54\u6848\u548c\u7ed9\u6211\u542f\u793a\uff0c\u6307\u51fa\u6211\u8fd8\u5e94\u8be5\u505a\u4ec0\u4e48\u8bca\u65ad\u5de5\u4f5c\u4e4b\u95f4\u5fae\u5999\u800c\u53c8\u91cd\u8981\u7684\u533a\u522b\u3002 \u4e8b\u5b9e\u4e0a\uff0c\u540e\u4e00\u4e2a\u95ee\u9898\u6e90\u81ea\u4e8e 2001 \u5e74 8 \u6708\u5728 Linux \u5185\u6838\u90ae\u4ef6\u5217\u8868\uff08lkml\uff09\u4e0a\u7684\u4e00\u4e2a\u771f\u5b9e\u7684\u63d0\u95ee\u3002\u6211\uff08Eric\uff09\u5c31\u662f\u90a3\u4e2a\u63d0\u51fa\u95ee\u9898\u7684\u4eba\u3002\u6211\u5728 Tyan S2464 \u4e3b\u677f\u4e0a\u89c2\u5bdf\u5230\u4e86\u8fd9\u79cd\u65e0\u6cd5\u89e3\u91ca\u7684\u9501\u5b9a\u73b0\u8c61\uff0c\u5217\u8868\u6210\u5458\u4eec\u63d0\u4f9b\u4e86\u89e3\u51b3\u8fd9\u4e00\u95ee\u9898\u7684\u91cd\u8981\u4fe1\u606f\u3002 \u901a\u8fc7\u6211\u7684\u63d0\u95ee\u65b9\u6cd5\uff0c\u6211\u7ed9\u4e86\u522b\u4eba\u53ef\u4ee5\u5480\u56bc\u73a9\u5473\u7684\u4e1c\u897f\uff1b\u6211\u8bbe\u6cd5\u8ba9\u4eba\u4eec\u5f88\u5bb9\u6613\u53c2\u4e0e\u5e76\u4e14\u88ab\u5438\u5f15\u8fdb\u6765\u3002\u6211\u663e\u793a\u4e86\u81ea\u5df1\u5177\u5907\u548c\u4ed6\u4eec\u540c\u7b49\u7684\u80fd\u529b\uff0c\u5e76\u9080\u8bf7\u4ed6\u4eec\u4e0e\u6211\u5171\u540c\u63a2\u8ba8\u3002\u901a\u8fc7\u544a\u8bc9\u4ed6\u4eec\u6211\u6240\u8d70\u8fc7\u7684\u5f2f\u8def\uff0c\u4ee5\u907f\u514d\u4ed6\u4eec\u518d\u6d6a\u8d39\u65f6\u95f4\uff0c\u6211\u4e5f\u8868\u660e\u4e86\u5bf9\u4ed6\u4eec\u5b9d\u8d35\u65f6\u95f4\u7684\u5c0a\u91cd\u3002 \u4e8b\u540e\uff0c\u5f53\u6211\u5411\u6bcf\u4e2a\u4eba\u8868\u793a\u611f\u8c22\uff0c\u5e76\u4e14\u8d5e\u8d4f\u8fd9\u6b21\u826f\u597d\u7684\u8ba8\u8bba\u7ecf\u5386\u7684\u65f6\u5019\uff0c \u4e00\u4e2a Linux \u5185\u6838\u90ae\u4ef6\u5217\u8868\u7684\u6210\u5458\u8868\u793a\uff0c\u4ed6\u89c9\u5f97\u6211\u7684\u95ee\u9898\u5f97\u5230\u89e3\u51b3\u5e76\u975e\u7531\u4e8e\u6211\u662f\u8fd9\u4e2a\u5217\u8868\u4e2d\u7684\u540d\u4eba\uff0c\u800c\u662f\u56e0\u4e3a\u6211\u7528\u4e86\u6b63\u786e\u7684\u65b9\u5f0f\u6765\u63d0\u95ee\u3002 \u9ed1\u5ba2\u4ece\u67d0\u79cd\u89d2\u5ea6\u6765\u8bf4\u662f\u62e5\u6709\u4e30\u5bcc\u77e5\u8bc6\u4f46\u7f3a\u4e4f\u4eba\u60c5\u5473\u7684\u5bb6\u4f19\uff1b\u6211\u76f8\u4fe1\u4ed6\u662f\u5bf9\u7684\uff0c\u5982\u679c\u6211\u50cf\u4e2a\u4e5e\u8ba8\u8005\u90a3\u6837\u63d0\u95ee\uff0c\u4e0d\u8bba\u6211\u662f\u8c01\uff0c\u4e00\u5b9a\u4f1a\u60f9\u607c\u67d0\u4e9b\u4eba\u6216\u8005\u88ab\u4ed6\u4eec\u5ffd\u89c6\u3002\u4ed6\u5efa\u8bae\u6211\u8bb0\u4e0b\u8fd9\u4ef6\u4e8b\uff0c\u8fd9\u76f4\u63a5\u5bfc\u81f4\u4e86\u672c\u6307\u5357\u7684\u51fa\u73b0\u3002","title":"\u597d\u95ee\u9898\u4e0e\u8822\u95ee\u9898"},{"location":"misc/how_to_ask_questions_the_smart_way/good_and_bad_questions/#_1","text":"\u6211\u53ef\u4ee5\u5728\u54ea\u513f\u627e\u5230\u5173\u4e8e Foonly Flurbamatic \u7684\u8d44\u6599\uff1f \u8fd9\u79cd\u95ee\u6cd5\u65e0\u975e\u60f3\u5f97\u5230 STFW \u8fd9\u6837\u7684\u56de\u7b54\u3002","title":"\u8822\u95ee\u9898\uff1a"},{"location":"misc/how_to_ask_questions_the_smart_way/good_and_bad_questions/#_2","text":"\u6211\u7528 Google \u641c\u7d22\u8fc7 \"Foonly Flurbamatic 2600\"\uff0c\u4f46\u662f\u6ca1\u627e\u5230\u6709\u7528\u7684\u7ed3\u679c\u3002\u8c01\u77e5\u9053\u4e0a\u54ea\u513f\u53bb\u627e\u5bf9\u8fd9\u79cd\u8bbe\u5907\u7f16\u7a0b\u7684\u8d44\u6599\uff1f \u8fd9\u4e2a\u95ee\u9898\u5df2\u7ecf STFW \u8fc7\u4e86\uff0c\u770b\u8d77\u6765\u4ed6\u771f\u7684\u9047\u5230\u4e86\u9ebb\u70e6\u3002","title":"\u806a\u660e\u95ee\u9898\uff1a"},{"location":"misc/how_to_ask_questions_the_smart_way/good_and_bad_questions/#_3","text":"\u6211\u4ece foo \u9879\u76ee\u627e\u6765\u7684\u6e90\u7801\u6ca1\u6cd5\u7f16\u8bd1\u3002\u5b83\u600e\u4e48\u8fd9\u4e48\u70c2? \u4ed6\u89c9\u5f97\u90fd\u662f\u522b\u4eba\u7684\u9519\uff0c\u8fd9\u4e2a\u50b2\u6162\u81ea\u5927\u7684\u63d0\u95ee\u8005\u3002","title":"\u8822\u95ee\u9898\uff1a"},{"location":"misc/how_to_ask_questions_the_smart_way/good_and_bad_questions/#_4","text":"foo \u9879\u76ee\u4ee3\u7801\u5728 Nulix 6.2 \u7248\u4e0b\u65e0\u6cd5\u7f16\u8bd1\u901a\u8fc7\u3002\u6211\u8bfb\u8fc7\u4e86 FAQ\uff0c\u4f46\u91cc\u9762\u6ca1\u6709\u63d0\u5230\u8ddf Nulix \u6709\u5173\u7684\u95ee\u9898\u3002\u8fd9\u662f\u6211\u7f16\u8bd1\u8fc7\u7a0b\u7684\u8bb0\u5f55\uff0c\u6211\u6709\u4ec0\u4e48\u505a\u7684\u4e0d\u5bf9\u7684\u5730\u65b9\u5417\uff1f \u63d0\u95ee\u8005\u5df2\u7ecf\u6307\u660e\u4e86\u73af\u5883\uff0c\u4e5f\u8bfb\u8fc7\u4e86 FAQ\uff0c\u8fd8\u5217\u51fa\u4e86\u9519\u8bef\uff0c\u5e76\u4e14\u4ed6\u6ca1\u6709\u628a\u95ee\u9898\u7684\u8d23\u4efb\u63a8\u5230\u522b\u4eba\u5934\u4e0a\uff0c\u4ed6\u7684\u95ee\u9898\u503c\u5f97\u88ab\u5173\u6ce8\u3002","title":"\u806a\u660e\u95ee\u9898\uff1a"},{"location":"misc/how_to_ask_questions_the_smart_way/good_and_bad_questions/#_5","text":"\u6211\u7684\u4e3b\u673a\u677f\u6709\u95ee\u9898\u4e86\uff0c\u8c01\u6765\u5e2e\u6211\uff1f \u67d0\u9ed1\u5ba2\u5bf9\u8fd9\u7c7b\u95ee\u9898\u7684\u56de\u7b54\u901a\u5e38\u662f\uff1a \u597d\u7684\uff0c\u8fd8\u8981\u5e2e\u4f60\u62cd\u62cd\u80cc\u548c\u6362\u5c3f\u5e03\u5417\uff1f \uff0c\u7136\u540e\u6309\u4e0b\u5220\u9664\u952e\u3002","title":"\u8822\u95ee\u9898\uff1a"},{"location":"misc/how_to_ask_questions_the_smart_way/good_and_bad_questions/#_6","text":"\u6211\u5728 S2464 \u4e3b\u673a\u677f\u4e0a\u8bd5\u8fc7\u4e86 X \u3001 Y \u548c Z \uff0c\u4f46\u6ca1\u4ec0\u4e48\u4f5c\u7528\uff0c\u6211\u53c8\u8bd5\u4e86 A \u3001 B \u548c C \u3002\u8bf7\u6ce8\u610f\u5f53\u6211\u5c1d\u8bd5 C \u65f6\u7684\u5947\u602a\u73b0\u8c61\u3002\u663e\u7136 florbish \u6b63\u5728 grommicking\uff0c\u4f46\u7ed3\u679c\u51fa\u4eba\u610f\u6599\u3002\u901a\u5e38\u5728 Athlon MP \u4e3b\u673a\u677f\u4e0a\u5f15\u8d77 grommicking \u7684\u539f\u56e0\u662f\u4ec0\u4e48\uff1f\u6709\u8c01\u77e5\u9053\u63a5\u4e0b\u6765\u6211\u8be5\u505a\u4e9b\u4ec0\u4e48\u6d4b\u8bd5\u624d\u80fd\u627e\u51fa\u95ee\u9898\uff1f \u8fd9\u4e2a\u5bb6\u4f19\uff0c\u4ece\u53e6\u4e00\u4e2a\u89d2\u5ea6\u6765\u770b\uff0c\u503c\u5f97\u53bb\u56de\u7b54\u4ed6\u3002\u4ed6\u8868\u73b0\u51fa\u4e86\u89e3\u51b3\u95ee\u9898\u7684\u80fd\u529b\uff0c\u800c\u4e0d\u662f\u5750\u7b49\u5929\u4e0a\u6389\u7b54\u6848\u3002 \u5728\u6700\u540e\u4e00\u4e2a\u95ee\u9898\u4e2d\uff0c\u6ce8\u610f\u544a\u8bc9\u6211\u7b54\u6848\u548c\u7ed9\u6211\u542f\u793a\uff0c\u6307\u51fa\u6211\u8fd8\u5e94\u8be5\u505a\u4ec0\u4e48\u8bca\u65ad\u5de5\u4f5c\u4e4b\u95f4\u5fae\u5999\u800c\u53c8\u91cd\u8981\u7684\u533a\u522b\u3002 \u4e8b\u5b9e\u4e0a\uff0c\u540e\u4e00\u4e2a\u95ee\u9898\u6e90\u81ea\u4e8e 2001 \u5e74 8 \u6708\u5728 Linux \u5185\u6838\u90ae\u4ef6\u5217\u8868\uff08lkml\uff09\u4e0a\u7684\u4e00\u4e2a\u771f\u5b9e\u7684\u63d0\u95ee\u3002\u6211\uff08Eric\uff09\u5c31\u662f\u90a3\u4e2a\u63d0\u51fa\u95ee\u9898\u7684\u4eba\u3002\u6211\u5728 Tyan S2464 \u4e3b\u677f\u4e0a\u89c2\u5bdf\u5230\u4e86\u8fd9\u79cd\u65e0\u6cd5\u89e3\u91ca\u7684\u9501\u5b9a\u73b0\u8c61\uff0c\u5217\u8868\u6210\u5458\u4eec\u63d0\u4f9b\u4e86\u89e3\u51b3\u8fd9\u4e00\u95ee\u9898\u7684\u91cd\u8981\u4fe1\u606f\u3002 \u901a\u8fc7\u6211\u7684\u63d0\u95ee\u65b9\u6cd5\uff0c\u6211\u7ed9\u4e86\u522b\u4eba\u53ef\u4ee5\u5480\u56bc\u73a9\u5473\u7684\u4e1c\u897f\uff1b\u6211\u8bbe\u6cd5\u8ba9\u4eba\u4eec\u5f88\u5bb9\u6613\u53c2\u4e0e\u5e76\u4e14\u88ab\u5438\u5f15\u8fdb\u6765\u3002\u6211\u663e\u793a\u4e86\u81ea\u5df1\u5177\u5907\u548c\u4ed6\u4eec\u540c\u7b49\u7684\u80fd\u529b\uff0c\u5e76\u9080\u8bf7\u4ed6\u4eec\u4e0e\u6211\u5171\u540c\u63a2\u8ba8\u3002\u901a\u8fc7\u544a\u8bc9\u4ed6\u4eec\u6211\u6240\u8d70\u8fc7\u7684\u5f2f\u8def\uff0c\u4ee5\u907f\u514d\u4ed6\u4eec\u518d\u6d6a\u8d39\u65f6\u95f4\uff0c\u6211\u4e5f\u8868\u660e\u4e86\u5bf9\u4ed6\u4eec\u5b9d\u8d35\u65f6\u95f4\u7684\u5c0a\u91cd\u3002 \u4e8b\u540e\uff0c\u5f53\u6211\u5411\u6bcf\u4e2a\u4eba\u8868\u793a\u611f\u8c22\uff0c\u5e76\u4e14\u8d5e\u8d4f\u8fd9\u6b21\u826f\u597d\u7684\u8ba8\u8bba\u7ecf\u5386\u7684\u65f6\u5019\uff0c \u4e00\u4e2a Linux \u5185\u6838\u90ae\u4ef6\u5217\u8868\u7684\u6210\u5458\u8868\u793a\uff0c\u4ed6\u89c9\u5f97\u6211\u7684\u95ee\u9898\u5f97\u5230\u89e3\u51b3\u5e76\u975e\u7531\u4e8e\u6211\u662f\u8fd9\u4e2a\u5217\u8868\u4e2d\u7684\u540d\u4eba\uff0c\u800c\u662f\u56e0\u4e3a\u6211\u7528\u4e86\u6b63\u786e\u7684\u65b9\u5f0f\u6765\u63d0\u95ee\u3002 \u9ed1\u5ba2\u4ece\u67d0\u79cd\u89d2\u5ea6\u6765\u8bf4\u662f\u62e5\u6709\u4e30\u5bcc\u77e5\u8bc6\u4f46\u7f3a\u4e4f\u4eba\u60c5\u5473\u7684\u5bb6\u4f19\uff1b\u6211\u76f8\u4fe1\u4ed6\u662f\u5bf9\u7684\uff0c\u5982\u679c\u6211\u50cf\u4e2a\u4e5e\u8ba8\u8005\u90a3\u6837\u63d0\u95ee\uff0c\u4e0d\u8bba\u6211\u662f\u8c01\uff0c\u4e00\u5b9a\u4f1a\u60f9\u607c\u67d0\u4e9b\u4eba\u6216\u8005\u88ab\u4ed6\u4eec\u5ffd\u89c6\u3002\u4ed6\u5efa\u8bae\u6211\u8bb0\u4e0b\u8fd9\u4ef6\u4e8b\uff0c\u8fd9\u76f4\u63a5\u5bfc\u81f4\u4e86\u672c\u6307\u5357\u7684\u51fa\u73b0\u3002","title":"\u806a\u660e\u95ee\u9898\uff1a"},{"location":"misc/how_to_ask_questions_the_smart_way/how_to_answer_questions_in_a_helpful_way/","text":"\u6001\u5ea6\u548c\u5584\u4e00\u70b9\u3002 \u95ee\u9898\u5e26\u6765\u7684\u538b\u529b\u5e38\u4f7f\u4eba\u663e\u5f97\u65e0\u793c\u6216\u611a\u8822\uff0c\u5176\u5b9e\u5e76\u4e0d\u662f\u8fd9\u6837\u3002 \u5bf9\u521d\u72af\u8005\u79c1\u4e0b\u56de\u590d\u3002 \u5bf9\u90a3\u4e9b\u5766\u8bda\u72af\u9519\u4e4b\u4eba\u6ca1\u6709\u5fc5\u8981\u5f53\u4f17\u7f9e\u8fb1\uff0c\u4e00\u4e2a\u771f\u6b63\u7684\u65b0\u624b\u4e5f\u8bb8\u8fde\u600e\u4e48\u641c\u7d22\u6216\u5728\u54ea\u627e\u5e38\u89c1\u95ee\u9898\u90fd\u4e0d\u77e5\u9053\u3002 \u5982\u679c\u4f60\u4e0d\u786e\u5b9a\uff0c\u4e00\u5b9a\u8981\u8bf4\u51fa\u6765\uff01 \u4e00\u4e2a\u542c\u8d77\u6765\u6743\u5a01\u7684\u9519\u8bef\u56de\u590d\u6bd4\u6ca1\u6709\u8fd8\u8981\u7cdf\uff0c\u522b\u56e0\u4e3a\u542c\u8d77\u6765\u50cf\u4e2a\u4e13\u5bb6\u5f88\u597d\u73a9\uff0c\u5c31\u7ed9\u522b\u4eba\u4e71\u6307\u8def\u3002\u8981\u8c26\u865a\u548c\u8bda\u5b9e\uff0c\u7ed9\u63d0\u95ee\u8005\u4e0e\u540c\u884c\u90fd\u6811\u4e2a\u597d\u699c\u6837\u3002 \u5982\u679c\u5e2e\u4e0d\u4e86\u5fd9\uff0c\u4e5f\u522b\u59a8\u788d\u4ed6\u3002 \u4e0d\u8981\u5728\u5b9e\u9645\u6b65\u9aa4\u4e0a\u5f00\u73a9\u7b11\uff0c\u90a3\u6837\u4e5f\u8bb8\u4f1a\u6bc1\u4e86\u4f7f\u7528\u8005\u7684\u8bbe\u7f6e \u2014\u2014 \u6709\u4e9b\u53ef\u601c\u7684\u5446\u74dc\u4f1a\u628a\u5b83\u5f53\u6210\u771f\u7684\u6307\u4ee4\u3002 \u8bd5\u63a2\u6027\u7684\u53cd\u95ee\u4ee5\u5f15\u51fa\u66f4\u591a\u7684\u7ec6\u8282\u3002 \u5982\u679c\u4f60\u505a\u5f97\u597d\uff0c\u63d0\u95ee\u8005\u53ef\u4ee5\u5b66\u5230\u70b9\u4e1c\u897f \u2014\u2014 \u4f60\u4e5f\u53ef\u4ee5\u3002\u8bd5\u8bd5\u5c06\u8822\u95ee\u9898\u8f6c\u53d8\u6210\u597d\u95ee\u9898\uff0c\u522b\u5fd8\u4e86\u6211\u4eec\u90fd\u66fe\u662f\u65b0\u624b\u3002 \u5c3d\u7ba1\u5bf9\u90a3\u4e9b\u61d2\u866b\u62b1\u6028\u4e00\u58f0 RTFM \u662f\u6b63\u5f53\u7684\uff0c\u80fd\u6307\u51fa\u6587\u4ef6\u7684\u4f4d\u7f6e\uff08\u5373\u4f7f\u53ea\u662f\u5efa\u8bae\u4e2a Google \u641c\u7d22\u5173\u952e\u8bcd\uff09\u4f1a\u66f4\u597d\u3002 \u5982\u679c\u4f60\u51b3\u5b9a\u56de\u7b54\uff0c\u5c31\u8bf7\u7ed9\u51fa\u597d\u7684\u7b54\u6848\u3002 \u5f53\u522b\u4eba\u6b63\u5728\u7528\u9519\u8bef\u7684\u5de5\u5177\u6216\u65b9\u6cd5\u65f6\u522b\u5efa\u8bae\u7b28\u62d9\u7684\u6743\u5b9c\u4e4b\u8ba1\uff08wordaround\uff09\uff0c\u5e94\u63a8\u8350\u66f4\u597d\u7684\u5de5\u5177\uff0c\u91cd\u65b0\u754c\u5b9a\u95ee\u9898\u3002 \u6b63\u9762\u7684\u56de\u7b54\u95ee\u9898\uff01 \u5982\u679c\u8fd9\u4e2a\u63d0\u95ee\u8005\u5df2\u7ecf\u5f88\u6df1\u5165\u7684\u7814\u7a76\u800c\u4e14\u4e5f\u8868\u660e\u5df2\u7ecf\u8bd5\u8fc7 X \u3001 Y \u3001 Z \u3001 A \u3001 B \u3001 C \u4f46\u6ca1\u5f97\u5230\u7ed3\u679c\uff0c\u56de\u7b54 \u8bd5\u8bd5\u770b A \u6216\u662f B \u6216\u8005 \u8bd5\u8bd5 X \u3001 Y \u3001 Z \u3001 A \u3001 B \u3001 C \u5e76\u9644\u4e0a\u4e00\u4e2a\u94fe\u63a5\u4e00\u70b9\u7528\u90fd\u6ca1\u6709\u3002 \u5e2e\u52a9\u4f60\u7684\u793e\u533a\u4ece\u95ee\u9898\u4e2d\u5b66\u4e60\u3002 \u5f53\u56de\u590d\u4e00\u4e2a\u597d\u95ee\u9898\u65f6\uff0c\u95ee\u95ee\u81ea\u5df1\u5982\u4f55\u4fee\u6539\u76f8\u5173\u6587\u4ef6\u6216\u5e38\u89c1\u95ee\u9898\u6587\u4ef6\u4ee5\u514d\u518d\u6b21\u89e3\u7b54\u540c\u6837\u7684\u95ee\u9898\uff1f\uff0c\u63a5\u7740\u518d\u5411\u6587\u4ef6\u7ef4\u62a4\u8005\u53d1\u4e00\u4efd\u8865\u4e01\u3002 \u5982\u679c\u4f60\u662f\u5728\u7814\u7a76\u4e00\u756a\u540e\u624d\u505a\u51fa\u7684\u56de\u7b54\uff0c \u5c55\u73b0\u4f60\u7684\u6280\u5de7\u800c\u4e0d\u662f\u76f4\u63a5\u7aef\u51fa\u7ed3\u679c\u3002 \u6bd5\u7adf\u6388\u4eba\u4ee5\u9c7c\u4e0d\u5982\u6388\u4eba\u4ee5\u6e14\u3002","title":"\u5982\u4f55\u66f4\u597d\u5730\u56de\u7b54\u95ee\u9898"},{"location":"misc/how_to_ask_questions_the_smart_way/how_to_ask_questions_the_smart_way/","text":"How To Ask Questions The Smart Way? Copyright \u00a9 2001,2006,2014 Eric S. Raymond, Rick Moen \u672c\u6307\u5357\u82f1\u6587\u7248\u7248\u6743\u4e3a Eric S. Raymond, Rick Moen \u6240\u6709\u3002 \u82f1\u6587\u539f\u6587\u7f51\u5740\uff1a http://www.catb.org/~esr/faqs/smart-questions.html \u7b80\u4f53\u4e2d\u6587\u539f\u6587\u5730\u5740: https://github.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/blob/master/README-zh_CN.md Copyleft 2001 by D.H.Grand(nOBODY/Ginux), 2010 by Gasolin, 2015 by Ryan Wu \u672c\u4e2d\u6587\u6307\u5357\u662f\u57fa\u4e8e\u539f\u6587 3.10 \u7248\u4ee5\u53ca 2010 \u5e74\u7531 Gasolin \u6240\u7ffb\u8bd1\u7248\u672c\u7684\u6700\u65b0\u7ffb\u8bd1\uff1b \u534f\u52a9\u6307\u51fa\u7ffb\u8bd1\u95ee\u9898\uff0c\u8bf7 \u53d1 Issue \uff0c\u6216\u76f4\u63a5 \u53d1 Pull Request \u7ed9\u6211\u3002 \u672c\u6587\u53e6\u6709 \u7e41\u9ad4\u4e2d\u6587\u7248 \u3002 \u7b80\u4ecb \u5728 \u9ed1\u5ba2 \u7684\u4e16\u754c\u91cc\uff0c\u5f53\u4f60\u62cb\u51fa\u4e00\u4e2a\u6280\u672f\u95ee\u9898\u65f6\uff0c\u6700\u7ec8\u662f\u5426\u80fd\u5f97\u5230\u6709\u7528\u7684\u56de\u7b54\uff0c\u5f80\u5f80\u53d6\u51b3\u4e8e\u4f60\u6240\u63d0\u95ee\u548c\u8ffd\u95ee\u7684\u65b9\u5f0f\u3002\u672c\u6307\u5357\u5c06\u6559\u4f60\u5982\u4f55\u6b63\u786e\u7684\u63d0\u95ee\u4ee5\u83b7\u5f97\u4f60\u6ee1\u610f\u7684\u7b54\u6848\u3002 \u4e0d\u53ea\u662f\u9ed1\u5ba2\uff0c\u73b0\u5728\u5f00\u6e90\uff08Open Source\uff09\u8f6f\u4ef6\u5df2\u7ecf\u76f8\u5f53\u76db\u884c\uff0c\u4f60\u5e38\u5e38\u4e5f\u53ef\u4ee5\u7531\u5176\u4ed6\u6709\u7ecf\u9a8c\u7684\u4f7f\u7528\u8005\u8eab\u4e0a\u5f97\u5230\u597d\u7b54\u6848\uff0c\u8fd9\u662f\u4ef6 \u597d\u4e8b \uff1b\u4f7f\u7528\u8005\u6bd4\u8d77\u9ed1\u5ba2\u6765\uff0c\u5f80\u5f80\u5bf9\u90a3\u4e9b\u65b0\u624b\u5e38\u9047\u5230\u7684\u95ee\u9898\u66f4\u5bbd\u5bb9\u4e00\u4e9b\u3002\u7136\u800c\uff0c\u5c06\u6709\u7ecf\u9a8c\u7684\u4f7f\u7528\u8005\u89c6\u4e3a\u9ed1\u5ba2\uff0c\u5e76\u91c7\u7528\u672c\u6307\u5357\u6240\u63d0\u7684\u65b9\u6cd5\u4e0e\u4ed6\u4eec\u6c9f\u901a\uff0c\u540c\u6837\u4e5f\u662f\u80fd\u4ece\u4ed6\u4eec\u8eab\u4e0a\u5f97\u5230\u6ee1\u610f\u56de\u7b54\u7684\u6700\u6709\u6548\u65b9\u5f0f\u3002 \u9996\u5148\u4f60\u5e94\u8be5\u660e\u767d\uff0c\u9ed1\u5ba2\u4eec\u559c\u7231\u6709\u6311\u6218\u6027\u7684\u95ee\u9898\uff0c\u6216\u8005\u80fd\u6fc0\u53d1\u4ed6\u4eec\u601d\u7ef4\u7684\u597d\u95ee\u9898\u3002\u5982\u679c\u6211\u4eec\u5e76\u975e\u5982\u6b64\uff0c\u90a3\u6211\u4eec\u4e5f\u4e0d\u4f1a\u6210\u4e3a\u4f60\u60f3\u8be2\u95ee\u7684\u5bf9\u8c61\u3002\u5982\u679c\u4f60\u7ed9\u4e86\u6211\u4eec\u4e00\u4e2a\u503c\u5f97\u53cd\u590d\u5480\u56bc\u73a9\u5473\u7684\u597d\u95ee\u9898\uff0c\u6211\u4eec\u81ea\u4f1a\u5bf9\u4f60\u611f\u6fc0\u4e0d\u5c3d\u3002\u597d\u95ee\u9898\u662f\u6fc0\u52b1\uff0c\u662f\u539a\u793c\u3002\u597d\u95ee\u9898\u53ef\u4ee5\u63d0\u9ad8\u6211\u4eec\u7684\u7406\u89e3\u529b\uff0c\u800c\u4e14\u901a\u5e38\u4f1a\u66b4\u9732\u6211\u4eec\u4ee5\u524d\u4ece\u6ca1\u610f\u8bc6\u5230\u6216\u8005\u601d\u8003\u8fc7\u7684\u95ee\u9898\u3002\u5bf9\u9ed1\u5ba2\u800c\u8a00\uff0c\"\u597d\u95ee\u9898\uff01\"\u662f\u8bda\u631a\u7684\u5927\u529b\u79f0\u8d5e\u3002 \u5c3d\u7ba1\u5982\u6b64\uff0c\u9ed1\u5ba2\u4eec\u6709\u7740\u8511\u89c6\u6216\u50b2\u6162\u9762\u5bf9\u7b80\u5355\u95ee\u9898\u7684\u574f\u540d\u58f0\uff0c\u8fd9\u6709\u65f6\u8ba9\u6211\u4eec\u770b\u8d77\u6765\u5bf9\u65b0\u624b\u3001\u65e0\u77e5\u8005\u4f3c\u4e4e\u8f83\u6709\u654c\u610f\uff0c\u4f46\u5176\u5b9e\u4e0d\u662f\u90a3\u6837\u7684\u3002 \u6211\u4eec\u4e0d\u8bb3\u8a00\u6211\u4eec\u5bf9\u90a3\u4e9b\u4e0d\u613f\u601d\u8003\u3001\u6216\u8005\u5728\u53d1\u95ee\u524d\u4e0d\u505a\u4ed6\u4eec\u8be5\u505a\u7684\u4e8b\u7684\u4eba\u7684\u8511\u89c6\u3002\u90a3\u4e9b\u4eba\u662f\u65f6\u95f4\u6740\u624b \u2014\u2014 \u4ed6\u4eec\u53ea\u60f3\u7d22\u53d6\uff0c\u4ece\u4e0d\u4ed8\u51fa\uff0c\u6d88\u8017\u6211\u4eec\u53ef\u7528\u5728\u66f4\u6709\u8da3\u7684\u95ee\u9898\u6216\u66f4\u503c\u5f97\u56de\u7b54\u7684\u4eba\u8eab\u4e0a\u7684\u65f6\u95f4\u3002\u6211\u4eec\u79f0\u8fd9\u6837\u7684\u4eba\u4e3a \u5931\u8d25\u8005\uff08\u64b8\u745f\uff09 \uff08\u7531\u4e8e\u5386\u53f2\u539f\u56e0\uff0c\u6211\u4eec\u6709\u65f6\u628a\u5b83\u62fc\u4f5c lusers \uff09\u3002 \u6211\u4eec\u610f\u8bc6\u5230\u8bb8\u591a\u4eba\u53ea\u662f\u60f3\u4f7f\u7528\u6211\u4eec\u5199\u7684\u8f6f\u4ef6\uff0c\u4ed6\u4eec\u5bf9\u5b66\u4e60\u6280\u672f\u7ec6\u8282\u6ca1\u6709\u5174\u8da3\u3002\u5bf9\u5927\u591a\u6570\u4eba\u800c\u8a00\uff0c\u7535\u8111\u53ea\u662f\u79cd\u5de5\u5177\uff0c\u662f\u79cd\u8fbe\u5230\u76ee\u7684\u7684\u624b\u6bb5\u800c\u5df2\u3002\u4ed6\u4eec\u6709\u81ea\u5df1\u7684\u751f\u6d3b\u5e76\u4e14\u6709\u66f4\u8981\u7d27\u7684\u4e8b\u8981\u505a\u3002\u6211\u4eec\u4e86\u89e3\u8fd9\u70b9\uff0c\u4e5f\u4ece\u4e0d\u6307\u671b\u6bcf\u4e2a\u4eba\u90fd\u5bf9\u8fd9\u4e9b\u8ba9\u6211\u4eec\u7740\u8ff7\u7684\u6280\u672f\u95ee\u9898\u611f\u5174\u8da3\u3002\u5c3d\u7ba1\u5982\u6b64\uff0c\u6211\u4eec\u56de\u7b54\u95ee\u9898\u7684\u98ce\u683c\u662f\u6307\u5411\u90a3\u4e9b\u771f\u6b63\u5bf9\u6b64\u6709\u5174\u8da3\u5e76\u613f\u610f\u4e3b\u52a8\u53c2\u4e0e\u89e3\u51b3\u95ee\u9898\u7684\u4eba\uff0c\u8fd9\u4e00\u70b9\u4e0d\u4f1a\u53d8\uff0c\u4e5f\u4e0d\u8be5\u53d8\u3002\u5982\u679c\u8fde\u8fd9\u90fd\u53d8\u4e86\uff0c\u6211\u4eec\u5c31\u662f\u5728\u964d\u4f4e\u505a\u81ea\u5df1\u6700\u64c5\u957f\u7684\u4e8b\u60c5\u4e0a\u7684\u6548\u7387\u3002 \u6211\u4eec\uff08\u5728\u5f88\u5927\u7a0b\u5ea6\u4e0a\uff09\u662f\u81ea\u613f\u7684\uff0c\u4ece\u7e41\u5fd9\u7684\u751f\u6d3b\u4e2d\u62bd\u51fa\u65f6\u95f4\u6765\u89e3\u7b54\u7591\u60d1\uff0c\u800c\u4e14\u65f6\u5e38\u88ab\u63d0\u95ee\u6df9\u6ca1\u3002\u6240\u4ee5\u6211\u4eec\u65e0\u60c5\u7684\u6ee4\u6389\u4e00\u4e9b\u8bdd\u9898\uff0c\u7279\u522b\u662f\u62cb\u5f03\u90a3\u4e9b\u770b\u8d77\u6765\u50cf\u5931\u8d25\u8005\u7684\u5bb6\u4f19\uff0c\u4ee5\u4fbf\u66f4\u9ad8\u6548\u7684\u5229\u7528\u65f6\u95f4\u6765\u56de\u7b54 \u8d62\u5bb6\uff08winner\uff09 \u7684\u95ee\u9898\u3002 \u5982\u679c\u4f60\u538c\u6076\u6211\u4eec\u7684\u6001\u5ea6\uff0c\u9ad8\u9ad8\u5728\u4e0a\uff0c\u6216\u8fc7\u4e8e\u50b2\u6162\uff0c\u4e0d\u59a8\u4e5f\u8bbe\u8eab\u5904\u5730\u60f3\u60f3\u3002\u6211\u4eec\u5e76\u6ca1\u6709\u8981\u6c42\u4f60\u5411\u6211\u4eec\u5c48\u670d \u2014\u2014 \u4e8b\u5b9e\u4e0a\uff0c\u6211\u4eec\u5927\u591a\u6570\u4eba\u975e\u5e38\u4e50\u610f\u4e0e\u4f60\u5e73\u7b49\u5730\u4ea4\u6d41\uff0c\u53ea\u8981\u4f60\u4ed8\u51fa\u5c0f\u5c0f\u52aa\u529b\u6765\u6ee1\u8db3\u57fa\u672c\u8981\u6c42\uff0c\u6211\u4eec\u5c31\u4f1a\u6b22\u8fce\u4f60\u52a0\u5165\u6211\u4eec\u7684\u6587\u5316\u3002\u4f46\u8ba9\u6211\u4eec\u5e2e\u52a9\u90a3\u4e9b\u4e0d\u613f\u610f\u5e2e\u52a9\u81ea\u5df1\u7684\u4eba\u662f\u6ca1\u6709\u6548\u7387\u7684\u3002\u65e0\u77e5\u6ca1\u6709\u5173\u7cfb\uff0c\u4f46\u88c5\u767d\u75f4\u5c31\u662f\u4e0d\u884c\u3002 \u6240\u4ee5\uff0c\u4f60\u4e0d\u5fc5\u5728\u6280\u672f\u4e0a\u5f88\u5728\u884c\u624d\u80fd\u5438\u5f15\u6211\u4eec\u7684\u6ce8\u610f\uff0c\u4f46\u4f60\u5fc5\u987b\u8868\u73b0\u51fa\u80fd\u5f15\u5bfc\u4f60\u53d8\u5f97\u5728\u884c\u7684\u7279\u8d28 -- \u673a\u654f\u3001\u6709\u60f3\u6cd5\u3001\u5584\u4e8e\u89c2\u5bdf\u3001\u4e50\u4e8e\u4e3b\u52a8\u53c2\u4e0e\u89e3\u51b3\u95ee\u9898\u3002\u5982\u679c\u4f60\u505a\u4e0d\u5230\u8fd9\u4e9b\u4f7f\u4f60\u4e0e\u4f17\u4e0d\u540c\u7684\u4e8b\u60c5\uff0c\u6211\u4eec\u5efa\u8bae\u4f60\u82b1\u70b9\u94b1\u627e\u5bb6\u5546\u4e1a\u516c\u53f8\u7b7e\u4e2a\u6280\u672f\u652f\u6301\u670d\u52a1\u5408\u540c\uff0c\u800c\u4e0d\u662f\u8981\u6c42\u9ed1\u5ba2\u4e2a\u4eba\u65e0\u507f\u5730\u5e2e\u52a9\u4f60\u3002 \u5982\u679c\u4f60\u51b3\u5b9a\u5411\u6211\u4eec\u6c42\u52a9\uff0c\u5f53\u7136\u4f60\u4e5f\u4e0d\u5e0c\u671b\u88ab\u89c6\u4e3a\u5931\u8d25\u8005\uff0c\u66f4\u4e0d\u613f\u6210\u4e3a\u5931\u8d25\u8005\u4e2d\u7684\u4e00\u5458\u3002\u80fd\u7acb\u523b\u5f97\u5230\u5feb\u901f\u5e76\u6709\u6548\u7b54\u6848\u7684\u6700\u597d\u65b9\u6cd5\uff0c\u5c31\u662f\u50cf\u8d62\u5bb6\u90a3\u6837\u63d0\u95ee -- \u806a\u660e\u3001\u81ea\u4fe1\u3001\u6709\u89e3\u51b3\u95ee\u9898\u7684\u601d\u8def\uff0c\u53ea\u662f\u5076\u5c14\u5728\u7279\u5b9a\u7684\u95ee\u9898\u4e0a\u9700\u8981\u83b7\u5f97\u4e00\u70b9\u5e2e\u52a9\u3002 \uff08\u6b22\u8fce\u5bf9\u672c\u6307\u5357\u63d0\u51fa\u6539\u8fdb\u610f\u89c1\u3002\u4f60\u53ef\u4ee5 email \u4f60\u7684\u5efa\u8bae\u81f3 esr@thyrsus.com \u6216 respond-auto@linuxmafia.com \u3002\u7136\u800c\u8bf7\u6ce8\u610f\uff0c\u672c\u6587\u5e76\u975e\u7f51\u7edc\u793c\u8282\u7684\u901a\u7528\u6307\u5357\uff0c\u800c\u6211\u4eec\u901a\u5e38\u4f1a\u62d2\u7edd\u65e0\u52a9\u4e8e\u5728\u6280\u672f\u8bba\u575b\u5f97\u5230\u6709\u7528\u7b54\u6848\u7684\u5efa\u8bae\uff09\u3002 \u5728\u63d0\u95ee\u4e4b\u524d \u5728\u4f60\u51c6\u5907\u8981\u901a\u8fc7\u7535\u5b50\u90ae\u4ef6\u3001\u65b0\u95fb\u7fa4\u7ec4\u6216\u8005\u804a\u5929\u5ba4\u63d0\u51fa\u6280\u672f\u95ee\u9898\u524d\uff0c\u8bf7\u5148\u505a\u5230\u4ee5\u4e0b\u4e8b\u60c5\uff1a \u5c1d\u8bd5\u5728\u4f60\u51c6\u5907\u63d0\u95ee\u7684\u8bba\u575b\u7684\u65e7\u6587\u7ae0\u4e2d\u641c\u7d22\u7b54\u6848\u3002 \u5c1d\u8bd5\u4e0a\u7f51\u641c\u7d22\u4ee5\u627e\u5230\u7b54\u6848\u3002 \u5c1d\u8bd5\u9605\u8bfb\u624b\u518c\u4ee5\u627e\u5230\u7b54\u6848\u3002 \u5c1d\u8bd5\u9605\u8bfb\u5e38\u89c1\u95ee\u9898\u6587\u4ef6\uff08FAQ\uff09\u4ee5\u627e\u5230\u7b54\u6848\u3002 \u5c1d\u8bd5\u81ea\u5df1\u68c0\u67e5\u6216\u8bd5\u9a8c\u4ee5\u627e\u5230\u7b54\u6848\u3002 \u5411\u4f60\u8eab\u8fb9\u7684\u5f3a\u8005\u670b\u53cb\u6253\u542c\u4ee5\u627e\u5230\u7b54\u6848\u3002 \u5982\u679c\u4f60\u662f\u7a0b\u5e8f\u5f00\u53d1\u8005\uff0c\u8bf7\u5c1d\u8bd5\u9605\u8bfb\u6e90\u4ee3\u7801\u4ee5\u627e\u5230\u7b54\u6848\u3002 \u5f53\u4f60\u63d0\u51fa\u95ee\u9898\u7684\u65f6\u5019\uff0c\u8bf7\u5148\u8868\u660e\u4f60\u5df2\u7ecf\u505a\u4e86\u4e0a\u8ff0\u7684\u52aa\u529b\uff1b\u8fd9\u5c06\u6709\u52a9\u4e8e\u6811\u7acb\u4f60\u5e76\u4e0d\u662f\u4e00\u4e2a\u4e0d\u52b3\u800c\u83b7\u4e14\u6d6a\u8d39\u522b\u4eba\u7684\u65f6\u95f4\u7684\u63d0\u95ee\u8005\u3002\u5982\u679c\u4f60\u80fd\u4e00\u5e76\u8868\u8fbe\u5728\u505a\u4e86\u4e0a\u8ff0\u52aa\u529b\u7684\u8fc7\u7a0b\u4e2d\u6240\u5b66\u5230\u7684\u4e1c\u897f\u4f1a\u66f4\u597d\uff0c\u56e0\u4e3a\u6211\u4eec\u66f4\u4e50\u4e8e\u56de\u7b54\u90a3\u4e9b\u8868\u73b0\u51fa\u80fd\u4ece\u7b54\u6848\u4e2d\u5b66\u4e60\u7684\u4eba\u7684\u95ee\u9898\u3002 \u8fd0\u7528\u67d0\u4e9b\u7b56\u7565\uff0c\u6bd4\u5982\u5148\u7528 Google \u641c\u7d22\u4f60\u6240\u9047\u5230\u7684\u5404\u79cd\u9519\u8bef\u4fe1\u606f\uff08\u65e2\u641c\u7d22 Google \u8bba\u575b \uff0c\u4e5f\u641c\u7d22\u7f51\u9875\uff09\uff0c\u8fd9\u6837\u5f88\u53ef\u80fd\u76f4\u63a5\u5c31\u627e\u5230\u4e86\u80fd\u89e3\u51b3\u95ee\u9898\u7684\u6587\u4ef6\u6216\u90ae\u4ef6\u5217\u8868\u7ebf\u7d22\u3002\u5373\u4f7f\u6ca1\u6709\u7ed3\u679c\uff0c\u5728\u90ae\u4ef6\u5217\u8868\u6216\u65b0\u95fb\u7ec4\u5bfb\u6c42\u5e2e\u52a9\u65f6\u52a0\u4e0a\u4e00\u53e5 \u6211\u5728 Google \u4e2d\u641c\u8fc7\u4e0b\u5217\u53e5\u5b50\u4f46\u6ca1\u6709\u627e\u5230\u4ec0\u4e48\u6709\u7528\u7684\u4e1c\u897f \u4e5f\u662f\u4ef6\u597d\u4e8b\uff0c\u5373\u4f7f\u5b83\u53ea\u662f\u8868\u660e\u4e86\u641c\u7d22\u5f15\u64ce\u4e0d\u80fd\u63d0\u4f9b\u54ea\u4e9b\u5e2e\u52a9\u3002\u8fd9\u4e48\u505a\uff08\u52a0\u4e0a\u641c\u7d22\u8fc7\u7684\u5b57\u4e32\uff09\u4e5f\u8ba9\u9047\u5230\u76f8\u4f3c\u95ee\u9898\u7684\u5176\u4ed6\u4eba\u80fd\u88ab\u641c\u7d22\u5f15\u64ce\u5f15\u5bfc\u5230\u4f60\u7684\u63d0\u95ee\u6765\u3002 \u522b\u7740\u6025\uff0c\u4e0d\u8981\u6307\u671b\u51e0\u79d2\u949f\u7684 Google \u641c\u7d22\u5c31\u80fd\u89e3\u51b3\u4e00\u4e2a\u590d\u6742\u7684\u95ee\u9898\u3002\u5728\u5411\u4e13\u5bb6\u6c42\u52a9\u4e4b\u524d\uff0c\u518d\u9605\u8bfb\u4e00\u4e0b\u5e38\u89c1\u95ee\u9898\u6587\u4ef6\uff08FAQ\uff09\u3001\u653e\u8f7b\u677e\u3001\u5750\u8212\u670d\u4e00\u4e9b\uff0c\u518d\u82b1\u70b9\u65f6\u95f4\u601d\u8003\u4e00\u4e0b\u8fd9\u4e2a\u95ee\u9898\u3002\u76f8\u4fe1\u6211\u4eec\uff0c\u4ed6\u4eec\u80fd\u4ece\u4f60\u7684\u63d0\u95ee\u770b\u51fa\u4f60\u505a\u4e86\u591a\u5c11\u9605\u8bfb\u4e0e\u601d\u8003\uff0c\u5982\u679c\u4f60\u662f\u6709\u5907\u800c\u6765\uff0c\u5c06\u66f4\u6709\u53ef\u80fd\u5f97\u5230\u89e3\u7b54\u3002\u4e0d\u8981\u5c06\u6240\u6709\u95ee\u9898\u4e00\u80a1\u8111\u62cb\u51fa\uff0c\u53ea\u56e0\u4f60\u7684\u7b2c\u4e00\u6b21\u641c\u7d22\u6ca1\u6709\u627e\u5230\u7b54\u6848\uff08\u6216\u8005\u627e\u5230\u592a\u591a\u7b54\u6848\uff09\u3002 \u51c6\u5907\u597d\u4f60\u7684\u95ee\u9898\uff0c\u518d\u5c06\u95ee\u9898\u4ed4\u7ec6\u7684\u601d\u8003\u8fc7\u4e00\u904d\uff0c\u56e0\u4e3a\u8349\u7387\u7684\u53d1\u95ee\u53ea\u80fd\u5f97\u5230\u8349\u7387\u7684\u56de\u7b54\uff0c\u6216\u8005\u6839\u672c\u5f97\u4e0d\u5230\u4efb\u4f55\u7b54\u6848\u3002\u8d8a\u662f\u80fd\u8868\u73b0\u51fa\u5728\u5bfb\u6c42\u5e2e\u52a9\u524d\u4f60\u4e3a\u89e3\u51b3\u95ee\u9898\u6240\u4ed8\u51fa\u7684\u52aa\u529b\uff0c\u4f60\u8d8a\u6709\u53ef\u80fd\u5f97\u5230\u5b9e\u8d28\u6027\u7684\u5e2e\u52a9\u3002 \u5c0f\u5fc3\u522b\u95ee\u9519\u4e86\u95ee\u9898\u3002\u5982\u679c\u4f60\u7684\u95ee\u9898\u57fa\u4e8e\u9519\u8bef\u7684\u5047\u8bbe\uff0c\u67d0\u4e2a\u666e\u901a\u9ed1\u5ba2\uff08J. Random Hacker\uff09\u591a\u534a\u4f1a\u4e00\u8fb9\u5728\u5fc3\u91cc\u60f3\u7740\u8822\u95ee\u9898\u2026\uff0c \u4e00\u8fb9\u7528\u65e0\u610f\u4e49\u7684\u5b57\u9762\u89e3\u91ca\u6765\u7b54\u590d\u4f60\uff0c\u5e0c\u671b\u7740\u4f60\u4f1a\u4ece\u95ee\u9898\u7684\u56de\u7b54\uff08\u800c\u975e\u4f60\u60f3\u5f97\u5230\u7684\u7b54\u6848\uff09\u4e2d\u6c72\u53d6\u6559\u8bad\u3002 \u7edd\u4e0d\u8981\u81ea\u4ee5\u4e3a\u591f\u683c\u5f97\u5230\u7b54\u6848\uff0c\u4f60\u6ca1\u6709\uff1b\u4f60\u5e76\u6ca1\u6709\u3002\u6bd5\u7adf\u4f60\u6ca1\u6709\u4e3a\u8fd9\u79cd\u670d\u52a1\u652f\u4ed8\u4efb\u4f55\u62a5\u916c\u3002\u4f60\u5c06\u4f1a\u662f\u81ea\u5df1\u53bb\u6323\u5230\u4e00\u4e2a\u7b54\u6848\uff0c\u9760\u63d0\u51fa\u6709\u5185\u6db5\u7684\u3001\u6709\u8da3\u7684\u3001\u6709\u601d\u7ef4\u6fc0\u52b1\u4f5c\u7528\u7684\u95ee\u9898 \u2014\u2014 \u4e00\u4e2a\u6709\u6f5c\u529b\u80fd\u8d21\u732e\u793e\u533a\u7ecf\u9a8c\u7684\u95ee\u9898\uff0c\u800c\u4e0d\u4ec5\u4ec5\u662f\u88ab\u52a8\u7684\u4ece\u4ed6\u4eba\u5904\u7d22\u53d6\u77e5\u8bc6\u3002 \u53e6\u4e00\u65b9\u9762\uff0c\u8868\u660e\u4f60\u613f\u610f\u5728\u627e\u7b54\u6848\u7684\u8fc7\u7a0b\u4e2d\u505a\u70b9\u4ec0\u4e48\u662f\u4e00\u4e2a\u975e\u5e38\u597d\u7684\u5f00\u7aef\u3002\u8c01\u80fd\u7ed9\u70b9\u63d0\u793a\uff1f\u3001\u6211\u7684\u8fd9\u4e2a\u4f8b\u5b50\u91cc\u7f3a\u4e86\u4ec0\u4e48\uff1f\u4ee5\u53ca\u6211\u5e94\u8be5\u68c0\u67e5\u4ec0\u4e48\u5730\u65b9\u6bd4\u8bf7\u628a\u6211\u9700\u8981\u7684\u786e\u5207\u7684\u8fc7\u7a0b\u8d34\u51fa\u6765\u66f4\u5bb9\u6613\u5f97\u5230\u7b54\u590d\u3002\u56e0\u4e3a\u4f60\u8868\u73b0\u51fa\u53ea\u8981\u6709\u4eba\u80fd\u6307\u4e2a\u6b63\u786e\u65b9\u5411\uff0c\u4f60\u5c31\u6709\u5b8c\u6210\u5b83\u7684\u80fd\u529b\u548c\u51b3\u5fc3\u3002 \u5f53\u4f60\u63d0\u95ee\u65f6 \u614e\u9009\u63d0\u95ee\u7684\u8bba\u575b \u5c0f\u5fc3\u9009\u62e9\u4f60\u8981\u63d0\u95ee\u7684\u573a\u5408\u3002\u5982\u679c\u4f60\u505a\u4e86\u4e0b\u8ff0\u7684\u4e8b\u60c5\uff0c\u4f60\u5f88\u53ef\u80fd\u88ab\u5ffd\u7565\u6389\u6216\u8005\u88ab\u770b\u4f5c\u5931\u8d25\u8005\uff1a \u5728\u4e0e\u4e3b\u9898\u4e0d\u5408\u7684\u8bba\u575b\u4e0a\u8d34\u51fa\u4f60\u7684\u95ee\u9898\u3002 \u5728\u63a2\u8ba8\u8fdb\u9636\u6280\u672f\u95ee\u9898\u7684\u8bba\u575b\u5f20\u8d34\u975e\u5e38\u521d\u7ea7\u7684\u95ee\u9898\uff1b\u53cd\u4e4b\u4ea6\u7136\u3002 \u5728\u592a\u591a\u7684\u4e0d\u540c\u65b0\u95fb\u7fa4\u7ec4\u4e0a\u91cd\u590d\u8f6c\u8d34\u540c\u6837\u7684\u95ee\u9898\uff08cross-post\uff09\u3002 \u5411\u65e2\u975e\u719f\u4eba\u4e5f\u6ca1\u6709\u4e49\u52a1\u89e3\u51b3\u4f60\u95ee\u9898\u7684\u4eba\u53d1\u9001\u79c1\u4eba\u7535\u90ae\u3002 \u9ed1\u5ba2\u4f1a\u5254\u9664\u6389\u90a3\u4e9b\u641e\u9519\u573a\u5408\u7684\u95ee\u9898\uff0c\u4ee5\u4fdd\u62a4\u4ed6\u4eec\u6c9f\u901a\u7684\u6e20\u9053\u4e0d\u88ab\u65e0\u5173\u7684\u4e1c\u897f\u6df9\u6ca1\u3002\u4f60\u4e0d\u4f1a\u60f3\u8ba9\u8fd9\u79cd\u4e8b\u53d1\u751f\u5728\u81ea\u5df1\u8eab\u4e0a\u7684\u3002 \u56e0\u6b64\uff0c\u7b2c\u4e00\u6b65\u662f\u627e\u5230\u5bf9\u7684\u8bba\u575b\u3002\u518d\u8bf4\u4e00\u6b21\uff0cGoogle \u548c\u5176\u5b83\u641c\u7d22\u5f15\u64ce\u8fd8\u662f\u4f60\u7684\u670b\u53cb\uff0c\u7528\u5b83\u4eec\u6765\u627e\u5230\u4e0e\u4f60\u906d\u9047\u5230\u56f0\u96be\u7684\u8f6f\u786c\u4ef6\u95ee\u9898\u6700\u76f8\u5173\u7684\u7f51\u7ad9\u3002\u901a\u5e38\u90a3\u513f\u90fd\u6709\u5e38\u89c1\u95ee\u9898\uff08FAQ\uff09\u3001\u90ae\u4ef6\u5217\u8868\u53ca\u76f8\u5173\u8bf4\u660e\u6587\u4ef6\u7684\u94fe\u63a5\u3002\u5982\u679c\u4f60\u7684\u52aa\u529b\uff08\u5305\u62ec\u9605\u8bfb FAQ\uff09\u90fd\u6ca1\u6709\u7ed3\u679c\uff0c\u7f51\u7ad9\u4e0a\u4e5f\u8bb8\u8fd8\u6709\u62a5\u544a Bug\uff08Bug-reporting\uff09\u7684\u6d41\u7a0b\u6216\u94fe\u63a5\uff0c\u5982\u679c\u662f\u8fd9\u6837\uff0c\u94fe\u8fc7\u53bb\u770b\u770b\u3002 \u5411\u964c\u751f\u7684\u4eba\u6216\u8bba\u575b\u53d1\u9001\u90ae\u4ef6\u6700\u53ef\u80fd\u662f\u98ce\u9669\u6700\u5927\u7684\u4e8b\u60c5\u3002\u4e3e\u4f8b\u6765\u8bf4\uff0c\u522b\u5047\u8bbe\u4e00\u4e2a\u63d0\u4f9b\u4e30\u5bcc\u5185\u5bb9\u7684\u7f51\u9875\u7684\u4f5c\u8005\u4f1a\u60f3\u5145\u5f53\u4f60\u7684\u514d\u8d39\u987e\u95ee\u3002\u4e0d\u8981\u5bf9\u4f60\u7684\u95ee\u9898\u662f\u5426\u4f1a\u53d7\u5230\u6b22\u8fce\u505a\u592a\u4e50\u89c2\u7684\u4f30\u8ba1 -- \u5982\u679c\u4f60\u4e0d\u786e\u5b9a\uff0c\u90a3\u5c31\u5411\u522b\u5904\u53d1\u9001\uff0c\u6216\u8005\u538b\u6839\u522b\u53d1\u3002 \u5728\u9009\u62e9\u8bba\u575b\u3001\u65b0\u95fb\u7fa4\u7ec4\u6216\u90ae\u4ef6\u5217\u8868\u65f6\uff0c\u522b\u592a\u76f8\u4fe1\u540d\u5b57\uff0c\u5148\u770b\u770b FAQ \u6216\u8005\u8bb8\u53ef\u4e66\u4ee5\u5f04\u6e05\u695a\u4f60\u7684\u95ee\u9898\u662f\u5426\u5207\u9898\u3002\u53d1\u6587\u524d\u5148\u7ffb\u7ffb\u5df2\u6709\u7684\u8bdd\u9898\uff0c\u8fd9\u6837\u53ef\u4ee5\u8ba9\u4f60\u611f\u53d7\u4e00\u4e0b\u90a3\u91cc\u7684\u6587\u5316\u3002\u4e8b\u5b9e\u4e0a\uff0c\u4e8b\u5148\u5728\u65b0\u95fb\u7ec4\u6216\u90ae\u4ef6\u5217\u8868\u7684\u5386\u53f2\u8bb0\u5f55\u4e2d\u641c\u7d22\u4e0e\u4f60\u95ee\u9898\u76f8\u5173\u7684\u5173\u952e\u8bcd\u662f\u4e2a\u6781\u597d\u7684\u4e3b\u610f\uff0c\u4e5f\u8bb8\u8fd9\u6837\u5c31\u627e\u5230\u7b54\u6848\u4e86\u3002\u5373\u4f7f\u6ca1\u6709\uff0c\u4e5f\u80fd\u5e2e\u52a9\u4f60\u5f52\u7eb3\u51fa\u66f4\u597d\u7684\u95ee\u9898\u3002 \u522b\u50cf\u673a\u5173\u67aa\u4f3c\u7684\u4e00\u6b21\"\u626b\u5c04\"\u6240\u6709\u7684\u5e2e\u52a9\u6e20\u9053\uff0c\u8fd9\u5c31\u50cf\u5927\u558a\u5927\u53eb\u4e00\u6837\u4f1a\u4f7f\u4eba\u4e0d\u5feb\u3002\u8981\u4e00\u4e2a\u4e00\u4e2a\u5730\u6765\u3002 \u641e\u6e05\u695a\u4f60\u7684\u4e3b\u9898\uff01\u6700\u5178\u578b\u7684\u9519\u8bef\u4e4b\u4e00\u662f\u5728\u67d0\u79cd\u81f4\u529b\u4e8e\u8de8\u5e73\u53f0\u53ef\u79fb\u690d\u7684\u8bed\u8a00\u3001\u5957\u4ef6\u6216\u5de5\u5177\u7684\u8bba\u575b\u4e2d\u63d0\u5173\u4e8e Unix \u6216 Windows \u64cd\u4f5c\u7cfb\u7edf\u7a0b\u5e8f\u754c\u9762\u7684\u95ee\u9898\u3002\u5982\u679c\u4f60\u4e0d\u660e\u767d\u4e3a\u4ec0\u4e48\u8fd9\u662f\u5927\u9519\uff0c\u6700\u597d\u5728\u641e\u6e05\u695a\u8fd9\u4e4b\u95f4\u5dee\u5f02\u4e4b\u524d\u4ec0\u4e48\u4e5f\u522b\u95ee\u3002 \u4e00\u822c\u6765\u8bf4\uff0c\u5728\u4ed4\u7ec6\u6311\u9009\u7684\u516c\u5171\u8bba\u575b\u4e2d\u63d0\u95ee\uff0c\u4f1a\u6bd4\u5728\u79c1\u6709\u8bba\u575b\u4e2d\u63d0\u540c\u6837\u7684\u95ee\u9898\u66f4\u5bb9\u6613\u5f97\u5230\u6709\u7528\u7684\u56de\u7b54\u3002\u6709\u51e0\u4e2a\u7406\u7531\u53ef\u4ee5\u652f\u6301\u8fd9\u70b9\uff0c\u4e00\u662f\u770b\u6f5c\u5728\u7684\u56de\u590d\u8005\u6709\u591a\u5c11\uff0c\u4e8c\u662f\u770b\u89c2\u4f17\u6709\u591a\u5c11\u3002\u9ed1\u5ba2\u8f83\u613f\u610f\u56de\u7b54\u90a3\u4e9b\u80fd\u5e2e\u52a9\u5230\u8bb8\u591a\u4eba\u7684\u95ee\u9898\u3002 \u53ef\u4ee5\u7406\u89e3\u7684\u662f\uff0c\u8001\u7ec3\u7684\u9ed1\u5ba2\u548c\u4e00\u4e9b\u70ed\u95e8\u8f6f\u4ef6\u7684\u4f5c\u8005\u6b63\u5728\u63a5\u53d7\u8fc7\u591a\u7684\u9519\u53d1\u4fe1\u606f\u3002\u5c31\u50cf\u90a3\u6839\u6700\u540e\u538b\u57ae\u9a86\u9a7c\u80cc\u7684\u7a3b\u8349\u4e00\u6837\uff0c\u4f60\u7684\u52a0\u5165\u4e5f\u6709\u53ef\u80fd\u4f7f\u60c5\u51b5\u8d70\u5411\u6781\u7aef \u2014\u2014 \u5df2\u7ecf\u597d\u51e0\u6b21\u4e86\uff0c\u4e00\u4e9b\u70ed\u95e8\u8f6f\u4ef6\u7684\u4f5c\u8005\u4ece\u81ea\u5df1\u8f6f\u4ef6\u7684\u652f\u6301\u4e2d\u62bd\u8eab\u51fa\u6765\uff0c\u56e0\u4e3a\u4f34\u968f\u800c\u6765\u6d8c\u5165\u5176\u79c1\u4eba\u90ae\u7bb1\u7684\u65e0\u7528\u90ae\u4ef6\u53d8\u5f97\u65e0\u6cd5\u5fcd\u53d7\u3002 Stack Overflow \u641c\u7d22\uff0c\u7136\u540e \u5728 Stack Exchange \u95ee\u3002 \u8fd1\u5e74\u6765\uff0cStack Exchange community \u793e\u533a\u5df2\u7ecf\u6210\u4e3a\u56de\u7b54\u6280\u672f\u53ca\u5176\u4ed6\u95ee\u9898\u7684\u4e3b\u8981\u6e20\u9053\uff0c\u5c24\u5176\u662f\u90a3\u4e9b\u5f00\u653e\u6e90\u7801\u7684\u9879\u76ee\u3002 \u56e0\u4e3a Google \u7d22\u5f15\u662f\u5373\u65f6\u7684\uff0c\u5728\u770b Stack Exchange \u4e4b\u524d\u5148\u5728 Google \u641c\u7d22\u3002\u6709\u5f88\u9ad8\u7684\u673a\u7387\u67d0\u4eba\u5df2\u7ecf\u95ee\u4e86\u4e00\u4e2a\u7c7b\u4f3c\u7684\u95ee\u9898\uff0c\u800c\u4e14 Stack Exchange \u7f51\u7ad9\u4eec\u5f80\u5f80\u4f1a\u662f\u641c\u7d22\u7ed3\u679c\u4e2d\u6700\u524d\u9762\u51e0\u4e2a\u3002\u5982\u679c\u4f60\u5728 Google \u4e0a\u6ca1\u6709\u627e\u5230\u4efb\u4f55\u7b54\u6848\uff0c\u4f60\u518d\u5230\u7279\u5b9a\u76f8\u5173\u4e3b\u9898\u7684\u7f51\u7ad9\u53bb\u627e\u3002\u7528\u6807\u7b7e\uff08Tag\uff09\u641c\u7d22\u80fd\u8ba9\u4f60\u66f4\u7f29\u5c0f\u4f60\u7684\u641c\u7d22\u7ed3\u679c\u3002 Stack Exchange \u5df2\u7ecf\u6210\u957f\u5230 \u8d85\u8fc7\u4e00\u767e\u4e2a\u7f51\u7ad9 \uff0c\u4ee5\u4e0b\u662f\u6700\u5e38\u7528\u7684\u51e0\u4e2a\u7ad9\uff1a Super User \u662f\u95ee\u4e00\u4e9b\u901a\u7528\u7684\u7535\u8111\u95ee\u9898\uff0c\u5982\u679c\u4f60\u7684\u95ee\u9898\u8ddf\u4ee3\u7801\u6216\u662f\u5199\u7a0b\u5e8f\u65e0\u5173\uff0c\u53ea\u662f\u4e00\u4e9b\u7f51\u7edc\u8fde\u7ebf\u4e4b\u7c7b\u7684\uff0c\u8bf7\u5230\u8fd9\u91cc\u3002 Stack Overflow \u662f\u95ee\u5199\u7a0b\u5e8f\u6709\u5173\u7684\u95ee\u9898\u3002 Server Fault \u662f\u95ee\u670d\u52a1\u5668\u548c\u7f51\u7ba1\u76f8\u5173\u7684\u95ee\u9898\u3002 \u7f51\u7ad9\u548c IRC \u8bba\u575b \u672c\u5730\u7684\u4f7f\u7528\u8005\u7fa4\u7ec4\uff08user group\uff09\uff0c\u6216\u8005\u4f60\u6240\u7528\u7684 Linux \u53d1\u884c\u7248\u672c\u4e5f\u8bb8\u6b63\u5728\u5ba3\u4f20\u4ed6\u4eec\u7684\u7f51\u9875\u8bba\u575b\u6216 IRC \u9891\u9053\uff0c\u5e76\u63d0\u4f9b\u65b0\u624b\u5e2e\u52a9\uff08\u5728\u4e00\u4e9b\u975e\u82f1\u8bed\u56fd\u5bb6\uff0c\u65b0\u624b\u8bba\u575b\u5f88\u53ef\u80fd\u8fd8\u662f\u90ae\u4ef6\u5217\u8868\uff09\uff0c \u8fd9\u4e9b\u5730\u65b9\u662f\u5f00\u59cb\u63d0\u95ee\u7684\u597d\u9996\u9009\uff0c\u7279\u522b\u662f\u5f53\u4f60\u89c9\u5f97\u9047\u5230\u7684\u4e5f\u8bb8\u53ea\u662f\u76f8\u5bf9\u7b80\u5355\u6216\u8005\u5f88\u666e\u901a\u7684\u95ee\u9898\u65f6\u3002\u6709\u5e7f\u544a\u8d5e\u52a9\u7684 IRC \u9891\u9053\u662f\u516c\u5f00\u6b22\u8fce\u63d0\u95ee\u7684\u5730\u65b9\uff0c\u901a\u5e38\u53ef\u4ee5\u5373\u65f6\u5f97\u5230\u56de\u5e94\u3002 \u4e8b\u5b9e\u4e0a\uff0c\u5982\u679c\u7a0b\u5e8f\u51fa\u7684\u95ee\u9898\u53ea\u53d1\u751f\u5728\u7279\u5b9a Linux \u53d1\u884c\u7248\u63d0\u4f9b\u7684\u7248\u672c\uff08\u8fd9\u5f88\u5e38\u89c1\uff09\uff0c\u6700\u597d\u5148\u53bb\u8be5\u53d1\u884c\u7248\u7684\u8bba\u575b\u6216\u90ae\u4ef6\u5217\u8868\u4e2d\u63d0\u95ee\uff0c\u518d\u5230\u7a0b\u5e8f\u672c\u8eab\u7684\u8bba\u575b\u6216\u90ae\u4ef6\u5217\u8868\u63d0\u95ee\u3002\uff08\u5426\u5219\uff09\u8be5\u9879\u76ee\u7684\u9ed1\u5ba2\u53ef\u80fd\u4ec5\u4ec5\u56de\u590d \"\u7528\u6211\u4eec\u7684\u7248\u672c\"\u3002 \u5728\u4efb\u4f55\u8bba\u575b\u53d1\u6587\u4ee5\u524d\uff0c\u5148\u786e\u8ba4\u4e00\u4e0b\u6709\u6ca1\u6709\u641c\u7d22\u529f\u80fd\u3002\u5982\u679c\u6709\uff0c\u5c31\u8bd5\u7740\u641c\u7d22\u4e00\u4e0b\u95ee\u9898\u7684\u51e0\u4e2a\u5173\u952e\u8bcd\uff0c\u4e5f\u8bb8\u8fd9\u4f1a\u6709\u5e2e\u52a9\u3002\u5982\u679c\u5728\u6b64\u4e4b\u524d\u4f60\u5df2\u505a\u8fc7\u901a\u7528\u7684\u7f51\u9875\u641c\u7d22\uff08\u4f60\u4e5f\u8be5\u8fd9\u6837\u505a\uff09\uff0c\u8fd8\u662f\u518d\u641c\u7d22\u4e00\u4e0b\u8bba\u575b\uff0c\u641c\u7d22\u5f15\u64ce\u6709\u53ef\u80fd\u6ca1\u6765\u5f97\u53ca\u7d22\u5f15\u6b64\u8bba\u575b\u7684\u5168\u90e8\u5185\u5bb9\u3002 \u901a\u8fc7\u8bba\u575b\u6216 IRC \u9891\u9053\u6765\u63d0\u4f9b\u4f7f\u7528\u8005\u652f\u6301\u670d\u52a1\u6709\u589e\u957f\u7684\u8d8b\u52bf\uff0c\u7535\u5b50\u90ae\u4ef6\u5219\u5927\u591a\u4e3a\u9879\u76ee\u5f00\u53d1\u8005\u95f4\u7684\u4ea4\u6d41\u800c\u4fdd\u7559\u3002\u6240\u4ee5\u6700\u597d\u5148\u5728\u8bba\u575b\u6216 IRC \u4e2d\u5bfb\u6c42\u4e0e\u8be5\u9879\u76ee\u76f8\u5173\u7684\u534f\u52a9\u3002 \u5728\u4f7f\u7528 IRC \u7684\u65f6\u5019\uff0c\u9996\u5148\u6700\u597d\u4e0d\u8981\u53d1\u5e03\u5f88\u957f\u7684\u95ee\u9898\u63cf\u8ff0\uff0c\u6709\u4e9b\u4eba\u79f0\u4e4b\u4e3a\u9891\u9053\u6d2a\u6c34\u3002\u6700\u597d\u901a\u8fc7\u4e00\u53e5\u8bdd\u7684\u95ee\u9898\u63cf\u8ff0\u6765\u5f00\u59cb\u804a\u5929\u3002 \u7b2c\u4e8c\u6b65\uff0c\u4f7f\u7528\u9879\u76ee\u90ae\u4ef6\u5217\u8868 \u5f53\u67d0\u4e2a\u9879\u76ee\u63d0\u4f9b\u5f00\u53d1\u8005\u90ae\u4ef6\u5217\u8868\u65f6\uff0c\u8981\u5411\u5217\u8868\u800c\u4e0d\u662f\u5176\u4e2d\u7684\u4e2a\u522b\u6210\u5458\u63d0\u95ee\uff0c\u5373\u4f7f\u4f60\u786e\u4fe1\u4ed6\u80fd\u6700\u597d\u5730\u56de\u7b54\u4f60\u7684\u95ee\u9898\u3002\u67e5\u4e00\u67e5\u9879\u76ee\u7684\u6587\u4ef6\u548c\u9996\u9875\uff0c\u627e\u5230\u9879\u76ee\u7684\u90ae\u4ef6\u5217\u8868\u5e76\u4f7f\u7528\u5b83\u3002\u6709\u51e0\u4e2a\u5f88\u597d\u7684\u7406\u7531\u652f\u6301\u6211\u4eec\u91c7\u7528\u8fd9\u79cd\u529e\u6cd5\uff1a \u4efb\u4f55\u597d\u5230\u9700\u8981\u5411\u4e2a\u522b\u5f00\u53d1\u8005\u63d0\u51fa\u7684\u95ee\u9898\uff0c\u4e5f\u5c06\u5bf9\u6574\u4e2a\u9879\u76ee\u7fa4\u7ec4\u6709\u76ca\u3002\u53cd\u4e4b\uff0c\u5982\u679c\u4f60\u8ba4\u4e3a\u81ea\u5df1\u7684\u95ee\u9898\u5bf9\u6574\u4e2a\u9879\u76ee\u7fa4\u7ec4\u6765\u8bf4\u592a\u611a\u8822\uff0c\u4e5f\u4e0d\u80fd\u6210\u4e3a\u9a9a\u6270\u4e2a\u522b\u5f00\u53d1\u8005\u7684\u7406\u7531\u3002 \u5411\u5217\u8868\u63d0\u95ee\u53ef\u4ee5\u5206\u6563\u5f00\u53d1\u8005\u7684\u8d1f\u62c5\uff0c\u4e2a\u522b\u5f00\u53d1\u8005\uff08\u5c24\u5176\u662f\u9879\u76ee\u9886\u5bfc\u4eba\uff09\u4e5f\u8bb8\u592a\u5fd9\u4ee5\u81f3\u4e8e\u6ca1\u6cd5\u56de\u7b54\u4f60\u7684\u95ee\u9898\u3002 \u5927\u591a\u6570\u90ae\u4ef6\u5217\u8868\u90fd\u4f1a\u88ab\u5b58\u6863\uff0c\u90a3\u4e9b\u88ab\u5b58\u6863\u7684\u5185\u5bb9\u5c06\u88ab\u641c\u7d22\u5f15\u64ce\u7d22\u5f15\u3002\u5982\u679c\u4f60\u5411\u5217\u8868\u63d0\u95ee\u5e76\u5f97\u5230\u89e3\u7b54\uff0c\u5c06\u6765\u5176\u5b83\u4eba\u53ef\u4ee5\u901a\u8fc7\u7f51\u9875\u641c\u7d22\u627e\u5230\u4f60\u7684\u95ee\u9898\u548c\u7b54\u6848\uff0c\u4e5f\u5c31\u4e0d\u7528\u518d\u6b21\u53d1\u95ee\u4e86\u3002 \u5982\u679c\u67d0\u4e9b\u95ee\u9898\u7ecf\u5e38\u88ab\u95ee\u5230\uff0c\u5f00\u53d1\u8005\u53ef\u4ee5\u5229\u7528\u6b64\u4fe1\u606f\u6765\u6539\u8fdb\u8bf4\u660e\u6587\u4ef6\u6216\u8f6f\u4ef6\u672c\u8eab\uff0c\u4ee5\u4f7f\u5176\u66f4\u6e05\u695a\u3002\u5982\u679c\u53ea\u662f\u79c1\u4e0b\u63d0\u95ee\uff0c\u5c31\u6ca1\u6709\u4eba\u80fd\u770b\u5230\u6700\u5e38\u89c1\u95ee\u9898\u7684\u5b8c\u6574\u573a\u666f\u3002 \u5982\u679c\u4e00\u4e2a\u9879\u76ee\u65e2\u6709\"\u4f7f\u7528\u8005\" \u4e5f\u6709\"\u5f00\u53d1\u8005\"\uff08\u6216\"\u9ed1\u5ba2\"\uff09\u90ae\u4ef6\u5217\u8868\u6216\u8bba\u575b\uff0c\u800c\u4f60\u53c8\u4e0d\u4f1a\u52a8\u5230\u90a3\u4e9b\u6e90\u4ee3\u7801\uff0c\u90a3\u4e48\u5c31\u5411\"\u4f7f\u7528\u8005\"\u5217\u8868\u6216\u8bba\u575b\u63d0\u95ee\u3002\u4e0d\u8981\u5047\u8bbe\u81ea\u5df1\u4f1a\u5728\u5f00\u53d1\u8005\u5217\u8868\u4e2d\u53d7\u5230\u6b22\u8fce\uff0c\u90a3\u4e9b\u4eba\u591a\u534a\u4f1a\u5c06\u4f60\u7684\u63d0\u95ee\u89c6\u4e3a\u5e72\u6270\u4ed6\u4eec\u5f00\u53d1\u7684\u566a\u97f3\u3002 \u7136\u800c\uff0c\u5982\u679c\u4f60 \u786e\u4fe1 \u4f60\u7684\u95ee\u9898\u5f88\u7279\u522b\uff0c\u800c\u4e14\u5728\"\u4f7f\u7528\u8005\" \u5217\u8868\u6216\u8bba\u575b\u4e2d\u51e0\u5929\u90fd\u6ca1\u6709\u56de\u590d\uff0c\u53ef\u4ee5\u8bd5\u8bd5\u524d\u5f80\"\u5f00\u53d1\u8005\"\u5217\u8868\u6216\u8bba\u575b\u53d1\u95ee\u3002\u5efa\u8bae\u4f60\u5728\u5f20\u8d34\u524d\u6700\u597d\u5148\u6697\u5730\u91cc\u89c2\u5bdf\u51e0\u5929\u4ee5\u4e86\u89e3\u90a3\u91cc\u7684\u884c\u4e8b\u65b9\u5f0f\uff08\u4e8b\u5b9e\u4e0a\u8fd9\u662f\u53c2\u4e0e\u4efb\u4f55\u79c1\u6709\u6216\u534a\u79c1\u6709\u5217\u8868\u7684\u597d\u4e3b\u610f\uff09 \u5982\u679c\u4f60\u627e\u4e0d\u5230\u4e00\u4e2a\u9879\u76ee\u7684\u90ae\u4ef6\u5217\u8868\uff0c\u800c\u53ea\u80fd\u67e5\u5230\u9879\u76ee\u7ef4\u62a4\u8005\u7684\u7535\u5b50\u90ae\u4ef6\u5730\u5740\uff0c\u5c3d\u7ba1\u5411\u4ed6\u53d1\u4fe1\u3002\u5373\u4f7f\u662f\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u4e5f\u522b\u5047\u8bbe\uff08\u9879\u76ee\uff09\u90ae\u4ef6\u5217\u8868\u4e0d\u5b58\u5728\u3002\u5728\u4f60\u7684\u7535\u5b50\u90ae\u4ef6\u4e2d\uff0c\u8bf7\u9648\u8ff0\u4f60\u5df2\u7ecf\u8bd5\u8fc7\u4f46\u6ca1\u6709\u627e\u5230\u5408\u9002\u7684\u90ae\u4ef6\u5217\u8868\uff0c\u4e5f\u63d0\u53ca\u4f60\u4e0d\u53cd\u5bf9\u5c06\u81ea\u5df1\u7684\u90ae\u4ef6\u8f6c\u53d1\u7ed9\u4ed6\u4eba\uff08\u8bb8\u591a\u4eba\u8ba4\u4e3a\uff0c\u5373\u4f7f\u6ca1\u4ec0\u4e48\u79d8\u5bc6\uff0c\u79c1\u4eba\u7535\u5b50\u90ae\u4ef6\u4e5f\u4e0d\u5e94\u8be5\u88ab\u516c\u5f00\u3002\u901a\u8fc7\u5141\u8bb8\u5c06\u4f60\u7684\u7535\u5b50\u90ae\u4ef6\u8f6c\u53d1\u4ed6\u4eba\uff0c\u4f60\u7ed9\u4e86\u76f8\u5e94\u4eba\u5458\u5904\u7f6e\u4f60\u90ae\u4ef6\u7684\u9009\u62e9\uff09\u3002 \u4f7f\u7528\u6709\u610f\u4e49\u4e14\u63cf\u8ff0\u660e\u786e\u7684\u6807\u9898 \u5728\u90ae\u4ef6\u5217\u8868\u3001\u65b0\u95fb\u7fa4\u7ec4\u6216\u8bba\u575b\u4e2d\uff0c\u5927\u7ea6 50 \u5b57\u4ee5\u5185\u7684\u6807\u9898\u662f\u6293\u4f4f\u8d44\u6df1\u4e13\u5bb6\u6ce8\u610f\u529b\u7684\u597d\u673a\u4f1a\u3002\u522b\u7528\u558b\u558b\u4e0d\u4f11\u7684 \u5e2e\u5e2e\u5fd9 \u3001 \u8dea\u6c42 \u3001 \u6025 \uff08\u66f4\u522b\u8bf4 \u6551\u547d\u554a\uff01\uff01\uff01\uff01 \u8fd9\u6837\u8ba9\u4eba\u53cd\u611f\u7684\u8bdd\uff0c\u7528\u8fd9\u79cd\u6807\u9898\u4f1a\u88ab\u6761\u4ef6\u53cd\u5c04\u5f0f\u5730\u5ffd\u7565\uff09\u6765\u6d6a\u8d39\u8fd9\u4e2a\u673a\u4f1a\u3002\u4e0d\u8981\u5984\u60f3\u7528\u4f60\u7684\u75db\u82e6\u7a0b\u5ea6\u6765\u6253\u52a8\u6211\u4eec\uff0c\u800c\u5e94\u8be5\u662f\u5728\u8fd9\u70b9\u7a7a\u95f4\u4e2d\u4f7f\u7528\u6781\u7b80\u5355\u627c\u8981\u7684\u63cf\u8ff0\u65b9\u5f0f\u6765\u63d0\u51fa\u95ee\u9898\u3002 \u4e00\u4e2a\u597d\u6807\u9898\u8303\u4f8b\u662f \u76ee\u6807 \u2014\u2014 \u5dee\u5f02\u5f0f \u7684\u63cf\u8ff0\uff0c\u8bb8\u591a\u6280\u672f\u652f\u6301\u7ec4\u7ec7\u5c31\u662f\u8fd9\u6837\u505a\u7684\u3002\u5728\u76ee\u6807\u90e8\u5206\u6307\u51fa\u662f\u54ea\u4e00\u4e2a\u6216\u54ea\u4e00\u7ec4\u4e1c\u897f\u6709\u95ee\u9898\uff0c\u5728 \u5dee\u5f02 \u90e8\u5206\u5219\u63cf\u8ff0\u4e0e\u671f\u671b\u7684\u884c\u4e3a\u4e0d\u4e00\u81f4\u7684\u5730\u65b9\u3002 \u8822\u95ee\u9898\uff1a\u6551\u547d\u554a\uff01\u6211\u7684\u7b14\u8bb0\u672c\u7535\u8111\u4e0d\u80fd\u6b63\u5e38\u663e\u793a\u4e86\uff01 \u806a\u660e\u95ee\u9898\uff1aX.org 6.8.1 \u7684\u9f20\u6807\u5149\u6807\u4f1a\u53d8\u5f62\uff0c\u67d0\u724c\u663e\u5361 MV1005 \u82af\u7247\u7ec4\u3002 \u66f4\u806a\u660e\u95ee\u9898\uff1aX.org 6.8.1 \u7684\u9f20\u6807\u5149\u6807\uff0c\u5728\u67d0\u724c\u663e\u5361 MV1005 \u82af\u7247\u7ec4\u73af\u5883\u4e0b - \u4f1a\u53d8\u5f62\u3002 \u7f16\u5199 \u76ee\u6807 \u2014\u2014 \u5dee\u5f02 \u5f0f\u63cf\u8ff0\u7684\u8fc7\u7a0b\u6709\u52a9\u4e8e\u4f60\u7ec4\u7ec7\u5bf9\u95ee\u9898\u7684\u7ec6\u81f4\u601d\u8003\u3002\u662f\u4ec0\u4e48\u88ab\u5f71\u54cd\u4e86\uff1f \u4ec5\u4ec5\u662f\u9f20\u6807\u5149\u6807\u6216\u8005\u8fd8\u6709\u5176\u5b83\u56fe\u5f62\uff1f\u53ea\u5728 X.org \u7684 X \u7248\u4e2d\u51fa\u73b0\uff1f\u6216\u53ea\u662f\u51fa\u73b0\u5728 6.8.1 \u7248\u4e2d\uff1f \u662f\u9488\u5bf9\u67d0\u724c\u663e\u5361\u82af\u7247\u7ec4\uff1f\u6216\u8005\u53ea\u662f\u5176\u4e2d\u7684 MV1005 \u578b\u53f7\uff1f \u4e00\u4e2a\u9ed1\u5ba2\u53ea\u9700\u7784\u4e00\u773c\u5c31\u80fd\u591f\u7acb\u5373\u660e\u767d\u4f60\u7684\u73af\u5883\u548c\u4f60\u9047\u5230\u7684\u95ee\u9898\u3002 \u603b\u800c\u8a00\u4e4b\uff0c\u8bf7\u60f3\u50cf\u4e00\u4e0b\u4f60\u6b63\u5728\u4e00\u4e2a\u53ea\u663e\u793a\u6807\u9898\u7684\u5b58\u6863\u8ba8\u8bba\u4e32\uff08Thread\uff09\u7d22\u5f15\u4e2d\u67e5\u5bfb\u3002\u8ba9\u4f60\u7684\u6807\u9898\u66f4\u597d\u5730\u53cd\u6620\u95ee\u9898\uff0c\u53ef\u4f7f\u4e0b\u4e00\u4e2a\u641c\u7d22\u7c7b\u4f3c\u95ee\u9898\u7684\u4eba\u80fd\u591f\u5173\u6ce8\u8fd9\u4e2a\u8ba8\u8bba\u4e32\uff0c\u800c\u4e0d\u7528\u518d\u6b21\u63d0\u95ee\u76f8\u540c\u7684\u95ee\u9898\u3002 \u5982\u679c\u4f60\u60f3\u5728\u56de\u590d\u4e2d\u63d0\u51fa\u95ee\u9898\uff0c\u8bb0\u5f97\u8981\u4fee\u6539\u5185\u5bb9\u6807\u9898\uff0c\u4ee5\u8868\u660e\u4f60\u662f\u5728\u95ee\u4e00\u4e2a\u95ee\u9898\uff0c \u4e00\u4e2a\u770b\u8d77\u6765\u50cf Re: \u6d4b\u8bd5 \u6216\u8005 Re: \u65b0 bug \u7684\u6807\u9898\u5f88\u96be\u5f15\u8d77\u8db3\u591f\u91cd\u89c6\u3002\u53e6\u5916\uff0c\u5728\u4e0d\u5f71\u54cd\u8fde\u8d2f\u6027\u4e4b\u4e0b\uff0c\u9002\u5f53\u5f15\u7528\u5e76\u5220\u51cf\u524d\u6587\u7684\u5185\u5bb9\uff0c\u80fd\u7ed9\u65b0\u6765\u7684\u8bfb\u8005\u7559\u4e0b\u7ebf\u7d22\u3002 \u5bf9\u4e8e\u8ba8\u8bba\u4e32\uff0c\u4e0d\u8981\u76f4\u63a5\u70b9\u51fb\u56de\u590d\u6765\u5f00\u59cb\u4e00\u4e2a\u5168\u65b0\u7684\u8ba8\u8bba\u4e32\uff0c\u8fd9\u5c06\u9650\u5236\u4f60\u7684\u89c2\u4f17\u3002\u56e0\u4e3a\u6709\u4e9b\u90ae\u4ef6\u9605\u8bfb\u7a0b\u5e8f\uff0c\u6bd4\u5982 mutt \uff0c\u5141\u8bb8\u4f7f\u7528\u8005\u6309\u8ba8\u8bba\u4e32\u6392\u5e8f\u5e76\u901a\u8fc7\u6298\u53e0\u8ba8\u8bba\u4e32\u6765\u9690\u85cf\u6d88\u606f\uff0c\u8fd9\u6837\u505a\u7684\u4eba\u6c38\u8fdc\u770b\u4e0d\u5230\u4f60\u53d1\u7684\u6d88\u606f\u3002 \u4ec5\u4ec5\u6539\u53d8\u6807\u9898\u8fd8\u4e0d\u591f\u3002mutt \u548c\u5176\u5b83\u4e00\u4e9b\u90ae\u4ef6\u9605\u8bfb\u7a0b\u5e8f\u8fd8\u4f1a\u68c0\u67e5\u90ae\u4ef6\u6807\u9898\u4ee5\u5916\u7684\u5176\u5b83\u4fe1\u606f\uff0c\u4ee5\u4fbf\u4e3a\u5176\u6307\u5b9a\u8ba8\u8bba\u4e32\u3002\u6240\u4ee5\u5b81\u53ef\u53d1\u4e00\u4e2a\u5168\u65b0\u7684\u90ae\u4ef6\u3002 \u5728\u7f51\u9875\u8bba\u575b\u4e0a\uff0c\u597d\u7684\u63d0\u95ee\u65b9\u5f0f\u7a0d\u6709\u4e0d\u540c\uff0c\u56e0\u4e3a\u8ba8\u8bba\u4e32\u4e0e\u7279\u5b9a\u7684\u4fe1\u606f\u7d27\u5bc6\u7ed3\u5408\uff0c\u5e76\u4e14\u901a\u5e38\u5728\u8ba8\u8bba\u4e32\u5916\u5c31\u770b\u4e0d\u5230\u91cc\u9762\u7684\u5185\u5bb9\uff0c\u6545\u901a\u8fc7\u56de\u590d\u63d0\u95ee\uff0c\u800c\u975e\u6539\u53d8\u6807\u9898\u662f\u53ef\u63a5\u53d7\u7684\u3002\u4e0d\u662f\u6240\u6709\u8bba\u575b\u90fd\u5141\u8bb8\u5728\u56de\u590d\u4e2d\u51fa\u73b0\u5206\u79bb\u7684\u6807\u9898\uff0c\u800c\u4e14\u8fd9\u6837\u505a\u4e86\u57fa\u672c\u4e0a\u6ca1\u6709\u4eba\u4f1a\u53bb\u770b\u3002\u4e0d\u8fc7\uff0c\u901a\u8fc7\u56de\u590d\u63d0\u95ee\uff0c\u8fd9\u672c\u8eab\u5c31\u662f\u66a7\u6627\u7684\u505a\u6cd5\uff0c\u56e0\u4e3a\u5b83\u4eec\u53ea\u4f1a\u88ab\u6b63\u5728\u67e5\u770b\u8be5\u6807\u9898\u7684\u4eba\u8bfb\u5230\u3002\u6240\u4ee5\uff0c\u9664\u975e\u4f60\u53ea\u60f3\u5728\u8be5\u8ba8\u8bba\u4e32\u5f53\u524d\u6d3b\u8dc3\u7684\u4eba\u7fa4\u4e2d\u63d0\u95ee\uff0c\u4e0d\u7136\u8fd8\u662f\u53e6\u8d77\u7089\u7076\u6bd4\u8f83\u597d\u3002 \u4f7f\u95ee\u9898\u5bb9\u6613\u56de\u590d \u4ee5 \u8bf7\u5c06\u4f60\u7684\u56de\u590d\u53d1\u9001\u5230\u2026\u2026 \u6765\u7ed3\u675f\u4f60\u7684\u95ee\u9898\u591a\u534a\u4f1a\u4f7f\u4f60\u5f97\u4e0d\u5230\u56de\u7b54\u3002\u5982\u679c\u4f60\u89c9\u5f97\u82b1\u51e0\u79d2\u949f\u5728\u90ae\u4ef6\u5ba2\u6237\u7aef\u8bbe\u7f6e\u4e00\u4e0b\u56de\u590d\u5730\u5740\u90fd\u9ebb\u70e6\uff0c\u6211\u4eec\u4e5f\u89c9\u5f97\u82b1\u51e0\u79d2\u949f\u601d\u8003\u4f60\u7684\u95ee\u9898\u66f4\u9ebb\u70e6\u3002\u5982\u679c\u4f60\u7684\u90ae\u4ef6\u7a0b\u5e8f\u4e0d\u652f\u6301\u8fd9\u6837\u505a\uff0c \u6362\u4e2a\u597d\u70b9\u7684 \uff1b\u5982\u679c\u662f\u64cd\u4f5c\u7cfb\u7edf\u4e0d\u652f\u6301\u8fd9\u79cd\u90ae\u4ef6\u7a0b\u5e8f\uff0c\u4e5f\u6362\u4e2a\u597d\u70b9\u7684\u3002 \u5728\u8bba\u575b\uff0c\u8981\u6c42\u901a\u8fc7\u7535\u5b50\u90ae\u4ef6\u56de\u590d\u662f\u975e\u5e38\u65e0\u793c\u7684\uff0c\u9664\u975e\u4f60\u8ba4\u4e3a\u56de\u590d\u7684\u4fe1\u606f\u53ef\u80fd\u6bd4\u8f83\u654f\u611f\uff08\u6709\u4eba\u4f1a\u4e3a\u4e86\u67d0\u4e9b\u672a\u77e5\u7684\u539f\u56e0\uff0c\u53ea\u8ba9\u4f60\u800c\u4e0d\u662f\u6574\u4e2a\u8bba\u575b\u77e5\u9053\u7b54\u6848\uff09\u3002\u5982\u679c\u4f60\u53ea\u662f\u60f3\u5728\u6709\u4eba\u56de\u590d\u8ba8\u8bba\u4e32\u65f6\u5f97\u5230\u7535\u5b50\u90ae\u4ef6\u63d0\u9192\uff0c\u53ef\u4ee5\u8981\u6c42\u7f51\u9875\u8bba\u575b\u53d1\u9001\u7ed9\u4f60\u3002\u51e0\u4e4e\u6240\u6709\u8bba\u575b\u90fd\u652f\u6301\u8bf8\u5982 \u8ffd\u8e2a\u6b64\u8ba8\u8bba\u4e32 \u3001 \u6709\u56de\u590d\u65f6\u53d1\u9001\u90ae\u4ef6\u63d0\u9192 \u7b49\u529f\u80fd\u3002 \u7528\u6e05\u6670\u3001\u6b63\u786e\u3001\u7cbe\u51c6\u5e76\u8bed\u6cd5\u6b63\u786e\u7684\u8bed\u53e5 \u6211\u4eec\u4ece\u7ecf\u9a8c\u4e2d\u53d1\u73b0\uff0c\u7c97\u5fc3\u7684\u63d0\u95ee\u8005\u901a\u5e38\u4e5f\u4f1a\u7c97\u5fc3\u7684\u5199\u7a0b\u5e8f\u4e0e\u601d\u8003\uff08\u6211\u6562\u6253\u5305\u7968\uff09\u3002\u56de\u7b54\u7c97\u5fc3\u5927\u610f\u8005\u7684\u95ee\u9898\u5f88\u4e0d\u503c\u5f97\uff0c\u6211\u4eec\u5b81\u613f\u628a\u65f6\u95f4\u8017\u5728\u522b\u5904\u3002 \u6b63\u786e\u7684\u62fc\u5199\u3001\u6807\u70b9\u7b26\u53f7\u548c\u5927\u5c0f\u5199\u662f\u5f88\u91cd\u8981\u7684\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u5982\u679c\u4f60\u89c9\u5f97\u8fd9\u6837\u505a\u5f88\u9ebb\u70e6\uff0c\u4e0d\u60f3\u5728\u4e4e\u8fd9\u4e9b\uff0c\u90a3\u6211\u4eec\u4e5f\u89c9\u5f97\u9ebb\u70e6\uff0c\u4e0d\u60f3\u5728\u4e4e\u4f60\u7684\u63d0\u95ee\u3002\u82b1\u70b9\u989d\u5916\u7684\u7cbe\u529b\u659f\u914c\u4e00\u4e0b\u5b57\u53e5\uff0c\u7528\u4e0d\u7740\u592a\u50f5\u786c\u4e0e\u6b63\u5f0f \u2014\u2014 \u4e8b\u5b9e\u4e0a\uff0c\u9ed1\u5ba2\u6587\u5316\u5f88\u770b\u91cd\u80fd\u51c6\u786e\u5730\u4f7f\u7528\u975e\u6b63\u5f0f\u3001\u4fda\u8bed\u548c\u5e7d\u9ed8\u7684\u8bed\u53e5\u3002\u4f46\u5b83\u5fc5\u987b\u5f88\u51c6\u786e\uff0c\u800c\u4e14\u6709\u8ff9\u8c61\u8868\u660e\u4f60\u662f\u5728\u601d\u8003\u548c\u5173\u6ce8\u95ee\u9898\u3002 \u6b63\u786e\u5730\u62fc\u5199\u3001\u4f7f\u7528\u6807\u70b9\u548c\u5927\u5c0f\u5199\uff0c\u4e0d\u8981\u5c06 its \u6df7\u6dc6\u4e3a it's \uff0c loose \u641e\u6210 lose \u6216\u8005\u5c06 discrete \u5f04\u6210 discreet \u3002\u4e0d\u8981\u5168\u90e8\u7528\u5927\u5199\uff0c\u8fd9\u4f1a\u88ab\u89c6\u4e3a\u65e0\u793c\u7684\u5927\u58f0\u56b7\u56b7\uff08\u5168\u90e8\u5c0f\u5199\u4e5f\u597d\u4e0d\u5230\u54ea\u53bb\uff0c\u56e0\u4e3a\u4e0d\u6613\u9605\u8bfb\u3002 Alan Cox \u4e5f\u8bb8\u53ef\u4ee5\u8fd9\u6837\u505a\uff0c\u4f46\u4f60\u4e0d\u884c\uff09\u3002 \u66f4\u767d\u8bdd\u7684\u8bf4\uff0c\u5982\u679c\u4f60\u5199\u5f97\u50cf\u662f\u4e2a\u534a\u6587\u76f2[\u8bd1\u6ce8\uff1a\u5c0f\u767d]\uff0c\u90a3\u591a\u534a\u5f97\u4e0d\u5230\u7406\u776c\u3002\u4e5f\u4e0d\u8981\u4f7f\u7528\u5373\u65f6\u901a\u4fe1\u4e2d\u7684\u7b80\u5199\u6216\u706b\u661f\u6587\uff0c\u5982\u5c06 \u7684 \u7b80\u5316\u4e3a d \u4f1a\u4f7f\u4f60\u770b\u8d77\u6765\u50cf\u4e00\u4e2a\u4e3a\u4e86\u5c11\u6253\u51e0\u4e2a\u952e\u800c\u7701\u5b57\u7684\u5c0f\u767d\u3002\u66f4\u7cdf\u7684\u662f\uff0c\u5982\u679c\u50cf\u4e2a\u5c0f\u5b69\u4f3c\u5730\u9b3c\u753b\u7b26\u90a3\u7edd\u5bf9\u662f\u5728\u627e\u6b7b\uff0c\u53ef\u4ee5\u80af\u5b9a\u6ca1\u4eba\u4f1a\u7406\u4f60\uff08\u6216\u8005\u6700\u591a\u662f\u7ed9\u4f60\u4e00\u5927\u5806\u6307\u8d23\u4e0e\u6316\u82e6\uff09\u3002 \u5982\u679c\u5728\u4f7f\u7528\u975e\u6bcd\u8bed\u7684\u8bba\u575b\u63d0\u95ee\uff0c\u4f60\u53ef\u4ee5\u72af\u70b9\u62fc\u5199\u548c\u8bed\u6cd5\u4e0a\u7684\u5c0f\u9519\uff0c\u4f46\u51b3\u4e0d\u80fd\u5728\u601d\u8003\u4e0a\u9a6c\u864e\uff08\u6ca1\u9519\uff0c\u6211\u4eec\u901a\u5e38\u80fd\u5f04\u6e05\u4e24\u8005\u7684\u5206\u522b\uff09\u3002\u540c\u65f6\uff0c\u9664\u975e\u4f60\u77e5\u9053\u56de\u590d\u8005\u4f7f\u7528\u7684\u8bed\u8a00\uff0c\u5426\u5219\u8bf7\u4f7f\u7528\u82f1\u8bed\u4e66\u5199\u3002\u7e41\u5fd9\u7684\u9ed1\u5ba2\u4e00\u822c\u4f1a\u76f4\u63a5\u5220\u9664\u7528\u4ed6\u4eec\u770b\u4e0d\u61c2\u8bed\u8a00\u5199\u7684\u6d88\u606f\u3002\u5728\u7f51\u7edc\u4e0a\u82f1\u8bed\u662f\u901a\u7528\u8bed\u8a00\uff0c\u7528\u82f1\u8bed\u4e66\u5199\u53ef\u4ee5\u5c06\u4f60\u7684\u95ee\u9898\u5728\u5c1a\u672a\u88ab\u9605\u8bfb\u5c31\u88ab\u76f4\u63a5\u5220\u9664\u7684\u53ef\u80fd\u6027\u964d\u5230\u6700\u4f4e\u3002 \u5982\u679c\u82f1\u6587\u662f\u4f60\u7684\u5916\u8bed\uff08Second language\uff09\uff0c\u63d0\u793a\u6f5c\u5728\u56de\u590d\u8005\u4f60\u6709\u6f5c\u5728\u7684\u8bed\u8a00\u56f0\u96be\u662f\u5f88\u597d\u7684\uff1a [\u8bd1\u6ce8\uff1a\u4ee5\u4e0b\u9644\u4e0a\u539f\u6587\u4ee5\u4f9b\u4f7f\u7528] English is not my native language; please excuse typing errors. \u82f1\u6587\u4e0d\u662f\u6211\u7684\u6bcd\u8bed\uff0c\u8bf7\u539f\u8c05\u6211\u7684\u9519\u5b57\u6216\u8bed\u6cd5\u3002 If you speak $LANGUAGE, please email/PM me; I may need assistance translating my question. \u5982\u679c\u4f60\u8bf4\u67d0\u8bed\u8a00\uff0c\u8bf7\u5bc4\u4fe1/\u79c1\u8baf\u7ed9\u6211\uff1b\u6211\u9700\u8981\u6709\u4eba\u534f\u52a9\u6211\u7ffb\u8bd1\u6211\u7684\u95ee\u9898\u3002 I am familiar with the technical terms, but some slang expressions and idioms are difficult for me. \u6211\u5bf9\u6280\u672f\u540d\u8bcd\u5f88\u719f\u6089\uff0c\u4f46\u5bf9\u4e8e\u4fd7\u8bed\u6216\u662f\u7279\u522b\u7528\u6cd5\u6bd4\u8f83\u4e0d\u751a\u4e86\u89e3\u3002 I've posted my question in $LANGUAGE and English. I'll be glad to translate responses, if you only use one or the other. \u6211\u628a\u6211\u7684\u95ee\u9898\u7528\u67d0\u8bed\u8a00\u548c\u82f1\u6587\u5199\u51fa\u6765\uff0c\u5982\u679c\u4f60\u53ea\u7528\u4e00\u79cd\u8bed\u8a00\u56de\u7b54\uff0c\u6211\u4f1a\u4e50\u610f\u5c06\u5176\u7ffb\u8bd1\u6210\u53e6\u4e00\u79cd\u3002 \u4f7f\u7528\u6613\u4e8e\u8bfb\u53d6\u4e14\u6807\u51c6\u7684\u6587\u4ef6\u683c\u5f0f\u53d1\u9001\u95ee\u9898 \u5982\u679c\u4f60\u4eba\u4e3a\u5730\u5c06\u95ee\u9898\u641e\u5f97\u96be\u4ee5\u9605\u8bfb\uff0c\u5b83\u591a\u534a\u4f1a\u88ab\u5ffd\u7565\uff0c\u4eba\u4eec\u66f4\u613f\u8bfb\u6613\u61c2\u7684\u95ee\u9898\uff0c\u6240\u4ee5\uff1a \u4f7f\u7528\u7eaf\u6587\u5b57\u800c\u4e0d\u662f HTML ( \u5173\u95ed HTML \u5e76\u4e0d\u96be\uff09\u3002 \u4f7f\u7528 MIME \u9644\u4ef6\u901a\u5e38\u662f\u53ef\u4ee5\u7684\uff0c\u524d\u63d0\u662f\u771f\u6b63\u6709\u5185\u5bb9\uff08\u8b6c\u5982\u9644\u5e26\u7684\u6e90\u4ee3\u7801\u6216 patch\uff09\uff0c\u800c\u4e0d\u4ec5\u4ec5\u662f\u90ae\u4ef6\u7a0b\u5e8f\u751f\u6210\u7684\u6a21\u677f\uff08\u8b6c\u5982\u53ea\u662f\u4fe1\u4ef6\u5185\u5bb9\u7684\u62f7\u8d1d\uff09\u3002 \u4e0d\u8981\u53d1\u9001\u4e00\u6bb5\u6587\u5b57\u53ea\u662f\u4e00\u884c\u53e5\u5b50\u4f46\u81ea\u52a8\u6362\u884c\u540e\u4f1a\u53d8\u6210\u591a\u884c\u7684\u90ae\u4ef6\uff08\u8fd9\u4f7f\u5f97\u56de\u590d\u90e8\u5206\u5185\u5bb9\u975e\u5e38\u56f0\u96be\uff09\u3002\u8bbe\u60f3\u4f60\u7684\u8bfb\u8005\u662f\u5728 80 \u4e2a\u5b57\u7b26\u5bbd\u7684\u7ec8\u7aef\u673a\u4e0a\u9605\u8bfb\u90ae\u4ef6\uff0c\u6700\u597d\u8bbe\u7f6e\u4f60\u7684\u6362\u884c\u5206\u5272\u70b9\u5c0f\u4e8e 80 \u5b57\u3002 \u4f46\u662f\uff0c\u5bf9\u4e00\u4e9b\u7279\u6b8a\u7684\u6587\u4ef6\u4e0d\u8981\u8bbe\u7f6e\u56fa\u5b9a\u5bbd\u5ea6\uff08\u8b6c\u5982\u65e5\u5fd7\u6863\u6848\u62f7\u8d1d\u6216\u4f1a\u8bdd\u8bb0\u5f55\uff09\u3002\u6570\u636e\u5e94\u8be5\u539f\u6837\u5305\u542b\uff0c\u8ba9\u56de\u590d\u8005\u6709\u4fe1\u5fc3\u4ed6\u4eec\u770b\u5230\u7684\u662f\u548c\u4f60\u770b\u5230\u7684\u4e00\u6837\u7684\u4e1c\u897f\u3002 \u5728\u82f1\u8bed\u8bba\u575b\u4e2d\uff0c\u4e0d\u8981\u4f7f\u7528 Quoted-Printable MIME \u7f16\u7801\u53d1\u9001\u6d88\u606f\u3002\u8fd9\u79cd\u7f16\u7801\u5bf9\u4e8e\u5f20\u8d34\u975e ASCII \u8bed\u8a00\u53ef\u80fd\u662f\u5fc5\u987b\u7684\uff0c\u4f46\u5f88\u591a\u90ae\u4ef6\u7a0b\u5e8f\u5e76\u4e0d\u652f\u6301\u8fd9\u79cd\u7f16\u7801\u3002\u5f53\u5b83\u4eec\u5904\u7406\u6362\u884c\u65f6\uff0c\u90a3\u4e9b\u6587\u672c\u4e2d\u56db\u5904\u6563\u5e03\u7684=20\u7b26\u53f7\u65e2\u96be\u770b\u4e5f\u5206\u6563\u6ce8\u610f\u529b\uff0c\u751a\u81f3\u6709\u53ef\u80fd\u7834\u574f\u5185\u5bb9\u7684\u8bed\u610f\u3002 \u7edd\u5bf9\uff0c\u6c38\u8fdc\u4e0d\u8981\u6307\u671b\u9ed1\u5ba2\u4eec\u9605\u8bfb\u4f7f\u7528\u5c01\u95ed\u683c\u5f0f\u7f16\u5199\u7684\u6587\u6863\uff0c\u50cf\u5fae\u8f6f\u516c\u53f8\u7684 Word \u6216 Excel \u6587\u4ef6\u7b49\u3002\u5927\u591a\u6570\u9ed1\u5ba2\u5bf9\u6b64\u7684\u53cd\u5e94\u5c31\u50cf\u6709\u4eba\u5c06\u8fd8\u5728\u5192\u70ed\u6c14\u7684\u732a\u7caa\u5012\u5728\u4f60\u5bb6\u95e8\u53e3\u65f6\u4f60\u7684\u53cd\u5e94\u4e00\u6837\u3002\u5373\u4fbf\u4ed6\u4eec\u80fd\u591f\u5904\u7406\uff0c\u4ed6\u4eec\u4e5f\u5f88\u538c\u6076\u8fd9\u4e48\u505a\u3002 \u5982\u679c\u4f60\u4ece\u4f7f\u7528 Windows \u7684\u7535\u8111\u53d1\u9001\u7535\u5b50\u90ae\u4ef6\uff0c\u5173\u95ed\u5fae\u8f6f\u611a\u8822\u7684 \u667a\u80fd\u5f15\u53f7 \u529f\u80fd \uff08\u4ece[\u9009\u9879] > [\u6821\u8ba2] > [\u81ea\u52a8\u6821\u6b63\u9009\u9879]\uff0c\u52fe\u9009\u6389\u667a\u80fd\u5f15\u53f7\u5355\u9009\u6846\uff09\uff0c\u4ee5\u514d\u5728\u4f60\u7684\u90ae\u4ef6\u4e2d\u5230\u5904\u6563\u5e03\u5783\u573e\u5b57\u7b26\u3002 \u5728\u8bba\u575b\uff0c\u52ff\u6ee5\u7528\u8868\u60c5\u7b26\u53f7\u548cHTML\u529f\u80fd\uff08\u5f53\u5b83\u4eec\u63d0\u4f9b\u65f6\uff09\u3002\u4e00\u4e24\u4e2a\u8868\u60c5\u7b26\u53f7\u901a\u5e38\u6ca1\u6709\u95ee\u9898\uff0c\u4f46\u82b1\u54e8\u7684\u5f69\u8272\u6587\u672c\u503e\u5411\u4e8e\u4f7f\u4eba\u8ba4\u4e3a\u4f60\u662f\u4e2a\u65e0\u80fd\u4e4b\u8f88\u3002\u8fc7\u6ee5\u5730\u4f7f\u7528\u8868\u60c5\u7b26\u53f7\u3001\u8272\u5f69\u548c\u5b57\u4f53\u4f1a\u4f7f\u4f60\u770b\u6765\u50cf\u4e2a\u50bb\u7b11\u7684\u5c0f\u59d1\u5a18\u3002\u8fd9\u901a\u5e38\u4e0d\u662f\u4e2a\u597d\u4e3b\u610f\uff0c\u9664\u975e\u4f60\u53ea\u662f\u5bf9\u6027\u800c\u4e0d\u662f\u5bf9\u7b54\u6848\u611f\u5174\u8da3\u3002 \u5982\u679c\u4f60\u4f7f\u7528\u56fe\u5f62\u7528\u6237\u754c\u9762\u7684\u90ae\u4ef6\u7a0b\u5e8f\uff08\u5982\u5fae\u8f6f\u516c\u53f8\u7684 Outlook \u6216\u8005\u5176\u5b83\u7c7b\u4f3c\u7684\uff09\uff0c\u6ce8\u610f\u5b83\u4eec\u7684\u9ed8\u8ba4\u8bbe\u7f6e\u4e0d\u4e00\u5b9a\u6ee1\u8db3\u8fd9\u4e9b\u8981\u6c42\u3002\u5927\u591a\u6570\u8fd9\u7c7b\u7a0b\u5e8f\u6709\u57fa\u4e8e\u9009\u5355\u7684\u67e5\u770b\u6e90\u4ee3\u7801\u547d\u4ee4\uff0c\u7528\u5b83\u6765\u68c0\u67e5\u53d1\u9001\u6587\u4ef6\u5939\u4e2d\u7684\u90ae\u4ef6\uff0c\u4ee5\u786e\u4fdd\u53d1\u9001\u7684\u662f\u7eaf\u6587\u672c\u6587\u4ef6\u540c\u65f6\u6ca1\u6709\u4e00\u4e9b\u5947\u602a\u7684\u5b57\u7b26\u3002 \u7cbe\u786e\u5730\u63cf\u8ff0\u95ee\u9898\u5e76\u8a00\u4e4b\u6709\u7269 \u4ed4\u7ec6\u3001\u6e05\u695a\u5730\u63cf\u8ff0\u4f60\u7684\u95ee\u9898\u6216 Bug \u7684\u75c7\u72b6\u3002 \u63cf\u8ff0\u95ee\u9898\u53d1\u751f\u7684\u73af\u5883\uff08\u673a\u5668\u914d\u7f6e\u3001\u64cd\u4f5c\u7cfb\u7edf\u3001\u5e94\u7528\u7a0b\u5e8f\u3001\u4ee5\u53ca\u76f8\u5173\u7684\u4fe1\u606f\uff09\uff0c\u63d0\u4f9b\u7ecf\u9500\u5546\u7684\u53d1\u884c\u7248\u548c\u7248\u672c\u53f7\uff08\u5982\uff1a Fedora Core 4 \u3001 Slackware 9.1 \u7b49\uff09\u3002 \u63cf\u8ff0\u5728\u63d0\u95ee\u524d\u4f60\u662f\u600e\u6837\u53bb\u7814\u7a76\u548c\u7406\u89e3\u8fd9\u4e2a\u95ee\u9898\u7684\u3002 \u63cf\u8ff0\u5728\u63d0\u95ee\u524d\u4e3a\u786e\u5b9a\u95ee\u9898\u800c\u91c7\u53d6\u7684\u8bca\u65ad\u6b65\u9aa4\u3002 \u63cf\u8ff0\u6700\u8fd1\u505a\u8fc7\u4ec0\u4e48\u53ef\u80fd\u76f8\u5173\u7684\u786c\u4ef6\u6216\u8f6f\u4ef6\u53d8\u66f4\u3002 \u5c3d\u53ef\u80fd\u7684\u63d0\u4f9b\u4e00\u4e2a\u53ef\u4ee5 \u91cd\u73b0\u8fd9\u4e2a\u95ee\u9898\u7684\u53ef\u63a7\u73af\u5883 \u7684\u65b9\u6cd5\u3002 \u5c3d\u91cf\u53bb\u63e3\u6d4b\u4e00\u4e2a\u9ed1\u5ba2\u4f1a\u600e\u6837\u53cd\u95ee\u4f60\uff0c\u5728\u4f60\u63d0\u95ee\u4e4b\u524d\u9884\u5148\u5c06\u9ed1\u5ba2\u4eec\u53ef\u80fd\u9047\u5230\u7684\u95ee\u9898\u56de\u7b54\u4e00\u904d\u3002 \u4ee5\u4e0a\u51e0\u70b9\u4e2d\uff0c\u5f53\u4f60\u62a5\u544a\u7684\u662f\u4f60\u8ba4\u4e3a\u53ef\u80fd\u5728\u4ee3\u7801\u4e2d\u7684\u95ee\u9898\u65f6\uff0c\u7ed9\u9ed1\u5ba2\u4e00\u4e2a\u53ef\u4ee5\u91cd\u73b0\u4f60\u7684\u95ee\u9898\u7684\u73af\u5883\u5c24\u5176\u91cd\u8981\u3002\u5f53\u4f60\u8fd9\u4e48\u505a\u65f6\uff0c\u4f60\u5f97\u5230\u6709\u6548\u7684\u56de\u7b54\u7684\u673a\u4f1a\u548c\u901f\u5ea6\u90fd\u4f1a\u5927\u5927\u7684\u63d0\u5347\u3002 Simon Tatham \u5199\u8fc7\u4e00\u7bc7\u540d\u4e3a\u300a\u5982\u4f55\u6709\u6548\u7684\u62a5\u544a Bug\u300b\u7684\u51fa\u8272\u6587\u7ae0\u3002\u5f3a\u529b\u63a8\u8350\u4f60\u4e5f\u8bfb\u4e00\u8bfb\u3002 \u8bdd\u4e0d\u5728\u591a\u800c\u5728\u7cbe \u4f60\u9700\u8981\u63d0\u4f9b\u7cbe\u786e\u6709\u5185\u5bb9\u7684\u4fe1\u606f\u3002\u8fd9\u5e76\u4e0d\u662f\u8981\u6c42\u4f60\u7b80\u5355\u7684\u628a\u6210\u5806\u7684\u51fa\u9519\u4ee3\u7801\u6216\u8005\u8d44\u6599\u5b8c\u5168\u8f6c\u5f55\u5230\u4f60\u7684\u63d0\u95ee\u4e2d\u3002\u5982\u679c\u4f60\u6709\u5e9e\u5927\u800c\u590d\u6742\u7684\u6d4b\u8bd5\u6837\u4f8b\u80fd\u91cd\u73b0\u7a0b\u5e8f\u6302\u6389\u7684\u60c5\u5883\uff0c\u5c3d\u91cf\u5c06\u5b83\u526a\u88c1\u5f97\u8d8a\u5c0f\u8d8a\u597d\u3002 \u8fd9\u6837\u505a\u7684\u7528\u5904\u81f3\u5c11\u6709\u4e09\u70b9\u3002 \u7b2c\u4e00\uff0c\u8868\u73b0\u51fa\u4f60\u4e3a\u7b80\u5316\u95ee\u9898\u4ed8\u51fa\u4e86\u52aa\u529b\uff0c\u8fd9\u53ef\u4ee5\u4f7f\u4f60\u5f97\u5230\u56de\u7b54\u7684\u673a\u4f1a\u589e\u52a0\uff1b \u7b2c\u4e8c\uff0c\u7b80\u5316\u95ee\u9898\u4f7f\u4f60\u66f4\u6709\u53ef\u80fd\u5f97\u5230\u6709\u7528\u7684\u7b54\u6848\uff1b \u7b2c\u4e09\uff0c\u5728\u7cbe\u70bc\u4f60\u7684 bug \u62a5\u544a\u7684\u8fc7\u7a0b\u4e2d\uff0c\u4f60\u5f88\u53ef\u80fd\u5c31\u81ea\u5df1\u627e\u5230\u4e86\u89e3\u51b3\u65b9\u6cd5\u6216\u6743\u5b9c\u4e4b\u8ba1\u3002 \u522b\u52a8\u8f84\u58f0\u79f0\u627e\u5230 Bug \u5f53\u4f60\u5728\u4f7f\u7528\u8f6f\u4ef6\u4e2d\u9047\u5230\u95ee\u9898\uff0c\u9664\u975e\u4f60\u975e\u5e38\u3001\u975e\u5e38\u7684\u6709\u6839\u636e\uff0c\u4e0d\u8981\u52a8\u8f84\u58f0\u79f0\u627e\u5230\u4e86 Bug\u3002\u63d0\u793a\uff1a\u9664\u975e\u4f60\u80fd\u63d0\u4f9b\u89e3\u51b3\u95ee\u9898\u7684\u6e90\u4ee3\u7801\u8865\u4e01\uff0c\u6216\u8005\u63d0\u4f9b\u56de\u5f52\u6d4b\u8bd5\u6765\u8868\u660e\u524d\u4e00\u7248\u672c\u4e2d\u884c\u4e3a\u4e0d\u6b63\u786e\uff0c\u5426\u5219\u4f60\u90fd\u591a\u534a\u4e0d\u591f\u5b8c\u5168\u786e\u4fe1\u3002\u8fd9\u540c\u6837\u9002\u7528\u5728\u7f51\u9875\u548c\u6587\u4ef6\uff0c\u5982\u679c\u4f60\uff08\u58f0\u79f0\uff09\u53d1\u73b0\u4e86\u6587\u4ef6\u7684Bug\uff0c\u4f60\u5e94\u8be5\u80fd\u63d0\u4f9b\u76f8\u5e94\u4f4d\u7f6e\u7684\u4fee\u6b63\u6216\u66ff\u4ee3\u6587\u4ef6\u3002 \u8bf7\u8bb0\u5f97\uff0c\u8fd8\u6709\u8bb8\u591a\u5176\u5b83\u4f7f\u7528\u8005\u6ca1\u9047\u5230\u4f60\u53d1\u73b0\u7684\u95ee\u9898\uff0c\u5426\u5219\u4f60\u5728\u9605\u8bfb\u6587\u4ef6\u6216\u641c\u7d22\u7f51\u9875\u65f6\u5c31\u5e94\u8be5\u53d1\u73b0\u4e86\uff08\u4f60\u5728\u62b1\u6028\u524d\u5df2\u7ecf\u505a\u4e86\u8fd9\u4e9b\uff0c\u662f\u5427\uff1f\uff09\u3002\u8fd9\u4e5f\u610f\u5473\u7740\u5f88\u6709\u53ef\u80fd\u662f\u4f60\u5f04\u9519\u4e86\u800c\u4e0d\u662f\u8f6f\u4ef6\u672c\u8eab\u6709\u95ee\u9898\u3002 \u7f16\u5199\u8f6f\u4ef6\u7684\u4eba\u603b\u662f\u975e\u5e38\u8f9b\u82e6\u5730\u4f7f\u5b83\u5c3d\u53ef\u80fd\u5b8c\u7f8e\u3002\u5982\u679c\u4f60\u58f0\u79f0\u627e\u5230\u4e86 Bug\uff0c\u4e5f\u5c31\u662f\u5728\u8d28\u7591\u4ed6\u4eec\u7684\u80fd\u529b\uff0c\u5373\u4f7f\u4f60\u662f\u5bf9\u7684\uff0c\u4e5f\u6709\u53ef\u80fd\u4f1a\u5192\u72af\u5230\u5176\u4e2d\u67d0\u90e8\u5206\u4eba\u3002\u5f53\u4f60\u5728\u6807\u9898\u4e2d\u56b7\u56b7\u7740\u6709Bug\u65f6\uff0c\u8fd9\u5c24\u5176\u4e25\u91cd\u3002 \u63d0\u95ee\u65f6\uff0c\u5373\u4f7f\u4f60\u79c1\u4e0b\u975e\u5e38\u786e\u4fe1\u5df2\u7ecf\u53d1\u73b0\u4e00\u4e2a\u771f\u6b63\u7684 Bug\uff0c\u6700\u597d\u5199\u5f97\u50cf\u662f\u4f60\u505a\u9519\u4e86\u4ec0\u4e48\u3002\u5982\u679c\u771f\u7684\u6709 Bug\uff0c\u4f60\u4f1a\u5728\u56de\u590d\u4e2d\u770b\u5230\u8fd9\u70b9\u3002\u8fd9\u6837\u505a\u7684\u8bdd\uff0c\u5982\u679c\u771f\u6709 Bug\uff0c\u7ef4\u62a4\u8005\u5c31\u4f1a\u5411\u4f60\u9053\u6b49\uff0c\u8fd9\u603b\u6bd4\u4f60\u60f9\u607c\u522b\u4eba\u7136\u540e\u6b20\u522b\u4eba\u4e00\u4e2a\u9053\u6b49\u8981\u597d\u4e00\u70b9\u3002 \u4f4e\u58f0\u4e0b\u6c14\u4e0d\u80fd\u4ee3\u66ff\u4f60\u7684\u529f\u8bfe \u6709\u4e9b\u4eba\u660e\u767d\u4ed6\u4eec\u4e0d\u8be5\u7c97\u9c81\u6216\u50b2\u6162\u7684\u63d0\u95ee\u5e76\u8981\u6c42\u5f97\u5230\u7b54\u590d\uff0c\u4f46\u4ed6\u4eec\u9009\u62e9\u53e6\u4e00\u4e2a\u6781\u7aef \u2014\u2014 \u4f4e\u58f0\u4e0b\u6c14\uff1a \u6211\u77e5\u9053\u6211\u53ea\u662f\u4e2a\u53ef\u60b2\u7684\u65b0\u624b\uff0c\u4e00\u4e2a\u64b8\u745f\uff0c\u4f46... \u3002\u8fd9\u65e2\u4f7f\u4eba\u56f0\u6270\uff0c\u4e5f\u6ca1\u6709\u7528\uff0c\u5c24\u5176\u662f\u4f34\u968f\u7740\u4e0e\u5b9e\u9645\u95ee\u9898\u542b\u7cca\u4e0d\u6e05\u7684\u63cf\u8ff0\u65f6\u66f4\u4ee4\u4eba\u53cd\u611f\u3002 \u522b\u7528\u539f\u59cb\u7075\u957f\u7c7b\u52a8\u7269\u7684\u628a\u620f\u6765\u6d6a\u8d39\u4f60\u6211\u7684\u65f6\u95f4\u3002\u53d6\u800c\u4ee3\u4e4b\u7684\u662f\uff0c\u5c3d\u53ef\u80fd\u6e05\u695a\u5730\u63cf\u8ff0\u80cc\u666f\u6761\u4ef6\u548c\u4f60\u7684\u95ee\u9898\u60c5\u51b5\u3002\u8fd9\u6bd4\u4f4e\u58f0\u4e0b\u6c14\u66f4\u597d\u5730\u5b9a\u4f4d\u4e86\u4f60\u7684\u4f4d\u7f6e\u3002 \u6709\u65f6\u7f51\u9875\u8bba\u575b\u4f1a\u8bbe\u6709\u4e13\u4e3a\u65b0\u624b\u63d0\u95ee\u7684\u7248\u9762\uff0c\u5982\u679c\u4f60\u771f\u7684\u8ba4\u4e3a\u9047\u5230\u4e86\u521d\u5b66\u8005\u7684\u95ee\u9898\uff0c\u5230\u90a3\u53bb\u5c31\u662f\u4e86\uff0c\u4f46\u4e00\u6837\u522b\u90a3\u4e48\u4f4e\u58f0\u4e0b\u6c14\u3002 \u63cf\u8ff0\u95ee\u9898\u75c7\u72b6\u800c\u975e\u4f60\u7684\u731c\u6d4b \u544a\u8bc9\u9ed1\u5ba2\u4eec\u4f60\u8ba4\u4e3a\u95ee\u9898\u662f\u600e\u6837\u9020\u6210\u7684\u5e76\u6ca1\u4ec0\u4e48\u5e2e\u52a9\u3002\uff08\u5982\u679c\u4f60\u7684\u63a8\u65ad\u5982\u6b64\u6709\u6548\uff0c\u8fd8\u7528\u5411\u522b\u4eba\u6c42\u52a9\u5417\uff1f\uff09\uff0c\u56e0\u6b64\u8981\u786e\u4fe1\u4f60\u539f\u539f\u672c\u672c\u544a\u8bc9\u4e86\u4ed6\u4eec\u95ee\u9898\u7684\u75c7\u72b6\uff0c\u800c\u4e0d\u662f\u4f60\u7684\u89e3\u91ca\u548c\u7406\u8bba\uff1b\u8ba9\u9ed1\u5ba2\u4eec\u6765\u63a8\u6d4b\u548c\u8bca\u65ad\u3002\u5982\u679c\u4f60\u8ba4\u4e3a\u9648\u8ff0\u81ea\u5df1\u7684\u731c\u6d4b\u5f88\u91cd\u8981\uff0c\u6e05\u695a\u5730\u8bf4\u660e\u8fd9\u53ea\u662f\u4f60\u7684\u731c\u6d4b\uff0c\u5e76\u63cf\u8ff0\u4e3a\u4ec0\u4e48\u5b83\u4eec\u4e0d\u8d77\u4f5c\u7528\u3002 \u8822\u95ee\u9898 \u6211\u5728\u7f16\u8bd1\u5185\u6838\u65f6\u63a5\u8fde\u9047\u5230 SIG11 \u9519\u8bef\uff0c \u6211\u6000\u7591\u67d0\u6761\u98de\u7ebf\u642d\u5728\u4e3b\u677f\u7684\u8d70\u7ebf\u4e0a\u4e86\uff0c\u8fd9\u79cd\u60c5\u51b5\u5e94\u8be5\u600e\u6837\u68c0\u67e5\u6700\u597d\uff1f \u806a\u660e\u95ee\u9898 \u6211\u7684\u7ec4\u88c5\u7535\u8111\u662f FIC-PA2007 \u4e3b\u673a\u677f\u642d\u8f7d AMD K6/233 CPU\uff08\u5a01\u76db Apollo VP2 \u82af\u7247\u7ec4\uff09\uff0c 256MB Corsair PC133 SDRAM \u5185\u5b58\uff0c\u5728\u7f16\u8bd1\u5185\u6838\u65f6\uff0c\u4ece\u5f00\u673a 20 \u5206\u949f\u4ee5\u540e\u5c31\u9891\u9891\u4ea7\u751f SIG11 \u9519\u8bef\uff0c \u4f46\u662f\u5728\u5934 20 \u5206\u949f\u5185\u4ece\u6ca1\u53d1\u751f\u8fc7\u76f8\u540c\u7684\u95ee\u9898\u3002\u91cd\u65b0\u542f\u52a8\u4e5f\u6ca1\u6709\u7528\uff0c\u4f46\u662f\u5173\u673a\u4e00\u665a\u4e0a\u5c31\u53c8\u80fd\u5de5\u4f5c 20 \u5206\u949f\u3002 \u6240\u6709\u5185\u5b58\u90fd\u6362\u8fc7\u4e86\uff0c\u6ca1\u6709\u6548\u679c\u3002\u76f8\u5173\u90e8\u5206\u7684\u6807\u51c6\u7f16\u8bd1\u8bb0\u5f55\u5982\u4e0b\u2026\u3002 \u7531\u4e8e\u4ee5\u4e0a\u8fd9\u70b9\u4f3c\u4e4e\u8ba9\u8bb8\u591a\u4eba\u89c9\u5f97\u96be\u4ee5\u914d\u5408\uff0c\u8fd9\u91cc\u6709\u53e5\u8bdd\u53ef\u4ee5\u63d0\u9192\u4f60\uff1a \u6240\u6709\u7684\u8bca\u65ad\u4e13\u5bb6\u90fd\u6765\u81ea\u5bc6\u82cf\u91cc\u5dde\u3002 \u7f8e\u56fd\u56fd\u52a1\u9662\u7684\u5b98\u65b9\u5ea7\u53f3\u94ed\u5219\u662f\uff1a \u8ba9\u6211\u770b\u770b \uff08\u51fa\u81ea\u56fd\u4f1a\u8bae\u5458 Willard D. Vandiver \u5728 1899 \u5e74\u65f6\u7684\u8bb2\u8bdd\uff1a \u6211\u6765\u81ea\u4e00\u4e2a\u51fa\u4ea7\u7389\u7c73\uff0c\u68c9\u82b1\uff0c\u725b\u84a1\u548c\u6c11\u4e3b\u515a\u4eba\u7684\u56fd\u5bb6\uff0c\u6ed4\u6ed4\u96c4\u8fa9\u65e2\u4e0d\u80fd\u8bf4\u670d\u6211\uff0c\u4e5f\u4e0d\u4f1a\u8ba9\u6211\u6ee1\u610f\u3002\u6211\u6765\u81ea\u5bc6\u82cf\u91cc\u5dde\uff0c\u4f60\u5fc5\u987b\u8ba9\u6211\u770b\u770b\u3002 \uff09 \u9488\u5bf9\u8bca\u65ad\u8005\u800c\u8a00\uff0c\u8fd9\u5e76\u4e0d\u662f\u4e00\u79cd\u6000\u7591\uff0c\u800c\u53ea\u662f\u4e00\u79cd\u771f\u5b9e\u800c\u6709\u7528\u7684\u9700\u6c42\uff0c\u4ee5\u4fbf\u8ba9\u4ed6\u4eec\u770b\u5230\u7684\u662f\u4e0e\u4f60\u770b\u5230\u7684\u539f\u59cb\u8bc1\u636e\u5c3d\u53ef\u80fd\u4e00\u81f4\u7684\u4e1c\u897f\uff0c\u800c\u4e0d\u662f\u4f60\u7684\u731c\u6d4b\u4e0e\u5f52\u7eb3\u7684\u7ed3\u8bba\u3002\u6240\u4ee5\uff0c\u5927\u65b9\u7684\u5c55\u793a\u7ed9\u6211\u4eec\u770b\u5427\uff01 \u6309\u53d1\u751f\u65f6\u95f4\u5148\u540e\u5217\u51fa\u95ee\u9898\u75c7\u72b6 \u95ee\u9898\u53d1\u751f\u524d\u7684\u4e00\u7cfb\u5217\u64cd\u4f5c\uff0c\u5f80\u5f80\u5c31\u662f\u5bf9\u627e\u51fa\u95ee\u9898\u6700\u6709\u5e2e\u52a9\u7684\u7ebf\u7d22\u3002\u56e0\u6b64\uff0c\u4f60\u7684\u8bf4\u660e\u91cc\u5e94\u8be5\u5305\u542b\u4f60\u7684\u64cd\u4f5c\u6b65\u9aa4\uff0c\u4ee5\u53ca\u673a\u5668\u548c\u8f6f\u4ef6\u7684\u53cd\u5e94\uff0c\u76f4\u5230\u95ee\u9898\u53d1\u751f\u3002\u5728\u547d\u4ee4\u884c\u5904\u7406\u7684\u60c5\u51b5\u4e0b\uff0c\u63d0\u4f9b\u4e00\u6bb5\u64cd\u4f5c\u8bb0\u5f55\uff08\u4f8b\u5982\u8fd0\u884c\u811a\u672c\u5de5\u5177\u6240\u751f\u6210\u7684\uff09\uff0c\u5e76\u5f15\u7528\u76f8\u5173\u7684\u82e5\u5e72\u884c\uff08\u5982 20 \u884c\uff09\u8bb0\u5f55\u4f1a\u975e\u5e38\u6709\u5e2e\u52a9\u3002 \u5982\u679c\u6302\u6389\u7684\u7a0b\u5e8f\u6709\u8bca\u65ad\u9009\u9879\uff08\u5982 -v \u7684\u8be6\u8ff0\u5f00\u5173\uff09\uff0c\u8bd5\u7740\u9009\u62e9\u8fd9\u4e9b\u80fd\u5728\u8bb0\u5f55\u4e2d\u589e\u52a0\u8c03\u8bd5\u4fe1\u606f\u7684\u9009\u9879\u3002\u8bb0\u4f4f\uff0c \u591a \u4e0d\u7b49\u4e8e \u597d \u3002\u8bd5\u7740\u9009\u53d6\u9002\u5f53\u7684\u8c03\u8bd5\u7ea7\u522b\u4ee5\u4fbf\u63d0\u4f9b\u6709\u7528\u7684\u4fe1\u606f\u800c\u4e0d\u662f\u8ba9\u8bfb\u8005\u6df9\u6ca1\u5728\u5783\u573e\u4e2d\u3002 \u5982\u679c\u4f60\u7684\u8bf4\u660e\u5f88\u957f\uff08\u5982\u8d85\u8fc7\u56db\u4e2a\u6bb5\u843d\uff09\uff0c\u5728\u5f00\u5934\u7b80\u8ff0\u95ee\u9898\uff0c\u63a5\u4e0b\u6765\u518d\u6309\u65f6\u95f4\u987a\u5e8f\u8be6\u8ff0\u4f1a\u6709\u6240\u5e2e\u52a9\u3002\u8fd9\u6837\u9ed1\u5ba2\u4eec\u5728\u8bfb\u4f60\u7684\u8bb0\u5f55\u65f6\u5c31\u77e5\u9053\u8be5\u6ce8\u610f\u54ea\u4e9b\u5185\u5bb9\u4e86\u3002 \u63cf\u8ff0\u76ee\u6807\u800c\u4e0d\u662f\u8fc7\u7a0b \u5982\u679c\u4f60\u60f3\u5f04\u6e05\u695a\u5982\u4f55\u505a\u67d0\u4e8b\uff08\u800c\u4e0d\u662f\u62a5\u544a\u4e00\u4e2a Bug\uff09\uff0c\u5728\u5f00\u5934\u5c31\u63cf\u8ff0\u4f60\u7684\u76ee\u6807\uff0c\u7136\u540e\u624d\u9648\u8ff0\u91cd\u73b0\u4f60\u6240\u5361\u4f4f\u7684\u7279\u5b9a\u6b65\u9aa4\u3002 \u7ecf\u5e38\u5bfb\u6c42\u6280\u672f\u5e2e\u52a9\u7684\u4eba\u5728\u5fc3\u4e2d\u6709\u4e2a\u66f4\u9ad8\u5c42\u6b21\u7684\u76ee\u6807\uff0c\u800c\u4ed6\u4eec\u5728\u81ea\u4ee5\u4e3a\u80fd\u8fbe\u5230\u76ee\u6807\u7684\u7279\u5b9a\u9053\u8def\u4e0a\u88ab\u5361\u4f4f\u4e86\uff0c\u7136\u540e\u8dd1\u6765\u95ee\u8be5\u600e\u4e48\u8d70\uff0c\u4f46\u6ca1\u6709\u610f\u8bc6\u5230\u8fd9\u6761\u8def\u672c\u8eab\u5c31\u6709\u95ee\u9898\u3002\u7ed3\u679c\u8981\u8d39\u5f88\u5927\u7684\u52b2\u624d\u80fd\u641e\u5b9a\u3002 \u8822\u95ee\u9898 \u6211\u600e\u6837\u624d\u80fd\u4ece\u67d0\u7ed8\u56fe\u7a0b\u5e8f\u7684\u989c\u8272\u9009\u62e9\u5668\u4e2d\u53d6\u5f97\u5341\u516d\u8fdb\u5236\u7684\u7684 RGB \u503c\uff1f \u806a\u660e\u95ee\u9898 \u6211\u6b63\u8bd5\u7740\u7528\u66ff\u6362\u4e00\u5e45\u56fe\u7247\u7684\u8272\u7801\uff08color table\uff09\u6210\u81ea\u5df1\u9009\u5b9a\u7684\u8272\u7801\uff0c\u6211\u73b0\u5728\u77e5\u9053\u7684\u552f\u4e00\u65b9\u6cd5\u662f\u7f16\u8f91\u6bcf\u4e2a\u8272\u7801\u533a\u5757\uff08table slot\uff09\uff0c \u4f46\u5374\u65e0\u6cd5\u4ece\u67d0\u7ed8\u56fe\u7a0b\u5e8f\u7684\u989c\u8272\u9009\u62e9\u5668\u53d6\u5f97\u5341\u516d\u8fdb\u5236\u7684\u7684 RGB \u503c\u3002 \u7b2c\u4e8c\u79cd\u63d0\u95ee\u6cd5\u6bd4\u8f83\u806a\u660e\uff0c\u4f60\u53ef\u80fd\u5f97\u5230\u50cf\u662f \u5efa\u8bae\u91c7\u7528\u53e6\u4e00\u4e2a\u66f4\u5408\u9002\u7684\u5de5\u5177 \u7684\u56de\u590d\u3002 \u522b\u8981\u6c42\u4f7f\u7528\u79c1\u4eba\u7535\u90ae\u56de\u590d \u9ed1\u5ba2\u4eec\u8ba4\u4e3a\u95ee\u9898\u7684\u89e3\u51b3\u8fc7\u7a0b\u5e94\u8be5\u516c\u5f00\u3001\u900f\u660e\uff0c\u6b64\u8fc7\u7a0b\u4e2d\u5982\u679c\u66f4\u6709\u7ecf\u9a8c\u7684\u4eba\u6ce8\u610f\u5230\u4e0d\u5b8c\u6574\u6216\u8005\u4e0d\u5f53\u4e4b\u5904\uff0c\u6700\u521d\u7684\u56de\u590d\u624d\u80fd\u591f\u3001\u4e5f\u5e94\u8be5\u88ab\u7ea0\u6b63\u3002\u540c\u65f6\uff0c\u4f5c\u4e3a\u63d0\u4f9b\u5e2e\u52a9\u8005\u53ef\u4ee5\u5f97\u5230\u4e00\u4e9b\u5956\u52b1\uff0c\u5956\u52b1\u5c31\u662f\u4ed6\u7684\u80fd\u529b\u548c\u5b66\u8bc6\u88ab\u5176\u4ed6\u540c\u884c\u770b\u5230\u3002 \u5f53\u4f60\u8981\u6c42\u79c1\u4e0b\u56de\u590d\u65f6\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u548c\u5956\u52b1\u90fd\u88ab\u4e2d\u6b62\u3002\u522b\u8fd9\u6837\u505a\uff0c\u8ba9\u56de\u590d\u8005\u6765\u51b3\u5b9a\u662f\u5426\u79c1\u4e0b\u56de\u7b54 \u2014\u2014 \u5982\u679c\u4ed6\u771f\u8fd9\u4e48\u505a\u4e86\uff0c\u901a\u5e38\u662f\u56e0\u4e3a\u4ed6\u8ba4\u4e3a\u95ee\u9898\u7f16\u5199\u592a\u5dee\u6216\u8005\u592a\u80a4\u6d45\uff0c\u4ee5\u81f3\u4e8e\u5bf9\u5176\u5b83\u4eba\u6ca1\u6709\u5174\u8da3\u3002 \u8fd9\u6761\u89c4\u5219\u5b58\u5728\u4e00\u6761\u6709\u9650\u7684\u4f8b\u5916\uff0c\u5982\u679c\u4f60\u786e\u4fe1\u63d0\u95ee\u53ef\u80fd\u4f1a\u5f15\u6765\u5927\u91cf\u96f7\u540c\u7684\u56de\u590d\u65f6\uff0c\u90a3\u4e48\u8fd9\u4e2a\u795e\u5947\u7684\u63d0\u95ee\u53e5\u4f1a\u662f \u5411\u6211\u53d1\u7535\u90ae\uff0c\u6211\u5c06\u4e3a\u8bba\u575b\u5f52\u7eb3\u8fd9\u4e9b\u56de\u590d \u3002\u8bd5\u7740\u5c06\u90ae\u4ef6\u5217\u8868\u6216\u65b0\u95fb\u7fa4\u7ec4\u4ece\u6d2a\u6c34\u822c\u7684\u96f7\u540c\u56de\u590d\u4e2d\u89e3\u6551\u51fa\u6765\u662f\u975e\u5e38\u6709\u793c\u8c8c\u7684 \u2014\u2014 \u4f46\u4f60\u5fc5\u987b\u4fe1\u5b88\u8bfa\u8a00\u3002 \u6e05\u695a\u660e\u786e\u7684\u8868\u8fbe\u4f60\u7684\u95ee\u9898\u4ee5\u53ca\u9700\u6c42 \u6f2b\u65e0\u8fb9\u9645\u7684\u63d0\u95ee\u662f\u8fd1\u4e4e\u65e0\u4f11\u65e0\u6b62\u7684\u65f6\u95f4\u9ed1\u6d1e\u3002\u6700\u6709\u53ef\u80fd\u7ed9\u4f60\u6709\u7528\u7b54\u6848\u7684\u4eba\u901a\u5e38\u4e5f\u6b63\u662f\u6700\u5fd9\u7684\u4eba\uff08\u4ed6\u4eec\u5fd9\u662f\u56e0\u4e3a\u8981\u4eb2\u81ea\u5b8c\u6210\u5927\u90e8\u5206\u5de5\u4f5c\uff09\u3002\u8fd9\u6837\u7684\u4eba\u5bf9\u65e0\u8282\u5236\u7684\u65f6\u95f4\u9ed1\u6d1e\u76f8\u5f53\u538c\u6076\uff0c\u6240\u4ee5\u4ed6\u4eec\u4e5f\u503e\u5411\u4e8e\u538c\u6076\u90a3\u4e9b\u6f2b\u65e0\u8fb9\u9645\u7684\u63d0\u95ee\u3002 \u5982\u679c\u4f60\u660e\u786e\u8868\u8ff0\u9700\u8981\u56de\u7b54\u8005\u505a\u4ec0\u4e48\uff08\u5982\u63d0\u4f9b\u6307\u70b9\u3001\u53d1\u9001\u4e00\u6bb5\u4ee3\u7801\u3001\u68c0\u67e5\u4f60\u7684\u8865\u4e01\u3001\u6216\u662f\u5176\u4ed6\u7b49\u7b49\uff09\uff0c\u5c31\u6700\u6709\u53ef\u80fd\u5f97\u5230\u6709\u7528\u7684\u7b54\u6848\u3002\u56e0\u4e3a\u8fd9\u4f1a\u5b9a\u51fa\u4e00\u4e2a\u65f6\u95f4\u548c\u7cbe\u529b\u7684\u4e0a\u9650\uff0c\u4fbf\u4e8e\u56de\u7b54\u8005\u80fd\u96c6\u4e2d\u7cbe\u529b\u6765\u5e2e\u4f60\u3002\u8fd9\u4e48\u505a\u5f88\u68d2\u3002 \u8981\u7406\u89e3\u4e13\u5bb6\u4eec\u6240\u5904\u7684\u4e16\u754c\uff0c\u8bf7\u628a\u4e13\u4e1a\u6280\u80fd\u60f3\u50cf\u4e3a\u5145\u88d5\u7684\u8d44\u6e90\uff0c\u800c\u56de\u590d\u7684\u65f6\u95f4\u5219\u662f\u7a00\u7f3a\u7684\u8d44\u6e90\u3002\u4f60\u8981\u6c42\u4ed6\u4eec\u5949\u732e\u7684\u65f6\u95f4\u8d8a\u5c11\uff0c\u4f60\u8d8a\u6709\u53ef\u80fd\u4ece\u771f\u6b63\u4e13\u4e1a\u800c\u4e14\u5f88\u5fd9\u7684\u4e13\u5bb6\u90a3\u91cc\u5f97\u5230\u89e3\u7b54\u3002 \u6240\u4ee5\uff0c\u754c\u5b9a\u4e00\u4e0b\u4f60\u7684\u95ee\u9898\uff0c\u4f7f\u4e13\u5bb6\u82b1\u5728\u8fa8\u8bc6\u4f60\u7684\u95ee\u9898\u548c\u56de\u7b54\u6240\u9700\u8981\u4ed8\u51fa\u7684\u65f6\u95f4\u51cf\u5230\u6700\u5c11\uff0c\u8fd9\u6280\u5de7\u5bf9\u4f60\u6709\u7528\u7b54\u6848\u76f8\u5f53\u6709\u5e2e\u52a9 \u2014\u2014 \u4f46\u8fd9\u6280\u5de7\u901a\u5e38\u548c\u7b80\u5316\u95ee\u9898\u6709\u6240\u533a\u522b\u3002\u56e0\u6b64\uff0c\u95ee \u6211\u60f3\u66f4\u597d\u7684\u7406\u89e3 X\uff0c\u53ef\u5426\u6307\u70b9\u4e00\u4e0b\u54ea\u6709\u597d\u4e00\u70b9\u8bf4\u660e\uff1f \u901a\u5e38\u6bd4\u95ee \u4f60\u80fd\u89e3\u91ca\u4e00\u4e0b X \u5417\uff1f \u66f4\u597d\u3002\u5982\u679c\u4f60\u7684\u4ee3\u7801\u4e0d\u80fd\u8fd0\u4f5c\uff0c\u901a\u5e38\u8bf7\u522b\u4eba\u770b\u770b\u54ea\u91cc\u6709\u95ee\u9898\uff0c\u6bd4\u8981\u6c42\u522b\u4eba\u66ff\u4f60\u6539\u6b63\u8981\u660e\u667a\u5f97\u591a\u3002 \u8be2\u95ee\u6709\u5173\u4ee3\u7801\u7684\u95ee\u9898\u65f6 \u522b\u8981\u6c42\u4ed6\u4eba\u5e2e\u4f60\u8c03\u8bd5\u6709\u95ee\u9898\u7684\u4ee3\u7801\uff0c\u4e0d\u63d0\u793a\u4e00\u4e0b\u5e94\u8be5\u4ece\u4f55\u5165\u624b\u3002\u5f20\u8d34\u51e0\u767e\u884c\u7684\u4ee3\u7801\uff0c\u7136\u540e\u8bf4\u4e00\u58f0\uff1a \u5b83\u4e0d\u80fd\u5de5\u4f5c \u4f1a\u8ba9\u4f60\u5b8c\u5168\u88ab\u5ffd\u7565\u3002\u53ea\u8d34\u51e0\u5341\u884c\u4ee3\u7801\uff0c\u7136\u540e\u8bf4\u4e00\u53e5\uff1a \u5728\u7b2c\u4e03\u884c\u4ee5\u540e\uff0c\u6211\u671f\u5f85\u5b83\u663e\u793a <x>\uff0c\u4f46\u5b9e\u9645\u51fa\u73b0\u7684\u662f <y> \u6bd4\u8f83\u6709\u53ef\u80fd\u8ba9\u4f60\u5f97\u5230\u56de\u5e94\u3002 \u6700\u6709\u6548\u63cf\u8ff0\u7a0b\u5e8f\u95ee\u9898\u7684\u65b9\u6cd5\u662f\u63d0\u4f9b\u6700\u7cbe\u7b80\u7684 Bug \u5c55\u793a\u6d4b\u8bd5\u7528\u4f8b\uff08bug-demonstrating test case\uff09\u3002\u4ec0\u4e48\u662f\u6700\u7cbe\u7b80\u7684\u6d4b\u8bd5\u7528\u4f8b\uff1f\u90a3\u662f\u95ee\u9898\u7684\u7f29\u5f71\uff1b\u4e00\u5c0f\u4e2a\u7a0b\u5e8f\u7247\u6bb5\u80fd\u521a\u597d\u5c55\u793a\u51fa\u7a0b\u5e8f\u7684\u5f02\u5e38\u884c\u4e3a\uff0c\u800c\u4e0d\u5305\u542b\u5176\u4ed6\u4ee4\u4eba\u5206\u6563\u6ce8\u610f\u529b\u7684\u5185\u5bb9\u3002\u600e\u4e48\u5236\u4f5c\u6700\u7cbe\u7b80\u7684\u6d4b\u8bd5\u7528\u4f8b\uff1f\u5982\u679c\u4f60\u77e5\u9053\u54ea\u4e00\u884c\u6216\u54ea\u4e00\u6bb5\u4ee3\u7801\u4f1a\u9020\u6210\u5f02\u5e38\u7684\u884c\u4e3a\uff0c\u590d\u5236\u4e0b\u6765\u5e76\u52a0\u5165\u8db3\u591f\u91cd\u73b0\u8fd9\u4e2a\u72b6\u51b5\u7684\u4ee3\u7801\uff08\u4f8b\u5982\uff0c\u8db3\u4ee5\u8ba9\u8fd9\u6bb5\u4ee3\u7801\u80fd\u88ab\u7f16\u8bd1/\u76f4\u8bd1/\u88ab\u5e94\u7528\u7a0b\u5e8f\u5904\u7406\uff09\u3002\u5982\u679c\u4f60\u65e0\u6cd5\u5c06\u95ee\u9898\u7f29\u51cf\u5230\u4e00\u4e2a\u7279\u5b9a\u533a\u5757\uff0c\u5c31\u590d\u5236\u4e00\u4efd\u4ee3\u7801\u5e76\u79fb\u9664\u4e0d\u5f71\u54cd\u4ea7\u751f\u95ee\u9898\u884c\u4e3a\u7684\u90e8\u5206\u3002\u603b\u4e4b\uff0c\u6d4b\u8bd5\u7528\u4f8b\u8d8a\u5c0f\u8d8a\u597d\uff08\u67e5\u770b\u8bdd\u4e0d\u5728\u591a\u800c\u5728\u7cbe\u4e00\u8282\uff09\u3002 \u4e00\u822c\u800c\u8a00\uff0c\u8981\u5f97\u5230\u4e00\u6bb5\u76f8\u5f53\u7cbe\u7b80\u7684\u6d4b\u8bd5\u7528\u4f8b\u5e76\u4e0d\u592a\u5bb9\u6613\uff0c\u4f46\u6c38\u8fdc\u5148\u5c1d\u8bd5\u8fd9\u6837\u505a\u7684\u662f\u79cd\u597d\u4e60\u60ef\u3002\u8fd9\u79cd\u65b9\u5f0f\u53ef\u4ee5\u5e2e\u52a9\u4f60\u4e86\u89e3\u5982\u4f55\u81ea\u884c\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898 \u2014\u2014 \u800c\u4e14\u5373\u4f7f\u4f60\u7684\u5c1d\u8bd5\u4e0d\u6210\u529f\uff0c\u9ed1\u5ba2\u4eec\u4e5f\u4f1a\u770b\u5230\u4f60\u5728\u5c1d\u8bd5\u53d6\u5f97\u7b54\u6848\u7684\u8fc7\u7a0b\u4e2d\u4ed8\u51fa\u4e86\u52aa\u529b\uff0c\u8fd9\u53ef\u4ee5\u8ba9\u4ed6\u4eec\u66f4\u613f\u610f\u4e0e\u4f60\u5408\u4f5c\u3002 \u5982\u679c\u4f60\u53ea\u662f\u60f3\u8ba9\u522b\u4eba\u5e2e\u5fd9\u5ba1\u67e5\uff08Review\uff09\u4e00\u4e0b\u4ee3\u7801\uff0c\u5728\u4fe1\u7684\u5f00\u5934\u5c31\u8981\u8bf4\u51fa\u6765\uff0c\u5e76\u4e14\u4e00\u5b9a\u8981\u63d0\u5230\u4f60\u8ba4\u4e3a\u54ea\u4e00\u90e8\u5206\u7279\u522b\u9700\u8981\u5173\u6ce8\u4ee5\u53ca\u4e3a\u4ec0\u4e48\u3002 \u522b\u628a\u81ea\u5df1\u5bb6\u5ead\u4f5c\u4e1a\u7684\u95ee\u9898\u8d34\u4e0a\u6765 \u9ed1\u5ba2\u4eec\u5f88\u64c5\u957f\u5206\u8fa8\u54ea\u4e9b\u95ee\u9898\u662f\u5bb6\u5ead\u4f5c\u4e1a\u5f0f\u7684\u95ee\u9898\uff1b\u56e0\u4e3a\u6211\u4eec\u4e2d\u7684\u5927\u591a\u6570\u90fd\u66fe\u81ea\u5df1\u89e3\u51b3\u8fd9\u7c7b\u95ee\u9898\u3002\u540c\u6837\uff0c\u8fd9\u4e9b\u95ee\u9898\u5f97\u7531\u4f60\u6765\u641e\u5b9a\uff0c\u4f60\u4f1a\u4ece\u4e2d\u5b66\u5230\u4e1c\u897f\u3002\u4f60\u53ef\u4ee5\u8981\u6c42\u7ed9\u70b9\u63d0\u793a\uff0c\u4f46\u522b\u8981\u6c42\u5f97\u5230\u5b8c\u6574\u7684\u89e3\u51b3\u65b9\u6848\u3002 \u5982\u679c\u4f60\u6000\u7591\u81ea\u5df1\u78b0\u5230\u4e86\u4e00\u4e2a\u5bb6\u5ead\u4f5c\u4e1a\u5f0f\u7684\u95ee\u9898\uff0c\u4f46\u4ecd\u7136\u65e0\u6cd5\u89e3\u51b3\uff0c\u8bd5\u8bd5\u5728\u4f7f\u7528\u8005\u7fa4\u7ec4\uff0c\u8bba\u575b\u6216\uff08\u6700\u540e\u4e00\u62db\uff09\u5728\u9879\u76ee\u7684\u4f7f\u7528\u8005\u90ae\u4ef6\u5217\u8868\u6216\u8bba\u575b\u4e2d\u63d0\u95ee\u3002\u5c3d\u7ba1\u9ed1\u5ba2\u4eec\u4f1a\u770b\u51fa\u6765\uff0c\u4f46\u4e00\u4e9b\u6709\u7ecf\u9a8c\u7684\u4f7f\u7528\u8005\u4e5f\u8bb8\u4ecd\u4f1a\u7ed9\u4f60\u4e00\u4e9b\u63d0\u793a\u3002 \u53bb\u6389\u65e0\u610f\u4e49\u7684\u63d0\u95ee\u53e5 \u907f\u514d\u7528\u65e0\u610f\u4e49\u7684\u8bdd\u7ed3\u675f\u63d0\u95ee\uff0c\u4f8b\u5982 \u6709\u4eba\u80fd\u5e2e\u6211\u5417\uff1f \u6216\u8005 \u8fd9\u6709\u7b54\u6848\u5417\uff1f \u3002 \u9996\u5148\uff1a\u5982\u679c\u4f60\u5bf9\u95ee\u9898\u7684\u63cf\u8ff0\u4e0d\u662f\u5f88\u597d\uff0c\u8fd9\u6837\u95ee\u66f4\u662f\u753b\u86c7\u6dfb\u8db3\u3002 \u5176\u6b21\uff1a\u7531\u4e8e\u8fd9\u6837\u95ee\u662f\u753b\u86c7\u6dfb\u8db3\uff0c\u9ed1\u5ba2\u4eec\u4f1a\u5f88\u538c\u70e6\u4f60 \u2014\u2014 \u800c\u4e14\u901a\u5e38\u4f1a\u7528\u903b\u8f91\u4e0a\u6b63\u786e\uff0c\u4f46\u6beb\u65e0\u610f\u4e49\u7684\u56de\u7b54\u6765\u8868\u793a\u4ed6\u4eec\u7684\u8511\u89c6\uff0c \u4f8b\u5982\uff1a \u6ca1\u9519\uff0c\u6709\u4eba\u80fd\u5e2e\u4f60 \u6216\u8005 \u4e0d\uff0c\u6ca1\u7b54\u6848 \u3002 \u4e00\u822c\u6765\u8bf4\uff0c\u907f\u514d\u7528 \u662f\u6216\u5426 \u3001 \u5bf9\u6216\u9519 \u3001 \u6709\u6216\u6ca1\u6709 \u7c7b\u578b\u7684\u95ee\u53e5\uff0c\u9664\u975e\u4f60\u60f3\u5f97\u5230\u662f\u6216\u5426\u7c7b\u578b\u7684\u56de\u7b54\u3002 \u5373\u4f7f\u4f60\u5f88\u6025\u4e5f\u4e0d\u8981\u5728\u6807\u9898\u5199 \u7d27\u6025 \u8fd9\u662f\u4f60\u7684\u95ee\u9898\uff0c\u4e0d\u662f\u6211\u4eec\u7684\u3002\u5ba3\u79f0 \u7d27\u6025 \u6781\u6709\u53ef\u80fd\u4e8b\u4e0e\u613f\u8fdd\uff1a\u5927\u591a\u6570\u9ed1\u5ba2\u4f1a\u76f4\u63a5\u5220\u9664\u65e0\u793c\u548c\u81ea\u79c1\u5730\u4f01\u56fe\u5373\u65f6\u5f15\u8d77\u5173\u6ce8\u7684\u95ee\u9898\u3002\u66f4\u4e25\u91cd\u7684\u662f\uff0c \u7d27\u6025 \u8fd9\u4e2a\u5b57\uff08\u6216\u662f\u5176\u4ed6\u4f01\u56fe\u5f15\u8d77\u5173\u6ce8\u7684\u6807\u9898\uff09\u901a\u5e38\u4f1a\u88ab\u5783\u573e\u4fe1\u8fc7\u6ee4\u5668\u8fc7\u6ee4\u6389 \u2014\u2014 \u4f60\u5e0c\u671b\u80fd\u770b\u5230\u4f60\u95ee\u9898\u7684\u4eba\u53ef\u80fd\u6c38\u8fdc\u4e5f\u770b\u4e0d\u5230\u3002 \u6709\u534a\u4e2a\u4f8b\u5916\u7684\u60c5\u51b5\u662f\uff0c\u5982\u679c\u4f60\u662f\u5728\u4e00\u4e9b\u5f88\u9ad8\u8c03\uff0c\u4f1a\u4f7f\u9ed1\u5ba2\u4eec\u5174\u594b\u7684\u5730\u65b9\uff0c\u4e5f\u8bb8\u503c\u5f97\u8fd9\u6837\u53bb\u505a\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5982\u679c\u4f60\u6709\u65f6\u95f4\u538b\u529b\uff0c\u4e5f\u5f88\u6709\u793c\u8c8c\u5730\u63d0\u5230\u8fd9\u70b9\uff0c\u4eba\u4eec\u4e5f\u8bb8\u4f1a\u6709\u5174\u8da3\u56de\u7b54\u5feb\u4e00\u70b9\u3002 \u5f53\u7136\uff0c\u8fd9\u98ce\u9669\u5f88\u5927\uff0c\u56e0\u4e3a\u9ed1\u5ba2\u4eec\u5174\u594b\u7684\u70b9\u591a\u534a\u4e0e\u4f60\u7684\u4e0d\u540c\u3002\u8b6c\u5982\u4ece NASA \u56fd\u9645\u7a7a\u95f4\u7ad9\uff08International Space Station\uff09\u53d1\u8fd9\u6837\u7684\u6807\u9898\u6ca1\u6709\u95ee\u9898\uff0c\u4f46\u7528\u81ea\u6211\u611f\u89c9\u826f\u597d\u7684\u6148\u5584\u884c\u4e3a\u6216\u653f\u6cbb\u539f\u56e0\u53d1\u80af\u5b9a\u4e0d\u884c\u3002\u4e8b\u5b9e\u4e0a\uff0c\u5f20\u8d34\u8bf8\u5982 \u7d27\u6025\uff1a\u5e2e\u6211\u6551\u6551\u8fd9\u4e2a\u6bdb\u7ed2\u7ed2\u7684\u5c0f\u6d77\u8c79\uff01 \u80af\u5b9a\u8ba9\u4f60\u88ab\u9ed1\u5ba2\u5ffd\u7565\u6216\u60f9\u607c\u4ed6\u4eec\uff0c\u5373\u4f7f\u4ed6\u4eec\u8ba4\u4e3a\u6bdb\u7ed2\u7ed2\u7684\u5c0f\u6d77\u8c79\u5f88\u91cd\u8981\u3002 \u5982\u679c\u4f60\u89c9\u5f97\u8fd9\u70b9\u5f88\u4e0d\u53ef\u601d\u8bae\uff0c\u6700\u597d\u518d\u628a\u8fd9\u4efd\u6307\u5357\u5269\u4e0b\u7684\u5185\u5bb9\u591a\u8bfb\u51e0\u904d\uff0c\u76f4\u5230\u4f60\u5f04\u61c2\u4e86\u518d\u53d1\u6587\u3002 \u793c\u591a\u4eba\u4e0d\u602a\uff0c\u800c\u4e14\u6709\u65f6\u8fd8\u5f88\u6709\u5e2e\u52a9 \u5f6c\u5f6c\u6709\u793c\uff0c\u591a\u7528 \u8bf7 \u548c \u8c22\u8c22\u60a8\u7684\u5173\u6ce8 \uff0c\u6216 \u8c22\u8c22\u4f60\u7684\u5173\u7167 \u3002\u8ba9\u5927\u5bb6\u90fd\u77e5\u9053\u4f60\u5bf9\u4ed6\u4eec\u82b1\u65f6\u95f4\u514d\u8d39\u63d0\u4f9b\u5e2e\u52a9\u5fc3\u5b58\u611f\u6fc0\u3002 \u5766\u767d\u8bf4\uff0c\u8fd9\u4e00\u70b9\u5e76\u6ca1\u6709\u6bd4\u6e05\u6670\u3001\u6b63\u786e\u3001\u7cbe\u51c6\u5e76\u5408\u6cd5\u8bed\u6cd5\u548c\u907f\u514d\u4f7f\u7528\u4e13\u7528\u683c\u5f0f\u91cd\u8981\uff08\u4e5f\u4e0d\u80fd\u53d6\u800c\u4ee3\u4e4b\uff09\u3002\u9ed1\u5ba2\u4eec\u4e00\u822c\u5b81\u53ef\u8bfb\u6709\u70b9\u5510\u7a81\u4f46\u6280\u672f\u4e0a\u9c9c\u660e\u7684 Bug \u62a5\u544a\uff0c\u800c\u4e0d\u662f\u90a3\u79cd\u6709\u793c\u4f46\u542b\u7cca\u7684\u62a5\u544a\u3002\uff08\u5982\u679c\u8fd9\u70b9\u8ba9\u4f60\u4e0d\u89e3\uff0c\u8bb0\u4f4f\u6211\u4eec\u662f\u6309\u95ee\u9898\u80fd\u6559\u7ed9\u6211\u4eec\u4ec0\u4e48\u6765\u8bc4\u4ef7\u95ee\u9898\u7684\u4ef7\u503c\u7684\uff09 \u7136\u800c\uff0c\u5982\u679c\u4f60\u6709\u4e00\u4e32\u7684\u95ee\u9898\u5f85\u89e3\u51b3\uff0c\u5ba2\u6c14\u4e00\u70b9\u80af\u5b9a\u4f1a\u589e\u52a0\u4f60\u5f97\u5230\u6709\u7528\u56de\u5e94\u7684\u673a\u4f1a\u3002 \uff08\u6211\u4eec\u6ce8\u610f\u5230\uff0c\u81ea\u4ece\u672c\u6307\u5357\u53d1\u5e03\u540e\uff0c\u4ece\u8d44\u6df1\u9ed1\u5ba2\u90a3\u91cc\u5f97\u5230\u7684\u552f\u4e00\u4e25\u91cd\u7f3a\u9677\u53cd\u9988\uff0c\u5c31\u662f\u5bf9\u9884\u5148\u9053\u8c22\u8fd9\u4e00\u6761\u3002\u4e00\u4e9b\u9ed1\u5ba2\u89c9\u5f97\u5148\u8c22\u4e86\u610f\u5473\u7740\u4e8b\u540e\u5c31\u4e0d\u7528\u518d\u611f\u8c22\u4efb\u4f55\u4eba\u7684\u6697\u793a\u3002\u6211\u4eec\u7684\u5efa\u8bae\u662f\u8981\u4e48\u5148\u8bf4 \u5148\u8c22\u4e86 \uff0c\u7136\u540e\u4e8b\u540e\u518d\u5bf9\u56de\u590d\u8005\u8868\u793a\u611f\u8c22\uff0c\u6216\u8005\u6362\u79cd\u65b9\u5f0f\u8868\u8fbe\u611f\u6fc0\uff0c\u8b6c\u5982\u7528 \u8c22\u8c22\u4f60\u7684\u5173\u6ce8 \u6216 \u8c22\u8c22\u4f60\u7684\u5173\u7167 \u3002\uff09 \u95ee\u9898\u89e3\u51b3\u540e\uff0c\u52a0\u4e2a\u7b80\u77ed\u7684\u8865\u5145\u8bf4\u660e \u95ee\u9898\u89e3\u51b3\u540e\uff0c\u5411\u6240\u6709\u5e2e\u52a9\u8fc7\u4f60\u7684\u4eba\u53d1\u4e2a\u8bf4\u660e\uff0c\u8ba9\u4ed6\u4eec\u77e5\u9053\u95ee\u9898\u662f\u600e\u6837\u89e3\u51b3\u7684\uff0c\u5e76\u518d\u4e00\u6b21\u5411\u4ed6\u4eec\u8868\u793a\u611f\u8c22\u3002\u5982\u679c\u95ee\u9898\u5728\u65b0\u95fb\u7ec4\u6216\u8005\u90ae\u4ef6\u5217\u8868\u4e2d\u5f15\u8d77\u4e86\u5e7f\u6cdb\u5173\u6ce8\uff0c\u5e94\u8be5\u5728\u90a3\u91cc\u8d34\u4e00\u4e2a\u8bf4\u660e\u6bd4\u8f83\u6070\u5f53\u3002 \u6700\u7406\u60f3\u7684\u65b9\u5f0f\u662f\u5411\u6700\u521d\u63d0\u95ee\u7684\u8bdd\u9898\u56de\u590d\u6b64\u6d88\u606f\uff0c\u5e76\u5728\u6807\u9898\u4e2d\u5305\u542b \u5df2\u4fee\u6b63 \uff0c \u5df2\u89e3\u51b3 \u6216\u5176\u5b83\u540c\u7b49\u542b\u4e49\u7684\u660e\u663e\u6807\u8bb0\u3002\u5728\u4eba\u6765\u4eba\u5f80\u7684\u90ae\u4ef6\u5217\u8868\u91cc\uff0c\u4e00\u4e2a\u770b\u89c1\u8ba8\u8bba\u4e32 \u95ee\u9898 X \u548c \u95ee\u9898 X - \u5df2\u89e3\u51b3 \u7684\u6f5c\u5728\u56de\u590d\u8005\u5c31\u660e\u767d\u4e0d\u7528\u518d\u6d6a\u8d39\u65f6\u95f4\u4e86\uff08\u9664\u975e\u4ed6\u4e2a\u4eba\u89c9\u5f97\u95ee\u9898 X\u7684\u6709\u8da3\uff09\uff0c\u56e0\u6b64\u53ef\u4ee5\u5229\u7528\u6b64\u65f6\u95f4\u53bb\u89e3\u51b3\u5176\u5b83\u95ee\u9898\u3002 \u8865\u5145\u8bf4\u660e\u4e0d\u5fc5\u5f88\u957f\u6216\u662f\u5f88\u6df1\u5165\uff1b\u7b80\u5355\u7684\u4e00\u53e5 \u4f60\u597d\uff0c\u539f\u6765\u662f\u7f51\u7ebf\u51fa\u4e86\u95ee\u9898\uff01\u8c22\u8c22\u5927\u5bb6 \u2013 Bill \u6bd4\u4ec0\u4e48\u4e5f\u4e0d\u8bf4\u8981\u6765\u7684\u597d\u3002\u4e8b\u5b9e\u4e0a\uff0c\u9664\u975e\u7ed3\u8bba\u771f\u7684\u5f88\u6709\u6280\u672f\u542b\u91cf\uff0c\u5426\u5219\u7b80\u77ed\u53ef\u7231\u7684\u5c0f\u7ed3\u6bd4\u957f\u7bc7\u5927\u8bba\u66f4\u597d\u3002\u8bf4\u660e\u95ee\u9898\u662f\u600e\u6837\u89e3\u51b3\u7684\uff0c\u4f46\u5927\u53ef\u4e0d\u5fc5\u5c06\u89e3\u51b3\u95ee\u9898\u7684\u8fc7\u7a0b\u590d\u8ff0\u4e00\u904d\u3002 \u5bf9\u4e8e\u6709\u6df1\u5ea6\u7684\u95ee\u9898\uff0c\u5f20\u8d34\u8c03\u8bd5\u8bb0\u5f55\u7684\u6458\u8981\u662f\u6709\u5e2e\u52a9\u7684\u3002\u63cf\u8ff0\u95ee\u9898\u7684\u6700\u7ec8\u72b6\u6001\uff0c\u8bf4\u660e\u662f\u4ec0\u4e48\u89e3\u51b3\u4e86\u95ee\u9898\uff0c\u5728\u6b64\u4e4b\u540e\u624d\u6307\u660e\u53ef\u4ee5\u907f\u514d\u7684\u76f2\u70b9\u3002\u907f\u514d\u76f2\u70b9\u7684\u90e8\u5206\u5e94\u653e\u5728\u6b63\u786e\u7684\u89e3\u51b3\u65b9\u6848\u548c\u5176\u5b83\u603b\u7ed3\u6750\u6599\u4e4b\u540e\uff0c\u800c\u4e0d\u8981\u5c06\u6b64\u4fe1\u606f\u641e\u6210\u4fa6\u63a2\u63a8\u7406\u5c0f\u8bf4\u3002\u5217\u51fa\u90a3\u4e9b\u5e2e\u52a9\u8fc7\u4f60\u7684\u540d\u5b57\uff0c\u4f1a\u8ba9\u4f60\u4ea4\u5230\u66f4\u591a\u670b\u53cb\u3002 \u9664\u4e86\u6709\u793c\u8c8c\u548c\u6709\u5185\u6db5\u4ee5\u5916\uff0c\u8fd9\u79cd\u7c7b\u578b\u7684\u8865\u5145\u4e5f\u6709\u52a9\u4e8e\u4ed6\u4eba\u5728\u90ae\u4ef6\u5217\u8868/\u65b0\u95fb\u7fa4\u7ec4/\u8bba\u575b\u4e2d\u641c\u7d22\u5230\u771f\u6b63\u89e3\u51b3\u4f60\u95ee\u9898\u7684\u65b9\u6848\uff0c\u8ba9\u4ed6\u4eec\u4e5f\u4ece\u4e2d\u53d7\u76ca\u3002 \u81f3\u5c11\uff0c\u8fd9\u79cd\u8865\u5145\u6709\u52a9\u4e8e\u8ba9\u6bcf\u4f4d\u53c2\u4e0e\u534f\u52a9\u7684\u4eba\u56e0\u95ee\u9898\u7684\u89e3\u51b3\u800c\u4ece\u4e2d\u5f97\u5230\u6ee1\u8db3\u611f\u3002\u5982\u679c\u4f60\u81ea\u5df1\u4e0d\u662f\u6280\u672f\u4e13\u5bb6\u6216\u8005\u9ed1\u5ba2\uff0c\u90a3\u5c31\u76f8\u4fe1\u6211\u4eec\uff0c\u8fd9\u79cd\u611f\u89c9\u5bf9\u4e8e\u90a3\u4e9b\u4f60\u5411\u4ed6\u4eec\u6c42\u52a9\u7684\u5927\u5e08\u6216\u8005\u4e13\u5bb6\u800c\u8a00\uff0c\u662f\u975e\u5e38\u91cd\u8981\u7684\u3002\u95ee\u9898\u60ac\u800c\u672a\u51b3\u4f1a\u8ba9\u4eba\u7070\u5fc3\uff1b\u9ed1\u5ba2\u4eec\u6e34\u671b\u770b\u5230\u95ee\u9898\u88ab\u89e3\u51b3\u3002\u597d\u4eba\u6709\u597d\u62a5\uff0c\u6ee1\u8db3\u4ed6\u4eec\u7684\u6e34\u671b\uff0c\u4f60\u4f1a\u5728\u4e0b\u6b21\u63d0\u95ee\u65f6\u5c1d\u5230\u751c\u5934\u3002 \u601d\u8003\u4e00\u4e0b\u600e\u6837\u624d\u80fd\u907f\u514d\u4ed6\u4eba\u5c06\u6765\u4e5f\u9047\u5230\u7c7b\u4f3c\u7684\u95ee\u9898\uff0c\u81ea\u95ee\u5199\u4e00\u4efd\u6587\u4ef6\u6216\u52a0\u4e2a\u5e38\u89c1\u95ee\u9898\uff08FAQ\uff09\u4f1a\u4e0d\u4f1a\u6709\u5e2e\u52a9\u3002\u5982\u679c\u662f\u7684\u8bdd\u5c31\u5c06\u5b83\u4eec\u53d1\u7ed9\u7ef4\u62a4\u8005\u3002 \u5728\u9ed1\u5ba2\u4e2d\uff0c\u8fd9\u79cd\u826f\u597d\u7684\u540e\u7ee7\u884c\u52a8\u5b9e\u9645\u4e0a\u6bd4\u4f20\u7edf\u7684\u793c\u8282\u66f4\u4e3a\u91cd\u8981\uff0c\u4e5f\u662f\u4f60\u5982\u4f55\u900f\u8fc7\u5584\u5f85\u4ed6\u4eba\u800c\u8d62\u5f97\u58f0\u8a89\u7684\u65b9\u5f0f\uff0c\u8fd9\u662f\u975e\u5e38\u6709\u4ef7\u503c\u7684\u8d44\u4ea7\u3002 \u5982\u4f55\u89e3\u8bfb\u7b54\u6848 RTFM \u548c STFW\uff1a\u5982\u4f55\u77e5\u9053\u4f60\u5df2\u5b8c\u5168\u641e\u7838\u4e86 \u6709\u4e00\u4e2a\u53e4\u8001\u800c\u795e\u5723\u7684\u4f20\u7edf\uff1a\u5982\u679c\u4f60\u6536\u5230 RTFM \uff08Read The Fucking Manual\uff09 \u7684\u56de\u5e94\uff0c\u56de\u7b54\u8005\u8ba4\u4e3a\u4f60\u5e94\u8be5\u53bb\u8bfb\u4ed6\u5988\u7684\u624b\u518c\u3002\u5f53\u7136\uff0c\u57fa\u672c\u4e0a\u4ed6\u662f\u5bf9\u7684\uff0c\u4f60\u5e94\u8be5\u53bb\u8bfb\u4e00\u8bfb\u3002 RTFM \u6709\u4e00\u4e2a\u5e74\u8f7b\u7684\u4eb2\u621a\u3002\u5982\u679c\u4f60\u6536\u5230 STFW\uff08Search The Fucking Web\uff09 \u7684\u56de\u5e94\uff0c\u56de\u7b54\u8005\u8ba4\u4e3a\u4f60\u5e94\u8be5\u5230\u4ed6\u5988\u7684\u7f51\u4e0a\u641c\u7d22\u3002\u90a3\u4eba\u591a\u534a\u4e5f\u662f\u5bf9\u7684\uff0c\u53bb\u641c\u7d22\u4e00\u4e0b\u5427\u3002\uff08\u66f4\u6e29\u548c\u4e00\u70b9\u7684\u8bf4\u6cd5\u662f Google \u662f\u4f60\u7684\u670b\u53cb \uff01\uff09 \u5728\u8bba\u575b\uff0c\u4f60\u4e5f\u53ef\u80fd\u88ab\u8981\u6c42\u53bb\u722c\u722c\u8bba\u575b\u7684\u65e7\u6587\u3002\u4e8b\u5b9e\u4e0a\uff0c\u6709\u4eba\u751a\u81f3\u53ef\u80fd\u70ed\u5fc3\u5730\u4e3a\u4f60\u63d0\u4f9b\u4ee5\u524d\u89e3\u51b3\u6b64\u95ee\u9898\u7684\u8ba8\u8bba\u4e32\u3002\u4f46\u4e0d\u8981\u4f9d\u8d56\u8fd9\u79cd\u5173\u7167\uff0c\u63d0\u95ee\u524d\u5e94\u8be5\u5148\u641c\u7d22\u4e00\u4e0b\u65e7\u6587\u3002 \u901a\u5e38\uff0c\u7528\u8fd9\u4e24\u53e5\u4e4b\u4e00\u56de\u7b54\u4f60\u7684\u4eba\u4f1a\u7ed9\u4f60\u4e00\u4efd\u5305\u542b\u4f60\u9700\u8981\u5185\u5bb9\u7684\u624b\u518c\u6216\u8005\u4e00\u4e2a\u7f51\u5740\uff0c\u800c\u4e14\u4ed6\u4eec\u6253\u8fd9\u4e9b\u5b57\u7684\u65f6\u5019\u4e5f\u6b63\u5728\u8bfb\u7740\u3002\u8fd9\u4e9b\u7b54\u590d\u610f\u5473\u7740\u56de\u7b54\u8005\u8ba4\u4e3a \u4f60\u9700\u8981\u7684\u4fe1\u606f\u975e\u5e38\u5bb9\u6613\u83b7\u5f97\uff1b \u4f60\u81ea\u5df1\u53bb\u641c\u7d22\u8fd9\u4e9b\u4fe1\u606f\u6bd4\u704c\u7ed9\u4f60\uff0c\u80fd\u8ba9\u4f60\u5b66\u5230\u66f4\u591a\u3002 \u4f60\u4e0d\u5e94\u8be5\u56e0\u6b64\u4e0d\u723d\uff1b\u4f9d\u7167\u9ed1\u5ba2\u7684\u6807\u51c6\uff0c\u4ed6\u5df2\u7ecf\u8868\u793a\u4e86\u5bf9\u4f60\u4e00\u5b9a\u7a0b\u5ea6\u7684\u5173\u6ce8\uff0c\u800c\u6ca1\u6709\u5bf9\u4f60\u7684\u8981\u6c42\u89c6\u800c\u4e0d\u89c1\u3002\u4f60\u5e94\u8be5\u5bf9\u4ed6\u7956\u6bcd\u822c\u7684\u6148\u7965\u8868\u793a\u611f\u8c22\u3002 \u5982\u679c\u8fd8\u662f\u641e\u4e0d\u61c2 \u5982\u679c\u4f60\u770b\u4e0d\u61c2\u56de\u5e94\uff0c\u522b\u7acb\u523b\u8981\u6c42\u5bf9\u65b9\u89e3\u91ca\u3002\u50cf\u4f60\u4ee5\u524d\u8bd5\u7740\u81ea\u5df1\u89e3\u51b3\u95ee\u9898\u65f6\u90a3\u6837\uff08\u5229\u7528\u624b\u518c\uff0cFAQ\uff0c\u7f51\u7edc\uff0c\u8eab\u8fb9\u7684\u9ad8\u624b\uff09\uff0c\u5148\u8bd5\u7740\u53bb\u641e\u61c2\u4ed6\u7684\u56de\u5e94\u3002\u5982\u679c\u4f60\u771f\u7684\u9700\u8981\u5bf9\u65b9\u89e3\u91ca\uff0c\u8bb0\u5f97\u8868\u73b0\u51fa\u4f60\u5df2\u7ecf\u4ece\u4e2d\u5b66\u5230\u4e86\u70b9\u4ec0\u4e48\u3002 \u6bd4\u65b9\u8bf4\uff0c\u5982\u679c\u6211\u56de\u7b54\u4f60\uff1a \u770b\u6765\u4f3c\u4e4e\u662f zentry \u5361\u4f4f\u4e86\uff1b\u4f60\u5e94\u8be5\u5148\u6e05\u9664\u5b83\u3002 \uff0c\u7136\u540e\uff0c\u8fd9\u662f\u4e00\u4e2a\u5f88\u7cdf\u7684\u540e\u7eed\u95ee\u9898\u56de\u5e94\uff1a zentry \u662f\u4ec0\u4e48\uff1f \u597d\u7684\u95ee\u6cd5\u5e94\u8be5\u662f\u8fd9\u6837\uff1a \u54e6~~~\u6211\u770b\u8fc7\u8bf4\u660e\u4e86\u4f46\u662f\u53ea\u6709 -z \u548c -p \u4e24\u4e2a\u53c2\u6570\u4e2d\u63d0\u5230\u4e86 zentries\uff0c\u800c\u4e14\u8fd8\u90fd\u6ca1\u6709\u6e05\u695a\u7684\u89e3\u91ca\u5982\u4f55\u6e05\u9664\u5b83\u3002\u4f60\u662f\u6307\u8fd9\u4e24\u4e2a\u4e2d\u7684\u54ea\u4e00\u4e2a\u5417\uff1f\u8fd8\u662f\u6211\u770b\u6f0f\u4e86\u4ec0\u4e48\uff1f \u5904\u7406\u65e0\u793c\u7684\u56de\u5e94 \u5f88\u591a\u9ed1\u5ba2\u5708\u5b50\u4e2d\u770b\u4f3c\u65e0\u793c\u7684\u884c\u4e3a\u5e76\u4e0d\u662f\u5b58\u5fc3\u5192\u72af\u3002\u76f8\u53cd\uff0c\u5b83\u662f\u76f4\u63a5\u4e86\u5f53\uff0c\u4e00\u9488\u89c1\u8840\u5f0f\u7684\u4ea4\u6d41\u98ce\u683c\uff0c\u8fd9\u79cd\u98ce\u683c\u66f4\u6ce8\u91cd\u89e3\u51b3\u95ee\u9898\uff0c\u800c\u4e0d\u662f\u4f7f\u4eba\u611f\u89c9\u8212\u670d\u800c\u5374\u6a21\u6a21\u7cca\u7cca\u3002 \u5982\u679c\u4f60\u89c9\u5f97\u88ab\u5192\u72af\u4e86\uff0c\u8bd5\u7740\u5e73\u9759\u5730\u53cd\u5e94\u3002\u5982\u679c\u6709\u4eba\u771f\u7684\u505a\u4e86\u51fa\u683c\u7684\u4e8b\uff0c\u90ae\u4ef6\u5217\u8868\u3001\u65b0\u95fb\u7fa4\u7ec4\u6216\u8bba\u575b\u4e2d\u7684\u524d\u8f88\u591a\u534a\u4f1a\u62db\u547c\u4ed6\u3002\u5982\u679c\u8fd9\u6ca1\u6709\u53d1\u751f\u800c\u4f60\u5374\u53d1\u706b\u4e86\uff0c\u90a3\u4e48\u4f60\u53d1\u706b\u5bf9\u8c61\u7684\u8a00\u8bed\u53ef\u80fd\u5728\u9ed1\u5ba2\u793e\u533a\u4e2d\u770b\u8d77\u6765\u662f\u6b63\u5e38\u7684\uff0c\u800c\u4f60\u5c06\u88ab\u89c6\u4e3a\u6709\u9519\u7684\u4e00\u65b9\uff0c\u8fd9\u5c06\u4f24\u5bb3\u5230\u4f60\u83b7\u53d6\u4fe1\u606f\u6216\u5e2e\u52a9\u7684\u673a\u4f1a\u3002 \u53e6\u4e00\u65b9\u9762\uff0c\u4f60\u5076\u5c14\u771f\u7684\u4f1a\u78b0\u5230\u65e0\u793c\u548c\u65e0\u804a\u7684\u8a00\u884c\u3002\u4e0e\u4e0a\u8ff0\u76f8\u53cd\uff0c\u5bf9\u771f\u6b63\u7684\u5192\u72af\u8005\u72e0\u72e0\u5730\u6253\u51fb\uff0c\u7528\u7280\u5229\u7684\u8bed\u8a00\u5c06\u5176\u9a73\u5f97\u4f53\u65e0\u5b8c\u80a4\u90fd\u662f\u53ef\u4ee5\u63a5\u53d7\u7684\u3002\u7136\u800c\uff0c\u5728\u884c\u4e8b\u4e4b\u524d\u4e00\u5b9a\u8981\u975e\u5e38\u975e\u5e38\u7684\u6709\u6839\u636e\u3002\u7ea0\u6b63\u65e0\u793c\u7684\u8a00\u8bba\u4e0e\u5f00\u59cb\u4e00\u573a\u6beb\u65e0\u610f\u4e49\u7684\u53e3\u6c34\u6218\u4ec5\u4e00\u7ebf\u4e4b\u9694\uff0c\u9ed1\u5ba2\u4eec\u81ea\u5df1\u83bd\u649e\u5730\u8d8a\u7ebf\u7684\u60c5\u51b5\u5e76\u4e0d\u9c9c\u89c1\u3002\u5982\u679c\u4f60\u662f\u65b0\u624b\u6216\u5916\u4eba\uff0c\u907f\u5f00\u8fd9\u79cd\u83bd\u649e\u7684\u673a\u4f1a\u5e76\u4e0d\u9ad8\u3002\u5982\u679c\u4f60\u60f3\u5f97\u5230\u7684\u662f\u4fe1\u606f\u800c\u4e0d\u662f\u6d88\u78e8\u65f6\u5149\uff0c\u8fd9\u65f6\u6700\u597d\u4e0d\u8981\u628a\u624b\u653e\u5728\u952e\u76d8\u4e0a\u4ee5\u514d\u5192\u9669\u3002 \uff08\u6709\u4e9b\u4eba\u65ad\u8a00\u5f88\u591a\u9ed1\u5ba2\u90fd\u6709\u8f7b\u5ea6\u7684\u81ea\u95ed\u75c7\u6216\u4e9a\u65af\u4f2f\u683c\u7efc\u5408\u75c7\uff0c\u7f3a\u5c11\u7528\u4e8e\u6da6\u6ed1\u4eba\u7c7b\u793e\u4f1a\u6b63\u5e38\u4ea4\u5f80\u6240\u9700\u7684\u795e\u7ecf\u3002\u8fd9\u65e2\u53ef\u80fd\u662f\u771f\u4e5f\u53ef\u80fd\u662f\u5047\u7684\u3002\u5982\u679c\u4f60\u81ea\u5df1\u4e0d\u662f\u9ed1\u5ba2\uff0c\u5174\u8bb8\u4f60\u8ba4\u4e3a\u6211\u4eec\u8111\u888b\u6709\u95ee\u9898\u8fd8\u80fd\u5e2e\u52a9\u4f60\u5e94\u4ed8\u6211\u4eec\u7684\u53e4\u602a\u884c\u4e3a\u3002\u53ea\u7ba1\u8fd9\u4e48\u5e72\u597d\u4e86\uff0c\u6211\u4eec\u4e0d\u5728\u4e4e\u3002\u6211\u4eec\u559c\u6b22\u6211\u4eec\u73b0\u5728\u8fd9\u4e2a\u6837\u5b50\uff0c\u5e76\u4e14\u901a\u5e38\u5bf9\u75c5\u60a3\u6807\u8bb0\u90fd\u6709\u7ad9\u5f97\u4f4f\u811a\u7684\u6000\u7591\uff09\u3002 Jeff Bigler \u7684\u89c2\u5bdf\u603b\u7ed3\u548c\u8fd9\u4e2a\u76f8\u5173\u4e5f\u503c\u5f97\u4e00\u8bfb ( tact filters )\u3002 \u5728\u4e0b\u4e00\u8282\uff0c\u6211\u4eec\u4f1a\u8c08\u5230\u53e6\u4e00\u4e2a\u95ee\u9898\uff0c\u5f53\u4f60\u884c\u4e3a\u4e0d\u5f53\u65f6\u6240\u4f1a\u53d7\u5230\u7684 \u5192\u72af \u3002 \u5982\u4f55\u907f\u514d\u626e\u6f14\u5931\u8d25\u8005 \u5728\u9ed1\u5ba2\u793e\u533a\u7684\u8bba\u575b\u4e2d\u6709\u90a3\u4e48\u51e0\u6b21\u4f60\u53ef\u80fd\u4f1a\u641e\u7838 \u2014\u2014 \u4ee5\u672c\u6307\u5357\u6240\u63cf\u8ff0\u5230\u7684\u6216\u7c7b\u4f3c\u7684\u65b9\u5f0f\u3002\u800c\u4f60\u4f1a\u5728\u516c\u5f00\u573a\u5408\u4e2d\u88ab\u544a\u77e5\u4f60\u662f\u5982\u4f55\u641e\u7838\u7684\uff0c\u4e5f\u8bb8\u653b\u51fb\u7684\u8a00\u8bed\u4e2d\u8fd8\u4f1a\u5e26\u70b9\u5939\u4e03\u5939\u516b\u7684\u989c\u8272\u3002 \u8fd9\u79cd\u4e8b\u53d1\u751f\u4ee5\u540e\uff0c\u4f60\u80fd\u505a\u7684\u6700\u7cdf\u7cd5\u7684\u4e8b\u83ab\u8fc7\u4e8e\u54c0\u568e\u4f60\u7684\u906d\u9047\u3001\u5ba3\u79f0\u88ab\u53e3\u5934\u653b\u51fb\u3001\u8981\u6c42\u9053\u6b49\u3001\u9ad8\u58f0\u5c16\u53eb\u3001\u618b\u95f7\u6c14\u3001\u5a01\u80c1\u8bc9\u8bf8\u6cd5\u5f8b\u3001\u5411\u5176\u96c7\u4e3b\u62a5\u6028\u3001\u5fd8\u4e86\u5173\u9a6c\u6876\u76d6\u7b49\u7b49\u3002\u76f8\u53cd\u5730\uff0c\u4f60\u8be5\u8fd9\u4e48\u505a\uff1a \u71ac\u8fc7\u53bb\uff0c\u8fd9\u5f88\u6b63\u5e38\u3002\u4e8b\u5b9e\u4e0a\uff0c\u5b83\u662f\u6709\u76ca\u5065\u5eb7\u4e14\u5408\u7406\u7684\u3002 \u793e\u533a\u7684\u6807\u51c6\u4e0d\u4f1a\u81ea\u884c\u7ef4\u6301\uff0c\u5b83\u4eec\u662f\u901a\u8fc7\u53c2\u4e0e\u8005\u79ef\u6781\u800c\u516c\u5f00\u5730\u6267\u884c\u6765\u7ef4\u6301\u7684\u3002\u4e0d\u8981\u54ed\u568e\u6240\u6709\u7684\u6279\u8bc4\u90fd\u5e94\u8be5\u901a\u8fc7\u79c1\u4e0b\u7684\u90ae\u4ef6\u4f20\u9001\uff0c\u5b83\u4e0d\u662f\u8fd9\u6837\u8fd0\u4f5c\u7684\u3002\u5f53\u6709\u4eba\u8bc4\u8bba\u4f60\u7684\u4e00\u4e2a\u8bf4\u6cd5\u6709\u8bef\u6216\u8005\u63d0\u51fa\u4e0d\u540c\u770b\u6cd5\u65f6\uff0c\u575a\u6301\u58f0\u79f0\u53d7\u5230\u4e2a\u4eba\u653b\u51fb\u4e5f\u6beb\u65e0\u76ca\u5904\uff0c\u8fd9\u4e9b\u90fd\u662f\u5931\u8d25\u8005\u7684\u6001\u5ea6\u3002 \u4e5f\u6709\u5176\u5b83\u7684\u9ed1\u5ba2\u8bba\u575b\uff0c\u53d7\u8fc7\u9ad8\u793c\u8282\u8981\u6c42\u7684\u8bef\u5bfc\uff0c\u7981\u6b62\u53c2\u4e0e\u8005\u5f20\u8d34\u4efb\u4f55\u5bf9\u522b\u4eba\u5e16\u5b50\u6311\u6bdb\u75c5\u7684\u6d88\u606f\uff0c\u5e76\u58f0\u79f0\u5982\u679c\u4f60\u4e0d\u60f3\u5e2e\u52a9\u7528\u6237\u5c31\u95ed\u5634\u3002 \u7ed3\u679c\u9020\u6210\u6709\u60f3\u6cd5\u7684\u53c2\u4e0e\u8005\u7eb7\u7eb7\u79bb\u5f00\uff0c\u8fd9\u4e48\u505a\u53ea\u4f1a\u4f7f\u5b83\u4eec\u6ca6\u4e3a\u6beb\u65e0\u610f\u4e49\u7684\u5520\u53e8\u4e0e\u65e0\u7528\u7684\u6280\u672f\u8bba\u575b\u3002 \u5938\u5f20\u7684\u8bb2\u6cd5\u662f\uff1a\u4f60\u8981\u7684\u662f\u201c\u53cb\u5584\u201d\uff08\u4ee5\u4e0a\u8ff0\u65b9\u5f0f\uff09\u8fd8\u662f\u6709\u7528\uff1f\u4e24\u4e2a\u91cc\u9762\u6311\u4e00\u4e2a\u3002 \u8bb0\u7740\uff1a\u5f53\u9ed1\u5ba2\u8bf4\u4f60\u641e\u7838\u4e86\uff0c\u5e76\u4e14\uff08\u65e0\u8bba\u591a\u4e48\u523a\u8033\uff09\u544a\u8bc9\u4f60\u522b\u518d\u8fd9\u6837\u505a\u65f6\uff0c\u4ed6\u6b63\u5728\u4e3a\u5173\u5fc3\u4f60\u548c\u4ed6\u7684\u793e\u533a\u800c\u884c\u52a8\u3002\u5bf9\u4ed6\u800c\u8a00\uff0c\u4e0d\u7406\u4f60\u5e76\u5c06\u4f60\u4ece\u4ed6\u7684\u751f\u6d3b\u4e2d\u6ee4\u6389\u66f4\u7b80\u5355\u3002\u5982\u679c\u4f60\u65e0\u6cd5\u505a\u5230\u611f\u8c22\uff0c\u81f3\u5c11\u8981\u8868\u73b0\u5f97\u6709\u70b9\u5c0a\u4e25\uff0c\u522b\u5927\u58f0\u54c0\u568e\uff0c\u4e5f\u522b\u56e0\u4e3a\u81ea\u5df1\u662f\u4e2a\u6709\u620f\u5267\u6027\u8d85\u7ea7\u654f\u611f\u7684\u7075\u9b42\u548c\u81ea\u4ee5\u4e3a\u6709\u8d44\u683c\u7684\u65b0\u6765\u8005\uff0c\u5c31\u6307\u671b\u522b\u4eba\u50cf\u5bf9\u5f85\u8106\u5f31\u7684\u6d0b\u5a03\u5a03\u90a3\u6837\u5bf9\u4f60\u3002 \u6709\u65f6\u5019\uff0c\u5373\u4f7f\u4f60\u6ca1\u6709\u641e\u7838\uff08\u6216\u8005\u53ea\u662f\u5728\u4ed6\u7684\u60f3\u50cf\u4e2d\u4f60\u641e\u7838\u4e86\uff09\uff0c\u6709\u4e9b\u4eba\u4e5f\u4f1a\u65e0\u7f18\u65e0\u6545\u5730\u653b\u51fb\u4f60\u672c\u4eba\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u62b1\u6028\u5012\u662f\u771f\u7684\u4f1a\u628a\u95ee\u9898\u641e\u7838\u3002 \u8fd9\u4e9b\u6765\u627e\u9ebb\u70e6\u7684\u4eba\u8981\u4e48\u662f\u6beb\u65e0\u529e\u6cd5\u4f46\u81ea\u4ee5\u4e3a\u662f\u4e13\u5bb6\u7684\u4e0d\u4e2d\u7528\u5bb6\u4f19\uff0c\u8981\u4e48\u5c31\u662f\u6d4b\u8bd5\u4f60\u662f\u5426\u771f\u4f1a\u641e\u7838\u7684\u5fc3\u7406\u4e13\u5bb6\u3002\u5176\u5b83\u8bfb\u8005\u8981\u4e48\u4e0d\u7406\u776c\uff0c\u8981\u4e48\u7528\u81ea\u5df1\u7684\u65b9\u5f0f\u5bf9\u4ed8\u4ed6\u4eec\u3002\u8fd9\u4e9b\u6765\u627e\u9ebb\u70e6\u7684\u4eba\u5728\u7ed9\u4ed6\u4eec\u81ea\u5df1\u627e\u9ebb\u70e6\uff0c\u8fd9\u70b9\u4f60\u4e0d\u7528\u64cd\u5fc3\u3002 \u4e5f\u522b\u8ba9\u81ea\u5df1\u5377\u5165\u53e3\u6c34\u6218\uff0c\u6700\u597d\u4e0d\u8981\u7406\u776c\u5927\u591a\u6570\u7684\u53e3\u6c34\u6218 -- \u5f53\u7136\uff0c\u8fd9\u662f\u5728\u4f60\u68c0\u9a8c\u5b83\u4eec\u53ea\u662f\u53e3\u6c34\u6218\uff0c\u5e76\u4e14\u672a\u6307\u51fa\u4f60\u6709\u641e\u7838\u7684\u5730\u65b9\uff0c\u540c\u65f6\u4e5f\u6ca1\u6709\u5de7\u5999\u5730\u5c06\u95ee\u9898\u771f\u6b63\u7684\u7b54\u6848\u85cf\u4e8e\u5176\u540e\uff08\u8fd9\u4e5f\u662f\u6709\u53ef\u80fd\u7684\uff09\u3002 \u4e0d\u8be5\u95ee\u7684\u95ee\u9898 \u4ee5\u4e0b\u662f\u51e0\u4e2a\u7ecf\u5178\u8822\u95ee\u9898\uff0c\u4ee5\u53ca\u9ed1\u5ba2\u6ca1\u56de\u7b54\u65f6\u5fc3\u4e2d\u6240\u60f3\u7684\uff1a \u95ee\u9898\uff1a\u6211\u80fd\u5728\u54ea\u627e\u5230 X \u7a0b\u5e8f\u6216 X \u8d44\u6e90\uff1f \u95ee\u9898\uff1a\u6211\u600e\u6837\u7528 X \u505a Y\uff1f \u95ee\u9898\uff1a\u5982\u4f55\u8bbe\u5b9a\u6211\u7684 shell \u63d0\u793a\uff1f \u95ee\u9898\uff1a\u6211\u53ef\u4ee5\u7528 Bass-o-matic \u6587\u4ef6\u8f6c\u6362\u5de5\u5177\u5c06 AcmeCorp \u6863\u6848\u8f6c\u6362\u4e3a TeX \u683c\u5f0f\u5417\uff1f \u95ee\u9898\uff1a\u6211\u7684\u7a0b\u5e8f/\u8bbe\u5b9a/SQL \u8bed\u53e5\u6ca1\u6709\u7528 \u95ee\u9898\uff1a\u6211\u7684 Windows \u7535\u8111\u6709\u95ee\u9898\uff0c\u4f60\u80fd\u5e2e\u6211\u5417\uff1f \u95ee\u9898\uff1a\u6211\u7684\u7a0b\u5e8f\u4e0d\u4f1a\u52a8\u4e86\uff0c\u6211\u8ba4\u4e3a\u7cfb\u7edf\u5de5\u5177 X \u6709\u95ee\u9898 \u95ee\u9898\uff1a\u6211\u5728\u5b89\u88c5 Linux\uff08\u6216\u8005 X \uff09\u65f6\u6709\u95ee\u9898\uff0c\u4f60\u80fd\u5e2e\u6211\u5417\uff1f \u95ee\u9898\uff1a\u6211\u600e\u4e48\u624d\u80fd\u7834\u89e3 root \u5e10\u53f7/\u7a83\u53d6 OP \u7279\u6743/\u8bfb\u522b\u4eba\u7684\u90ae\u4ef6\u5462\uff1f \u95ee\u9898\uff1a\u6211\u80fd\u5728\u54ea\u627e\u5230 X \u7a0b\u5e8f\u6216 X \u8d44\u6e90\uff1f \u56de\u7b54\uff1a\u5c31\u5728\u6211\u627e\u5230\u5b83\u7684\u5730\u65b9\u554a\uff0c\u767d\u75f4 \u2014\u2014 \u641c\u7d22\u5f15\u64ce\u7684\u90a3\u4e00\u5934\u3002\u5929\u54ea\uff01\u96be\u9053\u8fd8\u6709\u4eba\u4e0d\u4f1a\u7528 Google \u5417\uff1f \u95ee\u9898\uff1a\u6211\u600e\u6837\u7528 X \u505a Y\uff1f \u56de\u7b54\uff1a\u5982\u679c\u4f60\u60f3\u89e3\u51b3\u7684\u662f Y \uff0c\u63d0\u95ee\u65f6\u522b\u7ed9\u51fa\u53ef\u80fd\u5e76\u4e0d\u6070\u5f53\u7684\u65b9\u6cd5\u3002\u8fd9\u79cd\u95ee\u9898\u8bf4\u660e\u63d0\u95ee\u8005\u4e0d\u4f46\u5bf9 X \u5b8c\u5168\u65e0\u77e5\uff0c\u4e5f\u5bf9 Y \u8981\u89e3\u51b3\u7684\u95ee\u9898\u7cca\u6d82\uff0c\u8fd8\u88ab\u7279\u5b9a\u5f62\u52bf\u7981\u9522\u4e86\u601d\u7ef4\u3002\u6700\u597d\u5ffd\u7565\u8fd9\u79cd\u4eba\uff0c\u7b49\u4ed6\u4eec\u628a\u95ee\u9898\u641e\u6e05\u695a\u4e86\u518d\u8bf4\u3002 \u95ee\u9898\uff1a\u5982\u4f55\u8bbe\u5b9a\u6211\u7684 shell \u63d0\u793a\uff1f\uff1f \u56de\u7b54\uff1a\u5982\u679c\u4f60\u6709\u8db3\u591f\u7684\u667a\u6167\u63d0\u8fd9\u4e2a\u95ee\u9898\uff0c\u4f60\u4e5f\u8be5\u6709\u8db3\u591f\u7684\u667a\u6167\u53bb RTFM\uff0c\u7136\u540e\u81ea\u5df1\u53bb\u627e\u51fa\u6765\u3002 \u95ee\u9898\uff1a\u6211\u53ef\u4ee5\u7528 Bass-o-matic \u6587\u4ef6\u8f6c\u6362\u5de5\u5177\u5c06 AcmeCorp \u6863\u6848\u8f6c\u6362\u4e3a TeX \u683c\u5f0f\u5417\uff1f \u56de\u7b54\uff1a\u8bd5\u8bd5\u770b\u5c31\u77e5\u9053\u4e86\u3002\u5982\u679c\u4f60\u8bd5\u8fc7\uff0c\u4f60\u65e2\u77e5\u9053\u4e86\u7b54\u6848\uff0c\u5c31\u4e0d\u7528\u6d6a\u8d39\u6211\u7684\u65f6\u95f4\u4e86\u3002 \u95ee\u9898\uff1a\u6211\u7684{\u7a0b\u5e8f/\u8bbe\u5b9a/SQL \u8bed\u53e5}\u4e0d\u5de5\u4f5c \u56de\u7b54\uff1a\u8fd9\u4e0d\u7b97\u662f\u95ee\u9898\u5427\uff0c\u6211\u5bf9\u8981\u6211\u95ee\u4f60\u4e8c\u5341\u4e2a\u95ee\u9898\u624d\u627e\u5f97\u51fa\u4f60\u771f\u6b63\u95ee\u9898\u7684\u95ee\u9898\u6ca1\u5174\u8da3 \u2014\u2014 \u6211\u6709\u66f4\u6709\u610f\u601d\u7684\u4e8b\u8981\u505a\u5462\u3002\u5728\u770b\u5230\u8fd9\u7c7b\u95ee\u9898\u7684\u65f6\u5019\uff0c\u6211\u7684\u53cd\u5e94\u901a\u5e38\u4e0d\u5916\u5982\u4e0b\u4e09\u79cd \u4f60\u8fd8\u6709\u4ec0\u4e48\u8981\u8865\u5145\u7684\u5417\uff1f \u771f\u7cdf\u7cd5\uff0c\u5e0c\u671b\u4f60\u80fd\u641e\u5b9a\u3002 \u8fd9\u5173\u6211\u6709\u4ec0\u4e48\u5c41\u4e8b\uff1f \u95ee\u9898\uff1a\u6211\u7684 Windows \u7535\u8111\u6709\u95ee\u9898\uff0c\u4f60\u80fd\u5e2e\u6211\u5417\uff1f \u56de\u7b54\uff1a\u80fd\u554a\uff0c\u6254\u6389\u5fae\u8f6f\u7684\u5783\u573e\uff0c\u6362\u4e2a\u50cf Linux \u6216 BSD \u7684\u5f00\u6e90\u64cd\u4f5c\u7cfb\u7edf\u5427\u3002 \u6ce8\u610f\uff1a\u5982\u679c\u7a0b\u5e8f\u6709\u5b98\u65b9\u7248 Windows \u6216\u8005\u4e0e Windows \u6709\u4e92\u52a8\uff08\u5982 Samba\uff09\uff0c\u4f60\u53ef\u4ee5\u95ee\u4e0e Windows \u76f8\u5173\u7684\u95ee\u9898\uff0c \u53ea\u662f\u522b\u5bf9\u95ee\u9898\u662f\u7531 Windows \u64cd\u4f5c\u7cfb\u7edf\u800c\u4e0d\u662f\u7a0b\u5e8f\u672c\u8eab\u9020\u6210\u7684\u56de\u590d\u611f\u5230\u60ca\u8bb6\uff0c \u56e0\u4e3a Windows \u4e00\u822c\u6765\u8bf4\u5b9e\u5728\u592a\u70c2\uff0c\u8fd9\u79cd\u8bf4\u6cd5\u901a\u5e38\u90fd\u662f\u5bf9\u7684\u3002 \u95ee\u9898\uff1a\u6211\u7684\u7a0b\u5e8f\u4e0d\u4f1a\u52a8\u4e86\uff0c\u6211\u8ba4\u4e3a\u7cfb\u7edf\u5de5\u5177 X \u6709\u95ee\u9898 \u56de\u7b54\uff1a\u4f60\u5b8c\u5168\u6709\u53ef\u80fd\u662f\u7b2c\u4e00\u4e2a\u6ce8\u610f\u5230\u88ab\u6210\u5343\u4e0a\u4e07\u7528\u6237\u53cd\u590d\u4f7f\u7528\u7684\u7cfb\u7edf\u8c03\u7528\u4e0e\u51fd\u6570\u5e93\u6863\u6848\u6709\u660e\u663e\u7f3a\u9677\u7684\u4eba\uff0c\u66f4\u6709\u53ef\u80fd\u7684\u662f\u4f60\u5b8c\u5168\u6ca1\u6709\u6839\u636e\u3002\u4e0d\u540c\u51e1\u54cd\u7684\u8bf4\u6cd5\u9700\u8981\u4e0d\u540c\u51e1\u54cd\u7684\u8bc1\u636e\uff0c\u5f53\u4f60\u8fd9\u6837\u58f0\u79f0\u65f6\uff0c\u4f60\u5fc5\u987b\u6709\u6e05\u695a\u800c\u8be6\u5c3d\u7684\u7f3a\u9677\u8bf4\u660e\u6587\u4ef6\u4f5c\u540e\u76fe\u3002 \u95ee\u9898\uff1a\u6211\u5728\u5b89\u88c5 Linux\uff08\u6216\u8005 X \uff09\u65f6\u6709\u95ee\u9898\uff0c\u4f60\u80fd\u5e2e\u6211\u5417\uff1f \u56de\u7b54\uff1a\u4e0d\u80fd\uff0c\u6211\u53ea\u6709\u4eb2\u81ea\u5728\u4f60\u7684\u7535\u8111\u4e0a\u52a8\u624b\u624d\u80fd\u627e\u5230\u6bdb\u75c5\u3002\u8fd8\u662f\u53bb\u627e\u4f60\u5f53\u5730\u7684 Linux \u4f7f\u7528\u7fa4\u7ec4\u8005\u5bfb\u6c42\u5b9e\u9645\u7684\u6307\u5bfc\u5427\uff08\u4f60\u80fd\u5728\u8fd9\u513f\u627e\u5230\u4f7f\u7528\u8005\u7fa4\u7ec4\u7684\u6e05\u5355\uff09\u3002 \u6ce8\u610f\uff1a\u5982\u679c\u5b89\u88c5\u95ee\u9898\u4e0e\u67d0 Linux \u7684\u53d1\u884c\u7248\u6709\u5173\uff0c\u5728\u5b83\u7684\u90ae\u4ef6\u5217\u8868\u3001\u8bba\u575b\u6216\u672c\u5730\u4f7f\u7528\u8005\u7fa4\u7ec4\u4e2d\u63d0\u95ee\u4e5f\u8bb8\u662f\u6070\u5f53\u7684\u3002\u6b64\u65f6\uff0c\u5e94\u63cf\u8ff0\u95ee\u9898\u7684\u51c6\u786e\u7ec6\u8282\u3002\u5728\u6b64\u4e4b\u524d\uff0c\u5148\u7528 Linux \u548c\u6240\u6709\u88ab\u6000\u7591\u7684\u786c\u4ef6\u4f5c\u5173\u952e\u8bcd\u4ed4\u7ec6\u641c\u7d22\u3002 \u95ee\u9898\uff1a\u6211\u600e\u4e48\u624d\u80fd\u7834\u89e3 root \u5e10\u53f7/\u7a83\u53d6 OP \u7279\u6743/\u8bfb\u522b\u4eba\u7684\u90ae\u4ef6\u5462\uff1f \u56de\u7b54\uff1a\u60f3\u8981\u8fd9\u6837\u505a\uff0c\u8bf4\u660e\u4e86\u4f60\u662f\u4e2a\u5351\u9119\u5c0f\u4eba\uff1b\u60f3\u627e\u4e2a\u9ed1\u5ba2\u5e2e\u4f60\uff0c\u8bf4\u660e\u4f60\u662f\u4e2a\u767d\u75f4\uff01 \u597d\u95ee\u9898\u4e0e\u8822\u95ee\u9898 \u6700\u540e\uff0c\u6211\u5c06\u900f\u8fc7\u4e3e\u4e00\u4e9b\u4f8b\u5b50\uff0c\u6765\u8bf4\u660e\u600e\u6837\u806a\u660e\u7684\u63d0\u95ee\uff1b\u540c\u4e00\u4e2a\u95ee\u9898\u7684\u4e24\u79cd\u95ee\u6cd5\u88ab\u653e\u5728\u4e00\u8d77\uff0c\u4e00\u79cd\u662f\u611a\u8822\u7684\uff0c\u53e6\u4e00\u79cd\u624d\u662f\u660e\u667a\u7684\u3002 \u8822\u95ee\u9898\uff1a \u6211\u53ef\u4ee5\u5728\u54ea\u513f\u627e\u5230\u5173\u4e8e Foonly Flurbamatic \u7684\u8d44\u6599\uff1f \u8fd9\u79cd\u95ee\u6cd5\u65e0\u975e\u60f3\u5f97\u5230 STFW \u8fd9\u6837\u7684\u56de\u7b54\u3002 \u806a\u660e\u95ee\u9898\uff1a \u6211\u7528 Google \u641c\u7d22\u8fc7 \"Foonly Flurbamatic 2600\"\uff0c\u4f46\u662f\u6ca1\u627e\u5230\u6709\u7528\u7684\u7ed3\u679c\u3002\u8c01\u77e5\u9053\u4e0a\u54ea\u513f\u53bb\u627e\u5bf9\u8fd9\u79cd\u8bbe\u5907\u7f16\u7a0b\u7684\u8d44\u6599\uff1f \u8fd9\u4e2a\u95ee\u9898\u5df2\u7ecf STFW \u8fc7\u4e86\uff0c\u770b\u8d77\u6765\u4ed6\u771f\u7684\u9047\u5230\u4e86\u9ebb\u70e6\u3002 \u8822\u95ee\u9898\uff1a \u6211\u4ece foo \u9879\u76ee\u627e\u6765\u7684\u6e90\u7801\u6ca1\u6cd5\u7f16\u8bd1\u3002\u5b83\u600e\u4e48\u8fd9\u4e48\u70c2\uff1f \u4ed6\u89c9\u5f97\u90fd\u662f\u522b\u4eba\u7684\u9519\uff0c\u8fd9\u4e2a\u50b2\u6162\u81ea\u5927\u7684\u63d0\u95ee\u8005\u3002 \u806a\u660e\u95ee\u9898\uff1a foo \u9879\u76ee\u4ee3\u7801\u5728 Nulix 6.2 \u7248\u4e0b\u65e0\u6cd5\u7f16\u8bd1\u901a\u8fc7\u3002\u6211\u8bfb\u8fc7\u4e86 FAQ\uff0c\u4f46\u91cc\u9762\u6ca1\u6709\u63d0\u5230\u8ddf Nulix \u6709\u5173\u7684\u95ee\u9898\u3002\u8fd9\u662f\u6211\u7f16\u8bd1\u8fc7\u7a0b\u7684\u8bb0\u5f55\uff0c\u6211\u6709\u4ec0\u4e48\u505a\u7684\u4e0d\u5bf9\u7684\u5730\u65b9\u5417\uff1f \u63d0\u95ee\u8005\u5df2\u7ecf\u6307\u660e\u4e86\u73af\u5883\uff0c\u4e5f\u8bfb\u8fc7\u4e86 FAQ\uff0c\u8fd8\u5217\u51fa\u4e86\u9519\u8bef\uff0c\u5e76\u4e14\u4ed6\u6ca1\u6709\u628a\u95ee\u9898\u7684\u8d23\u4efb\u63a8\u5230\u522b\u4eba\u5934\u4e0a\uff0c\u4ed6\u7684\u95ee\u9898\u503c\u5f97\u88ab\u5173\u6ce8\u3002 \u8822\u95ee\u9898\uff1a \u6211\u7684\u4e3b\u673a\u677f\u6709\u95ee\u9898\u4e86\uff0c\u8c01\u6765\u5e2e\u6211\uff1f \u67d0\u9ed1\u5ba2\u5bf9\u8fd9\u7c7b\u95ee\u9898\u7684\u56de\u7b54\u901a\u5e38\u662f\uff1a \u597d\u7684\uff0c\u8fd8\u8981\u5e2e\u4f60\u62cd\u62cd\u80cc\u548c\u6362\u5c3f\u5e03\u5417\uff1f \uff0c\u7136\u540e\u6309\u4e0b\u5220\u9664\u952e\u3002 \u806a\u660e\u95ee\u9898\uff1a \u6211\u5728 S2464 \u4e3b\u673a\u677f\u4e0a\u8bd5\u8fc7\u4e86 X \u3001 Y \u548c Z \uff0c\u4f46\u6ca1\u4ec0\u4e48\u4f5c\u7528\uff0c\u6211\u53c8\u8bd5\u4e86 A \u3001 B \u548c C \u3002\u8bf7\u6ce8\u610f\u5f53\u6211\u5c1d\u8bd5 C \u65f6\u7684\u5947\u602a\u73b0\u8c61\u3002\u663e\u7136 florbish \u6b63\u5728 grommicking\uff0c\u4f46\u7ed3\u679c\u51fa\u4eba\u610f\u6599\u3002\u901a\u5e38\u5728 Athlon MP \u4e3b\u673a\u677f\u4e0a\u5f15\u8d77 grommicking \u7684\u539f\u56e0\u662f\u4ec0\u4e48\uff1f\u6709\u8c01\u77e5\u9053\u63a5\u4e0b\u6765\u6211\u8be5\u505a\u4e9b\u4ec0\u4e48\u6d4b\u8bd5\u624d\u80fd\u627e\u51fa\u95ee\u9898\uff1f \u8fd9\u4e2a\u5bb6\u4f19\uff0c\u4ece\u53e6\u4e00\u4e2a\u89d2\u5ea6\u6765\u770b\uff0c\u503c\u5f97\u53bb\u56de\u7b54\u4ed6\u3002\u4ed6\u8868\u73b0\u51fa\u4e86\u89e3\u51b3\u95ee\u9898\u7684\u80fd\u529b\uff0c\u800c\u4e0d\u662f\u5750\u7b49\u5929\u4e0a\u6389\u7b54\u6848\u3002 \u5728\u6700\u540e\u4e00\u4e2a\u95ee\u9898\u4e2d\uff0c\u6ce8\u610f\u544a\u8bc9\u6211\u7b54\u6848\u548c\u7ed9\u6211\u542f\u793a\uff0c\u6307\u51fa\u6211\u8fd8\u5e94\u8be5\u505a\u4ec0\u4e48\u8bca\u65ad\u5de5\u4f5c\u4e4b\u95f4\u5fae\u5999\u800c\u53c8\u91cd\u8981\u7684\u533a\u522b\u3002 \u4e8b\u5b9e\u4e0a\uff0c\u540e\u4e00\u4e2a\u95ee\u9898\u6e90\u81ea\u4e8e 2001 \u5e74 8 \u6708\u5728 Linux \u5185\u6838\u90ae\u4ef6\u5217\u8868\uff08lkml\uff09\u4e0a\u7684\u4e00\u4e2a\u771f\u5b9e\u7684\u63d0\u95ee\u3002\u6211\uff08Eric\uff09\u5c31\u662f\u90a3\u4e2a\u63d0\u51fa\u95ee\u9898\u7684\u4eba\u3002\u6211\u5728 Tyan S2464 \u4e3b\u677f\u4e0a\u89c2\u5bdf\u5230\u4e86\u8fd9\u79cd\u65e0\u6cd5\u89e3\u91ca\u7684\u9501\u5b9a\u73b0\u8c61\uff0c\u5217\u8868\u6210\u5458\u4eec\u63d0\u4f9b\u4e86\u89e3\u51b3\u8fd9\u4e00\u95ee\u9898\u7684\u91cd\u8981\u4fe1\u606f\u3002 \u901a\u8fc7\u6211\u7684\u63d0\u95ee\u65b9\u6cd5\uff0c\u6211\u7ed9\u4e86\u522b\u4eba\u53ef\u4ee5\u5480\u56bc\u73a9\u5473\u7684\u4e1c\u897f\uff1b\u6211\u8bbe\u6cd5\u8ba9\u4eba\u4eec\u5f88\u5bb9\u6613\u53c2\u4e0e\u5e76\u4e14\u88ab\u5438\u5f15\u8fdb\u6765\u3002\u6211\u663e\u793a\u4e86\u81ea\u5df1\u5177\u5907\u548c\u4ed6\u4eec\u540c\u7b49\u7684\u80fd\u529b\uff0c\u5e76\u9080\u8bf7\u4ed6\u4eec\u4e0e\u6211\u5171\u540c\u63a2\u8ba8\u3002\u901a\u8fc7\u544a\u8bc9\u4ed6\u4eec\u6211\u6240\u8d70\u8fc7\u7684\u5f2f\u8def\uff0c\u4ee5\u907f\u514d\u4ed6\u4eec\u518d\u6d6a\u8d39\u65f6\u95f4\uff0c\u6211\u4e5f\u8868\u660e\u4e86\u5bf9\u4ed6\u4eec\u5b9d\u8d35\u65f6\u95f4\u7684\u5c0a\u91cd\u3002 \u4e8b\u540e\uff0c\u5f53\u6211\u5411\u6bcf\u4e2a\u4eba\u8868\u793a\u611f\u8c22\uff0c\u5e76\u4e14\u8d5e\u8d4f\u8fd9\u6b21\u826f\u597d\u7684\u8ba8\u8bba\u7ecf\u5386\u7684\u65f6\u5019\uff0c \u4e00\u4e2a Linux \u5185\u6838\u90ae\u4ef6\u5217\u8868\u7684\u6210\u5458\u8868\u793a\uff0c\u4ed6\u89c9\u5f97\u6211\u7684\u95ee\u9898\u5f97\u5230\u89e3\u51b3\u5e76\u975e\u7531\u4e8e\u6211\u662f\u8fd9\u4e2a\u5217\u8868\u4e2d\u7684\u540d\u4eba\uff0c\u800c\u662f\u56e0\u4e3a\u6211\u7528\u4e86\u6b63\u786e\u7684\u65b9\u5f0f\u6765\u63d0\u95ee\u3002 \u9ed1\u5ba2\u4ece\u67d0\u79cd\u89d2\u5ea6\u6765\u8bf4\u662f\u62e5\u6709\u4e30\u5bcc\u77e5\u8bc6\u4f46\u7f3a\u4e4f\u4eba\u60c5\u5473\u7684\u5bb6\u4f19\uff1b\u6211\u76f8\u4fe1\u4ed6\u662f\u5bf9\u7684\uff0c\u5982\u679c\u6211\u50cf\u4e2a\u4e5e\u8ba8\u8005\u90a3\u6837\u63d0\u95ee\uff0c\u4e0d\u8bba\u6211\u662f\u8c01\uff0c\u4e00\u5b9a\u4f1a\u60f9\u607c\u67d0\u4e9b\u4eba\u6216\u8005\u88ab\u4ed6\u4eec\u5ffd\u89c6\u3002\u4ed6\u5efa\u8bae\u6211\u8bb0\u4e0b\u8fd9\u4ef6\u4e8b\uff0c\u8fd9\u76f4\u63a5\u5bfc\u81f4\u4e86\u672c\u6307\u5357\u7684\u51fa\u73b0\u3002 \u5982\u679c\u5f97\u4e0d\u5230\u56de\u7b54 \u5982\u679c\u4ecd\u5f97\u4e0d\u5230\u56de\u7b54\uff0c\u8bf7\u4e0d\u8981\u4ee5\u4e3a\u6211\u4eec\u89c9\u5f97\u65e0\u6cd5\u5e2e\u52a9\u4f60\u3002\u6709\u65f6\u53ea\u662f\u770b\u5230\u4f60\u95ee\u9898\u7684\u4eba\u4e0d\u77e5\u9053\u7b54\u6848\u7f62\u4e86\u3002\u6ca1\u6709\u56de\u5e94\u4e0d\u4ee3\u8868\u4f60\u88ab\u5ffd\u89c6\uff0c\u867d\u7136\u4e0d\u53ef\u5426\u8ba4\u8fd9\u79cd\u5dee\u522b\u5f88\u96be\u533a\u5206\u3002 \u603b\u7684\u6765\u8bf4\uff0c\u7b80\u5355\u7684\u91cd\u590d\u5f20\u8d34\u95ee\u9898\u662f\u4e2a\u5f88\u7cdf\u7684\u70b9\u5b50\u3002\u8fd9\u5c06\u88ab\u89c6\u4e3a\u65e0\u610f\u4e49\u7684\u55a7\u95f9\u3002\u6709\u70b9\u8010\u5fc3\uff0c\u77e5\u9053\u4f60\u95ee\u9898\u7b54\u6848\u7684\u4eba\u53ef\u80fd\u751f\u6d3b\u5728\u4e0d\u540c\u7684\u65f6\u533a\uff0c\u53ef\u80fd\u6b63\u5728\u7761\u89c9\uff0c\u4e5f\u6709\u53ef\u80fd\u4f60\u7684\u95ee\u9898\u4e00\u5f00\u59cb\u5c31\u6ca1\u6709\u7ec4\u7ec7\u597d\u3002 \u4f60\u53ef\u4ee5\u901a\u8fc7\u5176\u4ed6\u6e20\u9053\u83b7\u5f97\u5e2e\u52a9\uff0c\u8fd9\u4e9b\u6e20\u9053\u901a\u5e38\u66f4\u9002\u5408\u521d\u5b66\u8005\u7684\u9700\u8981\u3002 \u6709\u8bb8\u591a\u7f51\u4e0a\u7684\u4ee5\u53ca\u672c\u5730\u7684\u4f7f\u7528\u8005\u7fa4\u7ec4\uff0c\u7531\u70ed\u60c5\u7684\u8f6f\u4ef6\u7231\u597d\u8005\uff08\u5373\u4f7f\u4ed6\u4eec\u53ef\u80fd\u4ece\u6ca1\u4eb2\u81ea\u5199\u8fc7\u4efb\u4f55\u8f6f\u4ef6\uff09\u7ec4\u6210\u3002\u901a\u5e38\u4eba\u4eec\u7ec4\u5efa\u8fd9\u6837\u7684\u56e2\u4f53\u6765\u4e92\u76f8\u5e2e\u52a9\u5e76\u5e2e\u52a9\u65b0\u624b\u3002 \u53e6\u5916\uff0c\u4f60\u53ef\u4ee5\u5411\u5f88\u591a\u5546\u4e1a\u516c\u53f8\u5bfb\u6c42\u5e2e\u52a9\uff0c\u4e0d\u8bba\u516c\u53f8\u5927\u8fd8\u662f\u5c0f\u3002\u522b\u4e3a\u8981\u4ed8\u8d39\u624d\u80fd\u83b7\u5f97\u5e2e\u52a9\u800c\u611f\u5230\u6cae\u4e27\uff01\u6bd5\u7adf\uff0c\u5047\u4f7f\u4f60\u7684\u6c7d\u8f66\u53d1\u52a8\u673a\u6c7d\u7f38\u5bc6\u5c01\u5708\u7206\u6389\u4e86 \u2014\u2014 \u5b8c\u5168\u53ef\u80fd\u5982\u6b64 \u2014\u2014 \u4f60\u8fd8\u5f97\u628a\u5b83\u9001\u5230\u4fee\u8f66\u94fa\uff0c\u5e76\u4e14\u4e3a\u7ef4\u4fee\u4ed8\u8d39\u3002\u5c31\u7b97\u8f6f\u4ef6\u6ca1\u82b1\u8d39\u4f60\u4e00\u5206\u94b1\uff0c\u4f60\u4e5f\u4e0d\u80fd\u5f3a\u6c42\u6280\u672f\u652f\u6301\u603b\u662f\u514d\u8d39\u7684\u3002 \u5bf9\u50cf\u662f Linux \u8fd9\u79cd\u5927\u4f17\u5316\u7684\u8f6f\u4ef6\uff0c\u6bcf\u4e2a\u5f00\u53d1\u8005\u81f3\u5c11\u4f1a\u5bf9\u5e94\u5230\u4e0a\u4e07\u540d\u4f7f\u7528\u8005\u3002\u6839\u672c\u4e0d\u53ef\u80fd\u7531\u4e00\u4e2a\u4eba\u6765\u5904\u7406\u6765\u81ea\u4e0a\u4e07\u540d\u4f7f\u7528\u8005\u7684\u6c42\u52a9\u7535\u8bdd\u3002\u8981\u77e5\u9053\uff0c\u5373\u4f7f\u4f60\u8981\u4e3a\u8fd9\u4e9b\u534f\u52a9\u4ed8\u8d39\uff0c\u548c\u4f60\u6240\u8d2d\u4e70\u7684\u540c\u7c7b\u8f6f\u4ef6\u76f8\u6bd4\uff0c\u4f60\u6240\u4ed8\u51fa\u7684\u4e5f\u662f\u5fae\u4e0d\u8db3\u9053\u7684\uff08\u901a\u5e38\u5c01\u95ed\u6e90\u4ee3\u7801\u8f6f\u4ef6\u7684\u6280\u672f\u652f\u6301\u8d39\u7528\u6bd4\u5f00\u6e90\u8f6f\u4ef6\u7684\u8981\u9ad8\u5f97\u591a\uff0c\u4e14\u5185\u5bb9\u4e5f\u6ca1\u90a3\u4e48\u4e30\u5bcc\uff09\u3002 \u5982\u4f55\u66f4\u597d\u5730\u56de\u7b54\u95ee\u9898 \u6001\u5ea6\u548c\u5584\u4e00\u70b9\u3002 \u95ee\u9898\u5e26\u6765\u7684\u538b\u529b\u5e38\u4f7f\u4eba\u663e\u5f97\u65e0\u793c\u6216\u611a\u8822\uff0c\u5176\u5b9e\u5e76\u4e0d\u662f\u8fd9\u6837\u3002 \u5bf9\u521d\u72af\u8005\u79c1\u4e0b\u56de\u590d\u3002 \u5bf9\u90a3\u4e9b\u5766\u8bda\u72af\u9519\u4e4b\u4eba\u6ca1\u6709\u5fc5\u8981\u5f53\u4f17\u7f9e\u8fb1\uff0c\u4e00\u4e2a\u771f\u6b63\u7684\u65b0\u624b\u4e5f\u8bb8\u8fde\u600e\u4e48\u641c\u7d22\u6216\u5728\u54ea\u627e\u5e38\u89c1\u95ee\u9898\u90fd\u4e0d\u77e5\u9053\u3002 \u5982\u679c\u4f60\u4e0d\u786e\u5b9a\uff0c\u4e00\u5b9a\u8981\u8bf4\u51fa\u6765\uff01 \u4e00\u4e2a\u542c\u8d77\u6765\u6743\u5a01\u7684\u9519\u8bef\u56de\u590d\u6bd4\u6ca1\u6709\u8fd8\u8981\u7cdf\uff0c\u522b\u56e0\u4e3a\u542c\u8d77\u6765\u50cf\u4e2a\u4e13\u5bb6\u5f88\u597d\u73a9\uff0c\u5c31\u7ed9\u522b\u4eba\u4e71\u6307\u8def\u3002\u8981\u8c26\u865a\u548c\u8bda\u5b9e\uff0c\u7ed9\u63d0\u95ee\u8005\u4e0e\u540c\u884c\u90fd\u6811\u4e2a\u597d\u699c\u6837\u3002 \u5982\u679c\u5e2e\u4e0d\u4e86\u5fd9\uff0c\u4e5f\u522b\u59a8\u788d\u4ed6\u3002 \u4e0d\u8981\u5728\u5b9e\u9645\u6b65\u9aa4\u4e0a\u5f00\u73a9\u7b11\uff0c\u90a3\u6837\u4e5f\u8bb8\u4f1a\u6bc1\u4e86\u4f7f\u7528\u8005\u7684\u8bbe\u7f6e \u2014\u2014 \u6709\u4e9b\u53ef\u601c\u7684\u5446\u74dc\u4f1a\u628a\u5b83\u5f53\u6210\u771f\u7684\u6307\u4ee4\u3002 \u8bd5\u63a2\u6027\u7684\u53cd\u95ee\u4ee5\u5f15\u51fa\u66f4\u591a\u7684\u7ec6\u8282\u3002 \u5982\u679c\u4f60\u505a\u5f97\u597d\uff0c\u63d0\u95ee\u8005\u53ef\u4ee5\u5b66\u5230\u70b9\u4e1c\u897f \u2014\u2014 \u4f60\u4e5f\u53ef\u4ee5\u3002\u8bd5\u8bd5\u5c06\u8822\u95ee\u9898\u8f6c\u53d8\u6210\u597d\u95ee\u9898\uff0c\u522b\u5fd8\u4e86\u6211\u4eec\u90fd\u66fe\u662f\u65b0\u624b\u3002 \u5c3d\u7ba1\u5bf9\u90a3\u4e9b\u61d2\u866b\u62b1\u6028\u4e00\u58f0 RTFM \u662f\u6b63\u5f53\u7684\uff0c\u80fd\u6307\u51fa\u6587\u4ef6\u7684\u4f4d\u7f6e\uff08\u5373\u4f7f\u53ea\u662f\u5efa\u8bae\u4e2a Google \u641c\u7d22\u5173\u952e\u8bcd\uff09\u4f1a\u66f4\u597d\u3002 \u5982\u679c\u4f60\u51b3\u5b9a\u56de\u7b54\uff0c\u5c31\u8bf7\u7ed9\u51fa\u597d\u7684\u7b54\u6848\u3002 \u5f53\u522b\u4eba\u6b63\u5728\u7528\u9519\u8bef\u7684\u5de5\u5177\u6216\u65b9\u6cd5\u65f6\u522b\u5efa\u8bae\u7b28\u62d9\u7684\u6743\u5b9c\u4e4b\u8ba1\uff08wordaround\uff09\uff0c\u5e94\u63a8\u8350\u66f4\u597d\u7684\u5de5\u5177\uff0c\u91cd\u65b0\u754c\u5b9a\u95ee\u9898\u3002 \u6b63\u9762\u7684\u56de\u7b54\u95ee\u9898\uff01 \u5982\u679c\u8fd9\u4e2a\u63d0\u95ee\u8005\u5df2\u7ecf\u5f88\u6df1\u5165\u7684\u7814\u7a76\u800c\u4e14\u4e5f\u8868\u660e\u5df2\u7ecf\u8bd5\u8fc7 X \u3001 Y \u3001 Z \u3001 A \u3001 B \u3001 C \u4f46\u6ca1\u5f97\u5230\u7ed3\u679c\uff0c\u56de\u7b54 \u8bd5\u8bd5\u770b A \u6216\u662f B \u6216\u8005 \u8bd5\u8bd5 X \u3001 Y \u3001 Z \u3001 A \u3001 B \u3001 C \u5e76\u9644\u4e0a\u4e00\u4e2a\u94fe\u63a5\u4e00\u70b9\u7528\u90fd\u6ca1\u6709\u3002 \u5e2e\u52a9\u4f60\u7684\u793e\u533a\u4ece\u95ee\u9898\u4e2d\u5b66\u4e60\u3002 \u5f53\u56de\u590d\u4e00\u4e2a\u597d\u95ee\u9898\u65f6\uff0c\u95ee\u95ee\u81ea\u5df1\u5982\u4f55\u4fee\u6539\u76f8\u5173\u6587\u4ef6\u6216\u5e38\u89c1\u95ee\u9898\u6587\u4ef6\u4ee5\u514d\u518d\u6b21\u89e3\u7b54\u540c\u6837\u7684\u95ee\u9898\uff1f\uff0c\u63a5\u7740\u518d\u5411\u6587\u4ef6\u7ef4\u62a4\u8005\u53d1\u4e00\u4efd\u8865\u4e01\u3002 \u5982\u679c\u4f60\u662f\u5728\u7814\u7a76\u4e00\u756a\u540e\u624d\u505a\u51fa\u7684\u56de\u7b54\uff0c \u5c55\u73b0\u4f60\u7684\u6280\u5de7\u800c\u4e0d\u662f\u76f4\u63a5\u7aef\u51fa\u7ed3\u679c\u3002 \u6bd5\u7adf\u6388\u4eba\u4ee5\u9c7c\u4e0d\u5982\u6388\u4eba\u4ee5\u6e14\u3002","title":"\u5b8c\u6574\u7248"},{"location":"misc/how_to_ask_questions_the_smart_way/how_to_ask_questions_the_smart_way/#_1","text":"\u5728 \u9ed1\u5ba2 \u7684\u4e16\u754c\u91cc\uff0c\u5f53\u4f60\u62cb\u51fa\u4e00\u4e2a\u6280\u672f\u95ee\u9898\u65f6\uff0c\u6700\u7ec8\u662f\u5426\u80fd\u5f97\u5230\u6709\u7528\u7684\u56de\u7b54\uff0c\u5f80\u5f80\u53d6\u51b3\u4e8e\u4f60\u6240\u63d0\u95ee\u548c\u8ffd\u95ee\u7684\u65b9\u5f0f\u3002\u672c\u6307\u5357\u5c06\u6559\u4f60\u5982\u4f55\u6b63\u786e\u7684\u63d0\u95ee\u4ee5\u83b7\u5f97\u4f60\u6ee1\u610f\u7684\u7b54\u6848\u3002 \u4e0d\u53ea\u662f\u9ed1\u5ba2\uff0c\u73b0\u5728\u5f00\u6e90\uff08Open Source\uff09\u8f6f\u4ef6\u5df2\u7ecf\u76f8\u5f53\u76db\u884c\uff0c\u4f60\u5e38\u5e38\u4e5f\u53ef\u4ee5\u7531\u5176\u4ed6\u6709\u7ecf\u9a8c\u7684\u4f7f\u7528\u8005\u8eab\u4e0a\u5f97\u5230\u597d\u7b54\u6848\uff0c\u8fd9\u662f\u4ef6 \u597d\u4e8b \uff1b\u4f7f\u7528\u8005\u6bd4\u8d77\u9ed1\u5ba2\u6765\uff0c\u5f80\u5f80\u5bf9\u90a3\u4e9b\u65b0\u624b\u5e38\u9047\u5230\u7684\u95ee\u9898\u66f4\u5bbd\u5bb9\u4e00\u4e9b\u3002\u7136\u800c\uff0c\u5c06\u6709\u7ecf\u9a8c\u7684\u4f7f\u7528\u8005\u89c6\u4e3a\u9ed1\u5ba2\uff0c\u5e76\u91c7\u7528\u672c\u6307\u5357\u6240\u63d0\u7684\u65b9\u6cd5\u4e0e\u4ed6\u4eec\u6c9f\u901a\uff0c\u540c\u6837\u4e5f\u662f\u80fd\u4ece\u4ed6\u4eec\u8eab\u4e0a\u5f97\u5230\u6ee1\u610f\u56de\u7b54\u7684\u6700\u6709\u6548\u65b9\u5f0f\u3002 \u9996\u5148\u4f60\u5e94\u8be5\u660e\u767d\uff0c\u9ed1\u5ba2\u4eec\u559c\u7231\u6709\u6311\u6218\u6027\u7684\u95ee\u9898\uff0c\u6216\u8005\u80fd\u6fc0\u53d1\u4ed6\u4eec\u601d\u7ef4\u7684\u597d\u95ee\u9898\u3002\u5982\u679c\u6211\u4eec\u5e76\u975e\u5982\u6b64\uff0c\u90a3\u6211\u4eec\u4e5f\u4e0d\u4f1a\u6210\u4e3a\u4f60\u60f3\u8be2\u95ee\u7684\u5bf9\u8c61\u3002\u5982\u679c\u4f60\u7ed9\u4e86\u6211\u4eec\u4e00\u4e2a\u503c\u5f97\u53cd\u590d\u5480\u56bc\u73a9\u5473\u7684\u597d\u95ee\u9898\uff0c\u6211\u4eec\u81ea\u4f1a\u5bf9\u4f60\u611f\u6fc0\u4e0d\u5c3d\u3002\u597d\u95ee\u9898\u662f\u6fc0\u52b1\uff0c\u662f\u539a\u793c\u3002\u597d\u95ee\u9898\u53ef\u4ee5\u63d0\u9ad8\u6211\u4eec\u7684\u7406\u89e3\u529b\uff0c\u800c\u4e14\u901a\u5e38\u4f1a\u66b4\u9732\u6211\u4eec\u4ee5\u524d\u4ece\u6ca1\u610f\u8bc6\u5230\u6216\u8005\u601d\u8003\u8fc7\u7684\u95ee\u9898\u3002\u5bf9\u9ed1\u5ba2\u800c\u8a00\uff0c\"\u597d\u95ee\u9898\uff01\"\u662f\u8bda\u631a\u7684\u5927\u529b\u79f0\u8d5e\u3002 \u5c3d\u7ba1\u5982\u6b64\uff0c\u9ed1\u5ba2\u4eec\u6709\u7740\u8511\u89c6\u6216\u50b2\u6162\u9762\u5bf9\u7b80\u5355\u95ee\u9898\u7684\u574f\u540d\u58f0\uff0c\u8fd9\u6709\u65f6\u8ba9\u6211\u4eec\u770b\u8d77\u6765\u5bf9\u65b0\u624b\u3001\u65e0\u77e5\u8005\u4f3c\u4e4e\u8f83\u6709\u654c\u610f\uff0c\u4f46\u5176\u5b9e\u4e0d\u662f\u90a3\u6837\u7684\u3002 \u6211\u4eec\u4e0d\u8bb3\u8a00\u6211\u4eec\u5bf9\u90a3\u4e9b\u4e0d\u613f\u601d\u8003\u3001\u6216\u8005\u5728\u53d1\u95ee\u524d\u4e0d\u505a\u4ed6\u4eec\u8be5\u505a\u7684\u4e8b\u7684\u4eba\u7684\u8511\u89c6\u3002\u90a3\u4e9b\u4eba\u662f\u65f6\u95f4\u6740\u624b \u2014\u2014 \u4ed6\u4eec\u53ea\u60f3\u7d22\u53d6\uff0c\u4ece\u4e0d\u4ed8\u51fa\uff0c\u6d88\u8017\u6211\u4eec\u53ef\u7528\u5728\u66f4\u6709\u8da3\u7684\u95ee\u9898\u6216\u66f4\u503c\u5f97\u56de\u7b54\u7684\u4eba\u8eab\u4e0a\u7684\u65f6\u95f4\u3002\u6211\u4eec\u79f0\u8fd9\u6837\u7684\u4eba\u4e3a \u5931\u8d25\u8005\uff08\u64b8\u745f\uff09 \uff08\u7531\u4e8e\u5386\u53f2\u539f\u56e0\uff0c\u6211\u4eec\u6709\u65f6\u628a\u5b83\u62fc\u4f5c lusers \uff09\u3002 \u6211\u4eec\u610f\u8bc6\u5230\u8bb8\u591a\u4eba\u53ea\u662f\u60f3\u4f7f\u7528\u6211\u4eec\u5199\u7684\u8f6f\u4ef6\uff0c\u4ed6\u4eec\u5bf9\u5b66\u4e60\u6280\u672f\u7ec6\u8282\u6ca1\u6709\u5174\u8da3\u3002\u5bf9\u5927\u591a\u6570\u4eba\u800c\u8a00\uff0c\u7535\u8111\u53ea\u662f\u79cd\u5de5\u5177\uff0c\u662f\u79cd\u8fbe\u5230\u76ee\u7684\u7684\u624b\u6bb5\u800c\u5df2\u3002\u4ed6\u4eec\u6709\u81ea\u5df1\u7684\u751f\u6d3b\u5e76\u4e14\u6709\u66f4\u8981\u7d27\u7684\u4e8b\u8981\u505a\u3002\u6211\u4eec\u4e86\u89e3\u8fd9\u70b9\uff0c\u4e5f\u4ece\u4e0d\u6307\u671b\u6bcf\u4e2a\u4eba\u90fd\u5bf9\u8fd9\u4e9b\u8ba9\u6211\u4eec\u7740\u8ff7\u7684\u6280\u672f\u95ee\u9898\u611f\u5174\u8da3\u3002\u5c3d\u7ba1\u5982\u6b64\uff0c\u6211\u4eec\u56de\u7b54\u95ee\u9898\u7684\u98ce\u683c\u662f\u6307\u5411\u90a3\u4e9b\u771f\u6b63\u5bf9\u6b64\u6709\u5174\u8da3\u5e76\u613f\u610f\u4e3b\u52a8\u53c2\u4e0e\u89e3\u51b3\u95ee\u9898\u7684\u4eba\uff0c\u8fd9\u4e00\u70b9\u4e0d\u4f1a\u53d8\uff0c\u4e5f\u4e0d\u8be5\u53d8\u3002\u5982\u679c\u8fde\u8fd9\u90fd\u53d8\u4e86\uff0c\u6211\u4eec\u5c31\u662f\u5728\u964d\u4f4e\u505a\u81ea\u5df1\u6700\u64c5\u957f\u7684\u4e8b\u60c5\u4e0a\u7684\u6548\u7387\u3002 \u6211\u4eec\uff08\u5728\u5f88\u5927\u7a0b\u5ea6\u4e0a\uff09\u662f\u81ea\u613f\u7684\uff0c\u4ece\u7e41\u5fd9\u7684\u751f\u6d3b\u4e2d\u62bd\u51fa\u65f6\u95f4\u6765\u89e3\u7b54\u7591\u60d1\uff0c\u800c\u4e14\u65f6\u5e38\u88ab\u63d0\u95ee\u6df9\u6ca1\u3002\u6240\u4ee5\u6211\u4eec\u65e0\u60c5\u7684\u6ee4\u6389\u4e00\u4e9b\u8bdd\u9898\uff0c\u7279\u522b\u662f\u62cb\u5f03\u90a3\u4e9b\u770b\u8d77\u6765\u50cf\u5931\u8d25\u8005\u7684\u5bb6\u4f19\uff0c\u4ee5\u4fbf\u66f4\u9ad8\u6548\u7684\u5229\u7528\u65f6\u95f4\u6765\u56de\u7b54 \u8d62\u5bb6\uff08winner\uff09 \u7684\u95ee\u9898\u3002 \u5982\u679c\u4f60\u538c\u6076\u6211\u4eec\u7684\u6001\u5ea6\uff0c\u9ad8\u9ad8\u5728\u4e0a\uff0c\u6216\u8fc7\u4e8e\u50b2\u6162\uff0c\u4e0d\u59a8\u4e5f\u8bbe\u8eab\u5904\u5730\u60f3\u60f3\u3002\u6211\u4eec\u5e76\u6ca1\u6709\u8981\u6c42\u4f60\u5411\u6211\u4eec\u5c48\u670d \u2014\u2014 \u4e8b\u5b9e\u4e0a\uff0c\u6211\u4eec\u5927\u591a\u6570\u4eba\u975e\u5e38\u4e50\u610f\u4e0e\u4f60\u5e73\u7b49\u5730\u4ea4\u6d41\uff0c\u53ea\u8981\u4f60\u4ed8\u51fa\u5c0f\u5c0f\u52aa\u529b\u6765\u6ee1\u8db3\u57fa\u672c\u8981\u6c42\uff0c\u6211\u4eec\u5c31\u4f1a\u6b22\u8fce\u4f60\u52a0\u5165\u6211\u4eec\u7684\u6587\u5316\u3002\u4f46\u8ba9\u6211\u4eec\u5e2e\u52a9\u90a3\u4e9b\u4e0d\u613f\u610f\u5e2e\u52a9\u81ea\u5df1\u7684\u4eba\u662f\u6ca1\u6709\u6548\u7387\u7684\u3002\u65e0\u77e5\u6ca1\u6709\u5173\u7cfb\uff0c\u4f46\u88c5\u767d\u75f4\u5c31\u662f\u4e0d\u884c\u3002 \u6240\u4ee5\uff0c\u4f60\u4e0d\u5fc5\u5728\u6280\u672f\u4e0a\u5f88\u5728\u884c\u624d\u80fd\u5438\u5f15\u6211\u4eec\u7684\u6ce8\u610f\uff0c\u4f46\u4f60\u5fc5\u987b\u8868\u73b0\u51fa\u80fd\u5f15\u5bfc\u4f60\u53d8\u5f97\u5728\u884c\u7684\u7279\u8d28 -- \u673a\u654f\u3001\u6709\u60f3\u6cd5\u3001\u5584\u4e8e\u89c2\u5bdf\u3001\u4e50\u4e8e\u4e3b\u52a8\u53c2\u4e0e\u89e3\u51b3\u95ee\u9898\u3002\u5982\u679c\u4f60\u505a\u4e0d\u5230\u8fd9\u4e9b\u4f7f\u4f60\u4e0e\u4f17\u4e0d\u540c\u7684\u4e8b\u60c5\uff0c\u6211\u4eec\u5efa\u8bae\u4f60\u82b1\u70b9\u94b1\u627e\u5bb6\u5546\u4e1a\u516c\u53f8\u7b7e\u4e2a\u6280\u672f\u652f\u6301\u670d\u52a1\u5408\u540c\uff0c\u800c\u4e0d\u662f\u8981\u6c42\u9ed1\u5ba2\u4e2a\u4eba\u65e0\u507f\u5730\u5e2e\u52a9\u4f60\u3002 \u5982\u679c\u4f60\u51b3\u5b9a\u5411\u6211\u4eec\u6c42\u52a9\uff0c\u5f53\u7136\u4f60\u4e5f\u4e0d\u5e0c\u671b\u88ab\u89c6\u4e3a\u5931\u8d25\u8005\uff0c\u66f4\u4e0d\u613f\u6210\u4e3a\u5931\u8d25\u8005\u4e2d\u7684\u4e00\u5458\u3002\u80fd\u7acb\u523b\u5f97\u5230\u5feb\u901f\u5e76\u6709\u6548\u7b54\u6848\u7684\u6700\u597d\u65b9\u6cd5\uff0c\u5c31\u662f\u50cf\u8d62\u5bb6\u90a3\u6837\u63d0\u95ee -- \u806a\u660e\u3001\u81ea\u4fe1\u3001\u6709\u89e3\u51b3\u95ee\u9898\u7684\u601d\u8def\uff0c\u53ea\u662f\u5076\u5c14\u5728\u7279\u5b9a\u7684\u95ee\u9898\u4e0a\u9700\u8981\u83b7\u5f97\u4e00\u70b9\u5e2e\u52a9\u3002 \uff08\u6b22\u8fce\u5bf9\u672c\u6307\u5357\u63d0\u51fa\u6539\u8fdb\u610f\u89c1\u3002\u4f60\u53ef\u4ee5 email \u4f60\u7684\u5efa\u8bae\u81f3 esr@thyrsus.com \u6216 respond-auto@linuxmafia.com \u3002\u7136\u800c\u8bf7\u6ce8\u610f\uff0c\u672c\u6587\u5e76\u975e\u7f51\u7edc\u793c\u8282\u7684\u901a\u7528\u6307\u5357\uff0c\u800c\u6211\u4eec\u901a\u5e38\u4f1a\u62d2\u7edd\u65e0\u52a9\u4e8e\u5728\u6280\u672f\u8bba\u575b\u5f97\u5230\u6709\u7528\u7b54\u6848\u7684\u5efa\u8bae\uff09\u3002","title":"\u7b80\u4ecb"},{"location":"misc/how_to_ask_questions_the_smart_way/how_to_ask_questions_the_smart_way/#_2","text":"\u5728\u4f60\u51c6\u5907\u8981\u901a\u8fc7\u7535\u5b50\u90ae\u4ef6\u3001\u65b0\u95fb\u7fa4\u7ec4\u6216\u8005\u804a\u5929\u5ba4\u63d0\u51fa\u6280\u672f\u95ee\u9898\u524d\uff0c\u8bf7\u5148\u505a\u5230\u4ee5\u4e0b\u4e8b\u60c5\uff1a \u5c1d\u8bd5\u5728\u4f60\u51c6\u5907\u63d0\u95ee\u7684\u8bba\u575b\u7684\u65e7\u6587\u7ae0\u4e2d\u641c\u7d22\u7b54\u6848\u3002 \u5c1d\u8bd5\u4e0a\u7f51\u641c\u7d22\u4ee5\u627e\u5230\u7b54\u6848\u3002 \u5c1d\u8bd5\u9605\u8bfb\u624b\u518c\u4ee5\u627e\u5230\u7b54\u6848\u3002 \u5c1d\u8bd5\u9605\u8bfb\u5e38\u89c1\u95ee\u9898\u6587\u4ef6\uff08FAQ\uff09\u4ee5\u627e\u5230\u7b54\u6848\u3002 \u5c1d\u8bd5\u81ea\u5df1\u68c0\u67e5\u6216\u8bd5\u9a8c\u4ee5\u627e\u5230\u7b54\u6848\u3002 \u5411\u4f60\u8eab\u8fb9\u7684\u5f3a\u8005\u670b\u53cb\u6253\u542c\u4ee5\u627e\u5230\u7b54\u6848\u3002 \u5982\u679c\u4f60\u662f\u7a0b\u5e8f\u5f00\u53d1\u8005\uff0c\u8bf7\u5c1d\u8bd5\u9605\u8bfb\u6e90\u4ee3\u7801\u4ee5\u627e\u5230\u7b54\u6848\u3002 \u5f53\u4f60\u63d0\u51fa\u95ee\u9898\u7684\u65f6\u5019\uff0c\u8bf7\u5148\u8868\u660e\u4f60\u5df2\u7ecf\u505a\u4e86\u4e0a\u8ff0\u7684\u52aa\u529b\uff1b\u8fd9\u5c06\u6709\u52a9\u4e8e\u6811\u7acb\u4f60\u5e76\u4e0d\u662f\u4e00\u4e2a\u4e0d\u52b3\u800c\u83b7\u4e14\u6d6a\u8d39\u522b\u4eba\u7684\u65f6\u95f4\u7684\u63d0\u95ee\u8005\u3002\u5982\u679c\u4f60\u80fd\u4e00\u5e76\u8868\u8fbe\u5728\u505a\u4e86\u4e0a\u8ff0\u52aa\u529b\u7684\u8fc7\u7a0b\u4e2d\u6240\u5b66\u5230\u7684\u4e1c\u897f\u4f1a\u66f4\u597d\uff0c\u56e0\u4e3a\u6211\u4eec\u66f4\u4e50\u4e8e\u56de\u7b54\u90a3\u4e9b\u8868\u73b0\u51fa\u80fd\u4ece\u7b54\u6848\u4e2d\u5b66\u4e60\u7684\u4eba\u7684\u95ee\u9898\u3002 \u8fd0\u7528\u67d0\u4e9b\u7b56\u7565\uff0c\u6bd4\u5982\u5148\u7528 Google \u641c\u7d22\u4f60\u6240\u9047\u5230\u7684\u5404\u79cd\u9519\u8bef\u4fe1\u606f\uff08\u65e2\u641c\u7d22 Google \u8bba\u575b \uff0c\u4e5f\u641c\u7d22\u7f51\u9875\uff09\uff0c\u8fd9\u6837\u5f88\u53ef\u80fd\u76f4\u63a5\u5c31\u627e\u5230\u4e86\u80fd\u89e3\u51b3\u95ee\u9898\u7684\u6587\u4ef6\u6216\u90ae\u4ef6\u5217\u8868\u7ebf\u7d22\u3002\u5373\u4f7f\u6ca1\u6709\u7ed3\u679c\uff0c\u5728\u90ae\u4ef6\u5217\u8868\u6216\u65b0\u95fb\u7ec4\u5bfb\u6c42\u5e2e\u52a9\u65f6\u52a0\u4e0a\u4e00\u53e5 \u6211\u5728 Google \u4e2d\u641c\u8fc7\u4e0b\u5217\u53e5\u5b50\u4f46\u6ca1\u6709\u627e\u5230\u4ec0\u4e48\u6709\u7528\u7684\u4e1c\u897f \u4e5f\u662f\u4ef6\u597d\u4e8b\uff0c\u5373\u4f7f\u5b83\u53ea\u662f\u8868\u660e\u4e86\u641c\u7d22\u5f15\u64ce\u4e0d\u80fd\u63d0\u4f9b\u54ea\u4e9b\u5e2e\u52a9\u3002\u8fd9\u4e48\u505a\uff08\u52a0\u4e0a\u641c\u7d22\u8fc7\u7684\u5b57\u4e32\uff09\u4e5f\u8ba9\u9047\u5230\u76f8\u4f3c\u95ee\u9898\u7684\u5176\u4ed6\u4eba\u80fd\u88ab\u641c\u7d22\u5f15\u64ce\u5f15\u5bfc\u5230\u4f60\u7684\u63d0\u95ee\u6765\u3002 \u522b\u7740\u6025\uff0c\u4e0d\u8981\u6307\u671b\u51e0\u79d2\u949f\u7684 Google \u641c\u7d22\u5c31\u80fd\u89e3\u51b3\u4e00\u4e2a\u590d\u6742\u7684\u95ee\u9898\u3002\u5728\u5411\u4e13\u5bb6\u6c42\u52a9\u4e4b\u524d\uff0c\u518d\u9605\u8bfb\u4e00\u4e0b\u5e38\u89c1\u95ee\u9898\u6587\u4ef6\uff08FAQ\uff09\u3001\u653e\u8f7b\u677e\u3001\u5750\u8212\u670d\u4e00\u4e9b\uff0c\u518d\u82b1\u70b9\u65f6\u95f4\u601d\u8003\u4e00\u4e0b\u8fd9\u4e2a\u95ee\u9898\u3002\u76f8\u4fe1\u6211\u4eec\uff0c\u4ed6\u4eec\u80fd\u4ece\u4f60\u7684\u63d0\u95ee\u770b\u51fa\u4f60\u505a\u4e86\u591a\u5c11\u9605\u8bfb\u4e0e\u601d\u8003\uff0c\u5982\u679c\u4f60\u662f\u6709\u5907\u800c\u6765\uff0c\u5c06\u66f4\u6709\u53ef\u80fd\u5f97\u5230\u89e3\u7b54\u3002\u4e0d\u8981\u5c06\u6240\u6709\u95ee\u9898\u4e00\u80a1\u8111\u62cb\u51fa\uff0c\u53ea\u56e0\u4f60\u7684\u7b2c\u4e00\u6b21\u641c\u7d22\u6ca1\u6709\u627e\u5230\u7b54\u6848\uff08\u6216\u8005\u627e\u5230\u592a\u591a\u7b54\u6848\uff09\u3002 \u51c6\u5907\u597d\u4f60\u7684\u95ee\u9898\uff0c\u518d\u5c06\u95ee\u9898\u4ed4\u7ec6\u7684\u601d\u8003\u8fc7\u4e00\u904d\uff0c\u56e0\u4e3a\u8349\u7387\u7684\u53d1\u95ee\u53ea\u80fd\u5f97\u5230\u8349\u7387\u7684\u56de\u7b54\uff0c\u6216\u8005\u6839\u672c\u5f97\u4e0d\u5230\u4efb\u4f55\u7b54\u6848\u3002\u8d8a\u662f\u80fd\u8868\u73b0\u51fa\u5728\u5bfb\u6c42\u5e2e\u52a9\u524d\u4f60\u4e3a\u89e3\u51b3\u95ee\u9898\u6240\u4ed8\u51fa\u7684\u52aa\u529b\uff0c\u4f60\u8d8a\u6709\u53ef\u80fd\u5f97\u5230\u5b9e\u8d28\u6027\u7684\u5e2e\u52a9\u3002 \u5c0f\u5fc3\u522b\u95ee\u9519\u4e86\u95ee\u9898\u3002\u5982\u679c\u4f60\u7684\u95ee\u9898\u57fa\u4e8e\u9519\u8bef\u7684\u5047\u8bbe\uff0c\u67d0\u4e2a\u666e\u901a\u9ed1\u5ba2\uff08J. Random Hacker\uff09\u591a\u534a\u4f1a\u4e00\u8fb9\u5728\u5fc3\u91cc\u60f3\u7740\u8822\u95ee\u9898\u2026\uff0c \u4e00\u8fb9\u7528\u65e0\u610f\u4e49\u7684\u5b57\u9762\u89e3\u91ca\u6765\u7b54\u590d\u4f60\uff0c\u5e0c\u671b\u7740\u4f60\u4f1a\u4ece\u95ee\u9898\u7684\u56de\u7b54\uff08\u800c\u975e\u4f60\u60f3\u5f97\u5230\u7684\u7b54\u6848\uff09\u4e2d\u6c72\u53d6\u6559\u8bad\u3002 \u7edd\u4e0d\u8981\u81ea\u4ee5\u4e3a\u591f\u683c\u5f97\u5230\u7b54\u6848\uff0c\u4f60\u6ca1\u6709\uff1b\u4f60\u5e76\u6ca1\u6709\u3002\u6bd5\u7adf\u4f60\u6ca1\u6709\u4e3a\u8fd9\u79cd\u670d\u52a1\u652f\u4ed8\u4efb\u4f55\u62a5\u916c\u3002\u4f60\u5c06\u4f1a\u662f\u81ea\u5df1\u53bb\u6323\u5230\u4e00\u4e2a\u7b54\u6848\uff0c\u9760\u63d0\u51fa\u6709\u5185\u6db5\u7684\u3001\u6709\u8da3\u7684\u3001\u6709\u601d\u7ef4\u6fc0\u52b1\u4f5c\u7528\u7684\u95ee\u9898 \u2014\u2014 \u4e00\u4e2a\u6709\u6f5c\u529b\u80fd\u8d21\u732e\u793e\u533a\u7ecf\u9a8c\u7684\u95ee\u9898\uff0c\u800c\u4e0d\u4ec5\u4ec5\u662f\u88ab\u52a8\u7684\u4ece\u4ed6\u4eba\u5904\u7d22\u53d6\u77e5\u8bc6\u3002 \u53e6\u4e00\u65b9\u9762\uff0c\u8868\u660e\u4f60\u613f\u610f\u5728\u627e\u7b54\u6848\u7684\u8fc7\u7a0b\u4e2d\u505a\u70b9\u4ec0\u4e48\u662f\u4e00\u4e2a\u975e\u5e38\u597d\u7684\u5f00\u7aef\u3002\u8c01\u80fd\u7ed9\u70b9\u63d0\u793a\uff1f\u3001\u6211\u7684\u8fd9\u4e2a\u4f8b\u5b50\u91cc\u7f3a\u4e86\u4ec0\u4e48\uff1f\u4ee5\u53ca\u6211\u5e94\u8be5\u68c0\u67e5\u4ec0\u4e48\u5730\u65b9\u6bd4\u8bf7\u628a\u6211\u9700\u8981\u7684\u786e\u5207\u7684\u8fc7\u7a0b\u8d34\u51fa\u6765\u66f4\u5bb9\u6613\u5f97\u5230\u7b54\u590d\u3002\u56e0\u4e3a\u4f60\u8868\u73b0\u51fa\u53ea\u8981\u6709\u4eba\u80fd\u6307\u4e2a\u6b63\u786e\u65b9\u5411\uff0c\u4f60\u5c31\u6709\u5b8c\u6210\u5b83\u7684\u80fd\u529b\u548c\u51b3\u5fc3\u3002","title":"\u5728\u63d0\u95ee\u4e4b\u524d"},{"location":"misc/how_to_ask_questions_the_smart_way/how_to_ask_questions_the_smart_way/#_3","text":"","title":"\u5f53\u4f60\u63d0\u95ee\u65f6"},{"location":"misc/how_to_ask_questions_the_smart_way/how_to_ask_questions_the_smart_way/#_4","text":"\u5c0f\u5fc3\u9009\u62e9\u4f60\u8981\u63d0\u95ee\u7684\u573a\u5408\u3002\u5982\u679c\u4f60\u505a\u4e86\u4e0b\u8ff0\u7684\u4e8b\u60c5\uff0c\u4f60\u5f88\u53ef\u80fd\u88ab\u5ffd\u7565\u6389\u6216\u8005\u88ab\u770b\u4f5c\u5931\u8d25\u8005\uff1a \u5728\u4e0e\u4e3b\u9898\u4e0d\u5408\u7684\u8bba\u575b\u4e0a\u8d34\u51fa\u4f60\u7684\u95ee\u9898\u3002 \u5728\u63a2\u8ba8\u8fdb\u9636\u6280\u672f\u95ee\u9898\u7684\u8bba\u575b\u5f20\u8d34\u975e\u5e38\u521d\u7ea7\u7684\u95ee\u9898\uff1b\u53cd\u4e4b\u4ea6\u7136\u3002 \u5728\u592a\u591a\u7684\u4e0d\u540c\u65b0\u95fb\u7fa4\u7ec4\u4e0a\u91cd\u590d\u8f6c\u8d34\u540c\u6837\u7684\u95ee\u9898\uff08cross-post\uff09\u3002 \u5411\u65e2\u975e\u719f\u4eba\u4e5f\u6ca1\u6709\u4e49\u52a1\u89e3\u51b3\u4f60\u95ee\u9898\u7684\u4eba\u53d1\u9001\u79c1\u4eba\u7535\u90ae\u3002 \u9ed1\u5ba2\u4f1a\u5254\u9664\u6389\u90a3\u4e9b\u641e\u9519\u573a\u5408\u7684\u95ee\u9898\uff0c\u4ee5\u4fdd\u62a4\u4ed6\u4eec\u6c9f\u901a\u7684\u6e20\u9053\u4e0d\u88ab\u65e0\u5173\u7684\u4e1c\u897f\u6df9\u6ca1\u3002\u4f60\u4e0d\u4f1a\u60f3\u8ba9\u8fd9\u79cd\u4e8b\u53d1\u751f\u5728\u81ea\u5df1\u8eab\u4e0a\u7684\u3002 \u56e0\u6b64\uff0c\u7b2c\u4e00\u6b65\u662f\u627e\u5230\u5bf9\u7684\u8bba\u575b\u3002\u518d\u8bf4\u4e00\u6b21\uff0cGoogle \u548c\u5176\u5b83\u641c\u7d22\u5f15\u64ce\u8fd8\u662f\u4f60\u7684\u670b\u53cb\uff0c\u7528\u5b83\u4eec\u6765\u627e\u5230\u4e0e\u4f60\u906d\u9047\u5230\u56f0\u96be\u7684\u8f6f\u786c\u4ef6\u95ee\u9898\u6700\u76f8\u5173\u7684\u7f51\u7ad9\u3002\u901a\u5e38\u90a3\u513f\u90fd\u6709\u5e38\u89c1\u95ee\u9898\uff08FAQ\uff09\u3001\u90ae\u4ef6\u5217\u8868\u53ca\u76f8\u5173\u8bf4\u660e\u6587\u4ef6\u7684\u94fe\u63a5\u3002\u5982\u679c\u4f60\u7684\u52aa\u529b\uff08\u5305\u62ec\u9605\u8bfb FAQ\uff09\u90fd\u6ca1\u6709\u7ed3\u679c\uff0c\u7f51\u7ad9\u4e0a\u4e5f\u8bb8\u8fd8\u6709\u62a5\u544a Bug\uff08Bug-reporting\uff09\u7684\u6d41\u7a0b\u6216\u94fe\u63a5\uff0c\u5982\u679c\u662f\u8fd9\u6837\uff0c\u94fe\u8fc7\u53bb\u770b\u770b\u3002 \u5411\u964c\u751f\u7684\u4eba\u6216\u8bba\u575b\u53d1\u9001\u90ae\u4ef6\u6700\u53ef\u80fd\u662f\u98ce\u9669\u6700\u5927\u7684\u4e8b\u60c5\u3002\u4e3e\u4f8b\u6765\u8bf4\uff0c\u522b\u5047\u8bbe\u4e00\u4e2a\u63d0\u4f9b\u4e30\u5bcc\u5185\u5bb9\u7684\u7f51\u9875\u7684\u4f5c\u8005\u4f1a\u60f3\u5145\u5f53\u4f60\u7684\u514d\u8d39\u987e\u95ee\u3002\u4e0d\u8981\u5bf9\u4f60\u7684\u95ee\u9898\u662f\u5426\u4f1a\u53d7\u5230\u6b22\u8fce\u505a\u592a\u4e50\u89c2\u7684\u4f30\u8ba1 -- \u5982\u679c\u4f60\u4e0d\u786e\u5b9a\uff0c\u90a3\u5c31\u5411\u522b\u5904\u53d1\u9001\uff0c\u6216\u8005\u538b\u6839\u522b\u53d1\u3002 \u5728\u9009\u62e9\u8bba\u575b\u3001\u65b0\u95fb\u7fa4\u7ec4\u6216\u90ae\u4ef6\u5217\u8868\u65f6\uff0c\u522b\u592a\u76f8\u4fe1\u540d\u5b57\uff0c\u5148\u770b\u770b FAQ \u6216\u8005\u8bb8\u53ef\u4e66\u4ee5\u5f04\u6e05\u695a\u4f60\u7684\u95ee\u9898\u662f\u5426\u5207\u9898\u3002\u53d1\u6587\u524d\u5148\u7ffb\u7ffb\u5df2\u6709\u7684\u8bdd\u9898\uff0c\u8fd9\u6837\u53ef\u4ee5\u8ba9\u4f60\u611f\u53d7\u4e00\u4e0b\u90a3\u91cc\u7684\u6587\u5316\u3002\u4e8b\u5b9e\u4e0a\uff0c\u4e8b\u5148\u5728\u65b0\u95fb\u7ec4\u6216\u90ae\u4ef6\u5217\u8868\u7684\u5386\u53f2\u8bb0\u5f55\u4e2d\u641c\u7d22\u4e0e\u4f60\u95ee\u9898\u76f8\u5173\u7684\u5173\u952e\u8bcd\u662f\u4e2a\u6781\u597d\u7684\u4e3b\u610f\uff0c\u4e5f\u8bb8\u8fd9\u6837\u5c31\u627e\u5230\u7b54\u6848\u4e86\u3002\u5373\u4f7f\u6ca1\u6709\uff0c\u4e5f\u80fd\u5e2e\u52a9\u4f60\u5f52\u7eb3\u51fa\u66f4\u597d\u7684\u95ee\u9898\u3002 \u522b\u50cf\u673a\u5173\u67aa\u4f3c\u7684\u4e00\u6b21\"\u626b\u5c04\"\u6240\u6709\u7684\u5e2e\u52a9\u6e20\u9053\uff0c\u8fd9\u5c31\u50cf\u5927\u558a\u5927\u53eb\u4e00\u6837\u4f1a\u4f7f\u4eba\u4e0d\u5feb\u3002\u8981\u4e00\u4e2a\u4e00\u4e2a\u5730\u6765\u3002 \u641e\u6e05\u695a\u4f60\u7684\u4e3b\u9898\uff01\u6700\u5178\u578b\u7684\u9519\u8bef\u4e4b\u4e00\u662f\u5728\u67d0\u79cd\u81f4\u529b\u4e8e\u8de8\u5e73\u53f0\u53ef\u79fb\u690d\u7684\u8bed\u8a00\u3001\u5957\u4ef6\u6216\u5de5\u5177\u7684\u8bba\u575b\u4e2d\u63d0\u5173\u4e8e Unix \u6216 Windows \u64cd\u4f5c\u7cfb\u7edf\u7a0b\u5e8f\u754c\u9762\u7684\u95ee\u9898\u3002\u5982\u679c\u4f60\u4e0d\u660e\u767d\u4e3a\u4ec0\u4e48\u8fd9\u662f\u5927\u9519\uff0c\u6700\u597d\u5728\u641e\u6e05\u695a\u8fd9\u4e4b\u95f4\u5dee\u5f02\u4e4b\u524d\u4ec0\u4e48\u4e5f\u522b\u95ee\u3002 \u4e00\u822c\u6765\u8bf4\uff0c\u5728\u4ed4\u7ec6\u6311\u9009\u7684\u516c\u5171\u8bba\u575b\u4e2d\u63d0\u95ee\uff0c\u4f1a\u6bd4\u5728\u79c1\u6709\u8bba\u575b\u4e2d\u63d0\u540c\u6837\u7684\u95ee\u9898\u66f4\u5bb9\u6613\u5f97\u5230\u6709\u7528\u7684\u56de\u7b54\u3002\u6709\u51e0\u4e2a\u7406\u7531\u53ef\u4ee5\u652f\u6301\u8fd9\u70b9\uff0c\u4e00\u662f\u770b\u6f5c\u5728\u7684\u56de\u590d\u8005\u6709\u591a\u5c11\uff0c\u4e8c\u662f\u770b\u89c2\u4f17\u6709\u591a\u5c11\u3002\u9ed1\u5ba2\u8f83\u613f\u610f\u56de\u7b54\u90a3\u4e9b\u80fd\u5e2e\u52a9\u5230\u8bb8\u591a\u4eba\u7684\u95ee\u9898\u3002 \u53ef\u4ee5\u7406\u89e3\u7684\u662f\uff0c\u8001\u7ec3\u7684\u9ed1\u5ba2\u548c\u4e00\u4e9b\u70ed\u95e8\u8f6f\u4ef6\u7684\u4f5c\u8005\u6b63\u5728\u63a5\u53d7\u8fc7\u591a\u7684\u9519\u53d1\u4fe1\u606f\u3002\u5c31\u50cf\u90a3\u6839\u6700\u540e\u538b\u57ae\u9a86\u9a7c\u80cc\u7684\u7a3b\u8349\u4e00\u6837\uff0c\u4f60\u7684\u52a0\u5165\u4e5f\u6709\u53ef\u80fd\u4f7f\u60c5\u51b5\u8d70\u5411\u6781\u7aef \u2014\u2014 \u5df2\u7ecf\u597d\u51e0\u6b21\u4e86\uff0c\u4e00\u4e9b\u70ed\u95e8\u8f6f\u4ef6\u7684\u4f5c\u8005\u4ece\u81ea\u5df1\u8f6f\u4ef6\u7684\u652f\u6301\u4e2d\u62bd\u8eab\u51fa\u6765\uff0c\u56e0\u4e3a\u4f34\u968f\u800c\u6765\u6d8c\u5165\u5176\u79c1\u4eba\u90ae\u7bb1\u7684\u65e0\u7528\u90ae\u4ef6\u53d8\u5f97\u65e0\u6cd5\u5fcd\u53d7\u3002","title":"\u614e\u9009\u63d0\u95ee\u7684\u8bba\u575b"},{"location":"misc/how_to_ask_questions_the_smart_way/how_to_ask_questions_the_smart_way/#stack-overflow","text":"\u641c\u7d22\uff0c\u7136\u540e \u5728 Stack Exchange \u95ee\u3002 \u8fd1\u5e74\u6765\uff0cStack Exchange community \u793e\u533a\u5df2\u7ecf\u6210\u4e3a\u56de\u7b54\u6280\u672f\u53ca\u5176\u4ed6\u95ee\u9898\u7684\u4e3b\u8981\u6e20\u9053\uff0c\u5c24\u5176\u662f\u90a3\u4e9b\u5f00\u653e\u6e90\u7801\u7684\u9879\u76ee\u3002 \u56e0\u4e3a Google \u7d22\u5f15\u662f\u5373\u65f6\u7684\uff0c\u5728\u770b Stack Exchange \u4e4b\u524d\u5148\u5728 Google \u641c\u7d22\u3002\u6709\u5f88\u9ad8\u7684\u673a\u7387\u67d0\u4eba\u5df2\u7ecf\u95ee\u4e86\u4e00\u4e2a\u7c7b\u4f3c\u7684\u95ee\u9898\uff0c\u800c\u4e14 Stack Exchange \u7f51\u7ad9\u4eec\u5f80\u5f80\u4f1a\u662f\u641c\u7d22\u7ed3\u679c\u4e2d\u6700\u524d\u9762\u51e0\u4e2a\u3002\u5982\u679c\u4f60\u5728 Google \u4e0a\u6ca1\u6709\u627e\u5230\u4efb\u4f55\u7b54\u6848\uff0c\u4f60\u518d\u5230\u7279\u5b9a\u76f8\u5173\u4e3b\u9898\u7684\u7f51\u7ad9\u53bb\u627e\u3002\u7528\u6807\u7b7e\uff08Tag\uff09\u641c\u7d22\u80fd\u8ba9\u4f60\u66f4\u7f29\u5c0f\u4f60\u7684\u641c\u7d22\u7ed3\u679c\u3002 Stack Exchange \u5df2\u7ecf\u6210\u957f\u5230 \u8d85\u8fc7\u4e00\u767e\u4e2a\u7f51\u7ad9 \uff0c\u4ee5\u4e0b\u662f\u6700\u5e38\u7528\u7684\u51e0\u4e2a\u7ad9\uff1a Super User \u662f\u95ee\u4e00\u4e9b\u901a\u7528\u7684\u7535\u8111\u95ee\u9898\uff0c\u5982\u679c\u4f60\u7684\u95ee\u9898\u8ddf\u4ee3\u7801\u6216\u662f\u5199\u7a0b\u5e8f\u65e0\u5173\uff0c\u53ea\u662f\u4e00\u4e9b\u7f51\u7edc\u8fde\u7ebf\u4e4b\u7c7b\u7684\uff0c\u8bf7\u5230\u8fd9\u91cc\u3002 Stack Overflow \u662f\u95ee\u5199\u7a0b\u5e8f\u6709\u5173\u7684\u95ee\u9898\u3002 Server Fault \u662f\u95ee\u670d\u52a1\u5668\u548c\u7f51\u7ba1\u76f8\u5173\u7684\u95ee\u9898\u3002","title":"Stack Overflow"},{"location":"misc/how_to_ask_questions_the_smart_way/how_to_ask_questions_the_smart_way/#irc","text":"\u672c\u5730\u7684\u4f7f\u7528\u8005\u7fa4\u7ec4\uff08user group\uff09\uff0c\u6216\u8005\u4f60\u6240\u7528\u7684 Linux \u53d1\u884c\u7248\u672c\u4e5f\u8bb8\u6b63\u5728\u5ba3\u4f20\u4ed6\u4eec\u7684\u7f51\u9875\u8bba\u575b\u6216 IRC \u9891\u9053\uff0c\u5e76\u63d0\u4f9b\u65b0\u624b\u5e2e\u52a9\uff08\u5728\u4e00\u4e9b\u975e\u82f1\u8bed\u56fd\u5bb6\uff0c\u65b0\u624b\u8bba\u575b\u5f88\u53ef\u80fd\u8fd8\u662f\u90ae\u4ef6\u5217\u8868\uff09\uff0c \u8fd9\u4e9b\u5730\u65b9\u662f\u5f00\u59cb\u63d0\u95ee\u7684\u597d\u9996\u9009\uff0c\u7279\u522b\u662f\u5f53\u4f60\u89c9\u5f97\u9047\u5230\u7684\u4e5f\u8bb8\u53ea\u662f\u76f8\u5bf9\u7b80\u5355\u6216\u8005\u5f88\u666e\u901a\u7684\u95ee\u9898\u65f6\u3002\u6709\u5e7f\u544a\u8d5e\u52a9\u7684 IRC \u9891\u9053\u662f\u516c\u5f00\u6b22\u8fce\u63d0\u95ee\u7684\u5730\u65b9\uff0c\u901a\u5e38\u53ef\u4ee5\u5373\u65f6\u5f97\u5230\u56de\u5e94\u3002 \u4e8b\u5b9e\u4e0a\uff0c\u5982\u679c\u7a0b\u5e8f\u51fa\u7684\u95ee\u9898\u53ea\u53d1\u751f\u5728\u7279\u5b9a Linux \u53d1\u884c\u7248\u63d0\u4f9b\u7684\u7248\u672c\uff08\u8fd9\u5f88\u5e38\u89c1\uff09\uff0c\u6700\u597d\u5148\u53bb\u8be5\u53d1\u884c\u7248\u7684\u8bba\u575b\u6216\u90ae\u4ef6\u5217\u8868\u4e2d\u63d0\u95ee\uff0c\u518d\u5230\u7a0b\u5e8f\u672c\u8eab\u7684\u8bba\u575b\u6216\u90ae\u4ef6\u5217\u8868\u63d0\u95ee\u3002\uff08\u5426\u5219\uff09\u8be5\u9879\u76ee\u7684\u9ed1\u5ba2\u53ef\u80fd\u4ec5\u4ec5\u56de\u590d \"\u7528\u6211\u4eec\u7684\u7248\u672c\"\u3002 \u5728\u4efb\u4f55\u8bba\u575b\u53d1\u6587\u4ee5\u524d\uff0c\u5148\u786e\u8ba4\u4e00\u4e0b\u6709\u6ca1\u6709\u641c\u7d22\u529f\u80fd\u3002\u5982\u679c\u6709\uff0c\u5c31\u8bd5\u7740\u641c\u7d22\u4e00\u4e0b\u95ee\u9898\u7684\u51e0\u4e2a\u5173\u952e\u8bcd\uff0c\u4e5f\u8bb8\u8fd9\u4f1a\u6709\u5e2e\u52a9\u3002\u5982\u679c\u5728\u6b64\u4e4b\u524d\u4f60\u5df2\u505a\u8fc7\u901a\u7528\u7684\u7f51\u9875\u641c\u7d22\uff08\u4f60\u4e5f\u8be5\u8fd9\u6837\u505a\uff09\uff0c\u8fd8\u662f\u518d\u641c\u7d22\u4e00\u4e0b\u8bba\u575b\uff0c\u641c\u7d22\u5f15\u64ce\u6709\u53ef\u80fd\u6ca1\u6765\u5f97\u53ca\u7d22\u5f15\u6b64\u8bba\u575b\u7684\u5168\u90e8\u5185\u5bb9\u3002 \u901a\u8fc7\u8bba\u575b\u6216 IRC \u9891\u9053\u6765\u63d0\u4f9b\u4f7f\u7528\u8005\u652f\u6301\u670d\u52a1\u6709\u589e\u957f\u7684\u8d8b\u52bf\uff0c\u7535\u5b50\u90ae\u4ef6\u5219\u5927\u591a\u4e3a\u9879\u76ee\u5f00\u53d1\u8005\u95f4\u7684\u4ea4\u6d41\u800c\u4fdd\u7559\u3002\u6240\u4ee5\u6700\u597d\u5148\u5728\u8bba\u575b\u6216 IRC \u4e2d\u5bfb\u6c42\u4e0e\u8be5\u9879\u76ee\u76f8\u5173\u7684\u534f\u52a9\u3002 \u5728\u4f7f\u7528 IRC \u7684\u65f6\u5019\uff0c\u9996\u5148\u6700\u597d\u4e0d\u8981\u53d1\u5e03\u5f88\u957f\u7684\u95ee\u9898\u63cf\u8ff0\uff0c\u6709\u4e9b\u4eba\u79f0\u4e4b\u4e3a\u9891\u9053\u6d2a\u6c34\u3002\u6700\u597d\u901a\u8fc7\u4e00\u53e5\u8bdd\u7684\u95ee\u9898\u63cf\u8ff0\u6765\u5f00\u59cb\u804a\u5929\u3002","title":"\u7f51\u7ad9\u548c IRC \u8bba\u575b"},{"location":"misc/how_to_ask_questions_the_smart_way/how_to_ask_questions_the_smart_way/#_5","text":"\u5f53\u67d0\u4e2a\u9879\u76ee\u63d0\u4f9b\u5f00\u53d1\u8005\u90ae\u4ef6\u5217\u8868\u65f6\uff0c\u8981\u5411\u5217\u8868\u800c\u4e0d\u662f\u5176\u4e2d\u7684\u4e2a\u522b\u6210\u5458\u63d0\u95ee\uff0c\u5373\u4f7f\u4f60\u786e\u4fe1\u4ed6\u80fd\u6700\u597d\u5730\u56de\u7b54\u4f60\u7684\u95ee\u9898\u3002\u67e5\u4e00\u67e5\u9879\u76ee\u7684\u6587\u4ef6\u548c\u9996\u9875\uff0c\u627e\u5230\u9879\u76ee\u7684\u90ae\u4ef6\u5217\u8868\u5e76\u4f7f\u7528\u5b83\u3002\u6709\u51e0\u4e2a\u5f88\u597d\u7684\u7406\u7531\u652f\u6301\u6211\u4eec\u91c7\u7528\u8fd9\u79cd\u529e\u6cd5\uff1a \u4efb\u4f55\u597d\u5230\u9700\u8981\u5411\u4e2a\u522b\u5f00\u53d1\u8005\u63d0\u51fa\u7684\u95ee\u9898\uff0c\u4e5f\u5c06\u5bf9\u6574\u4e2a\u9879\u76ee\u7fa4\u7ec4\u6709\u76ca\u3002\u53cd\u4e4b\uff0c\u5982\u679c\u4f60\u8ba4\u4e3a\u81ea\u5df1\u7684\u95ee\u9898\u5bf9\u6574\u4e2a\u9879\u76ee\u7fa4\u7ec4\u6765\u8bf4\u592a\u611a\u8822\uff0c\u4e5f\u4e0d\u80fd\u6210\u4e3a\u9a9a\u6270\u4e2a\u522b\u5f00\u53d1\u8005\u7684\u7406\u7531\u3002 \u5411\u5217\u8868\u63d0\u95ee\u53ef\u4ee5\u5206\u6563\u5f00\u53d1\u8005\u7684\u8d1f\u62c5\uff0c\u4e2a\u522b\u5f00\u53d1\u8005\uff08\u5c24\u5176\u662f\u9879\u76ee\u9886\u5bfc\u4eba\uff09\u4e5f\u8bb8\u592a\u5fd9\u4ee5\u81f3\u4e8e\u6ca1\u6cd5\u56de\u7b54\u4f60\u7684\u95ee\u9898\u3002 \u5927\u591a\u6570\u90ae\u4ef6\u5217\u8868\u90fd\u4f1a\u88ab\u5b58\u6863\uff0c\u90a3\u4e9b\u88ab\u5b58\u6863\u7684\u5185\u5bb9\u5c06\u88ab\u641c\u7d22\u5f15\u64ce\u7d22\u5f15\u3002\u5982\u679c\u4f60\u5411\u5217\u8868\u63d0\u95ee\u5e76\u5f97\u5230\u89e3\u7b54\uff0c\u5c06\u6765\u5176\u5b83\u4eba\u53ef\u4ee5\u901a\u8fc7\u7f51\u9875\u641c\u7d22\u627e\u5230\u4f60\u7684\u95ee\u9898\u548c\u7b54\u6848\uff0c\u4e5f\u5c31\u4e0d\u7528\u518d\u6b21\u53d1\u95ee\u4e86\u3002 \u5982\u679c\u67d0\u4e9b\u95ee\u9898\u7ecf\u5e38\u88ab\u95ee\u5230\uff0c\u5f00\u53d1\u8005\u53ef\u4ee5\u5229\u7528\u6b64\u4fe1\u606f\u6765\u6539\u8fdb\u8bf4\u660e\u6587\u4ef6\u6216\u8f6f\u4ef6\u672c\u8eab\uff0c\u4ee5\u4f7f\u5176\u66f4\u6e05\u695a\u3002\u5982\u679c\u53ea\u662f\u79c1\u4e0b\u63d0\u95ee\uff0c\u5c31\u6ca1\u6709\u4eba\u80fd\u770b\u5230\u6700\u5e38\u89c1\u95ee\u9898\u7684\u5b8c\u6574\u573a\u666f\u3002 \u5982\u679c\u4e00\u4e2a\u9879\u76ee\u65e2\u6709\"\u4f7f\u7528\u8005\" \u4e5f\u6709\"\u5f00\u53d1\u8005\"\uff08\u6216\"\u9ed1\u5ba2\"\uff09\u90ae\u4ef6\u5217\u8868\u6216\u8bba\u575b\uff0c\u800c\u4f60\u53c8\u4e0d\u4f1a\u52a8\u5230\u90a3\u4e9b\u6e90\u4ee3\u7801\uff0c\u90a3\u4e48\u5c31\u5411\"\u4f7f\u7528\u8005\"\u5217\u8868\u6216\u8bba\u575b\u63d0\u95ee\u3002\u4e0d\u8981\u5047\u8bbe\u81ea\u5df1\u4f1a\u5728\u5f00\u53d1\u8005\u5217\u8868\u4e2d\u53d7\u5230\u6b22\u8fce\uff0c\u90a3\u4e9b\u4eba\u591a\u534a\u4f1a\u5c06\u4f60\u7684\u63d0\u95ee\u89c6\u4e3a\u5e72\u6270\u4ed6\u4eec\u5f00\u53d1\u7684\u566a\u97f3\u3002 \u7136\u800c\uff0c\u5982\u679c\u4f60 \u786e\u4fe1 \u4f60\u7684\u95ee\u9898\u5f88\u7279\u522b\uff0c\u800c\u4e14\u5728\"\u4f7f\u7528\u8005\" \u5217\u8868\u6216\u8bba\u575b\u4e2d\u51e0\u5929\u90fd\u6ca1\u6709\u56de\u590d\uff0c\u53ef\u4ee5\u8bd5\u8bd5\u524d\u5f80\"\u5f00\u53d1\u8005\"\u5217\u8868\u6216\u8bba\u575b\u53d1\u95ee\u3002\u5efa\u8bae\u4f60\u5728\u5f20\u8d34\u524d\u6700\u597d\u5148\u6697\u5730\u91cc\u89c2\u5bdf\u51e0\u5929\u4ee5\u4e86\u89e3\u90a3\u91cc\u7684\u884c\u4e8b\u65b9\u5f0f\uff08\u4e8b\u5b9e\u4e0a\u8fd9\u662f\u53c2\u4e0e\u4efb\u4f55\u79c1\u6709\u6216\u534a\u79c1\u6709\u5217\u8868\u7684\u597d\u4e3b\u610f\uff09 \u5982\u679c\u4f60\u627e\u4e0d\u5230\u4e00\u4e2a\u9879\u76ee\u7684\u90ae\u4ef6\u5217\u8868\uff0c\u800c\u53ea\u80fd\u67e5\u5230\u9879\u76ee\u7ef4\u62a4\u8005\u7684\u7535\u5b50\u90ae\u4ef6\u5730\u5740\uff0c\u5c3d\u7ba1\u5411\u4ed6\u53d1\u4fe1\u3002\u5373\u4f7f\u662f\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u4e5f\u522b\u5047\u8bbe\uff08\u9879\u76ee\uff09\u90ae\u4ef6\u5217\u8868\u4e0d\u5b58\u5728\u3002\u5728\u4f60\u7684\u7535\u5b50\u90ae\u4ef6\u4e2d\uff0c\u8bf7\u9648\u8ff0\u4f60\u5df2\u7ecf\u8bd5\u8fc7\u4f46\u6ca1\u6709\u627e\u5230\u5408\u9002\u7684\u90ae\u4ef6\u5217\u8868\uff0c\u4e5f\u63d0\u53ca\u4f60\u4e0d\u53cd\u5bf9\u5c06\u81ea\u5df1\u7684\u90ae\u4ef6\u8f6c\u53d1\u7ed9\u4ed6\u4eba\uff08\u8bb8\u591a\u4eba\u8ba4\u4e3a\uff0c\u5373\u4f7f\u6ca1\u4ec0\u4e48\u79d8\u5bc6\uff0c\u79c1\u4eba\u7535\u5b50\u90ae\u4ef6\u4e5f\u4e0d\u5e94\u8be5\u88ab\u516c\u5f00\u3002\u901a\u8fc7\u5141\u8bb8\u5c06\u4f60\u7684\u7535\u5b50\u90ae\u4ef6\u8f6c\u53d1\u4ed6\u4eba\uff0c\u4f60\u7ed9\u4e86\u76f8\u5e94\u4eba\u5458\u5904\u7f6e\u4f60\u90ae\u4ef6\u7684\u9009\u62e9\uff09\u3002","title":"\u7b2c\u4e8c\u6b65\uff0c\u4f7f\u7528\u9879\u76ee\u90ae\u4ef6\u5217\u8868"},{"location":"misc/how_to_ask_questions_the_smart_way/how_to_ask_questions_the_smart_way/#_6","text":"\u5728\u90ae\u4ef6\u5217\u8868\u3001\u65b0\u95fb\u7fa4\u7ec4\u6216\u8bba\u575b\u4e2d\uff0c\u5927\u7ea6 50 \u5b57\u4ee5\u5185\u7684\u6807\u9898\u662f\u6293\u4f4f\u8d44\u6df1\u4e13\u5bb6\u6ce8\u610f\u529b\u7684\u597d\u673a\u4f1a\u3002\u522b\u7528\u558b\u558b\u4e0d\u4f11\u7684 \u5e2e\u5e2e\u5fd9 \u3001 \u8dea\u6c42 \u3001 \u6025 \uff08\u66f4\u522b\u8bf4 \u6551\u547d\u554a\uff01\uff01\uff01\uff01 \u8fd9\u6837\u8ba9\u4eba\u53cd\u611f\u7684\u8bdd\uff0c\u7528\u8fd9\u79cd\u6807\u9898\u4f1a\u88ab\u6761\u4ef6\u53cd\u5c04\u5f0f\u5730\u5ffd\u7565\uff09\u6765\u6d6a\u8d39\u8fd9\u4e2a\u673a\u4f1a\u3002\u4e0d\u8981\u5984\u60f3\u7528\u4f60\u7684\u75db\u82e6\u7a0b\u5ea6\u6765\u6253\u52a8\u6211\u4eec\uff0c\u800c\u5e94\u8be5\u662f\u5728\u8fd9\u70b9\u7a7a\u95f4\u4e2d\u4f7f\u7528\u6781\u7b80\u5355\u627c\u8981\u7684\u63cf\u8ff0\u65b9\u5f0f\u6765\u63d0\u51fa\u95ee\u9898\u3002 \u4e00\u4e2a\u597d\u6807\u9898\u8303\u4f8b\u662f \u76ee\u6807 \u2014\u2014 \u5dee\u5f02\u5f0f \u7684\u63cf\u8ff0\uff0c\u8bb8\u591a\u6280\u672f\u652f\u6301\u7ec4\u7ec7\u5c31\u662f\u8fd9\u6837\u505a\u7684\u3002\u5728\u76ee\u6807\u90e8\u5206\u6307\u51fa\u662f\u54ea\u4e00\u4e2a\u6216\u54ea\u4e00\u7ec4\u4e1c\u897f\u6709\u95ee\u9898\uff0c\u5728 \u5dee\u5f02 \u90e8\u5206\u5219\u63cf\u8ff0\u4e0e\u671f\u671b\u7684\u884c\u4e3a\u4e0d\u4e00\u81f4\u7684\u5730\u65b9\u3002 \u8822\u95ee\u9898\uff1a\u6551\u547d\u554a\uff01\u6211\u7684\u7b14\u8bb0\u672c\u7535\u8111\u4e0d\u80fd\u6b63\u5e38\u663e\u793a\u4e86\uff01 \u806a\u660e\u95ee\u9898\uff1aX.org 6.8.1 \u7684\u9f20\u6807\u5149\u6807\u4f1a\u53d8\u5f62\uff0c\u67d0\u724c\u663e\u5361 MV1005 \u82af\u7247\u7ec4\u3002 \u66f4\u806a\u660e\u95ee\u9898\uff1aX.org 6.8.1 \u7684\u9f20\u6807\u5149\u6807\uff0c\u5728\u67d0\u724c\u663e\u5361 MV1005 \u82af\u7247\u7ec4\u73af\u5883\u4e0b - \u4f1a\u53d8\u5f62\u3002 \u7f16\u5199 \u76ee\u6807 \u2014\u2014 \u5dee\u5f02 \u5f0f\u63cf\u8ff0\u7684\u8fc7\u7a0b\u6709\u52a9\u4e8e\u4f60\u7ec4\u7ec7\u5bf9\u95ee\u9898\u7684\u7ec6\u81f4\u601d\u8003\u3002\u662f\u4ec0\u4e48\u88ab\u5f71\u54cd\u4e86\uff1f \u4ec5\u4ec5\u662f\u9f20\u6807\u5149\u6807\u6216\u8005\u8fd8\u6709\u5176\u5b83\u56fe\u5f62\uff1f\u53ea\u5728 X.org \u7684 X \u7248\u4e2d\u51fa\u73b0\uff1f\u6216\u53ea\u662f\u51fa\u73b0\u5728 6.8.1 \u7248\u4e2d\uff1f \u662f\u9488\u5bf9\u67d0\u724c\u663e\u5361\u82af\u7247\u7ec4\uff1f\u6216\u8005\u53ea\u662f\u5176\u4e2d\u7684 MV1005 \u578b\u53f7\uff1f \u4e00\u4e2a\u9ed1\u5ba2\u53ea\u9700\u7784\u4e00\u773c\u5c31\u80fd\u591f\u7acb\u5373\u660e\u767d\u4f60\u7684\u73af\u5883\u548c\u4f60\u9047\u5230\u7684\u95ee\u9898\u3002 \u603b\u800c\u8a00\u4e4b\uff0c\u8bf7\u60f3\u50cf\u4e00\u4e0b\u4f60\u6b63\u5728\u4e00\u4e2a\u53ea\u663e\u793a\u6807\u9898\u7684\u5b58\u6863\u8ba8\u8bba\u4e32\uff08Thread\uff09\u7d22\u5f15\u4e2d\u67e5\u5bfb\u3002\u8ba9\u4f60\u7684\u6807\u9898\u66f4\u597d\u5730\u53cd\u6620\u95ee\u9898\uff0c\u53ef\u4f7f\u4e0b\u4e00\u4e2a\u641c\u7d22\u7c7b\u4f3c\u95ee\u9898\u7684\u4eba\u80fd\u591f\u5173\u6ce8\u8fd9\u4e2a\u8ba8\u8bba\u4e32\uff0c\u800c\u4e0d\u7528\u518d\u6b21\u63d0\u95ee\u76f8\u540c\u7684\u95ee\u9898\u3002 \u5982\u679c\u4f60\u60f3\u5728\u56de\u590d\u4e2d\u63d0\u51fa\u95ee\u9898\uff0c\u8bb0\u5f97\u8981\u4fee\u6539\u5185\u5bb9\u6807\u9898\uff0c\u4ee5\u8868\u660e\u4f60\u662f\u5728\u95ee\u4e00\u4e2a\u95ee\u9898\uff0c \u4e00\u4e2a\u770b\u8d77\u6765\u50cf Re: \u6d4b\u8bd5 \u6216\u8005 Re: \u65b0 bug \u7684\u6807\u9898\u5f88\u96be\u5f15\u8d77\u8db3\u591f\u91cd\u89c6\u3002\u53e6\u5916\uff0c\u5728\u4e0d\u5f71\u54cd\u8fde\u8d2f\u6027\u4e4b\u4e0b\uff0c\u9002\u5f53\u5f15\u7528\u5e76\u5220\u51cf\u524d\u6587\u7684\u5185\u5bb9\uff0c\u80fd\u7ed9\u65b0\u6765\u7684\u8bfb\u8005\u7559\u4e0b\u7ebf\u7d22\u3002 \u5bf9\u4e8e\u8ba8\u8bba\u4e32\uff0c\u4e0d\u8981\u76f4\u63a5\u70b9\u51fb\u56de\u590d\u6765\u5f00\u59cb\u4e00\u4e2a\u5168\u65b0\u7684\u8ba8\u8bba\u4e32\uff0c\u8fd9\u5c06\u9650\u5236\u4f60\u7684\u89c2\u4f17\u3002\u56e0\u4e3a\u6709\u4e9b\u90ae\u4ef6\u9605\u8bfb\u7a0b\u5e8f\uff0c\u6bd4\u5982 mutt \uff0c\u5141\u8bb8\u4f7f\u7528\u8005\u6309\u8ba8\u8bba\u4e32\u6392\u5e8f\u5e76\u901a\u8fc7\u6298\u53e0\u8ba8\u8bba\u4e32\u6765\u9690\u85cf\u6d88\u606f\uff0c\u8fd9\u6837\u505a\u7684\u4eba\u6c38\u8fdc\u770b\u4e0d\u5230\u4f60\u53d1\u7684\u6d88\u606f\u3002 \u4ec5\u4ec5\u6539\u53d8\u6807\u9898\u8fd8\u4e0d\u591f\u3002mutt \u548c\u5176\u5b83\u4e00\u4e9b\u90ae\u4ef6\u9605\u8bfb\u7a0b\u5e8f\u8fd8\u4f1a\u68c0\u67e5\u90ae\u4ef6\u6807\u9898\u4ee5\u5916\u7684\u5176\u5b83\u4fe1\u606f\uff0c\u4ee5\u4fbf\u4e3a\u5176\u6307\u5b9a\u8ba8\u8bba\u4e32\u3002\u6240\u4ee5\u5b81\u53ef\u53d1\u4e00\u4e2a\u5168\u65b0\u7684\u90ae\u4ef6\u3002 \u5728\u7f51\u9875\u8bba\u575b\u4e0a\uff0c\u597d\u7684\u63d0\u95ee\u65b9\u5f0f\u7a0d\u6709\u4e0d\u540c\uff0c\u56e0\u4e3a\u8ba8\u8bba\u4e32\u4e0e\u7279\u5b9a\u7684\u4fe1\u606f\u7d27\u5bc6\u7ed3\u5408\uff0c\u5e76\u4e14\u901a\u5e38\u5728\u8ba8\u8bba\u4e32\u5916\u5c31\u770b\u4e0d\u5230\u91cc\u9762\u7684\u5185\u5bb9\uff0c\u6545\u901a\u8fc7\u56de\u590d\u63d0\u95ee\uff0c\u800c\u975e\u6539\u53d8\u6807\u9898\u662f\u53ef\u63a5\u53d7\u7684\u3002\u4e0d\u662f\u6240\u6709\u8bba\u575b\u90fd\u5141\u8bb8\u5728\u56de\u590d\u4e2d\u51fa\u73b0\u5206\u79bb\u7684\u6807\u9898\uff0c\u800c\u4e14\u8fd9\u6837\u505a\u4e86\u57fa\u672c\u4e0a\u6ca1\u6709\u4eba\u4f1a\u53bb\u770b\u3002\u4e0d\u8fc7\uff0c\u901a\u8fc7\u56de\u590d\u63d0\u95ee\uff0c\u8fd9\u672c\u8eab\u5c31\u662f\u66a7\u6627\u7684\u505a\u6cd5\uff0c\u56e0\u4e3a\u5b83\u4eec\u53ea\u4f1a\u88ab\u6b63\u5728\u67e5\u770b\u8be5\u6807\u9898\u7684\u4eba\u8bfb\u5230\u3002\u6240\u4ee5\uff0c\u9664\u975e\u4f60\u53ea\u60f3\u5728\u8be5\u8ba8\u8bba\u4e32\u5f53\u524d\u6d3b\u8dc3\u7684\u4eba\u7fa4\u4e2d\u63d0\u95ee\uff0c\u4e0d\u7136\u8fd8\u662f\u53e6\u8d77\u7089\u7076\u6bd4\u8f83\u597d\u3002","title":"\u4f7f\u7528\u6709\u610f\u4e49\u4e14\u63cf\u8ff0\u660e\u786e\u7684\u6807\u9898"},{"location":"misc/how_to_ask_questions_the_smart_way/how_to_ask_questions_the_smart_way/#_7","text":"\u4ee5 \u8bf7\u5c06\u4f60\u7684\u56de\u590d\u53d1\u9001\u5230\u2026\u2026 \u6765\u7ed3\u675f\u4f60\u7684\u95ee\u9898\u591a\u534a\u4f1a\u4f7f\u4f60\u5f97\u4e0d\u5230\u56de\u7b54\u3002\u5982\u679c\u4f60\u89c9\u5f97\u82b1\u51e0\u79d2\u949f\u5728\u90ae\u4ef6\u5ba2\u6237\u7aef\u8bbe\u7f6e\u4e00\u4e0b\u56de\u590d\u5730\u5740\u90fd\u9ebb\u70e6\uff0c\u6211\u4eec\u4e5f\u89c9\u5f97\u82b1\u51e0\u79d2\u949f\u601d\u8003\u4f60\u7684\u95ee\u9898\u66f4\u9ebb\u70e6\u3002\u5982\u679c\u4f60\u7684\u90ae\u4ef6\u7a0b\u5e8f\u4e0d\u652f\u6301\u8fd9\u6837\u505a\uff0c \u6362\u4e2a\u597d\u70b9\u7684 \uff1b\u5982\u679c\u662f\u64cd\u4f5c\u7cfb\u7edf\u4e0d\u652f\u6301\u8fd9\u79cd\u90ae\u4ef6\u7a0b\u5e8f\uff0c\u4e5f\u6362\u4e2a\u597d\u70b9\u7684\u3002 \u5728\u8bba\u575b\uff0c\u8981\u6c42\u901a\u8fc7\u7535\u5b50\u90ae\u4ef6\u56de\u590d\u662f\u975e\u5e38\u65e0\u793c\u7684\uff0c\u9664\u975e\u4f60\u8ba4\u4e3a\u56de\u590d\u7684\u4fe1\u606f\u53ef\u80fd\u6bd4\u8f83\u654f\u611f\uff08\u6709\u4eba\u4f1a\u4e3a\u4e86\u67d0\u4e9b\u672a\u77e5\u7684\u539f\u56e0\uff0c\u53ea\u8ba9\u4f60\u800c\u4e0d\u662f\u6574\u4e2a\u8bba\u575b\u77e5\u9053\u7b54\u6848\uff09\u3002\u5982\u679c\u4f60\u53ea\u662f\u60f3\u5728\u6709\u4eba\u56de\u590d\u8ba8\u8bba\u4e32\u65f6\u5f97\u5230\u7535\u5b50\u90ae\u4ef6\u63d0\u9192\uff0c\u53ef\u4ee5\u8981\u6c42\u7f51\u9875\u8bba\u575b\u53d1\u9001\u7ed9\u4f60\u3002\u51e0\u4e4e\u6240\u6709\u8bba\u575b\u90fd\u652f\u6301\u8bf8\u5982 \u8ffd\u8e2a\u6b64\u8ba8\u8bba\u4e32 \u3001 \u6709\u56de\u590d\u65f6\u53d1\u9001\u90ae\u4ef6\u63d0\u9192 \u7b49\u529f\u80fd\u3002","title":"\u4f7f\u95ee\u9898\u5bb9\u6613\u56de\u590d"},{"location":"misc/how_to_ask_questions_the_smart_way/how_to_ask_questions_the_smart_way/#_8","text":"\u6211\u4eec\u4ece\u7ecf\u9a8c\u4e2d\u53d1\u73b0\uff0c\u7c97\u5fc3\u7684\u63d0\u95ee\u8005\u901a\u5e38\u4e5f\u4f1a\u7c97\u5fc3\u7684\u5199\u7a0b\u5e8f\u4e0e\u601d\u8003\uff08\u6211\u6562\u6253\u5305\u7968\uff09\u3002\u56de\u7b54\u7c97\u5fc3\u5927\u610f\u8005\u7684\u95ee\u9898\u5f88\u4e0d\u503c\u5f97\uff0c\u6211\u4eec\u5b81\u613f\u628a\u65f6\u95f4\u8017\u5728\u522b\u5904\u3002 \u6b63\u786e\u7684\u62fc\u5199\u3001\u6807\u70b9\u7b26\u53f7\u548c\u5927\u5c0f\u5199\u662f\u5f88\u91cd\u8981\u7684\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u5982\u679c\u4f60\u89c9\u5f97\u8fd9\u6837\u505a\u5f88\u9ebb\u70e6\uff0c\u4e0d\u60f3\u5728\u4e4e\u8fd9\u4e9b\uff0c\u90a3\u6211\u4eec\u4e5f\u89c9\u5f97\u9ebb\u70e6\uff0c\u4e0d\u60f3\u5728\u4e4e\u4f60\u7684\u63d0\u95ee\u3002\u82b1\u70b9\u989d\u5916\u7684\u7cbe\u529b\u659f\u914c\u4e00\u4e0b\u5b57\u53e5\uff0c\u7528\u4e0d\u7740\u592a\u50f5\u786c\u4e0e\u6b63\u5f0f \u2014\u2014 \u4e8b\u5b9e\u4e0a\uff0c\u9ed1\u5ba2\u6587\u5316\u5f88\u770b\u91cd\u80fd\u51c6\u786e\u5730\u4f7f\u7528\u975e\u6b63\u5f0f\u3001\u4fda\u8bed\u548c\u5e7d\u9ed8\u7684\u8bed\u53e5\u3002\u4f46\u5b83\u5fc5\u987b\u5f88\u51c6\u786e\uff0c\u800c\u4e14\u6709\u8ff9\u8c61\u8868\u660e\u4f60\u662f\u5728\u601d\u8003\u548c\u5173\u6ce8\u95ee\u9898\u3002 \u6b63\u786e\u5730\u62fc\u5199\u3001\u4f7f\u7528\u6807\u70b9\u548c\u5927\u5c0f\u5199\uff0c\u4e0d\u8981\u5c06 its \u6df7\u6dc6\u4e3a it's \uff0c loose \u641e\u6210 lose \u6216\u8005\u5c06 discrete \u5f04\u6210 discreet \u3002\u4e0d\u8981\u5168\u90e8\u7528\u5927\u5199\uff0c\u8fd9\u4f1a\u88ab\u89c6\u4e3a\u65e0\u793c\u7684\u5927\u58f0\u56b7\u56b7\uff08\u5168\u90e8\u5c0f\u5199\u4e5f\u597d\u4e0d\u5230\u54ea\u53bb\uff0c\u56e0\u4e3a\u4e0d\u6613\u9605\u8bfb\u3002 Alan Cox \u4e5f\u8bb8\u53ef\u4ee5\u8fd9\u6837\u505a\uff0c\u4f46\u4f60\u4e0d\u884c\uff09\u3002 \u66f4\u767d\u8bdd\u7684\u8bf4\uff0c\u5982\u679c\u4f60\u5199\u5f97\u50cf\u662f\u4e2a\u534a\u6587\u76f2[\u8bd1\u6ce8\uff1a\u5c0f\u767d]\uff0c\u90a3\u591a\u534a\u5f97\u4e0d\u5230\u7406\u776c\u3002\u4e5f\u4e0d\u8981\u4f7f\u7528\u5373\u65f6\u901a\u4fe1\u4e2d\u7684\u7b80\u5199\u6216\u706b\u661f\u6587\uff0c\u5982\u5c06 \u7684 \u7b80\u5316\u4e3a d \u4f1a\u4f7f\u4f60\u770b\u8d77\u6765\u50cf\u4e00\u4e2a\u4e3a\u4e86\u5c11\u6253\u51e0\u4e2a\u952e\u800c\u7701\u5b57\u7684\u5c0f\u767d\u3002\u66f4\u7cdf\u7684\u662f\uff0c\u5982\u679c\u50cf\u4e2a\u5c0f\u5b69\u4f3c\u5730\u9b3c\u753b\u7b26\u90a3\u7edd\u5bf9\u662f\u5728\u627e\u6b7b\uff0c\u53ef\u4ee5\u80af\u5b9a\u6ca1\u4eba\u4f1a\u7406\u4f60\uff08\u6216\u8005\u6700\u591a\u662f\u7ed9\u4f60\u4e00\u5927\u5806\u6307\u8d23\u4e0e\u6316\u82e6\uff09\u3002 \u5982\u679c\u5728\u4f7f\u7528\u975e\u6bcd\u8bed\u7684\u8bba\u575b\u63d0\u95ee\uff0c\u4f60\u53ef\u4ee5\u72af\u70b9\u62fc\u5199\u548c\u8bed\u6cd5\u4e0a\u7684\u5c0f\u9519\uff0c\u4f46\u51b3\u4e0d\u80fd\u5728\u601d\u8003\u4e0a\u9a6c\u864e\uff08\u6ca1\u9519\uff0c\u6211\u4eec\u901a\u5e38\u80fd\u5f04\u6e05\u4e24\u8005\u7684\u5206\u522b\uff09\u3002\u540c\u65f6\uff0c\u9664\u975e\u4f60\u77e5\u9053\u56de\u590d\u8005\u4f7f\u7528\u7684\u8bed\u8a00\uff0c\u5426\u5219\u8bf7\u4f7f\u7528\u82f1\u8bed\u4e66\u5199\u3002\u7e41\u5fd9\u7684\u9ed1\u5ba2\u4e00\u822c\u4f1a\u76f4\u63a5\u5220\u9664\u7528\u4ed6\u4eec\u770b\u4e0d\u61c2\u8bed\u8a00\u5199\u7684\u6d88\u606f\u3002\u5728\u7f51\u7edc\u4e0a\u82f1\u8bed\u662f\u901a\u7528\u8bed\u8a00\uff0c\u7528\u82f1\u8bed\u4e66\u5199\u53ef\u4ee5\u5c06\u4f60\u7684\u95ee\u9898\u5728\u5c1a\u672a\u88ab\u9605\u8bfb\u5c31\u88ab\u76f4\u63a5\u5220\u9664\u7684\u53ef\u80fd\u6027\u964d\u5230\u6700\u4f4e\u3002 \u5982\u679c\u82f1\u6587\u662f\u4f60\u7684\u5916\u8bed\uff08Second language\uff09\uff0c\u63d0\u793a\u6f5c\u5728\u56de\u590d\u8005\u4f60\u6709\u6f5c\u5728\u7684\u8bed\u8a00\u56f0\u96be\u662f\u5f88\u597d\u7684\uff1a [\u8bd1\u6ce8\uff1a\u4ee5\u4e0b\u9644\u4e0a\u539f\u6587\u4ee5\u4f9b\u4f7f\u7528] English is not my native language; please excuse typing errors. \u82f1\u6587\u4e0d\u662f\u6211\u7684\u6bcd\u8bed\uff0c\u8bf7\u539f\u8c05\u6211\u7684\u9519\u5b57\u6216\u8bed\u6cd5\u3002 If you speak $LANGUAGE, please email/PM me; I may need assistance translating my question. \u5982\u679c\u4f60\u8bf4\u67d0\u8bed\u8a00\uff0c\u8bf7\u5bc4\u4fe1/\u79c1\u8baf\u7ed9\u6211\uff1b\u6211\u9700\u8981\u6709\u4eba\u534f\u52a9\u6211\u7ffb\u8bd1\u6211\u7684\u95ee\u9898\u3002 I am familiar with the technical terms, but some slang expressions and idioms are difficult for me. \u6211\u5bf9\u6280\u672f\u540d\u8bcd\u5f88\u719f\u6089\uff0c\u4f46\u5bf9\u4e8e\u4fd7\u8bed\u6216\u662f\u7279\u522b\u7528\u6cd5\u6bd4\u8f83\u4e0d\u751a\u4e86\u89e3\u3002 I've posted my question in $LANGUAGE and English. I'll be glad to translate responses, if you only use one or the other. \u6211\u628a\u6211\u7684\u95ee\u9898\u7528\u67d0\u8bed\u8a00\u548c\u82f1\u6587\u5199\u51fa\u6765\uff0c\u5982\u679c\u4f60\u53ea\u7528\u4e00\u79cd\u8bed\u8a00\u56de\u7b54\uff0c\u6211\u4f1a\u4e50\u610f\u5c06\u5176\u7ffb\u8bd1\u6210\u53e6\u4e00\u79cd\u3002","title":"\u7528\u6e05\u6670\u3001\u6b63\u786e\u3001\u7cbe\u51c6\u5e76\u8bed\u6cd5\u6b63\u786e\u7684\u8bed\u53e5"},{"location":"misc/how_to_ask_questions_the_smart_way/how_to_ask_questions_the_smart_way/#_9","text":"\u5982\u679c\u4f60\u4eba\u4e3a\u5730\u5c06\u95ee\u9898\u641e\u5f97\u96be\u4ee5\u9605\u8bfb\uff0c\u5b83\u591a\u534a\u4f1a\u88ab\u5ffd\u7565\uff0c\u4eba\u4eec\u66f4\u613f\u8bfb\u6613\u61c2\u7684\u95ee\u9898\uff0c\u6240\u4ee5\uff1a \u4f7f\u7528\u7eaf\u6587\u5b57\u800c\u4e0d\u662f HTML ( \u5173\u95ed HTML \u5e76\u4e0d\u96be\uff09\u3002 \u4f7f\u7528 MIME \u9644\u4ef6\u901a\u5e38\u662f\u53ef\u4ee5\u7684\uff0c\u524d\u63d0\u662f\u771f\u6b63\u6709\u5185\u5bb9\uff08\u8b6c\u5982\u9644\u5e26\u7684\u6e90\u4ee3\u7801\u6216 patch\uff09\uff0c\u800c\u4e0d\u4ec5\u4ec5\u662f\u90ae\u4ef6\u7a0b\u5e8f\u751f\u6210\u7684\u6a21\u677f\uff08\u8b6c\u5982\u53ea\u662f\u4fe1\u4ef6\u5185\u5bb9\u7684\u62f7\u8d1d\uff09\u3002 \u4e0d\u8981\u53d1\u9001\u4e00\u6bb5\u6587\u5b57\u53ea\u662f\u4e00\u884c\u53e5\u5b50\u4f46\u81ea\u52a8\u6362\u884c\u540e\u4f1a\u53d8\u6210\u591a\u884c\u7684\u90ae\u4ef6\uff08\u8fd9\u4f7f\u5f97\u56de\u590d\u90e8\u5206\u5185\u5bb9\u975e\u5e38\u56f0\u96be\uff09\u3002\u8bbe\u60f3\u4f60\u7684\u8bfb\u8005\u662f\u5728 80 \u4e2a\u5b57\u7b26\u5bbd\u7684\u7ec8\u7aef\u673a\u4e0a\u9605\u8bfb\u90ae\u4ef6\uff0c\u6700\u597d\u8bbe\u7f6e\u4f60\u7684\u6362\u884c\u5206\u5272\u70b9\u5c0f\u4e8e 80 \u5b57\u3002 \u4f46\u662f\uff0c\u5bf9\u4e00\u4e9b\u7279\u6b8a\u7684\u6587\u4ef6\u4e0d\u8981\u8bbe\u7f6e\u56fa\u5b9a\u5bbd\u5ea6\uff08\u8b6c\u5982\u65e5\u5fd7\u6863\u6848\u62f7\u8d1d\u6216\u4f1a\u8bdd\u8bb0\u5f55\uff09\u3002\u6570\u636e\u5e94\u8be5\u539f\u6837\u5305\u542b\uff0c\u8ba9\u56de\u590d\u8005\u6709\u4fe1\u5fc3\u4ed6\u4eec\u770b\u5230\u7684\u662f\u548c\u4f60\u770b\u5230\u7684\u4e00\u6837\u7684\u4e1c\u897f\u3002 \u5728\u82f1\u8bed\u8bba\u575b\u4e2d\uff0c\u4e0d\u8981\u4f7f\u7528 Quoted-Printable MIME \u7f16\u7801\u53d1\u9001\u6d88\u606f\u3002\u8fd9\u79cd\u7f16\u7801\u5bf9\u4e8e\u5f20\u8d34\u975e ASCII \u8bed\u8a00\u53ef\u80fd\u662f\u5fc5\u987b\u7684\uff0c\u4f46\u5f88\u591a\u90ae\u4ef6\u7a0b\u5e8f\u5e76\u4e0d\u652f\u6301\u8fd9\u79cd\u7f16\u7801\u3002\u5f53\u5b83\u4eec\u5904\u7406\u6362\u884c\u65f6\uff0c\u90a3\u4e9b\u6587\u672c\u4e2d\u56db\u5904\u6563\u5e03\u7684=20\u7b26\u53f7\u65e2\u96be\u770b\u4e5f\u5206\u6563\u6ce8\u610f\u529b\uff0c\u751a\u81f3\u6709\u53ef\u80fd\u7834\u574f\u5185\u5bb9\u7684\u8bed\u610f\u3002 \u7edd\u5bf9\uff0c\u6c38\u8fdc\u4e0d\u8981\u6307\u671b\u9ed1\u5ba2\u4eec\u9605\u8bfb\u4f7f\u7528\u5c01\u95ed\u683c\u5f0f\u7f16\u5199\u7684\u6587\u6863\uff0c\u50cf\u5fae\u8f6f\u516c\u53f8\u7684 Word \u6216 Excel \u6587\u4ef6\u7b49\u3002\u5927\u591a\u6570\u9ed1\u5ba2\u5bf9\u6b64\u7684\u53cd\u5e94\u5c31\u50cf\u6709\u4eba\u5c06\u8fd8\u5728\u5192\u70ed\u6c14\u7684\u732a\u7caa\u5012\u5728\u4f60\u5bb6\u95e8\u53e3\u65f6\u4f60\u7684\u53cd\u5e94\u4e00\u6837\u3002\u5373\u4fbf\u4ed6\u4eec\u80fd\u591f\u5904\u7406\uff0c\u4ed6\u4eec\u4e5f\u5f88\u538c\u6076\u8fd9\u4e48\u505a\u3002 \u5982\u679c\u4f60\u4ece\u4f7f\u7528 Windows \u7684\u7535\u8111\u53d1\u9001\u7535\u5b50\u90ae\u4ef6\uff0c\u5173\u95ed\u5fae\u8f6f\u611a\u8822\u7684 \u667a\u80fd\u5f15\u53f7 \u529f\u80fd \uff08\u4ece[\u9009\u9879] > [\u6821\u8ba2] > [\u81ea\u52a8\u6821\u6b63\u9009\u9879]\uff0c\u52fe\u9009\u6389\u667a\u80fd\u5f15\u53f7\u5355\u9009\u6846\uff09\uff0c\u4ee5\u514d\u5728\u4f60\u7684\u90ae\u4ef6\u4e2d\u5230\u5904\u6563\u5e03\u5783\u573e\u5b57\u7b26\u3002 \u5728\u8bba\u575b\uff0c\u52ff\u6ee5\u7528\u8868\u60c5\u7b26\u53f7\u548cHTML\u529f\u80fd\uff08\u5f53\u5b83\u4eec\u63d0\u4f9b\u65f6\uff09\u3002\u4e00\u4e24\u4e2a\u8868\u60c5\u7b26\u53f7\u901a\u5e38\u6ca1\u6709\u95ee\u9898\uff0c\u4f46\u82b1\u54e8\u7684\u5f69\u8272\u6587\u672c\u503e\u5411\u4e8e\u4f7f\u4eba\u8ba4\u4e3a\u4f60\u662f\u4e2a\u65e0\u80fd\u4e4b\u8f88\u3002\u8fc7\u6ee5\u5730\u4f7f\u7528\u8868\u60c5\u7b26\u53f7\u3001\u8272\u5f69\u548c\u5b57\u4f53\u4f1a\u4f7f\u4f60\u770b\u6765\u50cf\u4e2a\u50bb\u7b11\u7684\u5c0f\u59d1\u5a18\u3002\u8fd9\u901a\u5e38\u4e0d\u662f\u4e2a\u597d\u4e3b\u610f\uff0c\u9664\u975e\u4f60\u53ea\u662f\u5bf9\u6027\u800c\u4e0d\u662f\u5bf9\u7b54\u6848\u611f\u5174\u8da3\u3002 \u5982\u679c\u4f60\u4f7f\u7528\u56fe\u5f62\u7528\u6237\u754c\u9762\u7684\u90ae\u4ef6\u7a0b\u5e8f\uff08\u5982\u5fae\u8f6f\u516c\u53f8\u7684 Outlook \u6216\u8005\u5176\u5b83\u7c7b\u4f3c\u7684\uff09\uff0c\u6ce8\u610f\u5b83\u4eec\u7684\u9ed8\u8ba4\u8bbe\u7f6e\u4e0d\u4e00\u5b9a\u6ee1\u8db3\u8fd9\u4e9b\u8981\u6c42\u3002\u5927\u591a\u6570\u8fd9\u7c7b\u7a0b\u5e8f\u6709\u57fa\u4e8e\u9009\u5355\u7684\u67e5\u770b\u6e90\u4ee3\u7801\u547d\u4ee4\uff0c\u7528\u5b83\u6765\u68c0\u67e5\u53d1\u9001\u6587\u4ef6\u5939\u4e2d\u7684\u90ae\u4ef6\uff0c\u4ee5\u786e\u4fdd\u53d1\u9001\u7684\u662f\u7eaf\u6587\u672c\u6587\u4ef6\u540c\u65f6\u6ca1\u6709\u4e00\u4e9b\u5947\u602a\u7684\u5b57\u7b26\u3002","title":"\u4f7f\u7528\u6613\u4e8e\u8bfb\u53d6\u4e14\u6807\u51c6\u7684\u6587\u4ef6\u683c\u5f0f\u53d1\u9001\u95ee\u9898"},{"location":"misc/how_to_ask_questions_the_smart_way/how_to_ask_questions_the_smart_way/#_10","text":"\u4ed4\u7ec6\u3001\u6e05\u695a\u5730\u63cf\u8ff0\u4f60\u7684\u95ee\u9898\u6216 Bug \u7684\u75c7\u72b6\u3002 \u63cf\u8ff0\u95ee\u9898\u53d1\u751f\u7684\u73af\u5883\uff08\u673a\u5668\u914d\u7f6e\u3001\u64cd\u4f5c\u7cfb\u7edf\u3001\u5e94\u7528\u7a0b\u5e8f\u3001\u4ee5\u53ca\u76f8\u5173\u7684\u4fe1\u606f\uff09\uff0c\u63d0\u4f9b\u7ecf\u9500\u5546\u7684\u53d1\u884c\u7248\u548c\u7248\u672c\u53f7\uff08\u5982\uff1a Fedora Core 4 \u3001 Slackware 9.1 \u7b49\uff09\u3002 \u63cf\u8ff0\u5728\u63d0\u95ee\u524d\u4f60\u662f\u600e\u6837\u53bb\u7814\u7a76\u548c\u7406\u89e3\u8fd9\u4e2a\u95ee\u9898\u7684\u3002 \u63cf\u8ff0\u5728\u63d0\u95ee\u524d\u4e3a\u786e\u5b9a\u95ee\u9898\u800c\u91c7\u53d6\u7684\u8bca\u65ad\u6b65\u9aa4\u3002 \u63cf\u8ff0\u6700\u8fd1\u505a\u8fc7\u4ec0\u4e48\u53ef\u80fd\u76f8\u5173\u7684\u786c\u4ef6\u6216\u8f6f\u4ef6\u53d8\u66f4\u3002 \u5c3d\u53ef\u80fd\u7684\u63d0\u4f9b\u4e00\u4e2a\u53ef\u4ee5 \u91cd\u73b0\u8fd9\u4e2a\u95ee\u9898\u7684\u53ef\u63a7\u73af\u5883 \u7684\u65b9\u6cd5\u3002 \u5c3d\u91cf\u53bb\u63e3\u6d4b\u4e00\u4e2a\u9ed1\u5ba2\u4f1a\u600e\u6837\u53cd\u95ee\u4f60\uff0c\u5728\u4f60\u63d0\u95ee\u4e4b\u524d\u9884\u5148\u5c06\u9ed1\u5ba2\u4eec\u53ef\u80fd\u9047\u5230\u7684\u95ee\u9898\u56de\u7b54\u4e00\u904d\u3002 \u4ee5\u4e0a\u51e0\u70b9\u4e2d\uff0c\u5f53\u4f60\u62a5\u544a\u7684\u662f\u4f60\u8ba4\u4e3a\u53ef\u80fd\u5728\u4ee3\u7801\u4e2d\u7684\u95ee\u9898\u65f6\uff0c\u7ed9\u9ed1\u5ba2\u4e00\u4e2a\u53ef\u4ee5\u91cd\u73b0\u4f60\u7684\u95ee\u9898\u7684\u73af\u5883\u5c24\u5176\u91cd\u8981\u3002\u5f53\u4f60\u8fd9\u4e48\u505a\u65f6\uff0c\u4f60\u5f97\u5230\u6709\u6548\u7684\u56de\u7b54\u7684\u673a\u4f1a\u548c\u901f\u5ea6\u90fd\u4f1a\u5927\u5927\u7684\u63d0\u5347\u3002 Simon Tatham \u5199\u8fc7\u4e00\u7bc7\u540d\u4e3a\u300a\u5982\u4f55\u6709\u6548\u7684\u62a5\u544a Bug\u300b\u7684\u51fa\u8272\u6587\u7ae0\u3002\u5f3a\u529b\u63a8\u8350\u4f60\u4e5f\u8bfb\u4e00\u8bfb\u3002","title":"\u7cbe\u786e\u5730\u63cf\u8ff0\u95ee\u9898\u5e76\u8a00\u4e4b\u6709\u7269"},{"location":"misc/how_to_ask_questions_the_smart_way/how_to_ask_questions_the_smart_way/#_11","text":"\u4f60\u9700\u8981\u63d0\u4f9b\u7cbe\u786e\u6709\u5185\u5bb9\u7684\u4fe1\u606f\u3002\u8fd9\u5e76\u4e0d\u662f\u8981\u6c42\u4f60\u7b80\u5355\u7684\u628a\u6210\u5806\u7684\u51fa\u9519\u4ee3\u7801\u6216\u8005\u8d44\u6599\u5b8c\u5168\u8f6c\u5f55\u5230\u4f60\u7684\u63d0\u95ee\u4e2d\u3002\u5982\u679c\u4f60\u6709\u5e9e\u5927\u800c\u590d\u6742\u7684\u6d4b\u8bd5\u6837\u4f8b\u80fd\u91cd\u73b0\u7a0b\u5e8f\u6302\u6389\u7684\u60c5\u5883\uff0c\u5c3d\u91cf\u5c06\u5b83\u526a\u88c1\u5f97\u8d8a\u5c0f\u8d8a\u597d\u3002 \u8fd9\u6837\u505a\u7684\u7528\u5904\u81f3\u5c11\u6709\u4e09\u70b9\u3002 \u7b2c\u4e00\uff0c\u8868\u73b0\u51fa\u4f60\u4e3a\u7b80\u5316\u95ee\u9898\u4ed8\u51fa\u4e86\u52aa\u529b\uff0c\u8fd9\u53ef\u4ee5\u4f7f\u4f60\u5f97\u5230\u56de\u7b54\u7684\u673a\u4f1a\u589e\u52a0\uff1b \u7b2c\u4e8c\uff0c\u7b80\u5316\u95ee\u9898\u4f7f\u4f60\u66f4\u6709\u53ef\u80fd\u5f97\u5230\u6709\u7528\u7684\u7b54\u6848\uff1b \u7b2c\u4e09\uff0c\u5728\u7cbe\u70bc\u4f60\u7684 bug \u62a5\u544a\u7684\u8fc7\u7a0b\u4e2d\uff0c\u4f60\u5f88\u53ef\u80fd\u5c31\u81ea\u5df1\u627e\u5230\u4e86\u89e3\u51b3\u65b9\u6cd5\u6216\u6743\u5b9c\u4e4b\u8ba1\u3002","title":"\u8bdd\u4e0d\u5728\u591a\u800c\u5728\u7cbe"},{"location":"misc/how_to_ask_questions_the_smart_way/how_to_ask_questions_the_smart_way/#bug","text":"\u5f53\u4f60\u5728\u4f7f\u7528\u8f6f\u4ef6\u4e2d\u9047\u5230\u95ee\u9898\uff0c\u9664\u975e\u4f60\u975e\u5e38\u3001\u975e\u5e38\u7684\u6709\u6839\u636e\uff0c\u4e0d\u8981\u52a8\u8f84\u58f0\u79f0\u627e\u5230\u4e86 Bug\u3002\u63d0\u793a\uff1a\u9664\u975e\u4f60\u80fd\u63d0\u4f9b\u89e3\u51b3\u95ee\u9898\u7684\u6e90\u4ee3\u7801\u8865\u4e01\uff0c\u6216\u8005\u63d0\u4f9b\u56de\u5f52\u6d4b\u8bd5\u6765\u8868\u660e\u524d\u4e00\u7248\u672c\u4e2d\u884c\u4e3a\u4e0d\u6b63\u786e\uff0c\u5426\u5219\u4f60\u90fd\u591a\u534a\u4e0d\u591f\u5b8c\u5168\u786e\u4fe1\u3002\u8fd9\u540c\u6837\u9002\u7528\u5728\u7f51\u9875\u548c\u6587\u4ef6\uff0c\u5982\u679c\u4f60\uff08\u58f0\u79f0\uff09\u53d1\u73b0\u4e86\u6587\u4ef6\u7684Bug\uff0c\u4f60\u5e94\u8be5\u80fd\u63d0\u4f9b\u76f8\u5e94\u4f4d\u7f6e\u7684\u4fee\u6b63\u6216\u66ff\u4ee3\u6587\u4ef6\u3002 \u8bf7\u8bb0\u5f97\uff0c\u8fd8\u6709\u8bb8\u591a\u5176\u5b83\u4f7f\u7528\u8005\u6ca1\u9047\u5230\u4f60\u53d1\u73b0\u7684\u95ee\u9898\uff0c\u5426\u5219\u4f60\u5728\u9605\u8bfb\u6587\u4ef6\u6216\u641c\u7d22\u7f51\u9875\u65f6\u5c31\u5e94\u8be5\u53d1\u73b0\u4e86\uff08\u4f60\u5728\u62b1\u6028\u524d\u5df2\u7ecf\u505a\u4e86\u8fd9\u4e9b\uff0c\u662f\u5427\uff1f\uff09\u3002\u8fd9\u4e5f\u610f\u5473\u7740\u5f88\u6709\u53ef\u80fd\u662f\u4f60\u5f04\u9519\u4e86\u800c\u4e0d\u662f\u8f6f\u4ef6\u672c\u8eab\u6709\u95ee\u9898\u3002 \u7f16\u5199\u8f6f\u4ef6\u7684\u4eba\u603b\u662f\u975e\u5e38\u8f9b\u82e6\u5730\u4f7f\u5b83\u5c3d\u53ef\u80fd\u5b8c\u7f8e\u3002\u5982\u679c\u4f60\u58f0\u79f0\u627e\u5230\u4e86 Bug\uff0c\u4e5f\u5c31\u662f\u5728\u8d28\u7591\u4ed6\u4eec\u7684\u80fd\u529b\uff0c\u5373\u4f7f\u4f60\u662f\u5bf9\u7684\uff0c\u4e5f\u6709\u53ef\u80fd\u4f1a\u5192\u72af\u5230\u5176\u4e2d\u67d0\u90e8\u5206\u4eba\u3002\u5f53\u4f60\u5728\u6807\u9898\u4e2d\u56b7\u56b7\u7740\u6709Bug\u65f6\uff0c\u8fd9\u5c24\u5176\u4e25\u91cd\u3002 \u63d0\u95ee\u65f6\uff0c\u5373\u4f7f\u4f60\u79c1\u4e0b\u975e\u5e38\u786e\u4fe1\u5df2\u7ecf\u53d1\u73b0\u4e00\u4e2a\u771f\u6b63\u7684 Bug\uff0c\u6700\u597d\u5199\u5f97\u50cf\u662f\u4f60\u505a\u9519\u4e86\u4ec0\u4e48\u3002\u5982\u679c\u771f\u7684\u6709 Bug\uff0c\u4f60\u4f1a\u5728\u56de\u590d\u4e2d\u770b\u5230\u8fd9\u70b9\u3002\u8fd9\u6837\u505a\u7684\u8bdd\uff0c\u5982\u679c\u771f\u6709 Bug\uff0c\u7ef4\u62a4\u8005\u5c31\u4f1a\u5411\u4f60\u9053\u6b49\uff0c\u8fd9\u603b\u6bd4\u4f60\u60f9\u607c\u522b\u4eba\u7136\u540e\u6b20\u522b\u4eba\u4e00\u4e2a\u9053\u6b49\u8981\u597d\u4e00\u70b9\u3002","title":"\u522b\u52a8\u8f84\u58f0\u79f0\u627e\u5230 Bug"},{"location":"misc/how_to_ask_questions_the_smart_way/how_to_ask_questions_the_smart_way/#_12","text":"\u6709\u4e9b\u4eba\u660e\u767d\u4ed6\u4eec\u4e0d\u8be5\u7c97\u9c81\u6216\u50b2\u6162\u7684\u63d0\u95ee\u5e76\u8981\u6c42\u5f97\u5230\u7b54\u590d\uff0c\u4f46\u4ed6\u4eec\u9009\u62e9\u53e6\u4e00\u4e2a\u6781\u7aef \u2014\u2014 \u4f4e\u58f0\u4e0b\u6c14\uff1a \u6211\u77e5\u9053\u6211\u53ea\u662f\u4e2a\u53ef\u60b2\u7684\u65b0\u624b\uff0c\u4e00\u4e2a\u64b8\u745f\uff0c\u4f46... \u3002\u8fd9\u65e2\u4f7f\u4eba\u56f0\u6270\uff0c\u4e5f\u6ca1\u6709\u7528\uff0c\u5c24\u5176\u662f\u4f34\u968f\u7740\u4e0e\u5b9e\u9645\u95ee\u9898\u542b\u7cca\u4e0d\u6e05\u7684\u63cf\u8ff0\u65f6\u66f4\u4ee4\u4eba\u53cd\u611f\u3002 \u522b\u7528\u539f\u59cb\u7075\u957f\u7c7b\u52a8\u7269\u7684\u628a\u620f\u6765\u6d6a\u8d39\u4f60\u6211\u7684\u65f6\u95f4\u3002\u53d6\u800c\u4ee3\u4e4b\u7684\u662f\uff0c\u5c3d\u53ef\u80fd\u6e05\u695a\u5730\u63cf\u8ff0\u80cc\u666f\u6761\u4ef6\u548c\u4f60\u7684\u95ee\u9898\u60c5\u51b5\u3002\u8fd9\u6bd4\u4f4e\u58f0\u4e0b\u6c14\u66f4\u597d\u5730\u5b9a\u4f4d\u4e86\u4f60\u7684\u4f4d\u7f6e\u3002 \u6709\u65f6\u7f51\u9875\u8bba\u575b\u4f1a\u8bbe\u6709\u4e13\u4e3a\u65b0\u624b\u63d0\u95ee\u7684\u7248\u9762\uff0c\u5982\u679c\u4f60\u771f\u7684\u8ba4\u4e3a\u9047\u5230\u4e86\u521d\u5b66\u8005\u7684\u95ee\u9898\uff0c\u5230\u90a3\u53bb\u5c31\u662f\u4e86\uff0c\u4f46\u4e00\u6837\u522b\u90a3\u4e48\u4f4e\u58f0\u4e0b\u6c14\u3002","title":"\u4f4e\u58f0\u4e0b\u6c14\u4e0d\u80fd\u4ee3\u66ff\u4f60\u7684\u529f\u8bfe"},{"location":"misc/how_to_ask_questions_the_smart_way/how_to_ask_questions_the_smart_way/#_13","text":"\u544a\u8bc9\u9ed1\u5ba2\u4eec\u4f60\u8ba4\u4e3a\u95ee\u9898\u662f\u600e\u6837\u9020\u6210\u7684\u5e76\u6ca1\u4ec0\u4e48\u5e2e\u52a9\u3002\uff08\u5982\u679c\u4f60\u7684\u63a8\u65ad\u5982\u6b64\u6709\u6548\uff0c\u8fd8\u7528\u5411\u522b\u4eba\u6c42\u52a9\u5417\uff1f\uff09\uff0c\u56e0\u6b64\u8981\u786e\u4fe1\u4f60\u539f\u539f\u672c\u672c\u544a\u8bc9\u4e86\u4ed6\u4eec\u95ee\u9898\u7684\u75c7\u72b6\uff0c\u800c\u4e0d\u662f\u4f60\u7684\u89e3\u91ca\u548c\u7406\u8bba\uff1b\u8ba9\u9ed1\u5ba2\u4eec\u6765\u63a8\u6d4b\u548c\u8bca\u65ad\u3002\u5982\u679c\u4f60\u8ba4\u4e3a\u9648\u8ff0\u81ea\u5df1\u7684\u731c\u6d4b\u5f88\u91cd\u8981\uff0c\u6e05\u695a\u5730\u8bf4\u660e\u8fd9\u53ea\u662f\u4f60\u7684\u731c\u6d4b\uff0c\u5e76\u63cf\u8ff0\u4e3a\u4ec0\u4e48\u5b83\u4eec\u4e0d\u8d77\u4f5c\u7528\u3002","title":"\u63cf\u8ff0\u95ee\u9898\u75c7\u72b6\u800c\u975e\u4f60\u7684\u731c\u6d4b"},{"location":"misc/how_to_ask_questions_the_smart_way/how_to_ask_questions_the_smart_way/#_14","text":"\u6211\u5728\u7f16\u8bd1\u5185\u6838\u65f6\u63a5\u8fde\u9047\u5230 SIG11 \u9519\u8bef\uff0c \u6211\u6000\u7591\u67d0\u6761\u98de\u7ebf\u642d\u5728\u4e3b\u677f\u7684\u8d70\u7ebf\u4e0a\u4e86\uff0c\u8fd9\u79cd\u60c5\u51b5\u5e94\u8be5\u600e\u6837\u68c0\u67e5\u6700\u597d\uff1f","title":"\u8822\u95ee\u9898"},{"location":"misc/how_to_ask_questions_the_smart_way/how_to_ask_questions_the_smart_way/#_15","text":"\u6211\u7684\u7ec4\u88c5\u7535\u8111\u662f FIC-PA2007 \u4e3b\u673a\u677f\u642d\u8f7d AMD K6/233 CPU\uff08\u5a01\u76db Apollo VP2 \u82af\u7247\u7ec4\uff09\uff0c 256MB Corsair PC133 SDRAM \u5185\u5b58\uff0c\u5728\u7f16\u8bd1\u5185\u6838\u65f6\uff0c\u4ece\u5f00\u673a 20 \u5206\u949f\u4ee5\u540e\u5c31\u9891\u9891\u4ea7\u751f SIG11 \u9519\u8bef\uff0c \u4f46\u662f\u5728\u5934 20 \u5206\u949f\u5185\u4ece\u6ca1\u53d1\u751f\u8fc7\u76f8\u540c\u7684\u95ee\u9898\u3002\u91cd\u65b0\u542f\u52a8\u4e5f\u6ca1\u6709\u7528\uff0c\u4f46\u662f\u5173\u673a\u4e00\u665a\u4e0a\u5c31\u53c8\u80fd\u5de5\u4f5c 20 \u5206\u949f\u3002 \u6240\u6709\u5185\u5b58\u90fd\u6362\u8fc7\u4e86\uff0c\u6ca1\u6709\u6548\u679c\u3002\u76f8\u5173\u90e8\u5206\u7684\u6807\u51c6\u7f16\u8bd1\u8bb0\u5f55\u5982\u4e0b\u2026\u3002 \u7531\u4e8e\u4ee5\u4e0a\u8fd9\u70b9\u4f3c\u4e4e\u8ba9\u8bb8\u591a\u4eba\u89c9\u5f97\u96be\u4ee5\u914d\u5408\uff0c\u8fd9\u91cc\u6709\u53e5\u8bdd\u53ef\u4ee5\u63d0\u9192\u4f60\uff1a \u6240\u6709\u7684\u8bca\u65ad\u4e13\u5bb6\u90fd\u6765\u81ea\u5bc6\u82cf\u91cc\u5dde\u3002 \u7f8e\u56fd\u56fd\u52a1\u9662\u7684\u5b98\u65b9\u5ea7\u53f3\u94ed\u5219\u662f\uff1a \u8ba9\u6211\u770b\u770b \uff08\u51fa\u81ea\u56fd\u4f1a\u8bae\u5458 Willard D. Vandiver \u5728 1899 \u5e74\u65f6\u7684\u8bb2\u8bdd\uff1a \u6211\u6765\u81ea\u4e00\u4e2a\u51fa\u4ea7\u7389\u7c73\uff0c\u68c9\u82b1\uff0c\u725b\u84a1\u548c\u6c11\u4e3b\u515a\u4eba\u7684\u56fd\u5bb6\uff0c\u6ed4\u6ed4\u96c4\u8fa9\u65e2\u4e0d\u80fd\u8bf4\u670d\u6211\uff0c\u4e5f\u4e0d\u4f1a\u8ba9\u6211\u6ee1\u610f\u3002\u6211\u6765\u81ea\u5bc6\u82cf\u91cc\u5dde\uff0c\u4f60\u5fc5\u987b\u8ba9\u6211\u770b\u770b\u3002 \uff09 \u9488\u5bf9\u8bca\u65ad\u8005\u800c\u8a00\uff0c\u8fd9\u5e76\u4e0d\u662f\u4e00\u79cd\u6000\u7591\uff0c\u800c\u53ea\u662f\u4e00\u79cd\u771f\u5b9e\u800c\u6709\u7528\u7684\u9700\u6c42\uff0c\u4ee5\u4fbf\u8ba9\u4ed6\u4eec\u770b\u5230\u7684\u662f\u4e0e\u4f60\u770b\u5230\u7684\u539f\u59cb\u8bc1\u636e\u5c3d\u53ef\u80fd\u4e00\u81f4\u7684\u4e1c\u897f\uff0c\u800c\u4e0d\u662f\u4f60\u7684\u731c\u6d4b\u4e0e\u5f52\u7eb3\u7684\u7ed3\u8bba\u3002\u6240\u4ee5\uff0c\u5927\u65b9\u7684\u5c55\u793a\u7ed9\u6211\u4eec\u770b\u5427\uff01","title":"\u806a\u660e\u95ee\u9898"},{"location":"misc/how_to_ask_questions_the_smart_way/how_to_ask_questions_the_smart_way/#_16","text":"\u95ee\u9898\u53d1\u751f\u524d\u7684\u4e00\u7cfb\u5217\u64cd\u4f5c\uff0c\u5f80\u5f80\u5c31\u662f\u5bf9\u627e\u51fa\u95ee\u9898\u6700\u6709\u5e2e\u52a9\u7684\u7ebf\u7d22\u3002\u56e0\u6b64\uff0c\u4f60\u7684\u8bf4\u660e\u91cc\u5e94\u8be5\u5305\u542b\u4f60\u7684\u64cd\u4f5c\u6b65\u9aa4\uff0c\u4ee5\u53ca\u673a\u5668\u548c\u8f6f\u4ef6\u7684\u53cd\u5e94\uff0c\u76f4\u5230\u95ee\u9898\u53d1\u751f\u3002\u5728\u547d\u4ee4\u884c\u5904\u7406\u7684\u60c5\u51b5\u4e0b\uff0c\u63d0\u4f9b\u4e00\u6bb5\u64cd\u4f5c\u8bb0\u5f55\uff08\u4f8b\u5982\u8fd0\u884c\u811a\u672c\u5de5\u5177\u6240\u751f\u6210\u7684\uff09\uff0c\u5e76\u5f15\u7528\u76f8\u5173\u7684\u82e5\u5e72\u884c\uff08\u5982 20 \u884c\uff09\u8bb0\u5f55\u4f1a\u975e\u5e38\u6709\u5e2e\u52a9\u3002 \u5982\u679c\u6302\u6389\u7684\u7a0b\u5e8f\u6709\u8bca\u65ad\u9009\u9879\uff08\u5982 -v \u7684\u8be6\u8ff0\u5f00\u5173\uff09\uff0c\u8bd5\u7740\u9009\u62e9\u8fd9\u4e9b\u80fd\u5728\u8bb0\u5f55\u4e2d\u589e\u52a0\u8c03\u8bd5\u4fe1\u606f\u7684\u9009\u9879\u3002\u8bb0\u4f4f\uff0c \u591a \u4e0d\u7b49\u4e8e \u597d \u3002\u8bd5\u7740\u9009\u53d6\u9002\u5f53\u7684\u8c03\u8bd5\u7ea7\u522b\u4ee5\u4fbf\u63d0\u4f9b\u6709\u7528\u7684\u4fe1\u606f\u800c\u4e0d\u662f\u8ba9\u8bfb\u8005\u6df9\u6ca1\u5728\u5783\u573e\u4e2d\u3002 \u5982\u679c\u4f60\u7684\u8bf4\u660e\u5f88\u957f\uff08\u5982\u8d85\u8fc7\u56db\u4e2a\u6bb5\u843d\uff09\uff0c\u5728\u5f00\u5934\u7b80\u8ff0\u95ee\u9898\uff0c\u63a5\u4e0b\u6765\u518d\u6309\u65f6\u95f4\u987a\u5e8f\u8be6\u8ff0\u4f1a\u6709\u6240\u5e2e\u52a9\u3002\u8fd9\u6837\u9ed1\u5ba2\u4eec\u5728\u8bfb\u4f60\u7684\u8bb0\u5f55\u65f6\u5c31\u77e5\u9053\u8be5\u6ce8\u610f\u54ea\u4e9b\u5185\u5bb9\u4e86\u3002","title":"\u6309\u53d1\u751f\u65f6\u95f4\u5148\u540e\u5217\u51fa\u95ee\u9898\u75c7\u72b6"},{"location":"misc/how_to_ask_questions_the_smart_way/how_to_ask_questions_the_smart_way/#_17","text":"\u5982\u679c\u4f60\u60f3\u5f04\u6e05\u695a\u5982\u4f55\u505a\u67d0\u4e8b\uff08\u800c\u4e0d\u662f\u62a5\u544a\u4e00\u4e2a Bug\uff09\uff0c\u5728\u5f00\u5934\u5c31\u63cf\u8ff0\u4f60\u7684\u76ee\u6807\uff0c\u7136\u540e\u624d\u9648\u8ff0\u91cd\u73b0\u4f60\u6240\u5361\u4f4f\u7684\u7279\u5b9a\u6b65\u9aa4\u3002 \u7ecf\u5e38\u5bfb\u6c42\u6280\u672f\u5e2e\u52a9\u7684\u4eba\u5728\u5fc3\u4e2d\u6709\u4e2a\u66f4\u9ad8\u5c42\u6b21\u7684\u76ee\u6807\uff0c\u800c\u4ed6\u4eec\u5728\u81ea\u4ee5\u4e3a\u80fd\u8fbe\u5230\u76ee\u6807\u7684\u7279\u5b9a\u9053\u8def\u4e0a\u88ab\u5361\u4f4f\u4e86\uff0c\u7136\u540e\u8dd1\u6765\u95ee\u8be5\u600e\u4e48\u8d70\uff0c\u4f46\u6ca1\u6709\u610f\u8bc6\u5230\u8fd9\u6761\u8def\u672c\u8eab\u5c31\u6709\u95ee\u9898\u3002\u7ed3\u679c\u8981\u8d39\u5f88\u5927\u7684\u52b2\u624d\u80fd\u641e\u5b9a\u3002","title":"\u63cf\u8ff0\u76ee\u6807\u800c\u4e0d\u662f\u8fc7\u7a0b"},{"location":"misc/how_to_ask_questions_the_smart_way/how_to_ask_questions_the_smart_way/#_18","text":"\u6211\u600e\u6837\u624d\u80fd\u4ece\u67d0\u7ed8\u56fe\u7a0b\u5e8f\u7684\u989c\u8272\u9009\u62e9\u5668\u4e2d\u53d6\u5f97\u5341\u516d\u8fdb\u5236\u7684\u7684 RGB \u503c\uff1f","title":"\u8822\u95ee\u9898"},{"location":"misc/how_to_ask_questions_the_smart_way/how_to_ask_questions_the_smart_way/#_19","text":"\u6211\u6b63\u8bd5\u7740\u7528\u66ff\u6362\u4e00\u5e45\u56fe\u7247\u7684\u8272\u7801\uff08color table\uff09\u6210\u81ea\u5df1\u9009\u5b9a\u7684\u8272\u7801\uff0c\u6211\u73b0\u5728\u77e5\u9053\u7684\u552f\u4e00\u65b9\u6cd5\u662f\u7f16\u8f91\u6bcf\u4e2a\u8272\u7801\u533a\u5757\uff08table slot\uff09\uff0c \u4f46\u5374\u65e0\u6cd5\u4ece\u67d0\u7ed8\u56fe\u7a0b\u5e8f\u7684\u989c\u8272\u9009\u62e9\u5668\u53d6\u5f97\u5341\u516d\u8fdb\u5236\u7684\u7684 RGB \u503c\u3002 \u7b2c\u4e8c\u79cd\u63d0\u95ee\u6cd5\u6bd4\u8f83\u806a\u660e\uff0c\u4f60\u53ef\u80fd\u5f97\u5230\u50cf\u662f \u5efa\u8bae\u91c7\u7528\u53e6\u4e00\u4e2a\u66f4\u5408\u9002\u7684\u5de5\u5177 \u7684\u56de\u590d\u3002","title":"\u806a\u660e\u95ee\u9898"},{"location":"misc/how_to_ask_questions_the_smart_way/how_to_ask_questions_the_smart_way/#_20","text":"\u9ed1\u5ba2\u4eec\u8ba4\u4e3a\u95ee\u9898\u7684\u89e3\u51b3\u8fc7\u7a0b\u5e94\u8be5\u516c\u5f00\u3001\u900f\u660e\uff0c\u6b64\u8fc7\u7a0b\u4e2d\u5982\u679c\u66f4\u6709\u7ecf\u9a8c\u7684\u4eba\u6ce8\u610f\u5230\u4e0d\u5b8c\u6574\u6216\u8005\u4e0d\u5f53\u4e4b\u5904\uff0c\u6700\u521d\u7684\u56de\u590d\u624d\u80fd\u591f\u3001\u4e5f\u5e94\u8be5\u88ab\u7ea0\u6b63\u3002\u540c\u65f6\uff0c\u4f5c\u4e3a\u63d0\u4f9b\u5e2e\u52a9\u8005\u53ef\u4ee5\u5f97\u5230\u4e00\u4e9b\u5956\u52b1\uff0c\u5956\u52b1\u5c31\u662f\u4ed6\u7684\u80fd\u529b\u548c\u5b66\u8bc6\u88ab\u5176\u4ed6\u540c\u884c\u770b\u5230\u3002 \u5f53\u4f60\u8981\u6c42\u79c1\u4e0b\u56de\u590d\u65f6\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u548c\u5956\u52b1\u90fd\u88ab\u4e2d\u6b62\u3002\u522b\u8fd9\u6837\u505a\uff0c\u8ba9\u56de\u590d\u8005\u6765\u51b3\u5b9a\u662f\u5426\u79c1\u4e0b\u56de\u7b54 \u2014\u2014 \u5982\u679c\u4ed6\u771f\u8fd9\u4e48\u505a\u4e86\uff0c\u901a\u5e38\u662f\u56e0\u4e3a\u4ed6\u8ba4\u4e3a\u95ee\u9898\u7f16\u5199\u592a\u5dee\u6216\u8005\u592a\u80a4\u6d45\uff0c\u4ee5\u81f3\u4e8e\u5bf9\u5176\u5b83\u4eba\u6ca1\u6709\u5174\u8da3\u3002 \u8fd9\u6761\u89c4\u5219\u5b58\u5728\u4e00\u6761\u6709\u9650\u7684\u4f8b\u5916\uff0c\u5982\u679c\u4f60\u786e\u4fe1\u63d0\u95ee\u53ef\u80fd\u4f1a\u5f15\u6765\u5927\u91cf\u96f7\u540c\u7684\u56de\u590d\u65f6\uff0c\u90a3\u4e48\u8fd9\u4e2a\u795e\u5947\u7684\u63d0\u95ee\u53e5\u4f1a\u662f \u5411\u6211\u53d1\u7535\u90ae\uff0c\u6211\u5c06\u4e3a\u8bba\u575b\u5f52\u7eb3\u8fd9\u4e9b\u56de\u590d \u3002\u8bd5\u7740\u5c06\u90ae\u4ef6\u5217\u8868\u6216\u65b0\u95fb\u7fa4\u7ec4\u4ece\u6d2a\u6c34\u822c\u7684\u96f7\u540c\u56de\u590d\u4e2d\u89e3\u6551\u51fa\u6765\u662f\u975e\u5e38\u6709\u793c\u8c8c\u7684 \u2014\u2014 \u4f46\u4f60\u5fc5\u987b\u4fe1\u5b88\u8bfa\u8a00\u3002","title":"\u522b\u8981\u6c42\u4f7f\u7528\u79c1\u4eba\u7535\u90ae\u56de\u590d"},{"location":"misc/how_to_ask_questions_the_smart_way/how_to_ask_questions_the_smart_way/#_21","text":"\u6f2b\u65e0\u8fb9\u9645\u7684\u63d0\u95ee\u662f\u8fd1\u4e4e\u65e0\u4f11\u65e0\u6b62\u7684\u65f6\u95f4\u9ed1\u6d1e\u3002\u6700\u6709\u53ef\u80fd\u7ed9\u4f60\u6709\u7528\u7b54\u6848\u7684\u4eba\u901a\u5e38\u4e5f\u6b63\u662f\u6700\u5fd9\u7684\u4eba\uff08\u4ed6\u4eec\u5fd9\u662f\u56e0\u4e3a\u8981\u4eb2\u81ea\u5b8c\u6210\u5927\u90e8\u5206\u5de5\u4f5c\uff09\u3002\u8fd9\u6837\u7684\u4eba\u5bf9\u65e0\u8282\u5236\u7684\u65f6\u95f4\u9ed1\u6d1e\u76f8\u5f53\u538c\u6076\uff0c\u6240\u4ee5\u4ed6\u4eec\u4e5f\u503e\u5411\u4e8e\u538c\u6076\u90a3\u4e9b\u6f2b\u65e0\u8fb9\u9645\u7684\u63d0\u95ee\u3002 \u5982\u679c\u4f60\u660e\u786e\u8868\u8ff0\u9700\u8981\u56de\u7b54\u8005\u505a\u4ec0\u4e48\uff08\u5982\u63d0\u4f9b\u6307\u70b9\u3001\u53d1\u9001\u4e00\u6bb5\u4ee3\u7801\u3001\u68c0\u67e5\u4f60\u7684\u8865\u4e01\u3001\u6216\u662f\u5176\u4ed6\u7b49\u7b49\uff09\uff0c\u5c31\u6700\u6709\u53ef\u80fd\u5f97\u5230\u6709\u7528\u7684\u7b54\u6848\u3002\u56e0\u4e3a\u8fd9\u4f1a\u5b9a\u51fa\u4e00\u4e2a\u65f6\u95f4\u548c\u7cbe\u529b\u7684\u4e0a\u9650\uff0c\u4fbf\u4e8e\u56de\u7b54\u8005\u80fd\u96c6\u4e2d\u7cbe\u529b\u6765\u5e2e\u4f60\u3002\u8fd9\u4e48\u505a\u5f88\u68d2\u3002 \u8981\u7406\u89e3\u4e13\u5bb6\u4eec\u6240\u5904\u7684\u4e16\u754c\uff0c\u8bf7\u628a\u4e13\u4e1a\u6280\u80fd\u60f3\u50cf\u4e3a\u5145\u88d5\u7684\u8d44\u6e90\uff0c\u800c\u56de\u590d\u7684\u65f6\u95f4\u5219\u662f\u7a00\u7f3a\u7684\u8d44\u6e90\u3002\u4f60\u8981\u6c42\u4ed6\u4eec\u5949\u732e\u7684\u65f6\u95f4\u8d8a\u5c11\uff0c\u4f60\u8d8a\u6709\u53ef\u80fd\u4ece\u771f\u6b63\u4e13\u4e1a\u800c\u4e14\u5f88\u5fd9\u7684\u4e13\u5bb6\u90a3\u91cc\u5f97\u5230\u89e3\u7b54\u3002 \u6240\u4ee5\uff0c\u754c\u5b9a\u4e00\u4e0b\u4f60\u7684\u95ee\u9898\uff0c\u4f7f\u4e13\u5bb6\u82b1\u5728\u8fa8\u8bc6\u4f60\u7684\u95ee\u9898\u548c\u56de\u7b54\u6240\u9700\u8981\u4ed8\u51fa\u7684\u65f6\u95f4\u51cf\u5230\u6700\u5c11\uff0c\u8fd9\u6280\u5de7\u5bf9\u4f60\u6709\u7528\u7b54\u6848\u76f8\u5f53\u6709\u5e2e\u52a9 \u2014\u2014 \u4f46\u8fd9\u6280\u5de7\u901a\u5e38\u548c\u7b80\u5316\u95ee\u9898\u6709\u6240\u533a\u522b\u3002\u56e0\u6b64\uff0c\u95ee \u6211\u60f3\u66f4\u597d\u7684\u7406\u89e3 X\uff0c\u53ef\u5426\u6307\u70b9\u4e00\u4e0b\u54ea\u6709\u597d\u4e00\u70b9\u8bf4\u660e\uff1f \u901a\u5e38\u6bd4\u95ee \u4f60\u80fd\u89e3\u91ca\u4e00\u4e0b X \u5417\uff1f \u66f4\u597d\u3002\u5982\u679c\u4f60\u7684\u4ee3\u7801\u4e0d\u80fd\u8fd0\u4f5c\uff0c\u901a\u5e38\u8bf7\u522b\u4eba\u770b\u770b\u54ea\u91cc\u6709\u95ee\u9898\uff0c\u6bd4\u8981\u6c42\u522b\u4eba\u66ff\u4f60\u6539\u6b63\u8981\u660e\u667a\u5f97\u591a\u3002","title":"\u6e05\u695a\u660e\u786e\u7684\u8868\u8fbe\u4f60\u7684\u95ee\u9898\u4ee5\u53ca\u9700\u6c42"},{"location":"misc/how_to_ask_questions_the_smart_way/how_to_ask_questions_the_smart_way/#_22","text":"\u522b\u8981\u6c42\u4ed6\u4eba\u5e2e\u4f60\u8c03\u8bd5\u6709\u95ee\u9898\u7684\u4ee3\u7801\uff0c\u4e0d\u63d0\u793a\u4e00\u4e0b\u5e94\u8be5\u4ece\u4f55\u5165\u624b\u3002\u5f20\u8d34\u51e0\u767e\u884c\u7684\u4ee3\u7801\uff0c\u7136\u540e\u8bf4\u4e00\u58f0\uff1a \u5b83\u4e0d\u80fd\u5de5\u4f5c \u4f1a\u8ba9\u4f60\u5b8c\u5168\u88ab\u5ffd\u7565\u3002\u53ea\u8d34\u51e0\u5341\u884c\u4ee3\u7801\uff0c\u7136\u540e\u8bf4\u4e00\u53e5\uff1a \u5728\u7b2c\u4e03\u884c\u4ee5\u540e\uff0c\u6211\u671f\u5f85\u5b83\u663e\u793a <x>\uff0c\u4f46\u5b9e\u9645\u51fa\u73b0\u7684\u662f <y> \u6bd4\u8f83\u6709\u53ef\u80fd\u8ba9\u4f60\u5f97\u5230\u56de\u5e94\u3002 \u6700\u6709\u6548\u63cf\u8ff0\u7a0b\u5e8f\u95ee\u9898\u7684\u65b9\u6cd5\u662f\u63d0\u4f9b\u6700\u7cbe\u7b80\u7684 Bug \u5c55\u793a\u6d4b\u8bd5\u7528\u4f8b\uff08bug-demonstrating test case\uff09\u3002\u4ec0\u4e48\u662f\u6700\u7cbe\u7b80\u7684\u6d4b\u8bd5\u7528\u4f8b\uff1f\u90a3\u662f\u95ee\u9898\u7684\u7f29\u5f71\uff1b\u4e00\u5c0f\u4e2a\u7a0b\u5e8f\u7247\u6bb5\u80fd\u521a\u597d\u5c55\u793a\u51fa\u7a0b\u5e8f\u7684\u5f02\u5e38\u884c\u4e3a\uff0c\u800c\u4e0d\u5305\u542b\u5176\u4ed6\u4ee4\u4eba\u5206\u6563\u6ce8\u610f\u529b\u7684\u5185\u5bb9\u3002\u600e\u4e48\u5236\u4f5c\u6700\u7cbe\u7b80\u7684\u6d4b\u8bd5\u7528\u4f8b\uff1f\u5982\u679c\u4f60\u77e5\u9053\u54ea\u4e00\u884c\u6216\u54ea\u4e00\u6bb5\u4ee3\u7801\u4f1a\u9020\u6210\u5f02\u5e38\u7684\u884c\u4e3a\uff0c\u590d\u5236\u4e0b\u6765\u5e76\u52a0\u5165\u8db3\u591f\u91cd\u73b0\u8fd9\u4e2a\u72b6\u51b5\u7684\u4ee3\u7801\uff08\u4f8b\u5982\uff0c\u8db3\u4ee5\u8ba9\u8fd9\u6bb5\u4ee3\u7801\u80fd\u88ab\u7f16\u8bd1/\u76f4\u8bd1/\u88ab\u5e94\u7528\u7a0b\u5e8f\u5904\u7406\uff09\u3002\u5982\u679c\u4f60\u65e0\u6cd5\u5c06\u95ee\u9898\u7f29\u51cf\u5230\u4e00\u4e2a\u7279\u5b9a\u533a\u5757\uff0c\u5c31\u590d\u5236\u4e00\u4efd\u4ee3\u7801\u5e76\u79fb\u9664\u4e0d\u5f71\u54cd\u4ea7\u751f\u95ee\u9898\u884c\u4e3a\u7684\u90e8\u5206\u3002\u603b\u4e4b\uff0c\u6d4b\u8bd5\u7528\u4f8b\u8d8a\u5c0f\u8d8a\u597d\uff08\u67e5\u770b\u8bdd\u4e0d\u5728\u591a\u800c\u5728\u7cbe\u4e00\u8282\uff09\u3002 \u4e00\u822c\u800c\u8a00\uff0c\u8981\u5f97\u5230\u4e00\u6bb5\u76f8\u5f53\u7cbe\u7b80\u7684\u6d4b\u8bd5\u7528\u4f8b\u5e76\u4e0d\u592a\u5bb9\u6613\uff0c\u4f46\u6c38\u8fdc\u5148\u5c1d\u8bd5\u8fd9\u6837\u505a\u7684\u662f\u79cd\u597d\u4e60\u60ef\u3002\u8fd9\u79cd\u65b9\u5f0f\u53ef\u4ee5\u5e2e\u52a9\u4f60\u4e86\u89e3\u5982\u4f55\u81ea\u884c\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898 \u2014\u2014 \u800c\u4e14\u5373\u4f7f\u4f60\u7684\u5c1d\u8bd5\u4e0d\u6210\u529f\uff0c\u9ed1\u5ba2\u4eec\u4e5f\u4f1a\u770b\u5230\u4f60\u5728\u5c1d\u8bd5\u53d6\u5f97\u7b54\u6848\u7684\u8fc7\u7a0b\u4e2d\u4ed8\u51fa\u4e86\u52aa\u529b\uff0c\u8fd9\u53ef\u4ee5\u8ba9\u4ed6\u4eec\u66f4\u613f\u610f\u4e0e\u4f60\u5408\u4f5c\u3002 \u5982\u679c\u4f60\u53ea\u662f\u60f3\u8ba9\u522b\u4eba\u5e2e\u5fd9\u5ba1\u67e5\uff08Review\uff09\u4e00\u4e0b\u4ee3\u7801\uff0c\u5728\u4fe1\u7684\u5f00\u5934\u5c31\u8981\u8bf4\u51fa\u6765\uff0c\u5e76\u4e14\u4e00\u5b9a\u8981\u63d0\u5230\u4f60\u8ba4\u4e3a\u54ea\u4e00\u90e8\u5206\u7279\u522b\u9700\u8981\u5173\u6ce8\u4ee5\u53ca\u4e3a\u4ec0\u4e48\u3002","title":"\u8be2\u95ee\u6709\u5173\u4ee3\u7801\u7684\u95ee\u9898\u65f6"},{"location":"misc/how_to_ask_questions_the_smart_way/how_to_ask_questions_the_smart_way/#_23","text":"\u9ed1\u5ba2\u4eec\u5f88\u64c5\u957f\u5206\u8fa8\u54ea\u4e9b\u95ee\u9898\u662f\u5bb6\u5ead\u4f5c\u4e1a\u5f0f\u7684\u95ee\u9898\uff1b\u56e0\u4e3a\u6211\u4eec\u4e2d\u7684\u5927\u591a\u6570\u90fd\u66fe\u81ea\u5df1\u89e3\u51b3\u8fd9\u7c7b\u95ee\u9898\u3002\u540c\u6837\uff0c\u8fd9\u4e9b\u95ee\u9898\u5f97\u7531\u4f60\u6765\u641e\u5b9a\uff0c\u4f60\u4f1a\u4ece\u4e2d\u5b66\u5230\u4e1c\u897f\u3002\u4f60\u53ef\u4ee5\u8981\u6c42\u7ed9\u70b9\u63d0\u793a\uff0c\u4f46\u522b\u8981\u6c42\u5f97\u5230\u5b8c\u6574\u7684\u89e3\u51b3\u65b9\u6848\u3002 \u5982\u679c\u4f60\u6000\u7591\u81ea\u5df1\u78b0\u5230\u4e86\u4e00\u4e2a\u5bb6\u5ead\u4f5c\u4e1a\u5f0f\u7684\u95ee\u9898\uff0c\u4f46\u4ecd\u7136\u65e0\u6cd5\u89e3\u51b3\uff0c\u8bd5\u8bd5\u5728\u4f7f\u7528\u8005\u7fa4\u7ec4\uff0c\u8bba\u575b\u6216\uff08\u6700\u540e\u4e00\u62db\uff09\u5728\u9879\u76ee\u7684\u4f7f\u7528\u8005\u90ae\u4ef6\u5217\u8868\u6216\u8bba\u575b\u4e2d\u63d0\u95ee\u3002\u5c3d\u7ba1\u9ed1\u5ba2\u4eec\u4f1a\u770b\u51fa\u6765\uff0c\u4f46\u4e00\u4e9b\u6709\u7ecf\u9a8c\u7684\u4f7f\u7528\u8005\u4e5f\u8bb8\u4ecd\u4f1a\u7ed9\u4f60\u4e00\u4e9b\u63d0\u793a\u3002","title":"\u522b\u628a\u81ea\u5df1\u5bb6\u5ead\u4f5c\u4e1a\u7684\u95ee\u9898\u8d34\u4e0a\u6765"},{"location":"misc/how_to_ask_questions_the_smart_way/how_to_ask_questions_the_smart_way/#_24","text":"\u907f\u514d\u7528\u65e0\u610f\u4e49\u7684\u8bdd\u7ed3\u675f\u63d0\u95ee\uff0c\u4f8b\u5982 \u6709\u4eba\u80fd\u5e2e\u6211\u5417\uff1f \u6216\u8005 \u8fd9\u6709\u7b54\u6848\u5417\uff1f \u3002 \u9996\u5148\uff1a\u5982\u679c\u4f60\u5bf9\u95ee\u9898\u7684\u63cf\u8ff0\u4e0d\u662f\u5f88\u597d\uff0c\u8fd9\u6837\u95ee\u66f4\u662f\u753b\u86c7\u6dfb\u8db3\u3002 \u5176\u6b21\uff1a\u7531\u4e8e\u8fd9\u6837\u95ee\u662f\u753b\u86c7\u6dfb\u8db3\uff0c\u9ed1\u5ba2\u4eec\u4f1a\u5f88\u538c\u70e6\u4f60 \u2014\u2014 \u800c\u4e14\u901a\u5e38\u4f1a\u7528\u903b\u8f91\u4e0a\u6b63\u786e\uff0c\u4f46\u6beb\u65e0\u610f\u4e49\u7684\u56de\u7b54\u6765\u8868\u793a\u4ed6\u4eec\u7684\u8511\u89c6\uff0c \u4f8b\u5982\uff1a \u6ca1\u9519\uff0c\u6709\u4eba\u80fd\u5e2e\u4f60 \u6216\u8005 \u4e0d\uff0c\u6ca1\u7b54\u6848 \u3002 \u4e00\u822c\u6765\u8bf4\uff0c\u907f\u514d\u7528 \u662f\u6216\u5426 \u3001 \u5bf9\u6216\u9519 \u3001 \u6709\u6216\u6ca1\u6709 \u7c7b\u578b\u7684\u95ee\u53e5\uff0c\u9664\u975e\u4f60\u60f3\u5f97\u5230\u662f\u6216\u5426\u7c7b\u578b\u7684\u56de\u7b54\u3002","title":"\u53bb\u6389\u65e0\u610f\u4e49\u7684\u63d0\u95ee\u53e5"},{"location":"misc/how_to_ask_questions_the_smart_way/how_to_ask_questions_the_smart_way/#_25","text":"\u8fd9\u662f\u4f60\u7684\u95ee\u9898\uff0c\u4e0d\u662f\u6211\u4eec\u7684\u3002\u5ba3\u79f0 \u7d27\u6025 \u6781\u6709\u53ef\u80fd\u4e8b\u4e0e\u613f\u8fdd\uff1a\u5927\u591a\u6570\u9ed1\u5ba2\u4f1a\u76f4\u63a5\u5220\u9664\u65e0\u793c\u548c\u81ea\u79c1\u5730\u4f01\u56fe\u5373\u65f6\u5f15\u8d77\u5173\u6ce8\u7684\u95ee\u9898\u3002\u66f4\u4e25\u91cd\u7684\u662f\uff0c \u7d27\u6025 \u8fd9\u4e2a\u5b57\uff08\u6216\u662f\u5176\u4ed6\u4f01\u56fe\u5f15\u8d77\u5173\u6ce8\u7684\u6807\u9898\uff09\u901a\u5e38\u4f1a\u88ab\u5783\u573e\u4fe1\u8fc7\u6ee4\u5668\u8fc7\u6ee4\u6389 \u2014\u2014 \u4f60\u5e0c\u671b\u80fd\u770b\u5230\u4f60\u95ee\u9898\u7684\u4eba\u53ef\u80fd\u6c38\u8fdc\u4e5f\u770b\u4e0d\u5230\u3002 \u6709\u534a\u4e2a\u4f8b\u5916\u7684\u60c5\u51b5\u662f\uff0c\u5982\u679c\u4f60\u662f\u5728\u4e00\u4e9b\u5f88\u9ad8\u8c03\uff0c\u4f1a\u4f7f\u9ed1\u5ba2\u4eec\u5174\u594b\u7684\u5730\u65b9\uff0c\u4e5f\u8bb8\u503c\u5f97\u8fd9\u6837\u53bb\u505a\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5982\u679c\u4f60\u6709\u65f6\u95f4\u538b\u529b\uff0c\u4e5f\u5f88\u6709\u793c\u8c8c\u5730\u63d0\u5230\u8fd9\u70b9\uff0c\u4eba\u4eec\u4e5f\u8bb8\u4f1a\u6709\u5174\u8da3\u56de\u7b54\u5feb\u4e00\u70b9\u3002 \u5f53\u7136\uff0c\u8fd9\u98ce\u9669\u5f88\u5927\uff0c\u56e0\u4e3a\u9ed1\u5ba2\u4eec\u5174\u594b\u7684\u70b9\u591a\u534a\u4e0e\u4f60\u7684\u4e0d\u540c\u3002\u8b6c\u5982\u4ece NASA \u56fd\u9645\u7a7a\u95f4\u7ad9\uff08International Space Station\uff09\u53d1\u8fd9\u6837\u7684\u6807\u9898\u6ca1\u6709\u95ee\u9898\uff0c\u4f46\u7528\u81ea\u6211\u611f\u89c9\u826f\u597d\u7684\u6148\u5584\u884c\u4e3a\u6216\u653f\u6cbb\u539f\u56e0\u53d1\u80af\u5b9a\u4e0d\u884c\u3002\u4e8b\u5b9e\u4e0a\uff0c\u5f20\u8d34\u8bf8\u5982 \u7d27\u6025\uff1a\u5e2e\u6211\u6551\u6551\u8fd9\u4e2a\u6bdb\u7ed2\u7ed2\u7684\u5c0f\u6d77\u8c79\uff01 \u80af\u5b9a\u8ba9\u4f60\u88ab\u9ed1\u5ba2\u5ffd\u7565\u6216\u60f9\u607c\u4ed6\u4eec\uff0c\u5373\u4f7f\u4ed6\u4eec\u8ba4\u4e3a\u6bdb\u7ed2\u7ed2\u7684\u5c0f\u6d77\u8c79\u5f88\u91cd\u8981\u3002 \u5982\u679c\u4f60\u89c9\u5f97\u8fd9\u70b9\u5f88\u4e0d\u53ef\u601d\u8bae\uff0c\u6700\u597d\u518d\u628a\u8fd9\u4efd\u6307\u5357\u5269\u4e0b\u7684\u5185\u5bb9\u591a\u8bfb\u51e0\u904d\uff0c\u76f4\u5230\u4f60\u5f04\u61c2\u4e86\u518d\u53d1\u6587\u3002","title":"\u5373\u4f7f\u4f60\u5f88\u6025\u4e5f\u4e0d\u8981\u5728\u6807\u9898\u5199\u7d27\u6025"},{"location":"misc/how_to_ask_questions_the_smart_way/how_to_ask_questions_the_smart_way/#_26","text":"\u5f6c\u5f6c\u6709\u793c\uff0c\u591a\u7528 \u8bf7 \u548c \u8c22\u8c22\u60a8\u7684\u5173\u6ce8 \uff0c\u6216 \u8c22\u8c22\u4f60\u7684\u5173\u7167 \u3002\u8ba9\u5927\u5bb6\u90fd\u77e5\u9053\u4f60\u5bf9\u4ed6\u4eec\u82b1\u65f6\u95f4\u514d\u8d39\u63d0\u4f9b\u5e2e\u52a9\u5fc3\u5b58\u611f\u6fc0\u3002 \u5766\u767d\u8bf4\uff0c\u8fd9\u4e00\u70b9\u5e76\u6ca1\u6709\u6bd4\u6e05\u6670\u3001\u6b63\u786e\u3001\u7cbe\u51c6\u5e76\u5408\u6cd5\u8bed\u6cd5\u548c\u907f\u514d\u4f7f\u7528\u4e13\u7528\u683c\u5f0f\u91cd\u8981\uff08\u4e5f\u4e0d\u80fd\u53d6\u800c\u4ee3\u4e4b\uff09\u3002\u9ed1\u5ba2\u4eec\u4e00\u822c\u5b81\u53ef\u8bfb\u6709\u70b9\u5510\u7a81\u4f46\u6280\u672f\u4e0a\u9c9c\u660e\u7684 Bug \u62a5\u544a\uff0c\u800c\u4e0d\u662f\u90a3\u79cd\u6709\u793c\u4f46\u542b\u7cca\u7684\u62a5\u544a\u3002\uff08\u5982\u679c\u8fd9\u70b9\u8ba9\u4f60\u4e0d\u89e3\uff0c\u8bb0\u4f4f\u6211\u4eec\u662f\u6309\u95ee\u9898\u80fd\u6559\u7ed9\u6211\u4eec\u4ec0\u4e48\u6765\u8bc4\u4ef7\u95ee\u9898\u7684\u4ef7\u503c\u7684\uff09 \u7136\u800c\uff0c\u5982\u679c\u4f60\u6709\u4e00\u4e32\u7684\u95ee\u9898\u5f85\u89e3\u51b3\uff0c\u5ba2\u6c14\u4e00\u70b9\u80af\u5b9a\u4f1a\u589e\u52a0\u4f60\u5f97\u5230\u6709\u7528\u56de\u5e94\u7684\u673a\u4f1a\u3002 \uff08\u6211\u4eec\u6ce8\u610f\u5230\uff0c\u81ea\u4ece\u672c\u6307\u5357\u53d1\u5e03\u540e\uff0c\u4ece\u8d44\u6df1\u9ed1\u5ba2\u90a3\u91cc\u5f97\u5230\u7684\u552f\u4e00\u4e25\u91cd\u7f3a\u9677\u53cd\u9988\uff0c\u5c31\u662f\u5bf9\u9884\u5148\u9053\u8c22\u8fd9\u4e00\u6761\u3002\u4e00\u4e9b\u9ed1\u5ba2\u89c9\u5f97\u5148\u8c22\u4e86\u610f\u5473\u7740\u4e8b\u540e\u5c31\u4e0d\u7528\u518d\u611f\u8c22\u4efb\u4f55\u4eba\u7684\u6697\u793a\u3002\u6211\u4eec\u7684\u5efa\u8bae\u662f\u8981\u4e48\u5148\u8bf4 \u5148\u8c22\u4e86 \uff0c\u7136\u540e\u4e8b\u540e\u518d\u5bf9\u56de\u590d\u8005\u8868\u793a\u611f\u8c22\uff0c\u6216\u8005\u6362\u79cd\u65b9\u5f0f\u8868\u8fbe\u611f\u6fc0\uff0c\u8b6c\u5982\u7528 \u8c22\u8c22\u4f60\u7684\u5173\u6ce8 \u6216 \u8c22\u8c22\u4f60\u7684\u5173\u7167 \u3002\uff09","title":"\u793c\u591a\u4eba\u4e0d\u602a\uff0c\u800c\u4e14\u6709\u65f6\u8fd8\u5f88\u6709\u5e2e\u52a9"},{"location":"misc/how_to_ask_questions_the_smart_way/how_to_ask_questions_the_smart_way/#_27","text":"\u95ee\u9898\u89e3\u51b3\u540e\uff0c\u5411\u6240\u6709\u5e2e\u52a9\u8fc7\u4f60\u7684\u4eba\u53d1\u4e2a\u8bf4\u660e\uff0c\u8ba9\u4ed6\u4eec\u77e5\u9053\u95ee\u9898\u662f\u600e\u6837\u89e3\u51b3\u7684\uff0c\u5e76\u518d\u4e00\u6b21\u5411\u4ed6\u4eec\u8868\u793a\u611f\u8c22\u3002\u5982\u679c\u95ee\u9898\u5728\u65b0\u95fb\u7ec4\u6216\u8005\u90ae\u4ef6\u5217\u8868\u4e2d\u5f15\u8d77\u4e86\u5e7f\u6cdb\u5173\u6ce8\uff0c\u5e94\u8be5\u5728\u90a3\u91cc\u8d34\u4e00\u4e2a\u8bf4\u660e\u6bd4\u8f83\u6070\u5f53\u3002 \u6700\u7406\u60f3\u7684\u65b9\u5f0f\u662f\u5411\u6700\u521d\u63d0\u95ee\u7684\u8bdd\u9898\u56de\u590d\u6b64\u6d88\u606f\uff0c\u5e76\u5728\u6807\u9898\u4e2d\u5305\u542b \u5df2\u4fee\u6b63 \uff0c \u5df2\u89e3\u51b3 \u6216\u5176\u5b83\u540c\u7b49\u542b\u4e49\u7684\u660e\u663e\u6807\u8bb0\u3002\u5728\u4eba\u6765\u4eba\u5f80\u7684\u90ae\u4ef6\u5217\u8868\u91cc\uff0c\u4e00\u4e2a\u770b\u89c1\u8ba8\u8bba\u4e32 \u95ee\u9898 X \u548c \u95ee\u9898 X - \u5df2\u89e3\u51b3 \u7684\u6f5c\u5728\u56de\u590d\u8005\u5c31\u660e\u767d\u4e0d\u7528\u518d\u6d6a\u8d39\u65f6\u95f4\u4e86\uff08\u9664\u975e\u4ed6\u4e2a\u4eba\u89c9\u5f97\u95ee\u9898 X\u7684\u6709\u8da3\uff09\uff0c\u56e0\u6b64\u53ef\u4ee5\u5229\u7528\u6b64\u65f6\u95f4\u53bb\u89e3\u51b3\u5176\u5b83\u95ee\u9898\u3002 \u8865\u5145\u8bf4\u660e\u4e0d\u5fc5\u5f88\u957f\u6216\u662f\u5f88\u6df1\u5165\uff1b\u7b80\u5355\u7684\u4e00\u53e5 \u4f60\u597d\uff0c\u539f\u6765\u662f\u7f51\u7ebf\u51fa\u4e86\u95ee\u9898\uff01\u8c22\u8c22\u5927\u5bb6 \u2013 Bill \u6bd4\u4ec0\u4e48\u4e5f\u4e0d\u8bf4\u8981\u6765\u7684\u597d\u3002\u4e8b\u5b9e\u4e0a\uff0c\u9664\u975e\u7ed3\u8bba\u771f\u7684\u5f88\u6709\u6280\u672f\u542b\u91cf\uff0c\u5426\u5219\u7b80\u77ed\u53ef\u7231\u7684\u5c0f\u7ed3\u6bd4\u957f\u7bc7\u5927\u8bba\u66f4\u597d\u3002\u8bf4\u660e\u95ee\u9898\u662f\u600e\u6837\u89e3\u51b3\u7684\uff0c\u4f46\u5927\u53ef\u4e0d\u5fc5\u5c06\u89e3\u51b3\u95ee\u9898\u7684\u8fc7\u7a0b\u590d\u8ff0\u4e00\u904d\u3002 \u5bf9\u4e8e\u6709\u6df1\u5ea6\u7684\u95ee\u9898\uff0c\u5f20\u8d34\u8c03\u8bd5\u8bb0\u5f55\u7684\u6458\u8981\u662f\u6709\u5e2e\u52a9\u7684\u3002\u63cf\u8ff0\u95ee\u9898\u7684\u6700\u7ec8\u72b6\u6001\uff0c\u8bf4\u660e\u662f\u4ec0\u4e48\u89e3\u51b3\u4e86\u95ee\u9898\uff0c\u5728\u6b64\u4e4b\u540e\u624d\u6307\u660e\u53ef\u4ee5\u907f\u514d\u7684\u76f2\u70b9\u3002\u907f\u514d\u76f2\u70b9\u7684\u90e8\u5206\u5e94\u653e\u5728\u6b63\u786e\u7684\u89e3\u51b3\u65b9\u6848\u548c\u5176\u5b83\u603b\u7ed3\u6750\u6599\u4e4b\u540e\uff0c\u800c\u4e0d\u8981\u5c06\u6b64\u4fe1\u606f\u641e\u6210\u4fa6\u63a2\u63a8\u7406\u5c0f\u8bf4\u3002\u5217\u51fa\u90a3\u4e9b\u5e2e\u52a9\u8fc7\u4f60\u7684\u540d\u5b57\uff0c\u4f1a\u8ba9\u4f60\u4ea4\u5230\u66f4\u591a\u670b\u53cb\u3002 \u9664\u4e86\u6709\u793c\u8c8c\u548c\u6709\u5185\u6db5\u4ee5\u5916\uff0c\u8fd9\u79cd\u7c7b\u578b\u7684\u8865\u5145\u4e5f\u6709\u52a9\u4e8e\u4ed6\u4eba\u5728\u90ae\u4ef6\u5217\u8868/\u65b0\u95fb\u7fa4\u7ec4/\u8bba\u575b\u4e2d\u641c\u7d22\u5230\u771f\u6b63\u89e3\u51b3\u4f60\u95ee\u9898\u7684\u65b9\u6848\uff0c\u8ba9\u4ed6\u4eec\u4e5f\u4ece\u4e2d\u53d7\u76ca\u3002 \u81f3\u5c11\uff0c\u8fd9\u79cd\u8865\u5145\u6709\u52a9\u4e8e\u8ba9\u6bcf\u4f4d\u53c2\u4e0e\u534f\u52a9\u7684\u4eba\u56e0\u95ee\u9898\u7684\u89e3\u51b3\u800c\u4ece\u4e2d\u5f97\u5230\u6ee1\u8db3\u611f\u3002\u5982\u679c\u4f60\u81ea\u5df1\u4e0d\u662f\u6280\u672f\u4e13\u5bb6\u6216\u8005\u9ed1\u5ba2\uff0c\u90a3\u5c31\u76f8\u4fe1\u6211\u4eec\uff0c\u8fd9\u79cd\u611f\u89c9\u5bf9\u4e8e\u90a3\u4e9b\u4f60\u5411\u4ed6\u4eec\u6c42\u52a9\u7684\u5927\u5e08\u6216\u8005\u4e13\u5bb6\u800c\u8a00\uff0c\u662f\u975e\u5e38\u91cd\u8981\u7684\u3002\u95ee\u9898\u60ac\u800c\u672a\u51b3\u4f1a\u8ba9\u4eba\u7070\u5fc3\uff1b\u9ed1\u5ba2\u4eec\u6e34\u671b\u770b\u5230\u95ee\u9898\u88ab\u89e3\u51b3\u3002\u597d\u4eba\u6709\u597d\u62a5\uff0c\u6ee1\u8db3\u4ed6\u4eec\u7684\u6e34\u671b\uff0c\u4f60\u4f1a\u5728\u4e0b\u6b21\u63d0\u95ee\u65f6\u5c1d\u5230\u751c\u5934\u3002 \u601d\u8003\u4e00\u4e0b\u600e\u6837\u624d\u80fd\u907f\u514d\u4ed6\u4eba\u5c06\u6765\u4e5f\u9047\u5230\u7c7b\u4f3c\u7684\u95ee\u9898\uff0c\u81ea\u95ee\u5199\u4e00\u4efd\u6587\u4ef6\u6216\u52a0\u4e2a\u5e38\u89c1\u95ee\u9898\uff08FAQ\uff09\u4f1a\u4e0d\u4f1a\u6709\u5e2e\u52a9\u3002\u5982\u679c\u662f\u7684\u8bdd\u5c31\u5c06\u5b83\u4eec\u53d1\u7ed9\u7ef4\u62a4\u8005\u3002 \u5728\u9ed1\u5ba2\u4e2d\uff0c\u8fd9\u79cd\u826f\u597d\u7684\u540e\u7ee7\u884c\u52a8\u5b9e\u9645\u4e0a\u6bd4\u4f20\u7edf\u7684\u793c\u8282\u66f4\u4e3a\u91cd\u8981\uff0c\u4e5f\u662f\u4f60\u5982\u4f55\u900f\u8fc7\u5584\u5f85\u4ed6\u4eba\u800c\u8d62\u5f97\u58f0\u8a89\u7684\u65b9\u5f0f\uff0c\u8fd9\u662f\u975e\u5e38\u6709\u4ef7\u503c\u7684\u8d44\u4ea7\u3002","title":"\u95ee\u9898\u89e3\u51b3\u540e\uff0c\u52a0\u4e2a\u7b80\u77ed\u7684\u8865\u5145\u8bf4\u660e"},{"location":"misc/how_to_ask_questions_the_smart_way/how_to_ask_questions_the_smart_way/#_28","text":"","title":"\u5982\u4f55\u89e3\u8bfb\u7b54\u6848"},{"location":"misc/how_to_ask_questions_the_smart_way/how_to_ask_questions_the_smart_way/#rtfm-stfw","text":"\u6709\u4e00\u4e2a\u53e4\u8001\u800c\u795e\u5723\u7684\u4f20\u7edf\uff1a\u5982\u679c\u4f60\u6536\u5230 RTFM \uff08Read The Fucking Manual\uff09 \u7684\u56de\u5e94\uff0c\u56de\u7b54\u8005\u8ba4\u4e3a\u4f60\u5e94\u8be5\u53bb\u8bfb\u4ed6\u5988\u7684\u624b\u518c\u3002\u5f53\u7136\uff0c\u57fa\u672c\u4e0a\u4ed6\u662f\u5bf9\u7684\uff0c\u4f60\u5e94\u8be5\u53bb\u8bfb\u4e00\u8bfb\u3002 RTFM \u6709\u4e00\u4e2a\u5e74\u8f7b\u7684\u4eb2\u621a\u3002\u5982\u679c\u4f60\u6536\u5230 STFW\uff08Search The Fucking Web\uff09 \u7684\u56de\u5e94\uff0c\u56de\u7b54\u8005\u8ba4\u4e3a\u4f60\u5e94\u8be5\u5230\u4ed6\u5988\u7684\u7f51\u4e0a\u641c\u7d22\u3002\u90a3\u4eba\u591a\u534a\u4e5f\u662f\u5bf9\u7684\uff0c\u53bb\u641c\u7d22\u4e00\u4e0b\u5427\u3002\uff08\u66f4\u6e29\u548c\u4e00\u70b9\u7684\u8bf4\u6cd5\u662f Google \u662f\u4f60\u7684\u670b\u53cb \uff01\uff09 \u5728\u8bba\u575b\uff0c\u4f60\u4e5f\u53ef\u80fd\u88ab\u8981\u6c42\u53bb\u722c\u722c\u8bba\u575b\u7684\u65e7\u6587\u3002\u4e8b\u5b9e\u4e0a\uff0c\u6709\u4eba\u751a\u81f3\u53ef\u80fd\u70ed\u5fc3\u5730\u4e3a\u4f60\u63d0\u4f9b\u4ee5\u524d\u89e3\u51b3\u6b64\u95ee\u9898\u7684\u8ba8\u8bba\u4e32\u3002\u4f46\u4e0d\u8981\u4f9d\u8d56\u8fd9\u79cd\u5173\u7167\uff0c\u63d0\u95ee\u524d\u5e94\u8be5\u5148\u641c\u7d22\u4e00\u4e0b\u65e7\u6587\u3002 \u901a\u5e38\uff0c\u7528\u8fd9\u4e24\u53e5\u4e4b\u4e00\u56de\u7b54\u4f60\u7684\u4eba\u4f1a\u7ed9\u4f60\u4e00\u4efd\u5305\u542b\u4f60\u9700\u8981\u5185\u5bb9\u7684\u624b\u518c\u6216\u8005\u4e00\u4e2a\u7f51\u5740\uff0c\u800c\u4e14\u4ed6\u4eec\u6253\u8fd9\u4e9b\u5b57\u7684\u65f6\u5019\u4e5f\u6b63\u5728\u8bfb\u7740\u3002\u8fd9\u4e9b\u7b54\u590d\u610f\u5473\u7740\u56de\u7b54\u8005\u8ba4\u4e3a \u4f60\u9700\u8981\u7684\u4fe1\u606f\u975e\u5e38\u5bb9\u6613\u83b7\u5f97\uff1b \u4f60\u81ea\u5df1\u53bb\u641c\u7d22\u8fd9\u4e9b\u4fe1\u606f\u6bd4\u704c\u7ed9\u4f60\uff0c\u80fd\u8ba9\u4f60\u5b66\u5230\u66f4\u591a\u3002 \u4f60\u4e0d\u5e94\u8be5\u56e0\u6b64\u4e0d\u723d\uff1b\u4f9d\u7167\u9ed1\u5ba2\u7684\u6807\u51c6\uff0c\u4ed6\u5df2\u7ecf\u8868\u793a\u4e86\u5bf9\u4f60\u4e00\u5b9a\u7a0b\u5ea6\u7684\u5173\u6ce8\uff0c\u800c\u6ca1\u6709\u5bf9\u4f60\u7684\u8981\u6c42\u89c6\u800c\u4e0d\u89c1\u3002\u4f60\u5e94\u8be5\u5bf9\u4ed6\u7956\u6bcd\u822c\u7684\u6148\u7965\u8868\u793a\u611f\u8c22\u3002","title":"RTFM \u548c STFW\uff1a\u5982\u4f55\u77e5\u9053\u4f60\u5df2\u5b8c\u5168\u641e\u7838\u4e86"},{"location":"misc/how_to_ask_questions_the_smart_way/how_to_ask_questions_the_smart_way/#_29","text":"\u5982\u679c\u4f60\u770b\u4e0d\u61c2\u56de\u5e94\uff0c\u522b\u7acb\u523b\u8981\u6c42\u5bf9\u65b9\u89e3\u91ca\u3002\u50cf\u4f60\u4ee5\u524d\u8bd5\u7740\u81ea\u5df1\u89e3\u51b3\u95ee\u9898\u65f6\u90a3\u6837\uff08\u5229\u7528\u624b\u518c\uff0cFAQ\uff0c\u7f51\u7edc\uff0c\u8eab\u8fb9\u7684\u9ad8\u624b\uff09\uff0c\u5148\u8bd5\u7740\u53bb\u641e\u61c2\u4ed6\u7684\u56de\u5e94\u3002\u5982\u679c\u4f60\u771f\u7684\u9700\u8981\u5bf9\u65b9\u89e3\u91ca\uff0c\u8bb0\u5f97\u8868\u73b0\u51fa\u4f60\u5df2\u7ecf\u4ece\u4e2d\u5b66\u5230\u4e86\u70b9\u4ec0\u4e48\u3002 \u6bd4\u65b9\u8bf4\uff0c\u5982\u679c\u6211\u56de\u7b54\u4f60\uff1a \u770b\u6765\u4f3c\u4e4e\u662f zentry \u5361\u4f4f\u4e86\uff1b\u4f60\u5e94\u8be5\u5148\u6e05\u9664\u5b83\u3002 \uff0c\u7136\u540e\uff0c\u8fd9\u662f\u4e00\u4e2a\u5f88\u7cdf\u7684\u540e\u7eed\u95ee\u9898\u56de\u5e94\uff1a zentry \u662f\u4ec0\u4e48\uff1f \u597d\u7684\u95ee\u6cd5\u5e94\u8be5\u662f\u8fd9\u6837\uff1a \u54e6~~~\u6211\u770b\u8fc7\u8bf4\u660e\u4e86\u4f46\u662f\u53ea\u6709 -z \u548c -p \u4e24\u4e2a\u53c2\u6570\u4e2d\u63d0\u5230\u4e86 zentries\uff0c\u800c\u4e14\u8fd8\u90fd\u6ca1\u6709\u6e05\u695a\u7684\u89e3\u91ca\u5982\u4f55\u6e05\u9664\u5b83\u3002\u4f60\u662f\u6307\u8fd9\u4e24\u4e2a\u4e2d\u7684\u54ea\u4e00\u4e2a\u5417\uff1f\u8fd8\u662f\u6211\u770b\u6f0f\u4e86\u4ec0\u4e48\uff1f","title":"\u5982\u679c\u8fd8\u662f\u641e\u4e0d\u61c2"},{"location":"misc/how_to_ask_questions_the_smart_way/how_to_ask_questions_the_smart_way/#_30","text":"\u5f88\u591a\u9ed1\u5ba2\u5708\u5b50\u4e2d\u770b\u4f3c\u65e0\u793c\u7684\u884c\u4e3a\u5e76\u4e0d\u662f\u5b58\u5fc3\u5192\u72af\u3002\u76f8\u53cd\uff0c\u5b83\u662f\u76f4\u63a5\u4e86\u5f53\uff0c\u4e00\u9488\u89c1\u8840\u5f0f\u7684\u4ea4\u6d41\u98ce\u683c\uff0c\u8fd9\u79cd\u98ce\u683c\u66f4\u6ce8\u91cd\u89e3\u51b3\u95ee\u9898\uff0c\u800c\u4e0d\u662f\u4f7f\u4eba\u611f\u89c9\u8212\u670d\u800c\u5374\u6a21\u6a21\u7cca\u7cca\u3002 \u5982\u679c\u4f60\u89c9\u5f97\u88ab\u5192\u72af\u4e86\uff0c\u8bd5\u7740\u5e73\u9759\u5730\u53cd\u5e94\u3002\u5982\u679c\u6709\u4eba\u771f\u7684\u505a\u4e86\u51fa\u683c\u7684\u4e8b\uff0c\u90ae\u4ef6\u5217\u8868\u3001\u65b0\u95fb\u7fa4\u7ec4\u6216\u8bba\u575b\u4e2d\u7684\u524d\u8f88\u591a\u534a\u4f1a\u62db\u547c\u4ed6\u3002\u5982\u679c\u8fd9\u6ca1\u6709\u53d1\u751f\u800c\u4f60\u5374\u53d1\u706b\u4e86\uff0c\u90a3\u4e48\u4f60\u53d1\u706b\u5bf9\u8c61\u7684\u8a00\u8bed\u53ef\u80fd\u5728\u9ed1\u5ba2\u793e\u533a\u4e2d\u770b\u8d77\u6765\u662f\u6b63\u5e38\u7684\uff0c\u800c\u4f60\u5c06\u88ab\u89c6\u4e3a\u6709\u9519\u7684\u4e00\u65b9\uff0c\u8fd9\u5c06\u4f24\u5bb3\u5230\u4f60\u83b7\u53d6\u4fe1\u606f\u6216\u5e2e\u52a9\u7684\u673a\u4f1a\u3002 \u53e6\u4e00\u65b9\u9762\uff0c\u4f60\u5076\u5c14\u771f\u7684\u4f1a\u78b0\u5230\u65e0\u793c\u548c\u65e0\u804a\u7684\u8a00\u884c\u3002\u4e0e\u4e0a\u8ff0\u76f8\u53cd\uff0c\u5bf9\u771f\u6b63\u7684\u5192\u72af\u8005\u72e0\u72e0\u5730\u6253\u51fb\uff0c\u7528\u7280\u5229\u7684\u8bed\u8a00\u5c06\u5176\u9a73\u5f97\u4f53\u65e0\u5b8c\u80a4\u90fd\u662f\u53ef\u4ee5\u63a5\u53d7\u7684\u3002\u7136\u800c\uff0c\u5728\u884c\u4e8b\u4e4b\u524d\u4e00\u5b9a\u8981\u975e\u5e38\u975e\u5e38\u7684\u6709\u6839\u636e\u3002\u7ea0\u6b63\u65e0\u793c\u7684\u8a00\u8bba\u4e0e\u5f00\u59cb\u4e00\u573a\u6beb\u65e0\u610f\u4e49\u7684\u53e3\u6c34\u6218\u4ec5\u4e00\u7ebf\u4e4b\u9694\uff0c\u9ed1\u5ba2\u4eec\u81ea\u5df1\u83bd\u649e\u5730\u8d8a\u7ebf\u7684\u60c5\u51b5\u5e76\u4e0d\u9c9c\u89c1\u3002\u5982\u679c\u4f60\u662f\u65b0\u624b\u6216\u5916\u4eba\uff0c\u907f\u5f00\u8fd9\u79cd\u83bd\u649e\u7684\u673a\u4f1a\u5e76\u4e0d\u9ad8\u3002\u5982\u679c\u4f60\u60f3\u5f97\u5230\u7684\u662f\u4fe1\u606f\u800c\u4e0d\u662f\u6d88\u78e8\u65f6\u5149\uff0c\u8fd9\u65f6\u6700\u597d\u4e0d\u8981\u628a\u624b\u653e\u5728\u952e\u76d8\u4e0a\u4ee5\u514d\u5192\u9669\u3002 \uff08\u6709\u4e9b\u4eba\u65ad\u8a00\u5f88\u591a\u9ed1\u5ba2\u90fd\u6709\u8f7b\u5ea6\u7684\u81ea\u95ed\u75c7\u6216\u4e9a\u65af\u4f2f\u683c\u7efc\u5408\u75c7\uff0c\u7f3a\u5c11\u7528\u4e8e\u6da6\u6ed1\u4eba\u7c7b\u793e\u4f1a\u6b63\u5e38\u4ea4\u5f80\u6240\u9700\u7684\u795e\u7ecf\u3002\u8fd9\u65e2\u53ef\u80fd\u662f\u771f\u4e5f\u53ef\u80fd\u662f\u5047\u7684\u3002\u5982\u679c\u4f60\u81ea\u5df1\u4e0d\u662f\u9ed1\u5ba2\uff0c\u5174\u8bb8\u4f60\u8ba4\u4e3a\u6211\u4eec\u8111\u888b\u6709\u95ee\u9898\u8fd8\u80fd\u5e2e\u52a9\u4f60\u5e94\u4ed8\u6211\u4eec\u7684\u53e4\u602a\u884c\u4e3a\u3002\u53ea\u7ba1\u8fd9\u4e48\u5e72\u597d\u4e86\uff0c\u6211\u4eec\u4e0d\u5728\u4e4e\u3002\u6211\u4eec\u559c\u6b22\u6211\u4eec\u73b0\u5728\u8fd9\u4e2a\u6837\u5b50\uff0c\u5e76\u4e14\u901a\u5e38\u5bf9\u75c5\u60a3\u6807\u8bb0\u90fd\u6709\u7ad9\u5f97\u4f4f\u811a\u7684\u6000\u7591\uff09\u3002 Jeff Bigler \u7684\u89c2\u5bdf\u603b\u7ed3\u548c\u8fd9\u4e2a\u76f8\u5173\u4e5f\u503c\u5f97\u4e00\u8bfb ( tact filters )\u3002 \u5728\u4e0b\u4e00\u8282\uff0c\u6211\u4eec\u4f1a\u8c08\u5230\u53e6\u4e00\u4e2a\u95ee\u9898\uff0c\u5f53\u4f60\u884c\u4e3a\u4e0d\u5f53\u65f6\u6240\u4f1a\u53d7\u5230\u7684 \u5192\u72af \u3002","title":"\u5904\u7406\u65e0\u793c\u7684\u56de\u5e94"},{"location":"misc/how_to_ask_questions_the_smart_way/how_to_ask_questions_the_smart_way/#_31","text":"\u5728\u9ed1\u5ba2\u793e\u533a\u7684\u8bba\u575b\u4e2d\u6709\u90a3\u4e48\u51e0\u6b21\u4f60\u53ef\u80fd\u4f1a\u641e\u7838 \u2014\u2014 \u4ee5\u672c\u6307\u5357\u6240\u63cf\u8ff0\u5230\u7684\u6216\u7c7b\u4f3c\u7684\u65b9\u5f0f\u3002\u800c\u4f60\u4f1a\u5728\u516c\u5f00\u573a\u5408\u4e2d\u88ab\u544a\u77e5\u4f60\u662f\u5982\u4f55\u641e\u7838\u7684\uff0c\u4e5f\u8bb8\u653b\u51fb\u7684\u8a00\u8bed\u4e2d\u8fd8\u4f1a\u5e26\u70b9\u5939\u4e03\u5939\u516b\u7684\u989c\u8272\u3002 \u8fd9\u79cd\u4e8b\u53d1\u751f\u4ee5\u540e\uff0c\u4f60\u80fd\u505a\u7684\u6700\u7cdf\u7cd5\u7684\u4e8b\u83ab\u8fc7\u4e8e\u54c0\u568e\u4f60\u7684\u906d\u9047\u3001\u5ba3\u79f0\u88ab\u53e3\u5934\u653b\u51fb\u3001\u8981\u6c42\u9053\u6b49\u3001\u9ad8\u58f0\u5c16\u53eb\u3001\u618b\u95f7\u6c14\u3001\u5a01\u80c1\u8bc9\u8bf8\u6cd5\u5f8b\u3001\u5411\u5176\u96c7\u4e3b\u62a5\u6028\u3001\u5fd8\u4e86\u5173\u9a6c\u6876\u76d6\u7b49\u7b49\u3002\u76f8\u53cd\u5730\uff0c\u4f60\u8be5\u8fd9\u4e48\u505a\uff1a \u71ac\u8fc7\u53bb\uff0c\u8fd9\u5f88\u6b63\u5e38\u3002\u4e8b\u5b9e\u4e0a\uff0c\u5b83\u662f\u6709\u76ca\u5065\u5eb7\u4e14\u5408\u7406\u7684\u3002 \u793e\u533a\u7684\u6807\u51c6\u4e0d\u4f1a\u81ea\u884c\u7ef4\u6301\uff0c\u5b83\u4eec\u662f\u901a\u8fc7\u53c2\u4e0e\u8005\u79ef\u6781\u800c\u516c\u5f00\u5730\u6267\u884c\u6765\u7ef4\u6301\u7684\u3002\u4e0d\u8981\u54ed\u568e\u6240\u6709\u7684\u6279\u8bc4\u90fd\u5e94\u8be5\u901a\u8fc7\u79c1\u4e0b\u7684\u90ae\u4ef6\u4f20\u9001\uff0c\u5b83\u4e0d\u662f\u8fd9\u6837\u8fd0\u4f5c\u7684\u3002\u5f53\u6709\u4eba\u8bc4\u8bba\u4f60\u7684\u4e00\u4e2a\u8bf4\u6cd5\u6709\u8bef\u6216\u8005\u63d0\u51fa\u4e0d\u540c\u770b\u6cd5\u65f6\uff0c\u575a\u6301\u58f0\u79f0\u53d7\u5230\u4e2a\u4eba\u653b\u51fb\u4e5f\u6beb\u65e0\u76ca\u5904\uff0c\u8fd9\u4e9b\u90fd\u662f\u5931\u8d25\u8005\u7684\u6001\u5ea6\u3002 \u4e5f\u6709\u5176\u5b83\u7684\u9ed1\u5ba2\u8bba\u575b\uff0c\u53d7\u8fc7\u9ad8\u793c\u8282\u8981\u6c42\u7684\u8bef\u5bfc\uff0c\u7981\u6b62\u53c2\u4e0e\u8005\u5f20\u8d34\u4efb\u4f55\u5bf9\u522b\u4eba\u5e16\u5b50\u6311\u6bdb\u75c5\u7684\u6d88\u606f\uff0c\u5e76\u58f0\u79f0\u5982\u679c\u4f60\u4e0d\u60f3\u5e2e\u52a9\u7528\u6237\u5c31\u95ed\u5634\u3002 \u7ed3\u679c\u9020\u6210\u6709\u60f3\u6cd5\u7684\u53c2\u4e0e\u8005\u7eb7\u7eb7\u79bb\u5f00\uff0c\u8fd9\u4e48\u505a\u53ea\u4f1a\u4f7f\u5b83\u4eec\u6ca6\u4e3a\u6beb\u65e0\u610f\u4e49\u7684\u5520\u53e8\u4e0e\u65e0\u7528\u7684\u6280\u672f\u8bba\u575b\u3002 \u5938\u5f20\u7684\u8bb2\u6cd5\u662f\uff1a\u4f60\u8981\u7684\u662f\u201c\u53cb\u5584\u201d\uff08\u4ee5\u4e0a\u8ff0\u65b9\u5f0f\uff09\u8fd8\u662f\u6709\u7528\uff1f\u4e24\u4e2a\u91cc\u9762\u6311\u4e00\u4e2a\u3002 \u8bb0\u7740\uff1a\u5f53\u9ed1\u5ba2\u8bf4\u4f60\u641e\u7838\u4e86\uff0c\u5e76\u4e14\uff08\u65e0\u8bba\u591a\u4e48\u523a\u8033\uff09\u544a\u8bc9\u4f60\u522b\u518d\u8fd9\u6837\u505a\u65f6\uff0c\u4ed6\u6b63\u5728\u4e3a\u5173\u5fc3\u4f60\u548c\u4ed6\u7684\u793e\u533a\u800c\u884c\u52a8\u3002\u5bf9\u4ed6\u800c\u8a00\uff0c\u4e0d\u7406\u4f60\u5e76\u5c06\u4f60\u4ece\u4ed6\u7684\u751f\u6d3b\u4e2d\u6ee4\u6389\u66f4\u7b80\u5355\u3002\u5982\u679c\u4f60\u65e0\u6cd5\u505a\u5230\u611f\u8c22\uff0c\u81f3\u5c11\u8981\u8868\u73b0\u5f97\u6709\u70b9\u5c0a\u4e25\uff0c\u522b\u5927\u58f0\u54c0\u568e\uff0c\u4e5f\u522b\u56e0\u4e3a\u81ea\u5df1\u662f\u4e2a\u6709\u620f\u5267\u6027\u8d85\u7ea7\u654f\u611f\u7684\u7075\u9b42\u548c\u81ea\u4ee5\u4e3a\u6709\u8d44\u683c\u7684\u65b0\u6765\u8005\uff0c\u5c31\u6307\u671b\u522b\u4eba\u50cf\u5bf9\u5f85\u8106\u5f31\u7684\u6d0b\u5a03\u5a03\u90a3\u6837\u5bf9\u4f60\u3002 \u6709\u65f6\u5019\uff0c\u5373\u4f7f\u4f60\u6ca1\u6709\u641e\u7838\uff08\u6216\u8005\u53ea\u662f\u5728\u4ed6\u7684\u60f3\u50cf\u4e2d\u4f60\u641e\u7838\u4e86\uff09\uff0c\u6709\u4e9b\u4eba\u4e5f\u4f1a\u65e0\u7f18\u65e0\u6545\u5730\u653b\u51fb\u4f60\u672c\u4eba\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u62b1\u6028\u5012\u662f\u771f\u7684\u4f1a\u628a\u95ee\u9898\u641e\u7838\u3002 \u8fd9\u4e9b\u6765\u627e\u9ebb\u70e6\u7684\u4eba\u8981\u4e48\u662f\u6beb\u65e0\u529e\u6cd5\u4f46\u81ea\u4ee5\u4e3a\u662f\u4e13\u5bb6\u7684\u4e0d\u4e2d\u7528\u5bb6\u4f19\uff0c\u8981\u4e48\u5c31\u662f\u6d4b\u8bd5\u4f60\u662f\u5426\u771f\u4f1a\u641e\u7838\u7684\u5fc3\u7406\u4e13\u5bb6\u3002\u5176\u5b83\u8bfb\u8005\u8981\u4e48\u4e0d\u7406\u776c\uff0c\u8981\u4e48\u7528\u81ea\u5df1\u7684\u65b9\u5f0f\u5bf9\u4ed8\u4ed6\u4eec\u3002\u8fd9\u4e9b\u6765\u627e\u9ebb\u70e6\u7684\u4eba\u5728\u7ed9\u4ed6\u4eec\u81ea\u5df1\u627e\u9ebb\u70e6\uff0c\u8fd9\u70b9\u4f60\u4e0d\u7528\u64cd\u5fc3\u3002 \u4e5f\u522b\u8ba9\u81ea\u5df1\u5377\u5165\u53e3\u6c34\u6218\uff0c\u6700\u597d\u4e0d\u8981\u7406\u776c\u5927\u591a\u6570\u7684\u53e3\u6c34\u6218 -- \u5f53\u7136\uff0c\u8fd9\u662f\u5728\u4f60\u68c0\u9a8c\u5b83\u4eec\u53ea\u662f\u53e3\u6c34\u6218\uff0c\u5e76\u4e14\u672a\u6307\u51fa\u4f60\u6709\u641e\u7838\u7684\u5730\u65b9\uff0c\u540c\u65f6\u4e5f\u6ca1\u6709\u5de7\u5999\u5730\u5c06\u95ee\u9898\u771f\u6b63\u7684\u7b54\u6848\u85cf\u4e8e\u5176\u540e\uff08\u8fd9\u4e5f\u662f\u6709\u53ef\u80fd\u7684\uff09\u3002","title":"\u5982\u4f55\u907f\u514d\u626e\u6f14\u5931\u8d25\u8005"},{"location":"misc/how_to_ask_questions_the_smart_way/how_to_ask_questions_the_smart_way/#_32","text":"\u4ee5\u4e0b\u662f\u51e0\u4e2a\u7ecf\u5178\u8822\u95ee\u9898\uff0c\u4ee5\u53ca\u9ed1\u5ba2\u6ca1\u56de\u7b54\u65f6\u5fc3\u4e2d\u6240\u60f3\u7684\uff1a \u95ee\u9898\uff1a\u6211\u80fd\u5728\u54ea\u627e\u5230 X \u7a0b\u5e8f\u6216 X \u8d44\u6e90\uff1f \u95ee\u9898\uff1a\u6211\u600e\u6837\u7528 X \u505a Y\uff1f \u95ee\u9898\uff1a\u5982\u4f55\u8bbe\u5b9a\u6211\u7684 shell \u63d0\u793a\uff1f \u95ee\u9898\uff1a\u6211\u53ef\u4ee5\u7528 Bass-o-matic \u6587\u4ef6\u8f6c\u6362\u5de5\u5177\u5c06 AcmeCorp \u6863\u6848\u8f6c\u6362\u4e3a TeX \u683c\u5f0f\u5417\uff1f \u95ee\u9898\uff1a\u6211\u7684\u7a0b\u5e8f/\u8bbe\u5b9a/SQL \u8bed\u53e5\u6ca1\u6709\u7528 \u95ee\u9898\uff1a\u6211\u7684 Windows \u7535\u8111\u6709\u95ee\u9898\uff0c\u4f60\u80fd\u5e2e\u6211\u5417\uff1f \u95ee\u9898\uff1a\u6211\u7684\u7a0b\u5e8f\u4e0d\u4f1a\u52a8\u4e86\uff0c\u6211\u8ba4\u4e3a\u7cfb\u7edf\u5de5\u5177 X \u6709\u95ee\u9898 \u95ee\u9898\uff1a\u6211\u5728\u5b89\u88c5 Linux\uff08\u6216\u8005 X \uff09\u65f6\u6709\u95ee\u9898\uff0c\u4f60\u80fd\u5e2e\u6211\u5417\uff1f \u95ee\u9898\uff1a\u6211\u600e\u4e48\u624d\u80fd\u7834\u89e3 root \u5e10\u53f7/\u7a83\u53d6 OP \u7279\u6743/\u8bfb\u522b\u4eba\u7684\u90ae\u4ef6\u5462\uff1f \u95ee\u9898\uff1a\u6211\u80fd\u5728\u54ea\u627e\u5230 X \u7a0b\u5e8f\u6216 X \u8d44\u6e90\uff1f \u56de\u7b54\uff1a\u5c31\u5728\u6211\u627e\u5230\u5b83\u7684\u5730\u65b9\u554a\uff0c\u767d\u75f4 \u2014\u2014 \u641c\u7d22\u5f15\u64ce\u7684\u90a3\u4e00\u5934\u3002\u5929\u54ea\uff01\u96be\u9053\u8fd8\u6709\u4eba\u4e0d\u4f1a\u7528 Google \u5417\uff1f \u95ee\u9898\uff1a\u6211\u600e\u6837\u7528 X \u505a Y\uff1f \u56de\u7b54\uff1a\u5982\u679c\u4f60\u60f3\u89e3\u51b3\u7684\u662f Y \uff0c\u63d0\u95ee\u65f6\u522b\u7ed9\u51fa\u53ef\u80fd\u5e76\u4e0d\u6070\u5f53\u7684\u65b9\u6cd5\u3002\u8fd9\u79cd\u95ee\u9898\u8bf4\u660e\u63d0\u95ee\u8005\u4e0d\u4f46\u5bf9 X \u5b8c\u5168\u65e0\u77e5\uff0c\u4e5f\u5bf9 Y \u8981\u89e3\u51b3\u7684\u95ee\u9898\u7cca\u6d82\uff0c\u8fd8\u88ab\u7279\u5b9a\u5f62\u52bf\u7981\u9522\u4e86\u601d\u7ef4\u3002\u6700\u597d\u5ffd\u7565\u8fd9\u79cd\u4eba\uff0c\u7b49\u4ed6\u4eec\u628a\u95ee\u9898\u641e\u6e05\u695a\u4e86\u518d\u8bf4\u3002 \u95ee\u9898\uff1a\u5982\u4f55\u8bbe\u5b9a\u6211\u7684 shell \u63d0\u793a\uff1f\uff1f \u56de\u7b54\uff1a\u5982\u679c\u4f60\u6709\u8db3\u591f\u7684\u667a\u6167\u63d0\u8fd9\u4e2a\u95ee\u9898\uff0c\u4f60\u4e5f\u8be5\u6709\u8db3\u591f\u7684\u667a\u6167\u53bb RTFM\uff0c\u7136\u540e\u81ea\u5df1\u53bb\u627e\u51fa\u6765\u3002 \u95ee\u9898\uff1a\u6211\u53ef\u4ee5\u7528 Bass-o-matic \u6587\u4ef6\u8f6c\u6362\u5de5\u5177\u5c06 AcmeCorp \u6863\u6848\u8f6c\u6362\u4e3a TeX \u683c\u5f0f\u5417\uff1f \u56de\u7b54\uff1a\u8bd5\u8bd5\u770b\u5c31\u77e5\u9053\u4e86\u3002\u5982\u679c\u4f60\u8bd5\u8fc7\uff0c\u4f60\u65e2\u77e5\u9053\u4e86\u7b54\u6848\uff0c\u5c31\u4e0d\u7528\u6d6a\u8d39\u6211\u7684\u65f6\u95f4\u4e86\u3002 \u95ee\u9898\uff1a\u6211\u7684{\u7a0b\u5e8f/\u8bbe\u5b9a/SQL \u8bed\u53e5}\u4e0d\u5de5\u4f5c \u56de\u7b54\uff1a\u8fd9\u4e0d\u7b97\u662f\u95ee\u9898\u5427\uff0c\u6211\u5bf9\u8981\u6211\u95ee\u4f60\u4e8c\u5341\u4e2a\u95ee\u9898\u624d\u627e\u5f97\u51fa\u4f60\u771f\u6b63\u95ee\u9898\u7684\u95ee\u9898\u6ca1\u5174\u8da3 \u2014\u2014 \u6211\u6709\u66f4\u6709\u610f\u601d\u7684\u4e8b\u8981\u505a\u5462\u3002\u5728\u770b\u5230\u8fd9\u7c7b\u95ee\u9898\u7684\u65f6\u5019\uff0c\u6211\u7684\u53cd\u5e94\u901a\u5e38\u4e0d\u5916\u5982\u4e0b\u4e09\u79cd \u4f60\u8fd8\u6709\u4ec0\u4e48\u8981\u8865\u5145\u7684\u5417\uff1f \u771f\u7cdf\u7cd5\uff0c\u5e0c\u671b\u4f60\u80fd\u641e\u5b9a\u3002 \u8fd9\u5173\u6211\u6709\u4ec0\u4e48\u5c41\u4e8b\uff1f \u95ee\u9898\uff1a\u6211\u7684 Windows \u7535\u8111\u6709\u95ee\u9898\uff0c\u4f60\u80fd\u5e2e\u6211\u5417\uff1f \u56de\u7b54\uff1a\u80fd\u554a\uff0c\u6254\u6389\u5fae\u8f6f\u7684\u5783\u573e\uff0c\u6362\u4e2a\u50cf Linux \u6216 BSD \u7684\u5f00\u6e90\u64cd\u4f5c\u7cfb\u7edf\u5427\u3002 \u6ce8\u610f\uff1a\u5982\u679c\u7a0b\u5e8f\u6709\u5b98\u65b9\u7248 Windows \u6216\u8005\u4e0e Windows \u6709\u4e92\u52a8\uff08\u5982 Samba\uff09\uff0c\u4f60\u53ef\u4ee5\u95ee\u4e0e Windows \u76f8\u5173\u7684\u95ee\u9898\uff0c \u53ea\u662f\u522b\u5bf9\u95ee\u9898\u662f\u7531 Windows \u64cd\u4f5c\u7cfb\u7edf\u800c\u4e0d\u662f\u7a0b\u5e8f\u672c\u8eab\u9020\u6210\u7684\u56de\u590d\u611f\u5230\u60ca\u8bb6\uff0c \u56e0\u4e3a Windows \u4e00\u822c\u6765\u8bf4\u5b9e\u5728\u592a\u70c2\uff0c\u8fd9\u79cd\u8bf4\u6cd5\u901a\u5e38\u90fd\u662f\u5bf9\u7684\u3002 \u95ee\u9898\uff1a\u6211\u7684\u7a0b\u5e8f\u4e0d\u4f1a\u52a8\u4e86\uff0c\u6211\u8ba4\u4e3a\u7cfb\u7edf\u5de5\u5177 X \u6709\u95ee\u9898 \u56de\u7b54\uff1a\u4f60\u5b8c\u5168\u6709\u53ef\u80fd\u662f\u7b2c\u4e00\u4e2a\u6ce8\u610f\u5230\u88ab\u6210\u5343\u4e0a\u4e07\u7528\u6237\u53cd\u590d\u4f7f\u7528\u7684\u7cfb\u7edf\u8c03\u7528\u4e0e\u51fd\u6570\u5e93\u6863\u6848\u6709\u660e\u663e\u7f3a\u9677\u7684\u4eba\uff0c\u66f4\u6709\u53ef\u80fd\u7684\u662f\u4f60\u5b8c\u5168\u6ca1\u6709\u6839\u636e\u3002\u4e0d\u540c\u51e1\u54cd\u7684\u8bf4\u6cd5\u9700\u8981\u4e0d\u540c\u51e1\u54cd\u7684\u8bc1\u636e\uff0c\u5f53\u4f60\u8fd9\u6837\u58f0\u79f0\u65f6\uff0c\u4f60\u5fc5\u987b\u6709\u6e05\u695a\u800c\u8be6\u5c3d\u7684\u7f3a\u9677\u8bf4\u660e\u6587\u4ef6\u4f5c\u540e\u76fe\u3002 \u95ee\u9898\uff1a\u6211\u5728\u5b89\u88c5 Linux\uff08\u6216\u8005 X \uff09\u65f6\u6709\u95ee\u9898\uff0c\u4f60\u80fd\u5e2e\u6211\u5417\uff1f \u56de\u7b54\uff1a\u4e0d\u80fd\uff0c\u6211\u53ea\u6709\u4eb2\u81ea\u5728\u4f60\u7684\u7535\u8111\u4e0a\u52a8\u624b\u624d\u80fd\u627e\u5230\u6bdb\u75c5\u3002\u8fd8\u662f\u53bb\u627e\u4f60\u5f53\u5730\u7684 Linux \u4f7f\u7528\u7fa4\u7ec4\u8005\u5bfb\u6c42\u5b9e\u9645\u7684\u6307\u5bfc\u5427\uff08\u4f60\u80fd\u5728\u8fd9\u513f\u627e\u5230\u4f7f\u7528\u8005\u7fa4\u7ec4\u7684\u6e05\u5355\uff09\u3002 \u6ce8\u610f\uff1a\u5982\u679c\u5b89\u88c5\u95ee\u9898\u4e0e\u67d0 Linux \u7684\u53d1\u884c\u7248\u6709\u5173\uff0c\u5728\u5b83\u7684\u90ae\u4ef6\u5217\u8868\u3001\u8bba\u575b\u6216\u672c\u5730\u4f7f\u7528\u8005\u7fa4\u7ec4\u4e2d\u63d0\u95ee\u4e5f\u8bb8\u662f\u6070\u5f53\u7684\u3002\u6b64\u65f6\uff0c\u5e94\u63cf\u8ff0\u95ee\u9898\u7684\u51c6\u786e\u7ec6\u8282\u3002\u5728\u6b64\u4e4b\u524d\uff0c\u5148\u7528 Linux \u548c\u6240\u6709\u88ab\u6000\u7591\u7684\u786c\u4ef6\u4f5c\u5173\u952e\u8bcd\u4ed4\u7ec6\u641c\u7d22\u3002 \u95ee\u9898\uff1a\u6211\u600e\u4e48\u624d\u80fd\u7834\u89e3 root \u5e10\u53f7/\u7a83\u53d6 OP \u7279\u6743/\u8bfb\u522b\u4eba\u7684\u90ae\u4ef6\u5462\uff1f \u56de\u7b54\uff1a\u60f3\u8981\u8fd9\u6837\u505a\uff0c\u8bf4\u660e\u4e86\u4f60\u662f\u4e2a\u5351\u9119\u5c0f\u4eba\uff1b\u60f3\u627e\u4e2a\u9ed1\u5ba2\u5e2e\u4f60\uff0c\u8bf4\u660e\u4f60\u662f\u4e2a\u767d\u75f4\uff01","title":"\u4e0d\u8be5\u95ee\u7684\u95ee\u9898"},{"location":"misc/how_to_ask_questions_the_smart_way/how_to_ask_questions_the_smart_way/#_33","text":"\u6700\u540e\uff0c\u6211\u5c06\u900f\u8fc7\u4e3e\u4e00\u4e9b\u4f8b\u5b50\uff0c\u6765\u8bf4\u660e\u600e\u6837\u806a\u660e\u7684\u63d0\u95ee\uff1b\u540c\u4e00\u4e2a\u95ee\u9898\u7684\u4e24\u79cd\u95ee\u6cd5\u88ab\u653e\u5728\u4e00\u8d77\uff0c\u4e00\u79cd\u662f\u611a\u8822\u7684\uff0c\u53e6\u4e00\u79cd\u624d\u662f\u660e\u667a\u7684\u3002","title":"\u597d\u95ee\u9898\u4e0e\u8822\u95ee\u9898"},{"location":"misc/how_to_ask_questions_the_smart_way/how_to_ask_questions_the_smart_way/#_34","text":"\u6211\u53ef\u4ee5\u5728\u54ea\u513f\u627e\u5230\u5173\u4e8e Foonly Flurbamatic \u7684\u8d44\u6599\uff1f \u8fd9\u79cd\u95ee\u6cd5\u65e0\u975e\u60f3\u5f97\u5230 STFW \u8fd9\u6837\u7684\u56de\u7b54\u3002","title":"\u8822\u95ee\u9898\uff1a"},{"location":"misc/how_to_ask_questions_the_smart_way/how_to_ask_questions_the_smart_way/#_35","text":"\u6211\u7528 Google \u641c\u7d22\u8fc7 \"Foonly Flurbamatic 2600\"\uff0c\u4f46\u662f\u6ca1\u627e\u5230\u6709\u7528\u7684\u7ed3\u679c\u3002\u8c01\u77e5\u9053\u4e0a\u54ea\u513f\u53bb\u627e\u5bf9\u8fd9\u79cd\u8bbe\u5907\u7f16\u7a0b\u7684\u8d44\u6599\uff1f \u8fd9\u4e2a\u95ee\u9898\u5df2\u7ecf STFW \u8fc7\u4e86\uff0c\u770b\u8d77\u6765\u4ed6\u771f\u7684\u9047\u5230\u4e86\u9ebb\u70e6\u3002","title":"\u806a\u660e\u95ee\u9898\uff1a"},{"location":"misc/how_to_ask_questions_the_smart_way/how_to_ask_questions_the_smart_way/#_36","text":"\u6211\u4ece foo \u9879\u76ee\u627e\u6765\u7684\u6e90\u7801\u6ca1\u6cd5\u7f16\u8bd1\u3002\u5b83\u600e\u4e48\u8fd9\u4e48\u70c2\uff1f \u4ed6\u89c9\u5f97\u90fd\u662f\u522b\u4eba\u7684\u9519\uff0c\u8fd9\u4e2a\u50b2\u6162\u81ea\u5927\u7684\u63d0\u95ee\u8005\u3002","title":"\u8822\u95ee\u9898\uff1a"},{"location":"misc/how_to_ask_questions_the_smart_way/how_to_ask_questions_the_smart_way/#_37","text":"foo \u9879\u76ee\u4ee3\u7801\u5728 Nulix 6.2 \u7248\u4e0b\u65e0\u6cd5\u7f16\u8bd1\u901a\u8fc7\u3002\u6211\u8bfb\u8fc7\u4e86 FAQ\uff0c\u4f46\u91cc\u9762\u6ca1\u6709\u63d0\u5230\u8ddf Nulix \u6709\u5173\u7684\u95ee\u9898\u3002\u8fd9\u662f\u6211\u7f16\u8bd1\u8fc7\u7a0b\u7684\u8bb0\u5f55\uff0c\u6211\u6709\u4ec0\u4e48\u505a\u7684\u4e0d\u5bf9\u7684\u5730\u65b9\u5417\uff1f \u63d0\u95ee\u8005\u5df2\u7ecf\u6307\u660e\u4e86\u73af\u5883\uff0c\u4e5f\u8bfb\u8fc7\u4e86 FAQ\uff0c\u8fd8\u5217\u51fa\u4e86\u9519\u8bef\uff0c\u5e76\u4e14\u4ed6\u6ca1\u6709\u628a\u95ee\u9898\u7684\u8d23\u4efb\u63a8\u5230\u522b\u4eba\u5934\u4e0a\uff0c\u4ed6\u7684\u95ee\u9898\u503c\u5f97\u88ab\u5173\u6ce8\u3002","title":"\u806a\u660e\u95ee\u9898\uff1a"},{"location":"misc/how_to_ask_questions_the_smart_way/how_to_ask_questions_the_smart_way/#_38","text":"\u6211\u7684\u4e3b\u673a\u677f\u6709\u95ee\u9898\u4e86\uff0c\u8c01\u6765\u5e2e\u6211\uff1f \u67d0\u9ed1\u5ba2\u5bf9\u8fd9\u7c7b\u95ee\u9898\u7684\u56de\u7b54\u901a\u5e38\u662f\uff1a \u597d\u7684\uff0c\u8fd8\u8981\u5e2e\u4f60\u62cd\u62cd\u80cc\u548c\u6362\u5c3f\u5e03\u5417\uff1f \uff0c\u7136\u540e\u6309\u4e0b\u5220\u9664\u952e\u3002","title":"\u8822\u95ee\u9898\uff1a"},{"location":"misc/how_to_ask_questions_the_smart_way/how_to_ask_questions_the_smart_way/#_39","text":"\u6211\u5728 S2464 \u4e3b\u673a\u677f\u4e0a\u8bd5\u8fc7\u4e86 X \u3001 Y \u548c Z \uff0c\u4f46\u6ca1\u4ec0\u4e48\u4f5c\u7528\uff0c\u6211\u53c8\u8bd5\u4e86 A \u3001 B \u548c C \u3002\u8bf7\u6ce8\u610f\u5f53\u6211\u5c1d\u8bd5 C \u65f6\u7684\u5947\u602a\u73b0\u8c61\u3002\u663e\u7136 florbish \u6b63\u5728 grommicking\uff0c\u4f46\u7ed3\u679c\u51fa\u4eba\u610f\u6599\u3002\u901a\u5e38\u5728 Athlon MP \u4e3b\u673a\u677f\u4e0a\u5f15\u8d77 grommicking \u7684\u539f\u56e0\u662f\u4ec0\u4e48\uff1f\u6709\u8c01\u77e5\u9053\u63a5\u4e0b\u6765\u6211\u8be5\u505a\u4e9b\u4ec0\u4e48\u6d4b\u8bd5\u624d\u80fd\u627e\u51fa\u95ee\u9898\uff1f \u8fd9\u4e2a\u5bb6\u4f19\uff0c\u4ece\u53e6\u4e00\u4e2a\u89d2\u5ea6\u6765\u770b\uff0c\u503c\u5f97\u53bb\u56de\u7b54\u4ed6\u3002\u4ed6\u8868\u73b0\u51fa\u4e86\u89e3\u51b3\u95ee\u9898\u7684\u80fd\u529b\uff0c\u800c\u4e0d\u662f\u5750\u7b49\u5929\u4e0a\u6389\u7b54\u6848\u3002 \u5728\u6700\u540e\u4e00\u4e2a\u95ee\u9898\u4e2d\uff0c\u6ce8\u610f\u544a\u8bc9\u6211\u7b54\u6848\u548c\u7ed9\u6211\u542f\u793a\uff0c\u6307\u51fa\u6211\u8fd8\u5e94\u8be5\u505a\u4ec0\u4e48\u8bca\u65ad\u5de5\u4f5c\u4e4b\u95f4\u5fae\u5999\u800c\u53c8\u91cd\u8981\u7684\u533a\u522b\u3002 \u4e8b\u5b9e\u4e0a\uff0c\u540e\u4e00\u4e2a\u95ee\u9898\u6e90\u81ea\u4e8e 2001 \u5e74 8 \u6708\u5728 Linux \u5185\u6838\u90ae\u4ef6\u5217\u8868\uff08lkml\uff09\u4e0a\u7684\u4e00\u4e2a\u771f\u5b9e\u7684\u63d0\u95ee\u3002\u6211\uff08Eric\uff09\u5c31\u662f\u90a3\u4e2a\u63d0\u51fa\u95ee\u9898\u7684\u4eba\u3002\u6211\u5728 Tyan S2464 \u4e3b\u677f\u4e0a\u89c2\u5bdf\u5230\u4e86\u8fd9\u79cd\u65e0\u6cd5\u89e3\u91ca\u7684\u9501\u5b9a\u73b0\u8c61\uff0c\u5217\u8868\u6210\u5458\u4eec\u63d0\u4f9b\u4e86\u89e3\u51b3\u8fd9\u4e00\u95ee\u9898\u7684\u91cd\u8981\u4fe1\u606f\u3002 \u901a\u8fc7\u6211\u7684\u63d0\u95ee\u65b9\u6cd5\uff0c\u6211\u7ed9\u4e86\u522b\u4eba\u53ef\u4ee5\u5480\u56bc\u73a9\u5473\u7684\u4e1c\u897f\uff1b\u6211\u8bbe\u6cd5\u8ba9\u4eba\u4eec\u5f88\u5bb9\u6613\u53c2\u4e0e\u5e76\u4e14\u88ab\u5438\u5f15\u8fdb\u6765\u3002\u6211\u663e\u793a\u4e86\u81ea\u5df1\u5177\u5907\u548c\u4ed6\u4eec\u540c\u7b49\u7684\u80fd\u529b\uff0c\u5e76\u9080\u8bf7\u4ed6\u4eec\u4e0e\u6211\u5171\u540c\u63a2\u8ba8\u3002\u901a\u8fc7\u544a\u8bc9\u4ed6\u4eec\u6211\u6240\u8d70\u8fc7\u7684\u5f2f\u8def\uff0c\u4ee5\u907f\u514d\u4ed6\u4eec\u518d\u6d6a\u8d39\u65f6\u95f4\uff0c\u6211\u4e5f\u8868\u660e\u4e86\u5bf9\u4ed6\u4eec\u5b9d\u8d35\u65f6\u95f4\u7684\u5c0a\u91cd\u3002 \u4e8b\u540e\uff0c\u5f53\u6211\u5411\u6bcf\u4e2a\u4eba\u8868\u793a\u611f\u8c22\uff0c\u5e76\u4e14\u8d5e\u8d4f\u8fd9\u6b21\u826f\u597d\u7684\u8ba8\u8bba\u7ecf\u5386\u7684\u65f6\u5019\uff0c \u4e00\u4e2a Linux \u5185\u6838\u90ae\u4ef6\u5217\u8868\u7684\u6210\u5458\u8868\u793a\uff0c\u4ed6\u89c9\u5f97\u6211\u7684\u95ee\u9898\u5f97\u5230\u89e3\u51b3\u5e76\u975e\u7531\u4e8e\u6211\u662f\u8fd9\u4e2a\u5217\u8868\u4e2d\u7684\u540d\u4eba\uff0c\u800c\u662f\u56e0\u4e3a\u6211\u7528\u4e86\u6b63\u786e\u7684\u65b9\u5f0f\u6765\u63d0\u95ee\u3002 \u9ed1\u5ba2\u4ece\u67d0\u79cd\u89d2\u5ea6\u6765\u8bf4\u662f\u62e5\u6709\u4e30\u5bcc\u77e5\u8bc6\u4f46\u7f3a\u4e4f\u4eba\u60c5\u5473\u7684\u5bb6\u4f19\uff1b\u6211\u76f8\u4fe1\u4ed6\u662f\u5bf9\u7684\uff0c\u5982\u679c\u6211\u50cf\u4e2a\u4e5e\u8ba8\u8005\u90a3\u6837\u63d0\u95ee\uff0c\u4e0d\u8bba\u6211\u662f\u8c01\uff0c\u4e00\u5b9a\u4f1a\u60f9\u607c\u67d0\u4e9b\u4eba\u6216\u8005\u88ab\u4ed6\u4eec\u5ffd\u89c6\u3002\u4ed6\u5efa\u8bae\u6211\u8bb0\u4e0b\u8fd9\u4ef6\u4e8b\uff0c\u8fd9\u76f4\u63a5\u5bfc\u81f4\u4e86\u672c\u6307\u5357\u7684\u51fa\u73b0\u3002","title":"\u806a\u660e\u95ee\u9898\uff1a"},{"location":"misc/how_to_ask_questions_the_smart_way/how_to_ask_questions_the_smart_way/#_40","text":"\u5982\u679c\u4ecd\u5f97\u4e0d\u5230\u56de\u7b54\uff0c\u8bf7\u4e0d\u8981\u4ee5\u4e3a\u6211\u4eec\u89c9\u5f97\u65e0\u6cd5\u5e2e\u52a9\u4f60\u3002\u6709\u65f6\u53ea\u662f\u770b\u5230\u4f60\u95ee\u9898\u7684\u4eba\u4e0d\u77e5\u9053\u7b54\u6848\u7f62\u4e86\u3002\u6ca1\u6709\u56de\u5e94\u4e0d\u4ee3\u8868\u4f60\u88ab\u5ffd\u89c6\uff0c\u867d\u7136\u4e0d\u53ef\u5426\u8ba4\u8fd9\u79cd\u5dee\u522b\u5f88\u96be\u533a\u5206\u3002 \u603b\u7684\u6765\u8bf4\uff0c\u7b80\u5355\u7684\u91cd\u590d\u5f20\u8d34\u95ee\u9898\u662f\u4e2a\u5f88\u7cdf\u7684\u70b9\u5b50\u3002\u8fd9\u5c06\u88ab\u89c6\u4e3a\u65e0\u610f\u4e49\u7684\u55a7\u95f9\u3002\u6709\u70b9\u8010\u5fc3\uff0c\u77e5\u9053\u4f60\u95ee\u9898\u7b54\u6848\u7684\u4eba\u53ef\u80fd\u751f\u6d3b\u5728\u4e0d\u540c\u7684\u65f6\u533a\uff0c\u53ef\u80fd\u6b63\u5728\u7761\u89c9\uff0c\u4e5f\u6709\u53ef\u80fd\u4f60\u7684\u95ee\u9898\u4e00\u5f00\u59cb\u5c31\u6ca1\u6709\u7ec4\u7ec7\u597d\u3002 \u4f60\u53ef\u4ee5\u901a\u8fc7\u5176\u4ed6\u6e20\u9053\u83b7\u5f97\u5e2e\u52a9\uff0c\u8fd9\u4e9b\u6e20\u9053\u901a\u5e38\u66f4\u9002\u5408\u521d\u5b66\u8005\u7684\u9700\u8981\u3002 \u6709\u8bb8\u591a\u7f51\u4e0a\u7684\u4ee5\u53ca\u672c\u5730\u7684\u4f7f\u7528\u8005\u7fa4\u7ec4\uff0c\u7531\u70ed\u60c5\u7684\u8f6f\u4ef6\u7231\u597d\u8005\uff08\u5373\u4f7f\u4ed6\u4eec\u53ef\u80fd\u4ece\u6ca1\u4eb2\u81ea\u5199\u8fc7\u4efb\u4f55\u8f6f\u4ef6\uff09\u7ec4\u6210\u3002\u901a\u5e38\u4eba\u4eec\u7ec4\u5efa\u8fd9\u6837\u7684\u56e2\u4f53\u6765\u4e92\u76f8\u5e2e\u52a9\u5e76\u5e2e\u52a9\u65b0\u624b\u3002 \u53e6\u5916\uff0c\u4f60\u53ef\u4ee5\u5411\u5f88\u591a\u5546\u4e1a\u516c\u53f8\u5bfb\u6c42\u5e2e\u52a9\uff0c\u4e0d\u8bba\u516c\u53f8\u5927\u8fd8\u662f\u5c0f\u3002\u522b\u4e3a\u8981\u4ed8\u8d39\u624d\u80fd\u83b7\u5f97\u5e2e\u52a9\u800c\u611f\u5230\u6cae\u4e27\uff01\u6bd5\u7adf\uff0c\u5047\u4f7f\u4f60\u7684\u6c7d\u8f66\u53d1\u52a8\u673a\u6c7d\u7f38\u5bc6\u5c01\u5708\u7206\u6389\u4e86 \u2014\u2014 \u5b8c\u5168\u53ef\u80fd\u5982\u6b64 \u2014\u2014 \u4f60\u8fd8\u5f97\u628a\u5b83\u9001\u5230\u4fee\u8f66\u94fa\uff0c\u5e76\u4e14\u4e3a\u7ef4\u4fee\u4ed8\u8d39\u3002\u5c31\u7b97\u8f6f\u4ef6\u6ca1\u82b1\u8d39\u4f60\u4e00\u5206\u94b1\uff0c\u4f60\u4e5f\u4e0d\u80fd\u5f3a\u6c42\u6280\u672f\u652f\u6301\u603b\u662f\u514d\u8d39\u7684\u3002 \u5bf9\u50cf\u662f Linux \u8fd9\u79cd\u5927\u4f17\u5316\u7684\u8f6f\u4ef6\uff0c\u6bcf\u4e2a\u5f00\u53d1\u8005\u81f3\u5c11\u4f1a\u5bf9\u5e94\u5230\u4e0a\u4e07\u540d\u4f7f\u7528\u8005\u3002\u6839\u672c\u4e0d\u53ef\u80fd\u7531\u4e00\u4e2a\u4eba\u6765\u5904\u7406\u6765\u81ea\u4e0a\u4e07\u540d\u4f7f\u7528\u8005\u7684\u6c42\u52a9\u7535\u8bdd\u3002\u8981\u77e5\u9053\uff0c\u5373\u4f7f\u4f60\u8981\u4e3a\u8fd9\u4e9b\u534f\u52a9\u4ed8\u8d39\uff0c\u548c\u4f60\u6240\u8d2d\u4e70\u7684\u540c\u7c7b\u8f6f\u4ef6\u76f8\u6bd4\uff0c\u4f60\u6240\u4ed8\u51fa\u7684\u4e5f\u662f\u5fae\u4e0d\u8db3\u9053\u7684\uff08\u901a\u5e38\u5c01\u95ed\u6e90\u4ee3\u7801\u8f6f\u4ef6\u7684\u6280\u672f\u652f\u6301\u8d39\u7528\u6bd4\u5f00\u6e90\u8f6f\u4ef6\u7684\u8981\u9ad8\u5f97\u591a\uff0c\u4e14\u5185\u5bb9\u4e5f\u6ca1\u90a3\u4e48\u4e30\u5bcc\uff09\u3002","title":"\u5982\u679c\u5f97\u4e0d\u5230\u56de\u7b54"},{"location":"misc/how_to_ask_questions_the_smart_way/how_to_ask_questions_the_smart_way/#_41","text":"\u6001\u5ea6\u548c\u5584\u4e00\u70b9\u3002 \u95ee\u9898\u5e26\u6765\u7684\u538b\u529b\u5e38\u4f7f\u4eba\u663e\u5f97\u65e0\u793c\u6216\u611a\u8822\uff0c\u5176\u5b9e\u5e76\u4e0d\u662f\u8fd9\u6837\u3002 \u5bf9\u521d\u72af\u8005\u79c1\u4e0b\u56de\u590d\u3002 \u5bf9\u90a3\u4e9b\u5766\u8bda\u72af\u9519\u4e4b\u4eba\u6ca1\u6709\u5fc5\u8981\u5f53\u4f17\u7f9e\u8fb1\uff0c\u4e00\u4e2a\u771f\u6b63\u7684\u65b0\u624b\u4e5f\u8bb8\u8fde\u600e\u4e48\u641c\u7d22\u6216\u5728\u54ea\u627e\u5e38\u89c1\u95ee\u9898\u90fd\u4e0d\u77e5\u9053\u3002 \u5982\u679c\u4f60\u4e0d\u786e\u5b9a\uff0c\u4e00\u5b9a\u8981\u8bf4\u51fa\u6765\uff01 \u4e00\u4e2a\u542c\u8d77\u6765\u6743\u5a01\u7684\u9519\u8bef\u56de\u590d\u6bd4\u6ca1\u6709\u8fd8\u8981\u7cdf\uff0c\u522b\u56e0\u4e3a\u542c\u8d77\u6765\u50cf\u4e2a\u4e13\u5bb6\u5f88\u597d\u73a9\uff0c\u5c31\u7ed9\u522b\u4eba\u4e71\u6307\u8def\u3002\u8981\u8c26\u865a\u548c\u8bda\u5b9e\uff0c\u7ed9\u63d0\u95ee\u8005\u4e0e\u540c\u884c\u90fd\u6811\u4e2a\u597d\u699c\u6837\u3002 \u5982\u679c\u5e2e\u4e0d\u4e86\u5fd9\uff0c\u4e5f\u522b\u59a8\u788d\u4ed6\u3002 \u4e0d\u8981\u5728\u5b9e\u9645\u6b65\u9aa4\u4e0a\u5f00\u73a9\u7b11\uff0c\u90a3\u6837\u4e5f\u8bb8\u4f1a\u6bc1\u4e86\u4f7f\u7528\u8005\u7684\u8bbe\u7f6e \u2014\u2014 \u6709\u4e9b\u53ef\u601c\u7684\u5446\u74dc\u4f1a\u628a\u5b83\u5f53\u6210\u771f\u7684\u6307\u4ee4\u3002 \u8bd5\u63a2\u6027\u7684\u53cd\u95ee\u4ee5\u5f15\u51fa\u66f4\u591a\u7684\u7ec6\u8282\u3002 \u5982\u679c\u4f60\u505a\u5f97\u597d\uff0c\u63d0\u95ee\u8005\u53ef\u4ee5\u5b66\u5230\u70b9\u4e1c\u897f \u2014\u2014 \u4f60\u4e5f\u53ef\u4ee5\u3002\u8bd5\u8bd5\u5c06\u8822\u95ee\u9898\u8f6c\u53d8\u6210\u597d\u95ee\u9898\uff0c\u522b\u5fd8\u4e86\u6211\u4eec\u90fd\u66fe\u662f\u65b0\u624b\u3002 \u5c3d\u7ba1\u5bf9\u90a3\u4e9b\u61d2\u866b\u62b1\u6028\u4e00\u58f0 RTFM \u662f\u6b63\u5f53\u7684\uff0c\u80fd\u6307\u51fa\u6587\u4ef6\u7684\u4f4d\u7f6e\uff08\u5373\u4f7f\u53ea\u662f\u5efa\u8bae\u4e2a Google \u641c\u7d22\u5173\u952e\u8bcd\uff09\u4f1a\u66f4\u597d\u3002 \u5982\u679c\u4f60\u51b3\u5b9a\u56de\u7b54\uff0c\u5c31\u8bf7\u7ed9\u51fa\u597d\u7684\u7b54\u6848\u3002 \u5f53\u522b\u4eba\u6b63\u5728\u7528\u9519\u8bef\u7684\u5de5\u5177\u6216\u65b9\u6cd5\u65f6\u522b\u5efa\u8bae\u7b28\u62d9\u7684\u6743\u5b9c\u4e4b\u8ba1\uff08wordaround\uff09\uff0c\u5e94\u63a8\u8350\u66f4\u597d\u7684\u5de5\u5177\uff0c\u91cd\u65b0\u754c\u5b9a\u95ee\u9898\u3002 \u6b63\u9762\u7684\u56de\u7b54\u95ee\u9898\uff01 \u5982\u679c\u8fd9\u4e2a\u63d0\u95ee\u8005\u5df2\u7ecf\u5f88\u6df1\u5165\u7684\u7814\u7a76\u800c\u4e14\u4e5f\u8868\u660e\u5df2\u7ecf\u8bd5\u8fc7 X \u3001 Y \u3001 Z \u3001 A \u3001 B \u3001 C \u4f46\u6ca1\u5f97\u5230\u7ed3\u679c\uff0c\u56de\u7b54 \u8bd5\u8bd5\u770b A \u6216\u662f B \u6216\u8005 \u8bd5\u8bd5 X \u3001 Y \u3001 Z \u3001 A \u3001 B \u3001 C \u5e76\u9644\u4e0a\u4e00\u4e2a\u94fe\u63a5\u4e00\u70b9\u7528\u90fd\u6ca1\u6709\u3002 \u5e2e\u52a9\u4f60\u7684\u793e\u533a\u4ece\u95ee\u9898\u4e2d\u5b66\u4e60\u3002 \u5f53\u56de\u590d\u4e00\u4e2a\u597d\u95ee\u9898\u65f6\uff0c\u95ee\u95ee\u81ea\u5df1\u5982\u4f55\u4fee\u6539\u76f8\u5173\u6587\u4ef6\u6216\u5e38\u89c1\u95ee\u9898\u6587\u4ef6\u4ee5\u514d\u518d\u6b21\u89e3\u7b54\u540c\u6837\u7684\u95ee\u9898\uff1f\uff0c\u63a5\u7740\u518d\u5411\u6587\u4ef6\u7ef4\u62a4\u8005\u53d1\u4e00\u4efd\u8865\u4e01\u3002 \u5982\u679c\u4f60\u662f\u5728\u7814\u7a76\u4e00\u756a\u540e\u624d\u505a\u51fa\u7684\u56de\u7b54\uff0c \u5c55\u73b0\u4f60\u7684\u6280\u5de7\u800c\u4e0d\u662f\u76f4\u63a5\u7aef\u51fa\u7ed3\u679c\u3002 \u6bd5\u7adf\u6388\u4eba\u4ee5\u9c7c\u4e0d\u5982\u6388\u4eba\u4ee5\u6e14\u3002","title":"\u5982\u4f55\u66f4\u597d\u5730\u56de\u7b54\u95ee\u9898"},{"location":"misc/how_to_ask_questions_the_smart_way/how_to_interpret_answers/","text":"RTFM \u548c STFW\uff1a\u5982\u4f55\u77e5\u9053\u4f60\u5df2\u5b8c\u5168\u641e\u7838\u4e86 \u6709\u4e00\u4e2a\u53e4\u8001\u800c\u795e\u5723\u7684\u4f20\u7edf\uff1a\u5982\u679c\u4f60\u6536\u5230 RTFM \uff08Read The Fucking Manual\uff09 \u7684\u56de\u5e94\uff0c\u56de\u7b54\u8005\u8ba4\u4e3a\u4f60\u5e94\u8be5\u53bb\u8bfb\u4ed6\u5988\u7684\u624b\u518c\u3002\u5f53\u7136\uff0c\u57fa\u672c\u4e0a\u4ed6\u662f\u5bf9\u7684\uff0c\u4f60\u5e94\u8be5\u53bb\u8bfb\u4e00\u8bfb\u3002 RTFM \u6709\u4e00\u4e2a\u5e74\u8f7b\u7684\u4eb2\u621a\u3002\u5982\u679c\u4f60\u6536\u5230 STFW\uff08Search The Fucking Web\uff09 \u7684\u56de\u5e94\uff0c\u56de\u7b54\u8005\u8ba4\u4e3a\u4f60\u5e94\u8be5\u5230\u4ed6\u5988\u7684\u7f51\u4e0a\u641c\u7d22\u3002\u90a3\u4eba\u591a\u534a\u4e5f\u662f\u5bf9\u7684\uff0c\u53bb\u641c\u7d22\u4e00\u4e0b\u5427\u3002\uff08\u66f4\u6e29\u548c\u4e00\u70b9\u7684\u8bf4\u6cd5\u662f Google \u662f\u4f60\u7684\u670b\u53cb \uff01\uff09 \u5728\u8bba\u575b\uff0c\u4f60\u4e5f\u53ef\u80fd\u88ab\u8981\u6c42\u53bb\u722c\u722c\u8bba\u575b\u7684\u65e7\u6587\u3002\u4e8b\u5b9e\u4e0a\uff0c\u6709\u4eba\u751a\u81f3\u53ef\u80fd\u70ed\u5fc3\u5730\u4e3a\u4f60\u63d0\u4f9b\u4ee5\u524d\u89e3\u51b3\u6b64\u95ee\u9898\u7684\u8ba8\u8bba\u4e32\u3002\u4f46\u4e0d\u8981\u4f9d\u8d56\u8fd9\u79cd\u5173\u7167\uff0c\u63d0\u95ee\u524d\u5e94\u8be5\u5148\u641c\u7d22\u4e00\u4e0b\u65e7\u6587\u3002 \u901a\u5e38\uff0c\u7528\u8fd9\u4e24\u53e5\u4e4b\u4e00\u56de\u7b54\u4f60\u7684\u4eba\u4f1a\u7ed9\u4f60\u4e00\u4efd\u5305\u542b\u4f60\u9700\u8981\u5185\u5bb9\u7684\u624b\u518c\u6216\u8005\u4e00\u4e2a\u7f51\u5740\uff0c\u800c\u4e14\u4ed6\u4eec\u6253\u8fd9\u4e9b\u5b57\u7684\u65f6\u5019\u4e5f\u6b63\u5728\u8bfb\u7740\u3002\u8fd9\u4e9b\u7b54\u590d\u610f\u5473\u7740\u56de\u7b54\u8005\u8ba4\u4e3a \u4f60\u9700\u8981\u7684\u4fe1\u606f\u975e\u5e38\u5bb9\u6613\u83b7\u5f97\uff1b \u4f60\u81ea\u5df1\u53bb\u641c\u7d22\u8fd9\u4e9b\u4fe1\u606f\u6bd4\u704c\u7ed9\u4f60\uff0c\u80fd\u8ba9\u4f60\u5b66\u5230\u66f4\u591a\u3002 \u4f60\u4e0d\u5e94\u8be5\u56e0\u6b64\u4e0d\u723d\uff1b\u4f9d\u7167\u9ed1\u5ba2\u7684\u6807\u51c6\uff0c\u4ed6\u5df2\u7ecf\u8868\u793a\u4e86\u5bf9\u4f60\u4e00\u5b9a\u7a0b\u5ea6\u7684\u5173\u6ce8\uff0c\u800c\u6ca1\u6709\u5bf9\u4f60\u7684\u8981\u6c42\u89c6\u800c\u4e0d\u89c1\u3002\u4f60\u5e94\u8be5\u5bf9\u4ed6\u7956\u6bcd\u822c\u7684\u6148\u7965\u8868\u793a\u611f\u8c22\u3002 \u5982\u679c\u8fd8\u662f\u641e\u4e0d\u61c2 \u5982\u679c\u4f60\u770b\u4e0d\u61c2\u56de\u5e94\uff0c\u522b\u7acb\u523b\u8981\u6c42\u5bf9\u65b9\u89e3\u91ca\u3002\u50cf\u4f60\u4ee5\u524d\u8bd5\u7740\u81ea\u5df1\u89e3\u51b3\u95ee\u9898\u65f6\u90a3\u6837\uff08\u5229\u7528\u624b\u518c\uff0cFAQ\uff0c\u7f51\u7edc\uff0c\u8eab\u8fb9\u7684\u9ad8\u624b\uff09\uff0c\u5148\u8bd5\u7740\u53bb\u641e\u61c2\u4ed6\u7684\u56de\u5e94\u3002\u5982\u679c\u4f60\u771f\u7684\u9700\u8981\u5bf9\u65b9\u89e3\u91ca\uff0c\u8bb0\u5f97\u8868\u73b0\u51fa\u4f60\u5df2\u7ecf\u4ece\u4e2d\u5b66\u5230\u4e86\u70b9\u4ec0\u4e48\u3002 \u6bd4\u65b9\u8bf4\uff0c\u5982\u679c\u6211\u56de\u7b54\u4f60\uff1a \u770b\u6765\u4f3c\u4e4e\u662f zentry \u5361\u4f4f\u4e86\uff1b\u4f60\u5e94\u8be5\u5148\u6e05\u9664\u5b83\u3002 \uff0c\u7136\u540e\uff0c\u8fd9\u662f\u4e00\u4e2a\u5f88\u7cdf\u7684\u540e\u7eed\u95ee\u9898\u56de\u5e94\uff1a zentry \u662f\u4ec0\u4e48\uff1f \u597d\u7684\u95ee\u6cd5\u5e94\u8be5\u662f\u8fd9\u6837\uff1a \u54e6~~~\u6211\u770b\u8fc7\u8bf4\u660e\u4e86\u4f46\u662f\u53ea\u6709 -z \u548c -p \u4e24\u4e2a\u53c2\u6570\u4e2d\u63d0\u5230\u4e86 zentries\uff0c\u800c\u4e14\u8fd8\u90fd\u6ca1\u6709\u6e05\u695a\u7684\u89e3\u91ca\u5982\u4f55\u6e05\u9664\u5b83\u3002\u4f60\u662f\u6307\u8fd9\u4e24\u4e2a\u4e2d\u7684\u54ea\u4e00\u4e2a\u5417\uff1f\u8fd8\u662f\u6211\u770b\u6f0f\u4e86\u4ec0\u4e48\uff1f \u5904\u7406\u65e0\u793c\u7684\u56de\u5e94 \u5f88\u591a\u9ed1\u5ba2\u5708\u5b50\u4e2d\u770b\u4f3c\u65e0\u793c\u7684\u884c\u4e3a\u5e76\u4e0d\u662f\u5b58\u5fc3\u5192\u72af\u3002\u76f8\u53cd\uff0c\u5b83\u662f\u76f4\u63a5\u4e86\u5f53\uff0c\u4e00\u9488\u89c1\u8840\u5f0f\u7684\u4ea4\u6d41\u98ce\u683c\uff0c\u8fd9\u79cd\u98ce\u683c\u66f4\u6ce8\u91cd\u89e3\u51b3\u95ee\u9898\uff0c\u800c\u4e0d\u662f\u4f7f\u4eba\u611f\u89c9\u8212\u670d\u800c\u5374\u6a21\u6a21\u7cca\u7cca\u3002 \u5982\u679c\u4f60\u89c9\u5f97\u88ab\u5192\u72af\u4e86\uff0c\u8bd5\u7740\u5e73\u9759\u5730\u53cd\u5e94\u3002\u5982\u679c\u6709\u4eba\u771f\u7684\u505a\u4e86\u51fa\u683c\u7684\u4e8b\uff0c\u90ae\u4ef6\u5217\u8868\u3001\u65b0\u95fb\u7fa4\u7ec4\u6216\u8bba\u575b\u4e2d\u7684\u524d\u8f88\u591a\u534a\u4f1a\u62db\u547c\u4ed6\u3002\u5982\u679c\u8fd9\u6ca1\u6709\u53d1\u751f\u800c\u4f60\u5374\u53d1\u706b\u4e86\uff0c\u90a3\u4e48\u4f60\u53d1\u706b\u5bf9\u8c61\u7684\u8a00\u8bed\u53ef\u80fd\u5728\u9ed1\u5ba2\u793e\u533a\u4e2d\u770b\u8d77\u6765\u662f\u6b63\u5e38\u7684\uff0c\u800c\u4f60\u5c06\u88ab\u89c6\u4e3a\u6709\u9519\u7684\u4e00\u65b9\uff0c\u8fd9\u5c06\u4f24\u5bb3\u5230\u4f60\u83b7\u53d6\u4fe1\u606f\u6216\u5e2e\u52a9\u7684\u673a\u4f1a\u3002 \u53e6\u4e00\u65b9\u9762\uff0c\u4f60\u5076\u5c14\u771f\u7684\u4f1a\u78b0\u5230\u65e0\u793c\u548c\u65e0\u804a\u7684\u8a00\u884c\u3002\u4e0e\u4e0a\u8ff0\u76f8\u53cd\uff0c\u5bf9\u771f\u6b63\u7684\u5192\u72af\u8005\u72e0\u72e0\u5730\u6253\u51fb\uff0c\u7528\u7280\u5229\u7684\u8bed\u8a00\u5c06\u5176\u9a73\u5f97\u4f53\u65e0\u5b8c\u80a4\u90fd\u662f\u53ef\u4ee5\u63a5\u53d7\u7684\u3002\u7136\u800c\uff0c\u5728\u884c\u4e8b\u4e4b\u524d\u4e00\u5b9a\u8981\u975e\u5e38\u975e\u5e38\u7684\u6709\u6839\u636e\u3002\u7ea0\u6b63\u65e0\u793c\u7684\u8a00\u8bba\u4e0e\u5f00\u59cb\u4e00\u573a\u6beb\u65e0\u610f\u4e49\u7684\u53e3\u6c34\u6218\u4ec5\u4e00\u7ebf\u4e4b\u9694\uff0c\u9ed1\u5ba2\u4eec\u81ea\u5df1\u83bd\u649e\u5730\u8d8a\u7ebf\u7684\u60c5\u51b5\u5e76\u4e0d\u9c9c\u89c1\u3002\u5982\u679c\u4f60\u662f\u65b0\u624b\u6216\u5916\u4eba\uff0c\u907f\u5f00\u8fd9\u79cd\u83bd\u649e\u7684\u673a\u4f1a\u5e76\u4e0d\u9ad8\u3002\u5982\u679c\u4f60\u60f3\u5f97\u5230\u7684\u662f\u4fe1\u606f\u800c\u4e0d\u662f\u6d88\u78e8\u65f6\u5149\uff0c\u8fd9\u65f6\u6700\u597d\u4e0d\u8981\u628a\u624b\u653e\u5728\u952e\u76d8\u4e0a\u4ee5\u514d\u5192\u9669\u3002 \uff08\u6709\u4e9b\u4eba\u65ad\u8a00\u5f88\u591a\u9ed1\u5ba2\u90fd\u6709\u8f7b\u5ea6\u7684\u81ea\u95ed\u75c7\u6216\u4e9a\u65af\u4f2f\u683c\u7efc\u5408\u75c7\uff0c\u7f3a\u5c11\u7528\u4e8e\u6da6\u6ed1\u4eba\u7c7b\u793e\u4f1a\u6b63\u5e38\u4ea4\u5f80\u6240\u9700\u7684\u795e\u7ecf\u3002\u8fd9\u65e2\u53ef\u80fd\u662f\u771f\u4e5f\u53ef\u80fd\u662f\u5047\u7684\u3002\u5982\u679c\u4f60\u81ea\u5df1\u4e0d\u662f\u9ed1\u5ba2\uff0c\u5174\u8bb8\u4f60\u8ba4\u4e3a\u6211\u4eec\u8111\u888b\u6709\u95ee\u9898\u8fd8\u80fd\u5e2e\u52a9\u4f60\u5e94\u4ed8\u6211\u4eec\u7684\u53e4\u602a\u884c\u4e3a\u3002\u53ea\u7ba1\u8fd9\u4e48\u5e72\u597d\u4e86\uff0c\u6211\u4eec\u4e0d\u5728\u4e4e\u3002\u6211\u4eec\u559c\u6b22\u6211\u4eec\u73b0\u5728\u8fd9\u4e2a\u6837\u5b50\uff0c\u5e76\u4e14\u901a\u5e38\u5bf9\u75c5\u60a3\u6807\u8bb0\u90fd\u6709\u7ad9\u5f97\u4f4f\u811a\u7684\u6000\u7591\uff09\u3002 Jeff Bigler \u7684\u89c2\u5bdf\u603b\u7ed3\u548c\u8fd9\u4e2a\u76f8\u5173\u4e5f\u503c\u5f97\u4e00\u8bfb ( tact filters )\u3002 \u5728\u4e0b\u4e00\u8282\uff0c\u6211\u4eec\u4f1a\u8c08\u5230\u53e6\u4e00\u4e2a\u95ee\u9898\uff0c\u5f53\u4f60\u884c\u4e3a\u4e0d\u5f53\u65f6\u6240\u4f1a\u53d7\u5230\u7684 \u5192\u72af \u3002","title":"\u5982\u4f55\u89e3\u8bfb\u7b54\u6848"},{"location":"misc/how_to_ask_questions_the_smart_way/how_to_interpret_answers/#rtfm-stfw","text":"\u6709\u4e00\u4e2a\u53e4\u8001\u800c\u795e\u5723\u7684\u4f20\u7edf\uff1a\u5982\u679c\u4f60\u6536\u5230 RTFM \uff08Read The Fucking Manual\uff09 \u7684\u56de\u5e94\uff0c\u56de\u7b54\u8005\u8ba4\u4e3a\u4f60\u5e94\u8be5\u53bb\u8bfb\u4ed6\u5988\u7684\u624b\u518c\u3002\u5f53\u7136\uff0c\u57fa\u672c\u4e0a\u4ed6\u662f\u5bf9\u7684\uff0c\u4f60\u5e94\u8be5\u53bb\u8bfb\u4e00\u8bfb\u3002 RTFM \u6709\u4e00\u4e2a\u5e74\u8f7b\u7684\u4eb2\u621a\u3002\u5982\u679c\u4f60\u6536\u5230 STFW\uff08Search The Fucking Web\uff09 \u7684\u56de\u5e94\uff0c\u56de\u7b54\u8005\u8ba4\u4e3a\u4f60\u5e94\u8be5\u5230\u4ed6\u5988\u7684\u7f51\u4e0a\u641c\u7d22\u3002\u90a3\u4eba\u591a\u534a\u4e5f\u662f\u5bf9\u7684\uff0c\u53bb\u641c\u7d22\u4e00\u4e0b\u5427\u3002\uff08\u66f4\u6e29\u548c\u4e00\u70b9\u7684\u8bf4\u6cd5\u662f Google \u662f\u4f60\u7684\u670b\u53cb \uff01\uff09 \u5728\u8bba\u575b\uff0c\u4f60\u4e5f\u53ef\u80fd\u88ab\u8981\u6c42\u53bb\u722c\u722c\u8bba\u575b\u7684\u65e7\u6587\u3002\u4e8b\u5b9e\u4e0a\uff0c\u6709\u4eba\u751a\u81f3\u53ef\u80fd\u70ed\u5fc3\u5730\u4e3a\u4f60\u63d0\u4f9b\u4ee5\u524d\u89e3\u51b3\u6b64\u95ee\u9898\u7684\u8ba8\u8bba\u4e32\u3002\u4f46\u4e0d\u8981\u4f9d\u8d56\u8fd9\u79cd\u5173\u7167\uff0c\u63d0\u95ee\u524d\u5e94\u8be5\u5148\u641c\u7d22\u4e00\u4e0b\u65e7\u6587\u3002 \u901a\u5e38\uff0c\u7528\u8fd9\u4e24\u53e5\u4e4b\u4e00\u56de\u7b54\u4f60\u7684\u4eba\u4f1a\u7ed9\u4f60\u4e00\u4efd\u5305\u542b\u4f60\u9700\u8981\u5185\u5bb9\u7684\u624b\u518c\u6216\u8005\u4e00\u4e2a\u7f51\u5740\uff0c\u800c\u4e14\u4ed6\u4eec\u6253\u8fd9\u4e9b\u5b57\u7684\u65f6\u5019\u4e5f\u6b63\u5728\u8bfb\u7740\u3002\u8fd9\u4e9b\u7b54\u590d\u610f\u5473\u7740\u56de\u7b54\u8005\u8ba4\u4e3a \u4f60\u9700\u8981\u7684\u4fe1\u606f\u975e\u5e38\u5bb9\u6613\u83b7\u5f97\uff1b \u4f60\u81ea\u5df1\u53bb\u641c\u7d22\u8fd9\u4e9b\u4fe1\u606f\u6bd4\u704c\u7ed9\u4f60\uff0c\u80fd\u8ba9\u4f60\u5b66\u5230\u66f4\u591a\u3002 \u4f60\u4e0d\u5e94\u8be5\u56e0\u6b64\u4e0d\u723d\uff1b\u4f9d\u7167\u9ed1\u5ba2\u7684\u6807\u51c6\uff0c\u4ed6\u5df2\u7ecf\u8868\u793a\u4e86\u5bf9\u4f60\u4e00\u5b9a\u7a0b\u5ea6\u7684\u5173\u6ce8\uff0c\u800c\u6ca1\u6709\u5bf9\u4f60\u7684\u8981\u6c42\u89c6\u800c\u4e0d\u89c1\u3002\u4f60\u5e94\u8be5\u5bf9\u4ed6\u7956\u6bcd\u822c\u7684\u6148\u7965\u8868\u793a\u611f\u8c22\u3002","title":"RTFM \u548c STFW\uff1a\u5982\u4f55\u77e5\u9053\u4f60\u5df2\u5b8c\u5168\u641e\u7838\u4e86"},{"location":"misc/how_to_ask_questions_the_smart_way/how_to_interpret_answers/#_1","text":"\u5982\u679c\u4f60\u770b\u4e0d\u61c2\u56de\u5e94\uff0c\u522b\u7acb\u523b\u8981\u6c42\u5bf9\u65b9\u89e3\u91ca\u3002\u50cf\u4f60\u4ee5\u524d\u8bd5\u7740\u81ea\u5df1\u89e3\u51b3\u95ee\u9898\u65f6\u90a3\u6837\uff08\u5229\u7528\u624b\u518c\uff0cFAQ\uff0c\u7f51\u7edc\uff0c\u8eab\u8fb9\u7684\u9ad8\u624b\uff09\uff0c\u5148\u8bd5\u7740\u53bb\u641e\u61c2\u4ed6\u7684\u56de\u5e94\u3002\u5982\u679c\u4f60\u771f\u7684\u9700\u8981\u5bf9\u65b9\u89e3\u91ca\uff0c\u8bb0\u5f97\u8868\u73b0\u51fa\u4f60\u5df2\u7ecf\u4ece\u4e2d\u5b66\u5230\u4e86\u70b9\u4ec0\u4e48\u3002 \u6bd4\u65b9\u8bf4\uff0c\u5982\u679c\u6211\u56de\u7b54\u4f60\uff1a \u770b\u6765\u4f3c\u4e4e\u662f zentry \u5361\u4f4f\u4e86\uff1b\u4f60\u5e94\u8be5\u5148\u6e05\u9664\u5b83\u3002 \uff0c\u7136\u540e\uff0c\u8fd9\u662f\u4e00\u4e2a\u5f88\u7cdf\u7684\u540e\u7eed\u95ee\u9898\u56de\u5e94\uff1a zentry \u662f\u4ec0\u4e48\uff1f \u597d\u7684\u95ee\u6cd5\u5e94\u8be5\u662f\u8fd9\u6837\uff1a \u54e6~~~\u6211\u770b\u8fc7\u8bf4\u660e\u4e86\u4f46\u662f\u53ea\u6709 -z \u548c -p \u4e24\u4e2a\u53c2\u6570\u4e2d\u63d0\u5230\u4e86 zentries\uff0c\u800c\u4e14\u8fd8\u90fd\u6ca1\u6709\u6e05\u695a\u7684\u89e3\u91ca\u5982\u4f55\u6e05\u9664\u5b83\u3002\u4f60\u662f\u6307\u8fd9\u4e24\u4e2a\u4e2d\u7684\u54ea\u4e00\u4e2a\u5417\uff1f\u8fd8\u662f\u6211\u770b\u6f0f\u4e86\u4ec0\u4e48\uff1f","title":"\u5982\u679c\u8fd8\u662f\u641e\u4e0d\u61c2"},{"location":"misc/how_to_ask_questions_the_smart_way/how_to_interpret_answers/#_2","text":"\u5f88\u591a\u9ed1\u5ba2\u5708\u5b50\u4e2d\u770b\u4f3c\u65e0\u793c\u7684\u884c\u4e3a\u5e76\u4e0d\u662f\u5b58\u5fc3\u5192\u72af\u3002\u76f8\u53cd\uff0c\u5b83\u662f\u76f4\u63a5\u4e86\u5f53\uff0c\u4e00\u9488\u89c1\u8840\u5f0f\u7684\u4ea4\u6d41\u98ce\u683c\uff0c\u8fd9\u79cd\u98ce\u683c\u66f4\u6ce8\u91cd\u89e3\u51b3\u95ee\u9898\uff0c\u800c\u4e0d\u662f\u4f7f\u4eba\u611f\u89c9\u8212\u670d\u800c\u5374\u6a21\u6a21\u7cca\u7cca\u3002 \u5982\u679c\u4f60\u89c9\u5f97\u88ab\u5192\u72af\u4e86\uff0c\u8bd5\u7740\u5e73\u9759\u5730\u53cd\u5e94\u3002\u5982\u679c\u6709\u4eba\u771f\u7684\u505a\u4e86\u51fa\u683c\u7684\u4e8b\uff0c\u90ae\u4ef6\u5217\u8868\u3001\u65b0\u95fb\u7fa4\u7ec4\u6216\u8bba\u575b\u4e2d\u7684\u524d\u8f88\u591a\u534a\u4f1a\u62db\u547c\u4ed6\u3002\u5982\u679c\u8fd9\u6ca1\u6709\u53d1\u751f\u800c\u4f60\u5374\u53d1\u706b\u4e86\uff0c\u90a3\u4e48\u4f60\u53d1\u706b\u5bf9\u8c61\u7684\u8a00\u8bed\u53ef\u80fd\u5728\u9ed1\u5ba2\u793e\u533a\u4e2d\u770b\u8d77\u6765\u662f\u6b63\u5e38\u7684\uff0c\u800c\u4f60\u5c06\u88ab\u89c6\u4e3a\u6709\u9519\u7684\u4e00\u65b9\uff0c\u8fd9\u5c06\u4f24\u5bb3\u5230\u4f60\u83b7\u53d6\u4fe1\u606f\u6216\u5e2e\u52a9\u7684\u673a\u4f1a\u3002 \u53e6\u4e00\u65b9\u9762\uff0c\u4f60\u5076\u5c14\u771f\u7684\u4f1a\u78b0\u5230\u65e0\u793c\u548c\u65e0\u804a\u7684\u8a00\u884c\u3002\u4e0e\u4e0a\u8ff0\u76f8\u53cd\uff0c\u5bf9\u771f\u6b63\u7684\u5192\u72af\u8005\u72e0\u72e0\u5730\u6253\u51fb\uff0c\u7528\u7280\u5229\u7684\u8bed\u8a00\u5c06\u5176\u9a73\u5f97\u4f53\u65e0\u5b8c\u80a4\u90fd\u662f\u53ef\u4ee5\u63a5\u53d7\u7684\u3002\u7136\u800c\uff0c\u5728\u884c\u4e8b\u4e4b\u524d\u4e00\u5b9a\u8981\u975e\u5e38\u975e\u5e38\u7684\u6709\u6839\u636e\u3002\u7ea0\u6b63\u65e0\u793c\u7684\u8a00\u8bba\u4e0e\u5f00\u59cb\u4e00\u573a\u6beb\u65e0\u610f\u4e49\u7684\u53e3\u6c34\u6218\u4ec5\u4e00\u7ebf\u4e4b\u9694\uff0c\u9ed1\u5ba2\u4eec\u81ea\u5df1\u83bd\u649e\u5730\u8d8a\u7ebf\u7684\u60c5\u51b5\u5e76\u4e0d\u9c9c\u89c1\u3002\u5982\u679c\u4f60\u662f\u65b0\u624b\u6216\u5916\u4eba\uff0c\u907f\u5f00\u8fd9\u79cd\u83bd\u649e\u7684\u673a\u4f1a\u5e76\u4e0d\u9ad8\u3002\u5982\u679c\u4f60\u60f3\u5f97\u5230\u7684\u662f\u4fe1\u606f\u800c\u4e0d\u662f\u6d88\u78e8\u65f6\u5149\uff0c\u8fd9\u65f6\u6700\u597d\u4e0d\u8981\u628a\u624b\u653e\u5728\u952e\u76d8\u4e0a\u4ee5\u514d\u5192\u9669\u3002 \uff08\u6709\u4e9b\u4eba\u65ad\u8a00\u5f88\u591a\u9ed1\u5ba2\u90fd\u6709\u8f7b\u5ea6\u7684\u81ea\u95ed\u75c7\u6216\u4e9a\u65af\u4f2f\u683c\u7efc\u5408\u75c7\uff0c\u7f3a\u5c11\u7528\u4e8e\u6da6\u6ed1\u4eba\u7c7b\u793e\u4f1a\u6b63\u5e38\u4ea4\u5f80\u6240\u9700\u7684\u795e\u7ecf\u3002\u8fd9\u65e2\u53ef\u80fd\u662f\u771f\u4e5f\u53ef\u80fd\u662f\u5047\u7684\u3002\u5982\u679c\u4f60\u81ea\u5df1\u4e0d\u662f\u9ed1\u5ba2\uff0c\u5174\u8bb8\u4f60\u8ba4\u4e3a\u6211\u4eec\u8111\u888b\u6709\u95ee\u9898\u8fd8\u80fd\u5e2e\u52a9\u4f60\u5e94\u4ed8\u6211\u4eec\u7684\u53e4\u602a\u884c\u4e3a\u3002\u53ea\u7ba1\u8fd9\u4e48\u5e72\u597d\u4e86\uff0c\u6211\u4eec\u4e0d\u5728\u4e4e\u3002\u6211\u4eec\u559c\u6b22\u6211\u4eec\u73b0\u5728\u8fd9\u4e2a\u6837\u5b50\uff0c\u5e76\u4e14\u901a\u5e38\u5bf9\u75c5\u60a3\u6807\u8bb0\u90fd\u6709\u7ad9\u5f97\u4f4f\u811a\u7684\u6000\u7591\uff09\u3002 Jeff Bigler \u7684\u89c2\u5bdf\u603b\u7ed3\u548c\u8fd9\u4e2a\u76f8\u5173\u4e5f\u503c\u5f97\u4e00\u8bfb ( tact filters )\u3002 \u5728\u4e0b\u4e00\u8282\uff0c\u6211\u4eec\u4f1a\u8c08\u5230\u53e6\u4e00\u4e2a\u95ee\u9898\uff0c\u5f53\u4f60\u884c\u4e3a\u4e0d\u5f53\u65f6\u6240\u4f1a\u53d7\u5230\u7684 \u5192\u72af \u3002","title":"\u5904\u7406\u65e0\u793c\u7684\u56de\u5e94"},{"location":"misc/how_to_ask_questions_the_smart_way/if_you_cant_get_an_answer/","text":"\u5982\u679c\u4ecd\u5f97\u4e0d\u5230\u56de\u7b54\uff0c\u8bf7\u4e0d\u8981\u4ee5\u4e3a\u6211\u4eec\u89c9\u5f97\u65e0\u6cd5\u5e2e\u52a9\u4f60\u3002\u6709\u65f6\u53ea\u662f\u770b\u5230\u4f60\u95ee\u9898\u7684\u4eba\u4e0d\u77e5\u9053\u7b54\u6848\u7f62\u4e86\u3002\u6ca1\u6709\u56de\u5e94\u4e0d\u4ee3\u8868\u4f60\u88ab\u5ffd\u89c6\uff0c\u867d\u7136\u4e0d\u53ef\u5426\u8ba4\u8fd9\u79cd\u5dee\u522b\u5f88\u96be\u533a\u5206\u3002 \u603b\u7684\u6765\u8bf4\uff0c\u7b80\u5355\u7684\u91cd\u590d\u5f20\u8d34\u95ee\u9898\u662f\u4e2a\u5f88\u7cdf\u7684\u70b9\u5b50\u3002\u8fd9\u5c06\u88ab\u89c6\u4e3a\u65e0\u610f\u4e49\u7684\u55a7\u95f9\u3002\u6709\u70b9\u8010\u5fc3\uff0c\u77e5\u9053\u4f60\u95ee\u9898\u7b54\u6848\u7684\u4eba\u53ef\u80fd\u751f\u6d3b\u5728\u4e0d\u540c\u7684\u65f6\u533a\uff0c\u53ef\u80fd\u6b63\u5728\u7761\u89c9\uff0c\u4e5f\u6709\u53ef\u80fd\u4f60\u7684\u95ee\u9898\u4e00\u5f00\u59cb\u5c31\u6ca1\u6709\u7ec4\u7ec7\u597d\u3002 \u4f60\u53ef\u4ee5\u901a\u8fc7\u5176\u4ed6\u6e20\u9053\u83b7\u5f97\u5e2e\u52a9\uff0c\u8fd9\u4e9b\u6e20\u9053\u901a\u5e38\u66f4\u9002\u5408\u521d\u5b66\u8005\u7684\u9700\u8981\u3002 \u6709\u8bb8\u591a\u7f51\u4e0a\u7684\u4ee5\u53ca\u672c\u5730\u7684\u4f7f\u7528\u8005\u7fa4\u7ec4\uff0c\u7531\u70ed\u60c5\u7684\u8f6f\u4ef6\u7231\u597d\u8005\uff08\u5373\u4f7f\u4ed6\u4eec\u53ef\u80fd\u4ece\u6ca1\u4eb2\u81ea\u5199\u8fc7\u4efb\u4f55\u8f6f\u4ef6\uff09\u7ec4\u6210\u3002\u901a\u5e38\u4eba\u4eec\u7ec4\u5efa\u8fd9\u6837\u7684\u56e2\u4f53\u6765\u4e92\u76f8\u5e2e\u52a9\u5e76\u5e2e\u52a9\u65b0\u624b\u3002 \u53e6\u5916\uff0c\u4f60\u53ef\u4ee5\u5411\u5f88\u591a\u5546\u4e1a\u516c\u53f8\u5bfb\u6c42\u5e2e\u52a9\uff0c\u4e0d\u8bba\u516c\u53f8\u5927\u8fd8\u662f\u5c0f\u3002\u522b\u4e3a\u8981\u4ed8\u8d39\u624d\u80fd\u83b7\u5f97\u5e2e\u52a9\u800c\u611f\u5230\u6cae\u4e27\uff01\u6bd5\u7adf\uff0c\u5047\u4f7f\u4f60\u7684\u6c7d\u8f66\u53d1\u52a8\u673a\u6c7d\u7f38\u5bc6\u5c01\u5708\u7206\u6389\u4e86 \u2014\u2014 \u5b8c\u5168\u53ef\u80fd\u5982\u6b64 \u2014\u2014 \u4f60\u8fd8\u5f97\u628a\u5b83\u9001\u5230\u4fee\u8f66\u94fa\uff0c\u5e76\u4e14\u4e3a\u7ef4\u4fee\u4ed8\u8d39\u3002\u5c31\u7b97\u8f6f\u4ef6\u6ca1\u82b1\u8d39\u4f60\u4e00\u5206\u94b1\uff0c\u4f60\u4e5f\u4e0d\u80fd\u5f3a\u6c42\u6280\u672f\u652f\u6301\u603b\u662f\u514d\u8d39\u7684\u3002 \u5bf9\u50cf\u662f Linux \u8fd9\u79cd\u5927\u4f17\u5316\u7684\u8f6f\u4ef6\uff0c\u6bcf\u4e2a\u5f00\u53d1\u8005\u81f3\u5c11\u4f1a\u5bf9\u5e94\u5230\u4e0a\u4e07\u540d\u4f7f\u7528\u8005\u3002\u6839\u672c\u4e0d\u53ef\u80fd\u7531\u4e00\u4e2a\u4eba\u6765\u5904\u7406\u6765\u81ea\u4e0a\u4e07\u540d\u4f7f\u7528\u8005\u7684\u6c42\u52a9\u7535\u8bdd\u3002\u8981\u77e5\u9053\uff0c\u5373\u4f7f\u4f60\u8981\u4e3a\u8fd9\u4e9b\u534f\u52a9\u4ed8\u8d39\uff0c\u548c\u4f60\u6240\u8d2d\u4e70\u7684\u540c\u7c7b\u8f6f\u4ef6\u76f8\u6bd4\uff0c\u4f60\u6240\u4ed8\u51fa\u7684\u4e5f\u662f\u5fae\u4e0d\u8db3\u9053\u7684\uff08\u901a\u5e38\u5c01\u95ed\u6e90\u4ee3\u7801\u8f6f\u4ef6\u7684\u6280\u672f\u652f\u6301\u8d39\u7528\u6bd4\u5f00\u6e90\u8f6f\u4ef6\u7684\u8981\u9ad8\u5f97\u591a\uff0c\u4e14\u5185\u5bb9\u4e5f\u6ca1\u90a3\u4e48\u4e30\u5bcc\uff09\u3002","title":"\u5982\u679c\u5f97\u4e0d\u5230\u56de\u7b54"},{"location":"misc/how_to_ask_questions_the_smart_way/introduction/","text":"How To Ask Questions The Smart Way? Copyright \u00a9 2001,2006,2014 Eric S. Raymond, Rick Moen \u672c\u6307\u5357\u82f1\u6587\u7248\u7248\u6743\u4e3a Eric S. Raymond, Rick Moen \u6240\u6709\u3002 \u539f\u6587\u7f51\u5740\uff1a http://www.catb.org/~esr/faqs/smart-questions.html Copyleft 2001 by D.H.Grand(nOBODY/Ginux), 2010 by Gasolin, 2015 by Ryan Wu \u672c\u4e2d\u6587\u6307\u5357\u662f\u57fa\u4e8e\u539f\u6587 3.10 \u7248\u4ee5\u53ca 2010 \u5e74\u7531 Gasolin \u6240\u7ffb\u8bd1\u7248\u672c\u7684\u6700\u65b0\u7ffb\u8bd1\uff1b \u534f\u52a9\u6307\u51fa\u7ffb\u8bd1\u95ee\u9898\uff0c\u8bf7 \u53d1 Issue \uff0c\u6216\u76f4\u63a5 \u53d1 Pull Request \u7ed9\u6211\u3002 \u672c\u6587\u53e6\u6709 \u7e41\u9ad4\u4e2d\u6587\u7248 \u3002 \u7b80\u4ecb \u5728 \u9ed1\u5ba2 \u7684\u4e16\u754c\u91cc\uff0c\u5f53\u4f60\u62cb\u51fa\u4e00\u4e2a\u6280\u672f\u95ee\u9898\u65f6\uff0c\u6700\u7ec8\u662f\u5426\u80fd\u5f97\u5230\u6709\u7528\u7684\u56de\u7b54\uff0c\u5f80\u5f80\u53d6\u51b3\u4e8e\u4f60\u6240\u63d0\u95ee\u548c\u8ffd\u95ee\u7684\u65b9\u5f0f\u3002\u672c\u6307\u5357\u5c06\u6559\u4f60\u5982\u4f55\u6b63\u786e\u7684\u63d0\u95ee\u4ee5\u83b7\u5f97\u4f60\u6ee1\u610f\u7684\u7b54\u6848\u3002 \u4e0d\u53ea\u662f\u9ed1\u5ba2\uff0c\u73b0\u5728\u5f00\u6e90\uff08Open Source\uff09\u8f6f\u4ef6\u5df2\u7ecf\u76f8\u5f53\u76db\u884c\uff0c\u4f60\u5e38\u5e38\u4e5f\u53ef\u4ee5\u7531\u5176\u4ed6\u6709\u7ecf\u9a8c\u7684\u4f7f\u7528\u8005\u8eab\u4e0a\u5f97\u5230\u597d\u7b54\u6848\uff0c\u8fd9\u662f\u4ef6 \u597d\u4e8b \uff1b\u4f7f\u7528\u8005\u6bd4\u8d77\u9ed1\u5ba2\u6765\uff0c\u5f80\u5f80\u5bf9\u90a3\u4e9b\u65b0\u624b\u5e38\u9047\u5230\u7684\u95ee\u9898\u66f4\u5bbd\u5bb9\u4e00\u4e9b\u3002\u7136\u800c\uff0c\u5c06\u6709\u7ecf\u9a8c\u7684\u4f7f\u7528\u8005\u89c6\u4e3a\u9ed1\u5ba2\uff0c\u5e76\u91c7\u7528\u672c\u6307\u5357\u6240\u63d0\u7684\u65b9\u6cd5\u4e0e\u4ed6\u4eec\u6c9f\u901a\uff0c\u540c\u6837\u4e5f\u662f\u80fd\u4ece\u4ed6\u4eec\u8eab\u4e0a\u5f97\u5230\u6ee1\u610f\u56de\u7b54\u7684\u6700\u6709\u6548\u65b9\u5f0f\u3002 \u9996\u5148\u4f60\u5e94\u8be5\u660e\u767d\uff0c\u9ed1\u5ba2\u4eec\u559c\u7231\u6709\u6311\u6218\u6027\u7684\u95ee\u9898\uff0c\u6216\u8005\u80fd\u6fc0\u53d1\u4ed6\u4eec\u601d\u7ef4\u7684\u597d\u95ee\u9898\u3002\u5982\u679c\u6211\u4eec\u5e76\u975e\u5982\u6b64\uff0c\u90a3\u6211\u4eec\u4e5f\u4e0d\u4f1a\u6210\u4e3a\u4f60\u60f3\u8be2\u95ee\u7684\u5bf9\u8c61\u3002\u5982\u679c\u4f60\u7ed9\u4e86\u6211\u4eec\u4e00\u4e2a\u503c\u5f97\u53cd\u590d\u5480\u56bc\u73a9\u5473\u7684\u597d\u95ee\u9898\uff0c\u6211\u4eec\u81ea\u4f1a\u5bf9\u4f60\u611f\u6fc0\u4e0d\u5c3d\u3002\u597d\u95ee\u9898\u662f\u6fc0\u52b1\uff0c\u662f\u539a\u793c\u3002\u597d\u95ee\u9898\u53ef\u4ee5\u63d0\u9ad8\u6211\u4eec\u7684\u7406\u89e3\u529b\uff0c\u800c\u4e14\u901a\u5e38\u4f1a\u66b4\u9732\u6211\u4eec\u4ee5\u524d\u4ece\u6ca1\u610f\u8bc6\u5230\u6216\u8005\u601d\u8003\u8fc7\u7684\u95ee\u9898\u3002\u5bf9\u9ed1\u5ba2\u800c\u8a00\uff0c\"\u597d\u95ee\u9898\uff01\"\u662f\u8bda\u631a\u7684\u5927\u529b\u79f0\u8d5e\u3002 \u5c3d\u7ba1\u5982\u6b64\uff0c\u9ed1\u5ba2\u4eec\u6709\u7740\u8511\u89c6\u6216\u50b2\u6162\u9762\u5bf9\u7b80\u5355\u95ee\u9898\u7684\u574f\u540d\u58f0\uff0c\u8fd9\u6709\u65f6\u8ba9\u6211\u4eec\u770b\u8d77\u6765\u5bf9\u65b0\u624b\u3001\u65e0\u77e5\u8005\u4f3c\u4e4e\u8f83\u6709\u654c\u610f\uff0c\u4f46\u5176\u5b9e\u4e0d\u662f\u90a3\u6837\u7684\u3002 \u6211\u4eec\u4e0d\u8bb3\u8a00\u6211\u4eec\u5bf9\u90a3\u4e9b\u4e0d\u613f\u601d\u8003\u3001\u6216\u8005\u5728\u53d1\u95ee\u524d\u4e0d\u505a\u4ed6\u4eec\u8be5\u505a\u7684\u4e8b\u7684\u4eba\u7684\u8511\u89c6\u3002\u90a3\u4e9b\u4eba\u662f\u65f6\u95f4\u6740\u624b \u2014\u2014 \u4ed6\u4eec\u53ea\u60f3\u7d22\u53d6\uff0c\u4ece\u4e0d\u4ed8\u51fa\uff0c\u6d88\u8017\u6211\u4eec\u53ef\u7528\u5728\u66f4\u6709\u8da3\u7684\u95ee\u9898\u6216\u66f4\u503c\u5f97\u56de\u7b54\u7684\u4eba\u8eab\u4e0a\u7684\u65f6\u95f4\u3002\u6211\u4eec\u79f0\u8fd9\u6837\u7684\u4eba\u4e3a \u5931\u8d25\u8005\uff08\u64b8\u745f\uff09 \uff08\u7531\u4e8e\u5386\u53f2\u539f\u56e0\uff0c\u6211\u4eec\u6709\u65f6\u628a\u5b83\u62fc\u4f5c lusers \uff09\u3002 \u6211\u4eec\u610f\u8bc6\u5230\u8bb8\u591a\u4eba\u53ea\u662f\u60f3\u4f7f\u7528\u6211\u4eec\u5199\u7684\u8f6f\u4ef6\uff0c\u4ed6\u4eec\u5bf9\u5b66\u4e60\u6280\u672f\u7ec6\u8282\u6ca1\u6709\u5174\u8da3\u3002\u5bf9\u5927\u591a\u6570\u4eba\u800c\u8a00\uff0c\u7535\u8111\u53ea\u662f\u79cd\u5de5\u5177\uff0c\u662f\u79cd\u8fbe\u5230\u76ee\u7684\u7684\u624b\u6bb5\u800c\u5df2\u3002\u4ed6\u4eec\u6709\u81ea\u5df1\u7684\u751f\u6d3b\u5e76\u4e14\u6709\u66f4\u8981\u7d27\u7684\u4e8b\u8981\u505a\u3002\u6211\u4eec\u4e86\u89e3\u8fd9\u70b9\uff0c\u4e5f\u4ece\u4e0d\u6307\u671b\u6bcf\u4e2a\u4eba\u90fd\u5bf9\u8fd9\u4e9b\u8ba9\u6211\u4eec\u7740\u8ff7\u7684\u6280\u672f\u95ee\u9898\u611f\u5174\u8da3\u3002\u5c3d\u7ba1\u5982\u6b64\uff0c\u6211\u4eec\u56de\u7b54\u95ee\u9898\u7684\u98ce\u683c\u662f\u6307\u5411\u90a3\u4e9b\u771f\u6b63\u5bf9\u6b64\u6709\u5174\u8da3\u5e76\u613f\u610f\u4e3b\u52a8\u53c2\u4e0e\u89e3\u51b3\u95ee\u9898\u7684\u4eba\uff0c\u8fd9\u4e00\u70b9\u4e0d\u4f1a\u53d8\uff0c\u4e5f\u4e0d\u8be5\u53d8\u3002\u5982\u679c\u8fde\u8fd9\u90fd\u53d8\u4e86\uff0c\u6211\u4eec\u5c31\u662f\u5728\u964d\u4f4e\u505a\u81ea\u5df1\u6700\u64c5\u957f\u7684\u4e8b\u60c5\u4e0a\u7684\u6548\u7387\u3002 \u6211\u4eec\uff08\u5728\u5f88\u5927\u7a0b\u5ea6\u4e0a\uff09\u662f\u81ea\u613f\u7684\uff0c\u4ece\u7e41\u5fd9\u7684\u751f\u6d3b\u4e2d\u62bd\u51fa\u65f6\u95f4\u6765\u89e3\u7b54\u7591\u60d1\uff0c\u800c\u4e14\u65f6\u5e38\u88ab\u63d0\u95ee\u6df9\u6ca1\u3002\u6240\u4ee5\u6211\u4eec\u65e0\u60c5\u7684\u6ee4\u6389\u4e00\u4e9b\u8bdd\u9898\uff0c\u7279\u522b\u662f\u62cb\u5f03\u90a3\u4e9b\u770b\u8d77\u6765\u50cf\u5931\u8d25\u8005\u7684\u5bb6\u4f19\uff0c\u4ee5\u4fbf\u66f4\u9ad8\u6548\u7684\u5229\u7528\u65f6\u95f4\u6765\u56de\u7b54 \u8d62\u5bb6\uff08winner\uff09 \u7684\u95ee\u9898\u3002 \u5982\u679c\u4f60\u538c\u6076\u6211\u4eec\u7684\u6001\u5ea6\uff0c\u9ad8\u9ad8\u5728\u4e0a\uff0c\u6216\u8fc7\u4e8e\u50b2\u6162\uff0c\u4e0d\u59a8\u4e5f\u8bbe\u8eab\u5904\u5730\u60f3\u60f3\u3002\u6211\u4eec\u5e76\u6ca1\u6709\u8981\u6c42\u4f60\u5411\u6211\u4eec\u5c48\u670d \u2014\u2014 \u4e8b\u5b9e\u4e0a\uff0c\u6211\u4eec\u5927\u591a\u6570\u4eba\u975e\u5e38\u4e50\u610f\u4e0e\u4f60\u5e73\u7b49\u5730\u4ea4\u6d41\uff0c\u53ea\u8981\u4f60\u4ed8\u51fa\u5c0f\u5c0f\u52aa\u529b\u6765\u6ee1\u8db3\u57fa\u672c\u8981\u6c42\uff0c\u6211\u4eec\u5c31\u4f1a\u6b22\u8fce\u4f60\u52a0\u5165\u6211\u4eec\u7684\u6587\u5316\u3002\u4f46\u8ba9\u6211\u4eec\u5e2e\u52a9\u90a3\u4e9b\u4e0d\u613f\u610f\u5e2e\u52a9\u81ea\u5df1\u7684\u4eba\u662f\u6ca1\u6709\u6548\u7387\u7684\u3002\u65e0\u77e5\u6ca1\u6709\u5173\u7cfb\uff0c\u4f46\u88c5\u767d\u75f4\u5c31\u662f\u4e0d\u884c\u3002 \u6240\u4ee5\uff0c\u4f60\u4e0d\u5fc5\u5728\u6280\u672f\u4e0a\u5f88\u5728\u884c\u624d\u80fd\u5438\u5f15\u6211\u4eec\u7684\u6ce8\u610f\uff0c\u4f46\u4f60\u5fc5\u987b\u8868\u73b0\u51fa\u80fd\u5f15\u5bfc\u4f60\u53d8\u5f97\u5728\u884c\u7684\u7279\u8d28 -- \u673a\u654f\u3001\u6709\u60f3\u6cd5\u3001\u5584\u4e8e\u89c2\u5bdf\u3001\u4e50\u4e8e\u4e3b\u52a8\u53c2\u4e0e\u89e3\u51b3\u95ee\u9898\u3002\u5982\u679c\u4f60\u505a\u4e0d\u5230\u8fd9\u4e9b\u4f7f\u4f60\u4e0e\u4f17\u4e0d\u540c\u7684\u4e8b\u60c5\uff0c\u6211\u4eec\u5efa\u8bae\u4f60\u82b1\u70b9\u94b1\u627e\u5bb6\u5546\u4e1a\u516c\u53f8\u7b7e\u4e2a\u6280\u672f\u652f\u6301\u670d\u52a1\u5408\u540c\uff0c\u800c\u4e0d\u662f\u8981\u6c42\u9ed1\u5ba2\u4e2a\u4eba\u65e0\u507f\u5730\u5e2e\u52a9\u4f60\u3002 \u5982\u679c\u4f60\u51b3\u5b9a\u5411\u6211\u4eec\u6c42\u52a9\uff0c\u5f53\u7136\u4f60\u4e5f\u4e0d\u5e0c\u671b\u88ab\u89c6\u4e3a\u5931\u8d25\u8005\uff0c\u66f4\u4e0d\u613f\u6210\u4e3a\u5931\u8d25\u8005\u4e2d\u7684\u4e00\u5458\u3002\u80fd\u7acb\u523b\u5f97\u5230\u5feb\u901f\u5e76\u6709\u6548\u7b54\u6848\u7684\u6700\u597d\u65b9\u6cd5\uff0c\u5c31\u662f\u50cf\u8d62\u5bb6\u90a3\u6837\u63d0\u95ee -- \u806a\u660e\u3001\u81ea\u4fe1\u3001\u6709\u89e3\u51b3\u95ee\u9898\u7684\u601d\u8def\uff0c\u53ea\u662f\u5076\u5c14\u5728\u7279\u5b9a\u7684\u95ee\u9898\u4e0a\u9700\u8981\u83b7\u5f97\u4e00\u70b9\u5e2e\u52a9\u3002 \uff08\u6b22\u8fce\u5bf9\u672c\u6307\u5357\u63d0\u51fa\u6539\u8fdb\u610f\u89c1\u3002\u4f60\u53ef\u4ee5 email \u4f60\u7684\u5efa\u8bae\u81f3 esr@thyrsus.com \u6216 respond-auto@linuxmafia.com \u3002\u7136\u800c\u8bf7\u6ce8\u610f\uff0c\u672c\u6587\u5e76\u975e\u7f51\u7edc\u793c\u8282\u7684\u901a\u7528\u6307\u5357\uff0c\u800c\u6211\u4eec\u901a\u5e38\u4f1a\u62d2\u7edd\u65e0\u52a9\u4e8e\u5728\u6280\u672f\u8bba\u575b\u5f97\u5230\u6709\u7528\u7b54\u6848\u7684\u5efa\u8bae\uff09\u3002","title":"\u7b80\u4ecb"},{"location":"misc/how_to_ask_questions_the_smart_way/on_not_reacting_like_loser/","text":"\u5728\u9ed1\u5ba2\u793e\u533a\u7684\u8bba\u575b\u4e2d\u6709\u90a3\u4e48\u51e0\u6b21\u4f60\u53ef\u80fd\u4f1a\u641e\u7838 \u2014\u2014 \u4ee5\u672c\u6307\u5357\u6240\u63cf\u8ff0\u5230\u7684\u6216\u7c7b\u4f3c\u7684\u65b9\u5f0f\u3002\u800c\u4f60\u4f1a\u5728\u516c\u5f00\u573a\u5408\u4e2d\u88ab\u544a\u77e5\u4f60\u662f\u5982\u4f55\u641e\u7838\u7684\uff0c\u4e5f\u8bb8\u653b\u51fb\u7684\u8a00\u8bed\u4e2d\u8fd8\u4f1a\u5e26\u70b9\u5939\u4e03\u5939\u516b\u7684\u989c\u8272\u3002 \u8fd9\u79cd\u4e8b\u53d1\u751f\u4ee5\u540e\uff0c\u4f60\u80fd\u505a\u7684\u6700\u7cdf\u7cd5\u7684\u4e8b\u83ab\u8fc7\u4e8e\u54c0\u568e\u4f60\u7684\u906d\u9047\u3001\u5ba3\u79f0\u88ab\u53e3\u5934\u653b\u51fb\u3001\u8981\u6c42\u9053\u6b49\u3001\u9ad8\u58f0\u5c16\u53eb\u3001\u618b\u95f7\u6c14\u3001\u5a01\u80c1\u8bc9\u8bf8\u6cd5\u5f8b\u3001\u5411\u5176\u96c7\u4e3b\u62a5\u6028\u3001\u5fd8\u4e86\u5173\u9a6c\u6876\u76d6\u7b49\u7b49\u3002\u76f8\u53cd\u5730\uff0c\u4f60\u8be5\u8fd9\u4e48\u505a\uff1a \u71ac\u8fc7\u53bb\uff0c\u8fd9\u5f88\u6b63\u5e38\u3002\u4e8b\u5b9e\u4e0a\uff0c\u5b83\u662f\u6709\u76ca\u5065\u5eb7\u4e14\u5408\u7406\u7684\u3002 \u793e\u533a\u7684\u6807\u51c6\u4e0d\u4f1a\u81ea\u884c\u7ef4\u6301\uff0c\u5b83\u4eec\u662f\u901a\u8fc7\u53c2\u4e0e\u8005\u79ef\u6781\u800c\u516c\u5f00\u5730\u6267\u884c\u6765\u7ef4\u6301\u7684\u3002\u4e0d\u8981\u54ed\u568e\u6240\u6709\u7684\u6279\u8bc4\u90fd\u5e94\u8be5\u901a\u8fc7\u79c1\u4e0b\u7684\u90ae\u4ef6\u4f20\u9001\uff0c\u5b83\u4e0d\u662f\u8fd9\u6837\u8fd0\u4f5c\u7684\u3002\u5f53\u6709\u4eba\u8bc4\u8bba\u4f60\u7684\u4e00\u4e2a\u8bf4\u6cd5\u6709\u8bef\u6216\u8005\u63d0\u51fa\u4e0d\u540c\u770b\u6cd5\u65f6\uff0c\u575a\u6301\u58f0\u79f0\u53d7\u5230\u4e2a\u4eba\u653b\u51fb\u4e5f\u6beb\u65e0\u76ca\u5904\uff0c\u8fd9\u4e9b\u90fd\u662f\u5931\u8d25\u8005\u7684\u6001\u5ea6\u3002 \u4e5f\u6709\u5176\u5b83\u7684\u9ed1\u5ba2\u8bba\u575b\uff0c\u53d7\u8fc7\u9ad8\u793c\u8282\u8981\u6c42\u7684\u8bef\u5bfc\uff0c\u7981\u6b62\u53c2\u4e0e\u8005\u5f20\u8d34\u4efb\u4f55\u5bf9\u522b\u4eba\u5e16\u5b50\u6311\u6bdb\u75c5\u7684\u6d88\u606f\uff0c\u5e76\u58f0\u79f0\u5982\u679c\u4f60\u4e0d\u60f3\u5e2e\u52a9\u7528\u6237\u5c31\u95ed\u5634\u3002 \u7ed3\u679c\u9020\u6210\u6709\u60f3\u6cd5\u7684\u53c2\u4e0e\u8005\u7eb7\u7eb7\u79bb\u5f00\uff0c\u8fd9\u4e48\u505a\u53ea\u4f1a\u4f7f\u5b83\u4eec\u6ca6\u4e3a\u6beb\u65e0\u610f\u4e49\u7684\u5520\u53e8\u4e0e\u65e0\u7528\u7684\u6280\u672f\u8bba\u575b\u3002 \u5938\u5f20\u7684\u8bb2\u6cd5\u662f\uff1a\u4f60\u8981\u7684\u662f\u201c\u53cb\u5584\u201d\uff08\u4ee5\u4e0a\u8ff0\u65b9\u5f0f\uff09\u8fd8\u662f\u6709\u7528\uff1f\u4e24\u4e2a\u91cc\u9762\u6311\u4e00\u4e2a\u3002 \u8bb0\u7740\uff1a\u5f53\u9ed1\u5ba2\u8bf4\u4f60\u641e\u7838\u4e86\uff0c\u5e76\u4e14\uff08\u65e0\u8bba\u591a\u4e48\u523a\u8033\uff09\u544a\u8bc9\u4f60\u522b\u518d\u8fd9\u6837\u505a\u65f6\uff0c\u4ed6\u6b63\u5728\u4e3a\u5173\u5fc3\u4f60\u548c\u4ed6\u7684\u793e\u533a\u800c\u884c\u52a8\u3002\u5bf9\u4ed6\u800c\u8a00\uff0c\u4e0d\u7406\u4f60\u5e76\u5c06\u4f60\u4ece\u4ed6\u7684\u751f\u6d3b\u4e2d\u6ee4\u6389\u66f4\u7b80\u5355\u3002\u5982\u679c\u4f60\u65e0\u6cd5\u505a\u5230\u611f\u8c22\uff0c\u81f3\u5c11\u8981\u8868\u73b0\u5f97\u6709\u70b9\u5c0a\u4e25\uff0c\u522b\u5927\u58f0\u54c0\u568e\uff0c\u4e5f\u522b\u56e0\u4e3a\u81ea\u5df1\u662f\u4e2a\u6709\u620f\u5267\u6027\u8d85\u7ea7\u654f\u611f\u7684\u7075\u9b42\u548c\u81ea\u4ee5\u4e3a\u6709\u8d44\u683c\u7684\u65b0\u6765\u8005\uff0c\u5c31\u6307\u671b\u522b\u4eba\u50cf\u5bf9\u5f85\u8106\u5f31\u7684\u6d0b\u5a03\u5a03\u90a3\u6837\u5bf9\u4f60\u3002 \u6709\u65f6\u5019\uff0c\u5373\u4f7f\u4f60\u6ca1\u6709\u641e\u7838\uff08\u6216\u8005\u53ea\u662f\u5728\u4ed6\u7684\u60f3\u50cf\u4e2d\u4f60\u641e\u7838\u4e86\uff09\uff0c\u6709\u4e9b\u4eba\u4e5f\u4f1a\u65e0\u7f18\u65e0\u6545\u5730\u653b\u51fb\u4f60\u672c\u4eba\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u62b1\u6028\u5012\u662f\u771f\u7684\u4f1a\u628a\u95ee\u9898\u641e\u7838\u3002 \u8fd9\u4e9b\u6765\u627e\u9ebb\u70e6\u7684\u4eba\u8981\u4e48\u662f\u6beb\u65e0\u529e\u6cd5\u4f46\u81ea\u4ee5\u4e3a\u662f\u4e13\u5bb6\u7684\u4e0d\u4e2d\u7528\u5bb6\u4f19\uff0c\u8981\u4e48\u5c31\u662f\u6d4b\u8bd5\u4f60\u662f\u5426\u771f\u4f1a\u641e\u7838\u7684\u5fc3\u7406\u4e13\u5bb6\u3002\u5176\u5b83\u8bfb\u8005\u8981\u4e48\u4e0d\u7406\u776c\uff0c\u8981\u4e48\u7528\u81ea\u5df1\u7684\u65b9\u5f0f\u5bf9\u4ed8\u4ed6\u4eec\u3002\u8fd9\u4e9b\u6765\u627e\u9ebb\u70e6\u7684\u4eba\u5728\u7ed9\u4ed6\u4eec\u81ea\u5df1\u627e\u9ebb\u70e6\uff0c\u8fd9\u70b9\u4f60\u4e0d\u7528\u64cd\u5fc3\u3002 \u4e5f\u522b\u8ba9\u81ea\u5df1\u5377\u5165\u53e3\u6c34\u6218\uff0c\u6700\u597d\u4e0d\u8981\u7406\u776c\u5927\u591a\u6570\u7684\u53e3\u6c34\u6218 -- \u5f53\u7136\uff0c\u8fd9\u662f\u5728\u4f60\u68c0\u9a8c\u5b83\u4eec\u53ea\u662f\u53e3\u6c34\u6218\uff0c\u5e76\u4e14\u672a\u6307\u51fa\u4f60\u6709\u641e\u7838\u7684\u5730\u65b9\uff0c\u540c\u65f6\u4e5f\u6ca1\u6709\u5de7\u5999\u5730\u5c06\u95ee\u9898\u771f\u6b63\u7684\u7b54\u6848\u85cf\u4e8e\u5176\u540e\uff08\u8fd9\u4e5f\u662f\u6709\u53ef\u80fd\u7684\uff09\u3002","title":"\u5982\u4f55\u907f\u514d\u626e\u6f14\u5931\u8d25\u8005"},{"location":"misc/how_to_ask_questions_the_smart_way/questions_not_to_ask/","text":"\u4ee5\u4e0b\u662f\u51e0\u4e2a\u7ecf\u5178\u8822\u95ee\u9898\uff0c\u4ee5\u53ca\u9ed1\u5ba2\u6ca1\u56de\u7b54\u65f6\u5fc3\u4e2d\u6240\u60f3\u7684\uff1a \u95ee\u9898\uff1a\u6211\u80fd\u5728\u54ea\u627e\u5230 X \u7a0b\u5e8f\u6216 X \u8d44\u6e90\uff1f \u95ee\u9898\uff1a\u6211\u600e\u6837\u7528 X \u505a Y\uff1f \u95ee\u9898\uff1a\u5982\u4f55\u8bbe\u5b9a\u6211\u7684 shell \u63d0\u793a\uff1f \u95ee\u9898\uff1a\u6211\u53ef\u4ee5\u7528 Bass-o-matic \u6587\u4ef6\u8f6c\u6362\u5de5\u5177\u5c06 AcmeCorp \u6863\u6848\u8f6c\u6362\u4e3a TeX \u683c\u5f0f\u5417\uff1f \u95ee\u9898\uff1a\u6211\u7684\u7a0b\u5e8f/\u8bbe\u5b9a/SQL \u8bed\u53e5\u6ca1\u6709\u7528 \u95ee\u9898\uff1a\u6211\u7684 Windows \u7535\u8111\u6709\u95ee\u9898\uff0c\u4f60\u80fd\u5e2e\u6211\u5417\uff1f \u95ee\u9898\uff1a\u6211\u7684\u7a0b\u5e8f\u4e0d\u4f1a\u52a8\u4e86\uff0c\u6211\u8ba4\u4e3a\u7cfb\u7edf\u5de5\u5177 X \u6709\u95ee\u9898 \u95ee\u9898\uff1a\u6211\u5728\u5b89\u88c5 Linux\uff08\u6216\u8005 X \uff09\u65f6\u6709\u95ee\u9898\uff0c\u4f60\u80fd\u5e2e\u6211\u5417\uff1f \u95ee\u9898\uff1a\u6211\u600e\u4e48\u624d\u80fd\u7834\u89e3 root \u5e10\u53f7/\u7a83\u53d6 OP \u7279\u6743/\u8bfb\u522b\u4eba\u7684\u90ae\u4ef6\u5462\uff1f \u95ee\u9898\uff1a\u6211\u80fd\u5728\u54ea\u627e\u5230 X \u7a0b\u5e8f\u6216 X \u8d44\u6e90\uff1f \u56de\u7b54\uff1a\u5c31\u5728\u6211\u627e\u5230\u5b83\u7684\u5730\u65b9\u554a\uff0c\u767d\u75f4 \u2014\u2014 \u641c\u7d22\u5f15\u64ce\u7684\u90a3\u4e00\u5934\u3002\u5929\u54ea\uff01\u96be\u9053\u8fd8\u6709\u4eba\u4e0d\u4f1a\u7528 Google \u5417\uff1f \u95ee\u9898\uff1a\u6211\u600e\u6837\u7528 X \u505a Y\uff1f \u56de\u7b54\uff1a\u5982\u679c\u4f60\u60f3\u89e3\u51b3\u7684\u662f Y \uff0c\u63d0\u95ee\u65f6\u522b\u7ed9\u51fa\u53ef\u80fd\u5e76\u4e0d\u6070\u5f53\u7684\u65b9\u6cd5\u3002\u8fd9\u79cd\u95ee\u9898\u8bf4\u660e\u63d0\u95ee\u8005\u4e0d\u4f46\u5bf9 X \u5b8c\u5168\u65e0\u77e5\uff0c\u4e5f\u5bf9 Y \u8981\u89e3\u51b3\u7684\u95ee\u9898\u7cca\u6d82\uff0c\u8fd8\u88ab\u7279\u5b9a\u5f62\u52bf\u7981\u9522\u4e86\u601d\u7ef4\u3002\u6700\u597d\u5ffd\u7565\u8fd9\u79cd\u4eba\uff0c\u7b49\u4ed6\u4eec\u628a\u95ee\u9898\u641e\u6e05\u695a\u4e86\u518d\u8bf4\u3002 \u95ee\u9898\uff1a\u5982\u4f55\u8bbe\u5b9a\u6211\u7684 shell \u63d0\u793a\uff1f\uff1f \u56de\u7b54\uff1a\u5982\u679c\u4f60\u6709\u8db3\u591f\u7684\u667a\u6167\u63d0\u8fd9\u4e2a\u95ee\u9898\uff0c\u4f60\u4e5f\u8be5\u6709\u8db3\u591f\u7684\u667a\u6167\u53bb RTFM\uff0c\u7136\u540e\u81ea\u5df1\u53bb\u627e\u51fa\u6765\u3002 \u95ee\u9898\uff1a\u6211\u53ef\u4ee5\u7528 Bass-o-matic \u6587\u4ef6\u8f6c\u6362\u5de5\u5177\u5c06 AcmeCorp \u6863\u6848\u8f6c\u6362\u4e3a TeX \u683c\u5f0f\u5417\uff1f \u56de\u7b54\uff1a\u8bd5\u8bd5\u770b\u5c31\u77e5\u9053\u4e86\u3002\u5982\u679c\u4f60\u8bd5\u8fc7\uff0c\u4f60\u65e2\u77e5\u9053\u4e86\u7b54\u6848\uff0c\u5c31\u4e0d\u7528\u6d6a\u8d39\u6211\u7684\u65f6\u95f4\u4e86\u3002 \u95ee\u9898\uff1a\u6211\u7684{\u7a0b\u5e8f/\u8bbe\u5b9a/SQL \u8bed\u53e5}\u4e0d\u5de5\u4f5c \u56de\u7b54\uff1a\u8fd9\u4e0d\u7b97\u662f\u95ee\u9898\u5427\uff0c\u6211\u5bf9\u8981\u6211\u95ee\u4f60\u4e8c\u5341\u4e2a\u95ee\u9898\u624d\u627e\u5f97\u51fa\u4f60\u771f\u6b63\u95ee\u9898\u7684\u95ee\u9898\u6ca1\u5174\u8da3 \u2014\u2014 \u6211\u6709\u66f4\u6709\u610f\u601d\u7684\u4e8b\u8981\u505a\u5462\u3002\u5728\u770b\u5230\u8fd9\u7c7b\u95ee\u9898\u7684\u65f6\u5019\uff0c\u6211\u7684\u53cd\u5e94\u901a\u5e38\u4e0d\u5916\u5982\u4e0b\u4e09\u79cd \u4f60\u8fd8\u6709\u4ec0\u4e48\u8981\u8865\u5145\u7684\u5417\uff1f \u771f\u7cdf\u7cd5\uff0c\u5e0c\u671b\u4f60\u80fd\u641e\u5b9a\u3002 \u8fd9\u5173\u6211\u6709\u4ec0\u4e48\u5c41\u4e8b\uff1f \u95ee\u9898\uff1a\u6211\u7684 Windows \u7535\u8111\u6709\u95ee\u9898\uff0c\u4f60\u80fd\u5e2e\u6211\u5417\uff1f \u56de\u7b54\uff1a\u80fd\u554a\uff0c\u6254\u6389\u5fae\u8f6f\u7684\u5783\u573e\uff0c\u6362\u4e2a\u50cf Linux \u6216 BSD \u7684\u5f00\u6e90\u64cd\u4f5c\u7cfb\u7edf\u5427\u3002 \u6ce8\u610f \u5982\u679c\u7a0b\u5e8f\u6709\u5b98\u65b9\u7248 Windows \u6216\u8005\u4e0e Windows \u6709\u4e92\u52a8\uff08\u5982 Samba\uff09\uff0c\u4f60\u53ef\u4ee5\u95ee\u4e0e Windows \u76f8\u5173\u7684\u95ee\u9898\uff0c \u53ea\u662f\u522b\u5bf9\u95ee\u9898\u662f\u7531 Windows \u64cd\u4f5c\u7cfb\u7edf\u800c\u4e0d\u662f\u7a0b\u5e8f\u672c\u8eab\u9020\u6210\u7684\u56de\u590d\u611f\u5230\u60ca\u8bb6\uff0c \u56e0\u4e3a Windows \u4e00\u822c\u6765\u8bf4\u5b9e\u5728\u592a\u70c2\uff0c\u8fd9\u79cd\u8bf4\u6cd5\u901a\u5e38\u90fd\u662f\u5bf9\u7684\u3002 \u95ee\u9898\uff1a\u6211\u7684\u7a0b\u5e8f\u4e0d\u4f1a\u52a8\u4e86\uff0c\u6211\u8ba4\u4e3a\u7cfb\u7edf\u5de5\u5177 X \u6709\u95ee\u9898 \u56de\u7b54\uff1a\u4f60\u5b8c\u5168\u6709\u53ef\u80fd\u662f\u7b2c\u4e00\u4e2a\u6ce8\u610f\u5230\u88ab\u6210\u5343\u4e0a\u4e07\u7528\u6237\u53cd\u590d\u4f7f\u7528\u7684\u7cfb\u7edf\u8c03\u7528\u4e0e\u51fd\u6570\u5e93\u6863\u6848\u6709\u660e\u663e\u7f3a\u9677\u7684\u4eba\uff0c\u66f4\u6709\u53ef\u80fd\u7684\u662f\u4f60\u5b8c\u5168\u6ca1\u6709\u6839\u636e\u3002\u4e0d\u540c\u51e1\u54cd\u7684\u8bf4\u6cd5\u9700\u8981\u4e0d\u540c\u51e1\u54cd\u7684\u8bc1\u636e\uff0c\u5f53\u4f60\u8fd9\u6837\u58f0\u79f0\u65f6\uff0c\u4f60\u5fc5\u987b\u6709\u6e05\u695a\u800c\u8be6\u5c3d\u7684\u7f3a\u9677\u8bf4\u660e\u6587\u4ef6\u4f5c\u540e\u76fe\u3002 \u95ee\u9898\uff1a\u6211\u5728\u5b89\u88c5 Linux\uff08\u6216\u8005 X \uff09\u65f6\u6709\u95ee\u9898\uff0c\u4f60\u80fd\u5e2e\u6211\u5417\uff1f \u56de\u7b54\uff1a\u4e0d\u80fd\uff0c\u6211\u53ea\u6709\u4eb2\u81ea\u5728\u4f60\u7684\u7535\u8111\u4e0a\u52a8\u624b\u624d\u80fd\u627e\u5230\u6bdb\u75c5\u3002\u8fd8\u662f\u53bb\u627e\u4f60\u5f53\u5730\u7684 Linux \u4f7f\u7528\u7fa4\u7ec4\u8005\u5bfb\u6c42\u5b9e\u9645\u7684\u6307\u5bfc\u5427\uff08\u4f60\u80fd\u5728\u8fd9\u513f\u627e\u5230\u4f7f\u7528\u8005\u7fa4\u7ec4\u7684\u6e05\u5355\uff09\u3002 \u6ce8\u610f \u6ce8\u610f\uff1a\u5982\u679c\u5b89\u88c5\u95ee\u9898\u4e0e\u67d0 Linux \u7684\u53d1\u884c\u7248\u6709\u5173\uff0c\u5728\u5b83\u7684\u90ae\u4ef6\u5217\u8868\u3001\u8bba\u575b\u6216\u672c\u5730\u4f7f\u7528\u8005\u7fa4\u7ec4\u4e2d\u63d0\u95ee\u4e5f\u8bb8\u662f\u6070\u5f53\u7684\u3002\u6b64\u65f6\uff0c\u5e94\u63cf\u8ff0\u95ee\u9898\u7684\u51c6\u786e\u7ec6\u8282\u3002\u5728\u6b64\u4e4b\u524d\uff0c\u5148\u7528 Linux \u548c\u6240\u6709\u88ab\u6000\u7591\u7684\u786c\u4ef6\u4f5c\u5173\u952e\u8bcd\u4ed4\u7ec6\u641c\u7d22\u3002 \u95ee\u9898\uff1a\u6211\u600e\u4e48\u624d\u80fd\u7834\u89e3 root \u5e10\u53f7/\u7a83\u53d6 OP \u7279\u6743/\u8bfb\u522b\u4eba\u7684\u90ae\u4ef6\u5462\uff1f \u56de\u7b54\uff1a\u60f3\u8981\u8fd9\u6837\u505a\uff0c\u8bf4\u660e\u4e86\u4f60\u662f\u4e2a\u5351\u9119\u5c0f\u4eba\uff1b\u60f3\u627e\u4e2a\u9ed1\u5ba2\u5e2e\u4f60\uff0c\u8bf4\u660e\u4f60\u662f\u4e2a\u767d\u75f4\uff01","title":"\u4e0d\u8be5\u95ee\u7684\u95ee\u9898"},{"location":"misc/how_to_ask_questions_the_smart_way/when_you_ask/","text":"\u614e\u9009\u63d0\u95ee\u7684\u8bba\u575b \u5c0f\u5fc3\u9009\u62e9\u4f60\u8981\u63d0\u95ee\u7684\u573a\u5408\u3002\u5982\u679c\u4f60\u505a\u4e86\u4e0b\u8ff0\u7684\u4e8b\u60c5\uff0c\u4f60\u5f88\u53ef\u80fd\u88ab\u5ffd\u7565\u6389\u6216\u8005\u88ab\u770b\u4f5c\u5931\u8d25\u8005\uff1a \u5728\u4e0e\u4e3b\u9898\u4e0d\u5408\u7684\u8bba\u575b\u4e0a\u8d34\u51fa\u4f60\u7684\u95ee\u9898\u3002 \u5728\u63a2\u8ba8\u8fdb\u9636\u6280\u672f\u95ee\u9898\u7684\u8bba\u575b\u5f20\u8d34\u975e\u5e38\u521d\u7ea7\u7684\u95ee\u9898\uff1b\u53cd\u4e4b\u4ea6\u7136\u3002 \u5728\u592a\u591a\u7684\u4e0d\u540c\u65b0\u95fb\u7fa4\u7ec4\u4e0a\u91cd\u590d\u8f6c\u8d34\u540c\u6837\u7684\u95ee\u9898\uff08cross-post\uff09\u3002 \u5411\u65e2\u975e\u719f\u4eba\u4e5f\u6ca1\u6709\u4e49\u52a1\u89e3\u51b3\u4f60\u95ee\u9898\u7684\u4eba\u53d1\u9001\u79c1\u4eba\u7535\u90ae\u3002 \u9ed1\u5ba2\u4f1a\u5254\u9664\u6389\u90a3\u4e9b\u641e\u9519\u573a\u5408\u7684\u95ee\u9898\uff0c\u4ee5\u4fdd\u62a4\u4ed6\u4eec\u6c9f\u901a\u7684\u6e20\u9053\u4e0d\u88ab\u65e0\u5173\u7684\u4e1c\u897f\u6df9\u6ca1\u3002\u4f60\u4e0d\u4f1a\u60f3\u8ba9\u8fd9\u79cd\u4e8b\u53d1\u751f\u5728\u81ea\u5df1\u8eab\u4e0a\u7684\u3002 \u56e0\u6b64\uff0c\u7b2c\u4e00\u6b65\u662f\u627e\u5230\u5bf9\u7684\u8bba\u575b\u3002\u518d\u8bf4\u4e00\u6b21\uff0cGoogle \u548c\u5176\u5b83\u641c\u7d22\u5f15\u64ce\u8fd8\u662f\u4f60\u7684\u670b\u53cb\uff0c\u7528\u5b83\u4eec\u6765\u627e\u5230\u4e0e\u4f60\u906d\u9047\u5230\u56f0\u96be\u7684\u8f6f\u786c\u4ef6\u95ee\u9898\u6700\u76f8\u5173\u7684\u7f51\u7ad9\u3002\u901a\u5e38\u90a3\u513f\u90fd\u6709\u5e38\u89c1\u95ee\u9898\uff08FAQ\uff09\u3001\u90ae\u4ef6\u5217\u8868\u53ca\u76f8\u5173\u8bf4\u660e\u6587\u4ef6\u7684\u94fe\u63a5\u3002\u5982\u679c\u4f60\u7684\u52aa\u529b\uff08\u5305\u62ec\u9605\u8bfb FAQ\uff09\u90fd\u6ca1\u6709\u7ed3\u679c\uff0c\u7f51\u7ad9\u4e0a\u4e5f\u8bb8\u8fd8\u6709\u62a5\u544a Bug\uff08Bug-reporting\uff09\u7684\u6d41\u7a0b\u6216\u94fe\u63a5\uff0c\u5982\u679c\u662f\u8fd9\u6837\uff0c\u94fe\u8fc7\u53bb\u770b\u770b\u3002 \u5411\u964c\u751f\u7684\u4eba\u6216\u8bba\u575b\u53d1\u9001\u90ae\u4ef6\u6700\u53ef\u80fd\u662f\u98ce\u9669\u6700\u5927\u7684\u4e8b\u60c5\u3002\u4e3e\u4f8b\u6765\u8bf4\uff0c\u522b\u5047\u8bbe\u4e00\u4e2a\u63d0\u4f9b\u4e30\u5bcc\u5185\u5bb9\u7684\u7f51\u9875\u7684\u4f5c\u8005\u4f1a\u60f3\u5145\u5f53\u4f60\u7684\u514d\u8d39\u987e\u95ee\u3002\u4e0d\u8981\u5bf9\u4f60\u7684\u95ee\u9898\u662f\u5426\u4f1a\u53d7\u5230\u6b22\u8fce\u505a\u592a\u4e50\u89c2\u7684\u4f30\u8ba1 -- \u5982\u679c\u4f60\u4e0d\u786e\u5b9a\uff0c\u90a3\u5c31\u5411\u522b\u5904\u53d1\u9001\uff0c\u6216\u8005\u538b\u6839\u522b\u53d1\u3002 \u5728\u9009\u62e9\u8bba\u575b\u3001\u65b0\u95fb\u7fa4\u7ec4\u6216\u90ae\u4ef6\u5217\u8868\u65f6\uff0c\u522b\u592a\u76f8\u4fe1\u540d\u5b57\uff0c\u5148\u770b\u770b FAQ \u6216\u8005\u8bb8\u53ef\u4e66\u4ee5\u5f04\u6e05\u695a\u4f60\u7684\u95ee\u9898\u662f\u5426\u5207\u9898\u3002\u53d1\u6587\u524d\u5148\u7ffb\u7ffb\u5df2\u6709\u7684\u8bdd\u9898\uff0c\u8fd9\u6837\u53ef\u4ee5\u8ba9\u4f60\u611f\u53d7\u4e00\u4e0b\u90a3\u91cc\u7684\u6587\u5316\u3002\u4e8b\u5b9e\u4e0a\uff0c\u4e8b\u5148\u5728\u65b0\u95fb\u7ec4\u6216\u90ae\u4ef6\u5217\u8868\u7684\u5386\u53f2\u8bb0\u5f55\u4e2d\u641c\u7d22\u4e0e\u4f60\u95ee\u9898\u76f8\u5173\u7684\u5173\u952e\u8bcd\u662f\u4e2a\u6781\u597d\u7684\u4e3b\u610f\uff0c\u4e5f\u8bb8\u8fd9\u6837\u5c31\u627e\u5230\u7b54\u6848\u4e86\u3002\u5373\u4f7f\u6ca1\u6709\uff0c\u4e5f\u80fd\u5e2e\u52a9\u4f60\u5f52\u7eb3\u51fa\u66f4\u597d\u7684\u95ee\u9898\u3002 \u522b\u50cf\u673a\u5173\u67aa\u4f3c\u7684\u4e00\u6b21\"\u626b\u5c04\"\u6240\u6709\u7684\u5e2e\u52a9\u6e20\u9053\uff0c\u8fd9\u5c31\u50cf\u5927\u558a\u5927\u53eb\u4e00\u6837\u4f1a\u4f7f\u4eba\u4e0d\u5feb\u3002\u8981\u4e00\u4e2a\u4e00\u4e2a\u5730\u6765\u3002 \u641e\u6e05\u695a\u4f60\u7684\u4e3b\u9898\uff01\u6700\u5178\u578b\u7684\u9519\u8bef\u4e4b\u4e00\u662f\u5728\u67d0\u79cd\u81f4\u529b\u4e8e\u8de8\u5e73\u53f0\u53ef\u79fb\u690d\u7684\u8bed\u8a00\u3001\u5957\u4ef6\u6216\u5de5\u5177\u7684\u8bba\u575b\u4e2d\u63d0\u5173\u4e8e Unix \u6216 Windows \u64cd\u4f5c\u7cfb\u7edf\u7a0b\u5e8f\u754c\u9762\u7684\u95ee\u9898\u3002\u5982\u679c\u4f60\u4e0d\u660e\u767d\u4e3a\u4ec0\u4e48\u8fd9\u662f\u5927\u9519\uff0c\u6700\u597d\u5728\u641e\u6e05\u695a\u8fd9\u4e4b\u95f4\u5dee\u5f02\u4e4b\u524d\u4ec0\u4e48\u4e5f\u522b\u95ee\u3002 \u4e00\u822c\u6765\u8bf4\uff0c\u5728\u4ed4\u7ec6\u6311\u9009\u7684\u516c\u5171\u8bba\u575b\u4e2d\u63d0\u95ee\uff0c\u4f1a\u6bd4\u5728\u79c1\u6709\u8bba\u575b\u4e2d\u63d0\u540c\u6837\u7684\u95ee\u9898\u66f4\u5bb9\u6613\u5f97\u5230\u6709\u7528\u7684\u56de\u7b54\u3002\u6709\u51e0\u4e2a\u7406\u7531\u53ef\u4ee5\u652f\u6301\u8fd9\u70b9\uff0c\u4e00\u662f\u770b\u6f5c\u5728\u7684\u56de\u590d\u8005\u6709\u591a\u5c11\uff0c\u4e8c\u662f\u770b\u89c2\u4f17\u6709\u591a\u5c11\u3002\u9ed1\u5ba2\u8f83\u613f\u610f\u56de\u7b54\u90a3\u4e9b\u80fd\u5e2e\u52a9\u5230\u8bb8\u591a\u4eba\u7684\u95ee\u9898\u3002 \u53ef\u4ee5\u7406\u89e3\u7684\u662f\uff0c\u8001\u7ec3\u7684\u9ed1\u5ba2\u548c\u4e00\u4e9b\u70ed\u95e8\u8f6f\u4ef6\u7684\u4f5c\u8005\u6b63\u5728\u63a5\u53d7\u8fc7\u591a\u7684\u9519\u53d1\u4fe1\u606f\u3002\u5c31\u50cf\u90a3\u6839\u6700\u540e\u538b\u57ae\u9a86\u9a7c\u80cc\u7684\u7a3b\u8349\u4e00\u6837\uff0c\u4f60\u7684\u52a0\u5165\u4e5f\u6709\u53ef\u80fd\u4f7f\u60c5\u51b5\u8d70\u5411\u6781\u7aef \u2014\u2014 \u5df2\u7ecf\u597d\u51e0\u6b21\u4e86\uff0c\u4e00\u4e9b\u70ed\u95e8\u8f6f\u4ef6\u7684\u4f5c\u8005\u4ece\u81ea\u5df1\u8f6f\u4ef6\u7684\u652f\u6301\u4e2d\u62bd\u8eab\u51fa\u6765\uff0c\u56e0\u4e3a\u4f34\u968f\u800c\u6765\u6d8c\u5165\u5176\u79c1\u4eba\u90ae\u7bb1\u7684\u65e0\u7528\u90ae\u4ef6\u53d8\u5f97\u65e0\u6cd5\u5fcd\u53d7\u3002 Stack Overflow \u641c\u7d22\uff0c\u7136\u540e \u5728 Stack Exchange \u95ee\u3002 \u8fd1\u5e74\u6765\uff0cStack Exchange community \u793e\u533a\u5df2\u7ecf\u6210\u4e3a\u56de\u7b54\u6280\u672f\u53ca\u5176\u4ed6\u95ee\u9898\u7684\u4e3b\u8981\u6e20\u9053\uff0c\u5c24\u5176\u662f\u90a3\u4e9b\u5f00\u653e\u6e90\u7801\u7684\u9879\u76ee\u3002 \u56e0\u4e3a Google \u7d22\u5f15\u662f\u5373\u65f6\u7684\uff0c\u5728\u770b Stack Exchange \u4e4b\u524d\u5148\u5728 Google \u641c\u7d22\u3002\u6709\u5f88\u9ad8\u7684\u673a\u7387\u67d0\u4eba\u5df2\u7ecf\u95ee\u4e86\u4e00\u4e2a\u7c7b\u4f3c\u7684\u95ee\u9898\uff0c\u800c\u4e14 Stack Exchange \u7f51\u7ad9\u4eec\u5f80\u5f80\u4f1a\u662f\u641c\u7d22\u7ed3\u679c\u4e2d\u6700\u524d\u9762\u51e0\u4e2a\u3002\u5982\u679c\u4f60\u5728 Google \u4e0a\u6ca1\u6709\u627e\u5230\u4efb\u4f55\u7b54\u6848\uff0c\u4f60\u518d\u5230\u7279\u5b9a\u76f8\u5173\u4e3b\u9898\u7684\u7f51\u7ad9\u53bb\u627e\u3002\u7528\u6807\u7b7e\uff08Tag\uff09\u641c\u7d22\u80fd\u8ba9\u4f60\u66f4\u7f29\u5c0f\u4f60\u7684\u641c\u7d22\u7ed3\u679c\u3002 Stack Exchange \u5df2\u7ecf\u6210\u957f\u5230 \u8d85\u8fc7\u4e00\u767e\u4e2a\u7f51\u7ad9 \uff0c\u4ee5\u4e0b\u662f\u6700\u5e38\u7528\u7684\u51e0\u4e2a\u7ad9\uff1a Super User \u662f\u95ee\u4e00\u4e9b\u901a\u7528\u7684\u7535\u8111\u95ee\u9898\uff0c\u5982\u679c\u4f60\u7684\u95ee\u9898\u8ddf\u4ee3\u7801\u6216\u662f\u5199\u7a0b\u5e8f\u65e0\u5173\uff0c\u53ea\u662f\u4e00\u4e9b\u7f51\u7edc\u8fde\u7ebf\u4e4b\u7c7b\u7684\uff0c\u8bf7\u5230\u8fd9\u91cc\u3002 Stack Overflow \u662f\u95ee\u5199\u7a0b\u5e8f\u6709\u5173\u7684\u95ee\u9898\u3002 Server Fault \u662f\u95ee\u670d\u52a1\u5668\u548c\u7f51\u7ba1\u76f8\u5173\u7684\u95ee\u9898\u3002 \u7f51\u7ad9\u548c IRC \u8bba\u575b \u672c\u5730\u7684\u4f7f\u7528\u8005\u7fa4\u7ec4\uff08user group\uff09\uff0c\u6216\u8005\u4f60\u6240\u7528\u7684 Linux \u53d1\u884c\u7248\u672c\u4e5f\u8bb8\u6b63\u5728\u5ba3\u4f20\u4ed6\u4eec\u7684\u7f51\u9875\u8bba\u575b\u6216 IRC \u9891\u9053\uff0c\u5e76\u63d0\u4f9b\u65b0\u624b\u5e2e\u52a9\uff08\u5728\u4e00\u4e9b\u975e\u82f1\u8bed\u56fd\u5bb6\uff0c\u65b0\u624b\u8bba\u575b\u5f88\u53ef\u80fd\u8fd8\u662f\u90ae\u4ef6\u5217\u8868\uff09\uff0c \u8fd9\u4e9b\u5730\u65b9\u662f\u5f00\u59cb\u63d0\u95ee\u7684\u597d\u9996\u9009\uff0c\u7279\u522b\u662f\u5f53\u4f60\u89c9\u5f97\u9047\u5230\u7684\u4e5f\u8bb8\u53ea\u662f\u76f8\u5bf9\u7b80\u5355\u6216\u8005\u5f88\u666e\u901a\u7684\u95ee\u9898\u65f6\u3002\u6709\u5e7f\u544a\u8d5e\u52a9\u7684 IRC \u9891\u9053\u662f\u516c\u5f00\u6b22\u8fce\u63d0\u95ee\u7684\u5730\u65b9\uff0c\u901a\u5e38\u53ef\u4ee5\u5373\u65f6\u5f97\u5230\u56de\u5e94\u3002 \u4e8b\u5b9e\u4e0a\uff0c\u5982\u679c\u7a0b\u5e8f\u51fa\u7684\u95ee\u9898\u53ea\u53d1\u751f\u5728\u7279\u5b9a Linux \u53d1\u884c\u7248\u63d0\u4f9b\u7684\u7248\u672c\uff08\u8fd9\u5f88\u5e38\u89c1\uff09\uff0c\u6700\u597d\u5148\u53bb\u8be5\u53d1\u884c\u7248\u7684\u8bba\u575b\u6216\u90ae\u4ef6\u5217\u8868\u4e2d\u63d0\u95ee\uff0c\u518d\u5230\u7a0b\u5e8f\u672c\u8eab\u7684\u8bba\u575b\u6216\u90ae\u4ef6\u5217\u8868\u63d0\u95ee\u3002\uff08\u5426\u5219\uff09\u8be5\u9879\u76ee\u7684\u9ed1\u5ba2\u53ef\u80fd\u4ec5\u4ec5\u56de\u590d \"\u7528\u6211\u4eec\u7684\u7248\u672c\"\u3002 \u5728\u4efb\u4f55\u8bba\u575b\u53d1\u6587\u4ee5\u524d\uff0c\u5148\u786e\u8ba4\u4e00\u4e0b\u6709\u6ca1\u6709\u641c\u7d22\u529f\u80fd\u3002\u5982\u679c\u6709\uff0c\u5c31\u8bd5\u7740\u641c\u7d22\u4e00\u4e0b\u95ee\u9898\u7684\u51e0\u4e2a\u5173\u952e\u8bcd\uff0c\u4e5f\u8bb8\u8fd9\u4f1a\u6709\u5e2e\u52a9\u3002\u5982\u679c\u5728\u6b64\u4e4b\u524d\u4f60\u5df2\u505a\u8fc7\u901a\u7528\u7684\u7f51\u9875\u641c\u7d22\uff08\u4f60\u4e5f\u8be5\u8fd9\u6837\u505a\uff09\uff0c\u8fd8\u662f\u518d\u641c\u7d22\u4e00\u4e0b\u8bba\u575b\uff0c\u641c\u7d22\u5f15\u64ce\u6709\u53ef\u80fd\u6ca1\u6765\u5f97\u53ca\u7d22\u5f15\u6b64\u8bba\u575b\u7684\u5168\u90e8\u5185\u5bb9\u3002 \u901a\u8fc7\u8bba\u575b\u6216 IRC \u9891\u9053\u6765\u63d0\u4f9b\u4f7f\u7528\u8005\u652f\u6301\u670d\u52a1\u6709\u589e\u957f\u7684\u8d8b\u52bf\uff0c\u7535\u5b50\u90ae\u4ef6\u5219\u5927\u591a\u4e3a\u9879\u76ee\u5f00\u53d1\u8005\u95f4\u7684\u4ea4\u6d41\u800c\u4fdd\u7559\u3002\u6240\u4ee5\u6700\u597d\u5148\u5728\u8bba\u575b\u6216 IRC \u4e2d\u5bfb\u6c42\u4e0e\u8be5\u9879\u76ee\u76f8\u5173\u7684\u534f\u52a9\u3002 \u5728\u4f7f\u7528 IRC \u7684\u65f6\u5019\uff0c\u9996\u5148\u6700\u597d\u4e0d\u8981\u53d1\u5e03\u5f88\u957f\u7684\u95ee\u9898\u63cf\u8ff0\uff0c\u6709\u4e9b\u4eba\u79f0\u4e4b\u4e3a\u9891\u9053\u6d2a\u6c34\u3002\u6700\u597d\u901a\u8fc7\u4e00\u53e5\u8bdd\u7684\u95ee\u9898\u63cf\u8ff0\u6765\u5f00\u59cb\u804a\u5929\u3002 \u4f7f\u7528\u9879\u76ee\u90ae\u4ef6\u5217\u8868 \u5f53\u67d0\u4e2a\u9879\u76ee\u63d0\u4f9b\u5f00\u53d1\u8005\u90ae\u4ef6\u5217\u8868\u65f6\uff0c\u8981\u5411\u5217\u8868\u800c\u4e0d\u662f\u5176\u4e2d\u7684\u4e2a\u522b\u6210\u5458\u63d0\u95ee\uff0c\u5373\u4f7f\u4f60\u786e\u4fe1\u4ed6\u80fd\u6700\u597d\u5730\u56de\u7b54\u4f60\u7684\u95ee\u9898\u3002\u67e5\u4e00\u67e5\u9879\u76ee\u7684\u6587\u4ef6\u548c\u9996\u9875\uff0c\u627e\u5230\u9879\u76ee\u7684\u90ae\u4ef6\u5217\u8868\u5e76\u4f7f\u7528\u5b83\u3002\u6709\u51e0\u4e2a\u5f88\u597d\u7684\u7406\u7531\u652f\u6301\u6211\u4eec\u91c7\u7528\u8fd9\u79cd\u529e\u6cd5\uff1a \u4efb\u4f55\u597d\u5230\u9700\u8981\u5411\u4e2a\u522b\u5f00\u53d1\u8005\u63d0\u51fa\u7684\u95ee\u9898\uff0c\u4e5f\u5c06\u5bf9\u6574\u4e2a\u9879\u76ee\u7fa4\u7ec4\u6709\u76ca\u3002\u53cd\u4e4b\uff0c\u5982\u679c\u4f60\u8ba4\u4e3a\u81ea\u5df1\u7684\u95ee\u9898\u5bf9\u6574\u4e2a\u9879\u76ee\u7fa4\u7ec4\u6765\u8bf4\u592a\u611a\u8822\uff0c\u4e5f\u4e0d\u80fd\u6210\u4e3a\u9a9a\u6270\u4e2a\u522b\u5f00\u53d1\u8005\u7684\u7406\u7531\u3002 \u5411\u5217\u8868\u63d0\u95ee\u53ef\u4ee5\u5206\u6563\u5f00\u53d1\u8005\u7684\u8d1f\u62c5\uff0c\u4e2a\u522b\u5f00\u53d1\u8005\uff08\u5c24\u5176\u662f\u9879\u76ee\u9886\u5bfc\u4eba\uff09\u4e5f\u8bb8\u592a\u5fd9\u4ee5\u81f3\u4e8e\u6ca1\u6cd5\u56de\u7b54\u4f60\u7684\u95ee\u9898\u3002 \u5927\u591a\u6570\u90ae\u4ef6\u5217\u8868\u90fd\u4f1a\u88ab\u5b58\u6863\uff0c\u90a3\u4e9b\u88ab\u5b58\u6863\u7684\u5185\u5bb9\u5c06\u88ab\u641c\u7d22\u5f15\u64ce\u7d22\u5f15\u3002\u5982\u679c\u4f60\u5411\u5217\u8868\u63d0\u95ee\u5e76\u5f97\u5230\u89e3\u7b54\uff0c\u5c06\u6765\u5176\u5b83\u4eba\u53ef\u4ee5\u901a\u8fc7\u7f51\u9875\u641c\u7d22\u627e\u5230\u4f60\u7684\u95ee\u9898\u548c\u7b54\u6848\uff0c\u4e5f\u5c31\u4e0d\u7528\u518d\u6b21\u53d1\u95ee\u4e86\u3002 \u5982\u679c\u67d0\u4e9b\u95ee\u9898\u7ecf\u5e38\u88ab\u95ee\u5230\uff0c\u5f00\u53d1\u8005\u53ef\u4ee5\u5229\u7528\u6b64\u4fe1\u606f\u6765\u6539\u8fdb\u8bf4\u660e\u6587\u4ef6\u6216\u8f6f\u4ef6\u672c\u8eab\uff0c\u4ee5\u4f7f\u5176\u66f4\u6e05\u695a\u3002\u5982\u679c\u53ea\u662f\u79c1\u4e0b\u63d0\u95ee\uff0c\u5c31\u6ca1\u6709\u4eba\u80fd\u770b\u5230\u6700\u5e38\u89c1\u95ee\u9898\u7684\u5b8c\u6574\u573a\u666f\u3002 \u5982\u679c\u4e00\u4e2a\u9879\u76ee\u65e2\u6709\"\u4f7f\u7528\u8005\" \u4e5f\u6709\"\u5f00\u53d1\u8005\"\uff08\u6216\"\u9ed1\u5ba2\"\uff09\u90ae\u4ef6\u5217\u8868\u6216\u8bba\u575b\uff0c\u800c\u4f60\u53c8\u4e0d\u4f1a\u52a8\u5230\u90a3\u4e9b\u6e90\u4ee3\u7801\uff0c\u90a3\u4e48\u5c31\u5411\"\u4f7f\u7528\u8005\"\u5217\u8868\u6216\u8bba\u575b\u63d0\u95ee\u3002\u4e0d\u8981\u5047\u8bbe\u81ea\u5df1\u4f1a\u5728\u5f00\u53d1\u8005\u5217\u8868\u4e2d\u53d7\u5230\u6b22\u8fce\uff0c\u90a3\u4e9b\u4eba\u591a\u534a\u4f1a\u5c06\u4f60\u7684\u63d0\u95ee\u89c6\u4e3a\u5e72\u6270\u4ed6\u4eec\u5f00\u53d1\u7684\u566a\u97f3\u3002 \u7136\u800c\uff0c\u5982\u679c\u4f60 \u786e\u4fe1 \u4f60\u7684\u95ee\u9898\u5f88\u7279\u522b\uff0c\u800c\u4e14\u5728\"\u4f7f\u7528\u8005\" \u5217\u8868\u6216\u8bba\u575b\u4e2d\u51e0\u5929\u90fd\u6ca1\u6709\u56de\u590d\uff0c\u53ef\u4ee5\u8bd5\u8bd5\u524d\u5f80\"\u5f00\u53d1\u8005\"\u5217\u8868\u6216\u8bba\u575b\u53d1\u95ee\u3002\u5efa\u8bae\u4f60\u5728\u5f20\u8d34\u524d\u6700\u597d\u5148\u6697\u5730\u91cc\u89c2\u5bdf\u51e0\u5929\u4ee5\u4e86\u89e3\u90a3\u91cc\u7684\u884c\u4e8b\u65b9\u5f0f\uff08\u4e8b\u5b9e\u4e0a\u8fd9\u662f\u53c2\u4e0e\u4efb\u4f55\u79c1\u6709\u6216\u534a\u79c1\u6709\u5217\u8868\u7684\u597d\u4e3b\u610f\uff09 \u5982\u679c\u4f60\u627e\u4e0d\u5230\u4e00\u4e2a\u9879\u76ee\u7684\u90ae\u4ef6\u5217\u8868\uff0c\u800c\u53ea\u80fd\u67e5\u5230\u9879\u76ee\u7ef4\u62a4\u8005\u7684\u7535\u5b50\u90ae\u4ef6\u5730\u5740\uff0c\u5c3d\u7ba1\u5411\u4ed6\u53d1\u4fe1\u3002\u5373\u4f7f\u662f\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u4e5f\u522b\u5047\u8bbe\uff08\u9879\u76ee\uff09\u90ae\u4ef6\u5217\u8868\u4e0d\u5b58\u5728\u3002\u5728\u4f60\u7684\u7535\u5b50\u90ae\u4ef6\u4e2d\uff0c\u8bf7\u9648\u8ff0\u4f60\u5df2\u7ecf\u8bd5\u8fc7\u4f46\u6ca1\u6709\u627e\u5230\u5408\u9002\u7684\u90ae\u4ef6\u5217\u8868\uff0c\u4e5f\u63d0\u53ca\u4f60\u4e0d\u53cd\u5bf9\u5c06\u81ea\u5df1\u7684\u90ae\u4ef6\u8f6c\u53d1\u7ed9\u4ed6\u4eba\uff08\u8bb8\u591a\u4eba\u8ba4\u4e3a\uff0c\u5373\u4f7f\u6ca1\u4ec0\u4e48\u79d8\u5bc6\uff0c\u79c1\u4eba\u7535\u5b50\u90ae\u4ef6\u4e5f\u4e0d\u5e94\u8be5\u88ab\u516c\u5f00\u3002\u901a\u8fc7\u5141\u8bb8\u5c06\u4f60\u7684\u7535\u5b50\u90ae\u4ef6\u8f6c\u53d1\u4ed6\u4eba\uff0c\u4f60\u7ed9\u4e86\u76f8\u5e94\u4eba\u5458\u5904\u7f6e\u4f60\u90ae\u4ef6\u7684\u9009\u62e9\uff09\u3002 \u4f7f\u7528\u6709\u610f\u4e49\u4e14\u63cf\u8ff0\u660e\u786e\u7684\u6807\u9898 \u5728\u90ae\u4ef6\u5217\u8868\u3001\u65b0\u95fb\u7fa4\u7ec4\u6216\u8bba\u575b\u4e2d\uff0c\u5927\u7ea6 50 \u5b57\u4ee5\u5185\u7684\u6807\u9898\u662f\u6293\u4f4f\u8d44\u6df1\u4e13\u5bb6\u6ce8\u610f\u529b\u7684\u597d\u673a\u4f1a\u3002\u522b\u7528\u558b\u558b\u4e0d\u4f11\u7684 \u5e2e\u5e2e\u5fd9 \u3001 \u8dea\u6c42 \u3001 \u6025 \uff08\u66f4\u522b\u8bf4 \u6551\u547d\u554a\uff01\uff01\uff01\uff01 \u8fd9\u6837\u8ba9\u4eba\u53cd\u611f\u7684\u8bdd\uff0c\u7528\u8fd9\u79cd\u6807\u9898\u4f1a\u88ab\u6761\u4ef6\u53cd\u5c04\u5f0f\u5730\u5ffd\u7565\uff09\u6765\u6d6a\u8d39\u8fd9\u4e2a\u673a\u4f1a\u3002\u4e0d\u8981\u5984\u60f3\u7528\u4f60\u7684\u75db\u82e6\u7a0b\u5ea6\u6765\u6253\u52a8\u6211\u4eec\uff0c\u800c\u5e94\u8be5\u662f\u5728\u8fd9\u70b9\u7a7a\u95f4\u4e2d\u4f7f\u7528\u6781\u7b80\u5355\u627c\u8981\u7684\u63cf\u8ff0\u65b9\u5f0f\u6765\u63d0\u51fa\u95ee\u9898\u3002 \u4e00\u4e2a\u597d\u6807\u9898\u8303\u4f8b\u662f \u76ee\u6807 \u2014\u2014 \u5dee\u5f02\u5f0f \u7684\u63cf\u8ff0\uff0c\u8bb8\u591a\u6280\u672f\u652f\u6301\u7ec4\u7ec7\u5c31\u662f\u8fd9\u6837\u505a\u7684\u3002\u5728\u76ee\u6807\u90e8\u5206\u6307\u51fa\u662f\u54ea\u4e00\u4e2a\u6216\u54ea\u4e00\u7ec4\u4e1c\u897f\u6709\u95ee\u9898\uff0c\u5728 \u5dee\u5f02 \u90e8\u5206\u5219\u63cf\u8ff0\u4e0e\u671f\u671b\u7684\u884c\u4e3a\u4e0d\u4e00\u81f4\u7684\u5730\u65b9\u3002 \u8822\u95ee\u9898\uff1a\u6551\u547d\u554a\uff01\u6211\u7684\u7b14\u8bb0\u672c\u7535\u8111\u4e0d\u80fd\u6b63\u5e38\u663e\u793a\u4e86\uff01 \u806a\u660e\u95ee\u9898\uff1aX.org 6.8.1 \u7684\u9f20\u6807\u5149\u6807\u4f1a\u53d8\u5f62\uff0c\u67d0\u724c\u663e\u5361 MV1005 \u82af\u7247\u7ec4\u3002 \u66f4\u806a\u660e\u95ee\u9898\uff1aX.org 6.8.1 \u7684\u9f20\u6807\u5149\u6807\uff0c\u5728\u67d0\u724c\u663e\u5361 MV1005 \u82af\u7247\u7ec4\u73af\u5883\u4e0b - \u4f1a\u53d8\u5f62\u3002 \u7f16\u5199 \u76ee\u6807 \u2014\u2014 \u5dee\u5f02 \u5f0f\u63cf\u8ff0\u7684\u8fc7\u7a0b\u6709\u52a9\u4e8e\u4f60\u7ec4\u7ec7\u5bf9\u95ee\u9898\u7684\u7ec6\u81f4\u601d\u8003\u3002\u662f\u4ec0\u4e48\u88ab\u5f71\u54cd\u4e86\uff1f \u4ec5\u4ec5\u662f\u9f20\u6807\u5149\u6807\u6216\u8005\u8fd8\u6709\u5176\u5b83\u56fe\u5f62\uff1f\u53ea\u5728 X.org \u7684 X \u7248\u4e2d\u51fa\u73b0\uff1f\u6216\u53ea\u662f\u51fa\u73b0\u5728 6.8.1 \u7248\u4e2d\uff1f \u662f\u9488\u5bf9\u67d0\u724c\u663e\u5361\u82af\u7247\u7ec4\uff1f\u6216\u8005\u53ea\u662f\u5176\u4e2d\u7684 MV1005 \u578b\u53f7\uff1f \u4e00\u4e2a\u9ed1\u5ba2\u53ea\u9700\u7784\u4e00\u773c\u5c31\u80fd\u591f\u7acb\u5373\u660e\u767d\u4f60\u7684\u73af\u5883\u548c\u4f60\u9047\u5230\u7684\u95ee\u9898\u3002 \u603b\u800c\u8a00\u4e4b\uff0c\u8bf7\u60f3\u50cf\u4e00\u4e0b\u4f60\u6b63\u5728\u4e00\u4e2a\u53ea\u663e\u793a\u6807\u9898\u7684\u5b58\u6863\u8ba8\u8bba\u4e32\uff08Thread\uff09\u7d22\u5f15\u4e2d\u67e5\u5bfb\u3002\u8ba9\u4f60\u7684\u6807\u9898\u66f4\u597d\u5730\u53cd\u6620\u95ee\u9898\uff0c\u53ef\u4f7f\u4e0b\u4e00\u4e2a\u641c\u7d22\u7c7b\u4f3c\u95ee\u9898\u7684\u4eba\u80fd\u591f\u5173\u6ce8\u8fd9\u4e2a\u8ba8\u8bba\u4e32\uff0c\u800c\u4e0d\u7528\u518d\u6b21\u63d0\u95ee\u76f8\u540c\u7684\u95ee\u9898\u3002 \u5982\u679c\u4f60\u60f3\u5728\u56de\u590d\u4e2d\u63d0\u51fa\u95ee\u9898\uff0c\u8bb0\u5f97\u8981\u4fee\u6539\u5185\u5bb9\u6807\u9898\uff0c\u4ee5\u8868\u660e\u4f60\u662f\u5728\u95ee\u4e00\u4e2a\u95ee\u9898\uff0c \u4e00\u4e2a\u770b\u8d77\u6765\u50cf Re: \u6d4b\u8bd5 \u6216\u8005 Re: \u65b0 bug \u7684\u6807\u9898\u5f88\u96be\u5f15\u8d77\u8db3\u591f\u91cd\u89c6\u3002\u53e6\u5916\uff0c\u5728\u4e0d\u5f71\u54cd\u8fde\u8d2f\u6027\u4e4b\u4e0b\uff0c\u9002\u5f53\u5f15\u7528\u5e76\u5220\u51cf\u524d\u6587\u7684\u5185\u5bb9\uff0c\u80fd\u7ed9\u65b0\u6765\u7684\u8bfb\u8005\u7559\u4e0b\u7ebf\u7d22\u3002 \u5bf9\u4e8e\u8ba8\u8bba\u4e32\uff0c\u4e0d\u8981\u76f4\u63a5\u70b9\u51fb\u56de\u590d\u6765\u5f00\u59cb\u4e00\u4e2a\u5168\u65b0\u7684\u8ba8\u8bba\u4e32\uff0c\u8fd9\u5c06\u9650\u5236\u4f60\u7684\u89c2\u4f17\u3002\u56e0\u4e3a\u6709\u4e9b\u90ae\u4ef6\u9605\u8bfb\u7a0b\u5e8f\uff0c\u6bd4\u5982 mutt \uff0c\u5141\u8bb8\u4f7f\u7528\u8005\u6309\u8ba8\u8bba\u4e32\u6392\u5e8f\u5e76\u901a\u8fc7\u6298\u53e0\u8ba8\u8bba\u4e32\u6765\u9690\u85cf\u6d88\u606f\uff0c\u8fd9\u6837\u505a\u7684\u4eba\u6c38\u8fdc\u770b\u4e0d\u5230\u4f60\u53d1\u7684\u6d88\u606f\u3002 \u4ec5\u4ec5\u6539\u53d8\u6807\u9898\u8fd8\u4e0d\u591f\u3002mutt \u548c\u5176\u5b83\u4e00\u4e9b\u90ae\u4ef6\u9605\u8bfb\u7a0b\u5e8f\u8fd8\u4f1a\u68c0\u67e5\u90ae\u4ef6\u6807\u9898\u4ee5\u5916\u7684\u5176\u5b83\u4fe1\u606f\uff0c\u4ee5\u4fbf\u4e3a\u5176\u6307\u5b9a\u8ba8\u8bba\u4e32\u3002\u6240\u4ee5\u5b81\u53ef\u53d1\u4e00\u4e2a\u5168\u65b0\u7684\u90ae\u4ef6\u3002 \u5728\u7f51\u9875\u8bba\u575b\u4e0a\uff0c\u597d\u7684\u63d0\u95ee\u65b9\u5f0f\u7a0d\u6709\u4e0d\u540c\uff0c\u56e0\u4e3a\u8ba8\u8bba\u4e32\u4e0e\u7279\u5b9a\u7684\u4fe1\u606f\u7d27\u5bc6\u7ed3\u5408\uff0c\u5e76\u4e14\u901a\u5e38\u5728\u8ba8\u8bba\u4e32\u5916\u5c31\u770b\u4e0d\u5230\u91cc\u9762\u7684\u5185\u5bb9\uff0c\u6545\u901a\u8fc7\u56de\u590d\u63d0\u95ee\uff0c\u800c\u975e\u6539\u53d8\u6807\u9898\u662f\u53ef\u63a5\u53d7\u7684\u3002\u4e0d\u662f\u6240\u6709\u8bba\u575b\u90fd\u5141\u8bb8\u5728\u56de\u590d\u4e2d\u51fa\u73b0\u5206\u79bb\u7684\u6807\u9898\uff0c\u800c\u4e14\u8fd9\u6837\u505a\u4e86\u57fa\u672c\u4e0a\u6ca1\u6709\u4eba\u4f1a\u53bb\u770b\u3002\u4e0d\u8fc7\uff0c\u901a\u8fc7\u56de\u590d\u63d0\u95ee\uff0c\u8fd9\u672c\u8eab\u5c31\u662f\u66a7\u6627\u7684\u505a\u6cd5\uff0c\u56e0\u4e3a\u5b83\u4eec\u53ea\u4f1a\u88ab\u6b63\u5728\u67e5\u770b\u8be5\u6807\u9898\u7684\u4eba\u8bfb\u5230\u3002\u6240\u4ee5\uff0c\u9664\u975e\u4f60\u53ea\u60f3\u5728\u8be5\u8ba8\u8bba\u4e32\u5f53\u524d\u6d3b\u8dc3\u7684\u4eba\u7fa4\u4e2d\u63d0\u95ee\uff0c\u4e0d\u7136\u8fd8\u662f\u53e6\u8d77\u7089\u7076\u6bd4\u8f83\u597d\u3002 \u4f7f\u95ee\u9898\u5bb9\u6613\u56de\u590d \u4ee5 \u8bf7\u5c06\u4f60\u7684\u56de\u590d\u53d1\u9001\u5230\u2026\u2026 \u6765\u7ed3\u675f\u4f60\u7684\u95ee\u9898\u591a\u534a\u4f1a\u4f7f\u4f60\u5f97\u4e0d\u5230\u56de\u7b54\u3002\u5982\u679c\u4f60\u89c9\u5f97\u82b1\u51e0\u79d2\u949f\u5728\u90ae\u4ef6\u5ba2\u6237\u7aef\u8bbe\u7f6e\u4e00\u4e0b\u56de\u590d\u5730\u5740\u90fd\u9ebb\u70e6\uff0c\u6211\u4eec\u4e5f\u89c9\u5f97\u82b1\u51e0\u79d2\u949f\u601d\u8003\u4f60\u7684\u95ee\u9898\u66f4\u9ebb\u70e6\u3002\u5982\u679c\u4f60\u7684\u90ae\u4ef6\u7a0b\u5e8f\u4e0d\u652f\u6301\u8fd9\u6837\u505a\uff0c \u6362\u4e2a\u597d\u70b9\u7684 \uff1b\u5982\u679c\u662f\u64cd\u4f5c\u7cfb\u7edf\u4e0d\u652f\u6301\u8fd9\u79cd\u90ae\u4ef6\u7a0b\u5e8f\uff0c\u4e5f\u6362\u4e2a\u597d\u70b9\u7684\u3002 \u5728\u8bba\u575b\uff0c\u8981\u6c42\u901a\u8fc7\u7535\u5b50\u90ae\u4ef6\u56de\u590d\u662f\u975e\u5e38\u65e0\u793c\u7684\uff0c\u9664\u975e\u4f60\u8ba4\u4e3a\u56de\u590d\u7684\u4fe1\u606f\u53ef\u80fd\u6bd4\u8f83\u654f\u611f\uff08\u6709\u4eba\u4f1a\u4e3a\u4e86\u67d0\u4e9b\u672a\u77e5\u7684\u539f\u56e0\uff0c\u53ea\u8ba9\u4f60\u800c\u4e0d\u662f\u6574\u4e2a\u8bba\u575b\u77e5\u9053\u7b54\u6848\uff09\u3002\u5982\u679c\u4f60\u53ea\u662f\u60f3\u5728\u6709\u4eba\u56de\u590d\u8ba8\u8bba\u4e32\u65f6\u5f97\u5230\u7535\u5b50\u90ae\u4ef6\u63d0\u9192\uff0c\u53ef\u4ee5\u8981\u6c42\u7f51\u9875\u8bba\u575b\u53d1\u9001\u7ed9\u4f60\u3002\u51e0\u4e4e\u6240\u6709\u8bba\u575b\u90fd\u652f\u6301\u8bf8\u5982 \u8ffd\u8e2a\u6b64\u8ba8\u8bba\u4e32 \u3001 \u6709\u56de\u590d\u65f6\u53d1\u9001\u90ae\u4ef6\u63d0\u9192 \u7b49\u529f\u80fd\u3002 \u7528\u6e05\u6670\u3001\u6b63\u786e\u3001\u7cbe\u51c6\u5e76\u8bed\u6cd5\u6b63\u786e\u7684\u8bed\u53e5 \u6211\u4eec\u4ece\u7ecf\u9a8c\u4e2d\u53d1\u73b0\uff0c\u7c97\u5fc3\u7684\u63d0\u95ee\u8005\u901a\u5e38\u4e5f\u4f1a\u7c97\u5fc3\u7684\u5199\u7a0b\u5e8f\u4e0e\u601d\u8003\uff08\u6211\u6562\u6253\u5305\u7968\uff09\u3002\u56de\u7b54\u7c97\u5fc3\u5927\u610f\u8005\u7684\u95ee\u9898\u5f88\u4e0d\u503c\u5f97\uff0c\u6211\u4eec\u5b81\u613f\u628a\u65f6\u95f4\u8017\u5728\u522b\u5904\u3002 \u6b63\u786e\u7684\u62fc\u5199\u3001\u6807\u70b9\u7b26\u53f7\u548c\u5927\u5c0f\u5199\u662f\u5f88\u91cd\u8981\u7684\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u5982\u679c\u4f60\u89c9\u5f97\u8fd9\u6837\u505a\u5f88\u9ebb\u70e6\uff0c\u4e0d\u60f3\u5728\u4e4e\u8fd9\u4e9b\uff0c\u90a3\u6211\u4eec\u4e5f\u89c9\u5f97\u9ebb\u70e6\uff0c\u4e0d\u60f3\u5728\u4e4e\u4f60\u7684\u63d0\u95ee\u3002\u82b1\u70b9\u989d\u5916\u7684\u7cbe\u529b\u659f\u914c\u4e00\u4e0b\u5b57\u53e5\uff0c\u7528\u4e0d\u7740\u592a\u50f5\u786c\u4e0e\u6b63\u5f0f \u2014\u2014 \u4e8b\u5b9e\u4e0a\uff0c\u9ed1\u5ba2\u6587\u5316\u5f88\u770b\u91cd\u80fd\u51c6\u786e\u5730\u4f7f\u7528\u975e\u6b63\u5f0f\u3001\u4fda\u8bed\u548c\u5e7d\u9ed8\u7684\u8bed\u53e5\u3002\u4f46\u5b83\u5fc5\u987b\u5f88\u51c6\u786e\uff0c\u800c\u4e14\u6709\u8ff9\u8c61\u8868\u660e\u4f60\u662f\u5728\u601d\u8003\u548c\u5173\u6ce8\u95ee\u9898\u3002 \u6b63\u786e\u5730\u62fc\u5199\u3001\u4f7f\u7528\u6807\u70b9\u548c\u5927\u5c0f\u5199\uff0c\u4e0d\u8981\u5c06 its \u6df7\u6dc6\u4e3a it's \uff0c loose \u641e\u6210 lose \u6216\u8005\u5c06 discrete \u5f04\u6210 discreet \u3002\u4e0d\u8981\u5168\u90e8\u7528\u5927\u5199\uff0c\u8fd9\u4f1a\u88ab\u89c6\u4e3a\u65e0\u793c\u7684\u5927\u58f0\u56b7\u56b7\uff08\u5168\u90e8\u5c0f\u5199\u4e5f\u597d\u4e0d\u5230\u54ea\u53bb\uff0c\u56e0\u4e3a\u4e0d\u6613\u9605\u8bfb\u3002 Alan Cox \u4e5f\u8bb8\u53ef\u4ee5\u8fd9\u6837\u505a\uff0c\u4f46\u4f60\u4e0d\u884c\uff09\u3002 \u66f4\u767d\u8bdd\u7684\u8bf4\uff0c\u5982\u679c\u4f60\u5199\u5f97\u50cf\u662f\u4e2a\u534a\u6587\u76f2[\u8bd1\u6ce8\uff1a\u5c0f\u767d]\uff0c\u90a3\u591a\u534a\u5f97\u4e0d\u5230\u7406\u776c\u3002\u4e5f\u4e0d\u8981\u4f7f\u7528\u5373\u65f6\u901a\u4fe1\u4e2d\u7684\u7b80\u5199\u6216\u706b\u661f\u6587\uff0c\u5982\u5c06 \u7684 \u7b80\u5316\u4e3a d \u4f1a\u4f7f\u4f60\u770b\u8d77\u6765\u50cf\u4e00\u4e2a\u4e3a\u4e86\u5c11\u6253\u51e0\u4e2a\u952e\u800c\u7701\u5b57\u7684\u5c0f\u767d\u3002\u66f4\u7cdf\u7684\u662f\uff0c\u5982\u679c\u50cf\u4e2a\u5c0f\u5b69\u4f3c\u5730\u9b3c\u753b\u7b26\u90a3\u7edd\u5bf9\u662f\u5728\u627e\u6b7b\uff0c\u53ef\u4ee5\u80af\u5b9a\u6ca1\u4eba\u4f1a\u7406\u4f60\uff08\u6216\u8005\u6700\u591a\u662f\u7ed9\u4f60\u4e00\u5927\u5806\u6307\u8d23\u4e0e\u6316\u82e6\uff09\u3002 \u5982\u679c\u5728\u4f7f\u7528\u975e\u6bcd\u8bed\u7684\u8bba\u575b\u63d0\u95ee\uff0c\u4f60\u53ef\u4ee5\u72af\u70b9\u62fc\u5199\u548c\u8bed\u6cd5\u4e0a\u7684\u5c0f\u9519\uff0c\u4f46\u51b3\u4e0d\u80fd\u5728\u601d\u8003\u4e0a\u9a6c\u864e\uff08\u6ca1\u9519\uff0c\u6211\u4eec\u901a\u5e38\u80fd\u5f04\u6e05\u4e24\u8005\u7684\u5206\u522b\uff09\u3002\u540c\u65f6\uff0c\u9664\u975e\u4f60\u77e5\u9053\u56de\u590d\u8005\u4f7f\u7528\u7684\u8bed\u8a00\uff0c\u5426\u5219\u8bf7\u4f7f\u7528\u82f1\u8bed\u4e66\u5199\u3002\u7e41\u5fd9\u7684\u9ed1\u5ba2\u4e00\u822c\u4f1a\u76f4\u63a5\u5220\u9664\u7528\u4ed6\u4eec\u770b\u4e0d\u61c2\u8bed\u8a00\u5199\u7684\u6d88\u606f\u3002\u5728\u7f51\u7edc\u4e0a\u82f1\u8bed\u662f\u901a\u7528\u8bed\u8a00\uff0c\u7528\u82f1\u8bed\u4e66\u5199\u53ef\u4ee5\u5c06\u4f60\u7684\u95ee\u9898\u5728\u5c1a\u672a\u88ab\u9605\u8bfb\u5c31\u88ab\u76f4\u63a5\u5220\u9664\u7684\u53ef\u80fd\u6027\u964d\u5230\u6700\u4f4e\u3002 \u5982\u679c\u82f1\u6587\u662f\u4f60\u7684\u5916\u8bed\uff08Second language\uff09\uff0c\u63d0\u793a\u6f5c\u5728\u56de\u590d\u8005\u4f60\u6709\u6f5c\u5728\u7684\u8bed\u8a00\u56f0\u96be\u662f\u5f88\u597d\u7684\uff1a [\u8bd1\u6ce8\uff1a\u4ee5\u4e0b\u9644\u4e0a\u539f\u6587\u4ee5\u4f9b\u4f7f\u7528] English is not my native language; please excuse typing errors. \u82f1\u6587\u4e0d\u662f\u6211\u7684\u6bcd\u8bed\uff0c\u8bf7\u539f\u8c05\u6211\u7684\u9519\u5b57\u6216\u8bed\u6cd5\u3002 If you speak $LANGUAGE, please email/PM me; I may need assistance translating my question. \u5982\u679c\u4f60\u8bf4\u67d0\u8bed\u8a00\uff0c\u8bf7\u5bc4\u4fe1/\u79c1\u8baf\u7ed9\u6211\uff1b\u6211\u9700\u8981\u6709\u4eba\u534f\u52a9\u6211\u7ffb\u8bd1\u6211\u7684\u95ee\u9898\u3002 I am familiar with the technical terms, but some slang expressions and idioms are difficult for me. \u6211\u5bf9\u6280\u672f\u540d\u8bcd\u5f88\u719f\u6089\uff0c\u4f46\u5bf9\u4e8e\u4fd7\u8bed\u6216\u662f\u7279\u522b\u7528\u6cd5\u6bd4\u8f83\u4e0d\u751a\u4e86\u89e3\u3002 I've posted my question in $LANGUAGE and English. I'll be glad to translate responses, if you only use one or the other. \u6211\u628a\u6211\u7684\u95ee\u9898\u7528\u67d0\u8bed\u8a00\u548c\u82f1\u6587\u5199\u51fa\u6765\uff0c\u5982\u679c\u4f60\u53ea\u7528\u4e00\u79cd\u8bed\u8a00\u56de\u7b54\uff0c\u6211\u4f1a\u4e50\u610f\u5c06\u5176\u7ffb\u8bd1\u6210\u53e6\u4e00\u79cd\u3002 \u4f7f\u7528\u6613\u4e8e\u8bfb\u53d6\u4e14\u6807\u51c6\u7684\u6587\u4ef6\u683c\u5f0f\u53d1\u9001\u95ee\u9898 \u5982\u679c\u4f60\u4eba\u4e3a\u5730\u5c06\u95ee\u9898\u641e\u5f97\u96be\u4ee5\u9605\u8bfb\uff0c\u5b83\u591a\u534a\u4f1a\u88ab\u5ffd\u7565\uff0c\u4eba\u4eec\u66f4\u613f\u8bfb\u6613\u61c2\u7684\u95ee\u9898\uff0c\u6240\u4ee5\uff1a \u4f7f\u7528\u7eaf\u6587\u5b57\u800c\u4e0d\u662f HTML ( \u5173\u95ed HTML \u5e76\u4e0d\u96be\uff09\u3002 \u4f7f\u7528 MIME \u9644\u4ef6\u901a\u5e38\u662f\u53ef\u4ee5\u7684\uff0c\u524d\u63d0\u662f\u771f\u6b63\u6709\u5185\u5bb9\uff08\u8b6c\u5982\u9644\u5e26\u7684\u6e90\u4ee3\u7801\u6216 patch\uff09\uff0c\u800c\u4e0d\u4ec5\u4ec5\u662f\u90ae\u4ef6\u7a0b\u5e8f\u751f\u6210\u7684\u6a21\u677f\uff08\u8b6c\u5982\u53ea\u662f\u4fe1\u4ef6\u5185\u5bb9\u7684\u62f7\u8d1d\uff09\u3002 \u4e0d\u8981\u53d1\u9001\u4e00\u6bb5\u6587\u5b57\u53ea\u662f\u4e00\u884c\u53e5\u5b50\u4f46\u81ea\u52a8\u6362\u884c\u540e\u4f1a\u53d8\u6210\u591a\u884c\u7684\u90ae\u4ef6\uff08\u8fd9\u4f7f\u5f97\u56de\u590d\u90e8\u5206\u5185\u5bb9\u975e\u5e38\u56f0\u96be\uff09\u3002\u8bbe\u60f3\u4f60\u7684\u8bfb\u8005\u662f\u5728 80 \u4e2a\u5b57\u7b26\u5bbd\u7684\u7ec8\u7aef\u673a\u4e0a\u9605\u8bfb\u90ae\u4ef6\uff0c\u6700\u597d\u8bbe\u7f6e\u4f60\u7684\u6362\u884c\u5206\u5272\u70b9\u5c0f\u4e8e 80 \u5b57\u3002 \u4f46\u662f\uff0c\u5bf9\u4e00\u4e9b\u7279\u6b8a\u7684\u6587\u4ef6\u4e0d\u8981\u8bbe\u7f6e\u56fa\u5b9a\u5bbd\u5ea6\uff08\u8b6c\u5982\u65e5\u5fd7\u6863\u6848\u62f7\u8d1d\u6216\u4f1a\u8bdd\u8bb0\u5f55\uff09\u3002\u6570\u636e\u5e94\u8be5\u539f\u6837\u5305\u542b\uff0c\u8ba9\u56de\u590d\u8005\u6709\u4fe1\u5fc3\u4ed6\u4eec\u770b\u5230\u7684\u662f\u548c\u4f60\u770b\u5230\u7684\u4e00\u6837\u7684\u4e1c\u897f\u3002 \u5728\u82f1\u8bed\u8bba\u575b\u4e2d\uff0c\u4e0d\u8981\u4f7f\u7528 Quoted-Printable MIME \u7f16\u7801\u53d1\u9001\u6d88\u606f\u3002\u8fd9\u79cd\u7f16\u7801\u5bf9\u4e8e\u5f20\u8d34\u975e ASCII \u8bed\u8a00\u53ef\u80fd\u662f\u5fc5\u987b\u7684\uff0c\u4f46\u5f88\u591a\u90ae\u4ef6\u7a0b\u5e8f\u5e76\u4e0d\u652f\u6301\u8fd9\u79cd\u7f16\u7801\u3002\u5f53\u5b83\u4eec\u5904\u7406\u6362\u884c\u65f6\uff0c\u90a3\u4e9b\u6587\u672c\u4e2d\u56db\u5904\u6563\u5e03\u7684=20\u7b26\u53f7\u65e2\u96be\u770b\u4e5f\u5206\u6563\u6ce8\u610f\u529b\uff0c\u751a\u81f3\u6709\u53ef\u80fd\u7834\u574f\u5185\u5bb9\u7684\u8bed\u610f\u3002 \u7edd\u5bf9\uff0c\u6c38\u8fdc\u4e0d\u8981\u6307\u671b\u9ed1\u5ba2\u4eec\u9605\u8bfb\u4f7f\u7528\u5c01\u95ed\u683c\u5f0f\u7f16\u5199\u7684\u6587\u6863\uff0c\u50cf\u5fae\u8f6f\u516c\u53f8\u7684 Word \u6216 Excel \u6587\u4ef6\u7b49\u3002\u5927\u591a\u6570\u9ed1\u5ba2\u5bf9\u6b64\u7684\u53cd\u5e94\u5c31\u50cf\u6709\u4eba\u5c06\u8fd8\u5728\u5192\u70ed\u6c14\u7684\u732a\u7caa\u5012\u5728\u4f60\u5bb6\u95e8\u53e3\u65f6\u4f60\u7684\u53cd\u5e94\u4e00\u6837\u3002\u5373\u4fbf\u4ed6\u4eec\u80fd\u591f\u5904\u7406\uff0c\u4ed6\u4eec\u4e5f\u5f88\u538c\u6076\u8fd9\u4e48\u505a\u3002 \u5982\u679c\u4f60\u4ece\u4f7f\u7528 Windows \u7684\u7535\u8111\u53d1\u9001\u7535\u5b50\u90ae\u4ef6\uff0c\u5173\u95ed\u5fae\u8f6f\u611a\u8822\u7684 \u667a\u80fd\u5f15\u53f7 \u529f\u80fd \uff08\u4ece[\u9009\u9879] > [\u6821\u8ba2] > [\u81ea\u52a8\u6821\u6b63\u9009\u9879]\uff0c\u52fe\u9009\u6389\u667a\u80fd\u5f15\u53f7\u5355\u9009\u6846\uff09\uff0c\u4ee5\u514d\u5728\u4f60\u7684\u90ae\u4ef6\u4e2d\u5230\u5904\u6563\u5e03\u5783\u573e\u5b57\u7b26\u3002 \u5728\u8bba\u575b\uff0c\u52ff\u6ee5\u7528\u8868\u60c5\u7b26\u53f7\u548cHTML\u529f\u80fd\uff08\u5f53\u5b83\u4eec\u63d0\u4f9b\u65f6\uff09\u3002\u4e00\u4e24\u4e2a\u8868\u60c5\u7b26\u53f7\u901a\u5e38\u6ca1\u6709\u95ee\u9898\uff0c\u4f46\u82b1\u54e8\u7684\u5f69\u8272\u6587\u672c\u503e\u5411\u4e8e\u4f7f\u4eba\u8ba4\u4e3a\u4f60\u662f\u4e2a\u65e0\u80fd\u4e4b\u8f88\u3002\u8fc7\u6ee5\u5730\u4f7f\u7528\u8868\u60c5\u7b26\u53f7\u3001\u8272\u5f69\u548c\u5b57\u4f53\u4f1a\u4f7f\u4f60\u770b\u6765\u50cf\u4e2a\u50bb\u7b11\u7684\u5c0f\u59d1\u5a18\u3002\u8fd9\u901a\u5e38\u4e0d\u662f\u4e2a\u597d\u4e3b\u610f\uff0c\u9664\u975e\u4f60\u53ea\u662f\u5bf9\u6027\u800c\u4e0d\u662f\u5bf9\u7b54\u6848\u611f\u5174\u8da3\u3002 \u5982\u679c\u4f60\u4f7f\u7528\u56fe\u5f62\u7528\u6237\u754c\u9762\u7684\u90ae\u4ef6\u7a0b\u5e8f\uff08\u5982\u5fae\u8f6f\u516c\u53f8\u7684 Outlook \u6216\u8005\u5176\u5b83\u7c7b\u4f3c\u7684\uff09\uff0c\u6ce8\u610f\u5b83\u4eec\u7684\u9ed8\u8ba4\u8bbe\u7f6e\u4e0d\u4e00\u5b9a\u6ee1\u8db3\u8fd9\u4e9b\u8981\u6c42\u3002\u5927\u591a\u6570\u8fd9\u7c7b\u7a0b\u5e8f\u6709\u57fa\u4e8e\u9009\u5355\u7684\u67e5\u770b\u6e90\u4ee3\u7801\u547d\u4ee4\uff0c\u7528\u5b83\u6765\u68c0\u67e5\u53d1\u9001\u6587\u4ef6\u5939\u4e2d\u7684\u90ae\u4ef6\uff0c\u4ee5\u786e\u4fdd\u53d1\u9001\u7684\u662f\u7eaf\u6587\u672c\u6587\u4ef6\u540c\u65f6\u6ca1\u6709\u4e00\u4e9b\u5947\u602a\u7684\u5b57\u7b26\u3002 \u7cbe\u786e\u5730\u63cf\u8ff0\u95ee\u9898\u5e76\u8a00\u4e4b\u6709\u7269 \u4ed4\u7ec6\u3001\u6e05\u695a\u5730\u63cf\u8ff0\u4f60\u7684\u95ee\u9898\u6216 Bug \u7684\u75c7\u72b6\u3002 \u63cf\u8ff0\u95ee\u9898\u53d1\u751f\u7684\u73af\u5883\uff08\u673a\u5668\u914d\u7f6e\u3001\u64cd\u4f5c\u7cfb\u7edf\u3001\u5e94\u7528\u7a0b\u5e8f\u3001\u4ee5\u53ca\u76f8\u5173\u7684\u4fe1\u606f\uff09\uff0c\u63d0\u4f9b\u7ecf\u9500\u5546\u7684\u53d1\u884c\u7248\u548c\u7248\u672c\u53f7\uff08\u5982\uff1a Fedora Core 4 \u3001 Slackware 9.1 \u7b49\uff09\u3002 \u63cf\u8ff0\u5728\u63d0\u95ee\u524d\u4f60\u662f\u600e\u6837\u53bb\u7814\u7a76\u548c\u7406\u89e3\u8fd9\u4e2a\u95ee\u9898\u7684\u3002 \u63cf\u8ff0\u5728\u63d0\u95ee\u524d\u4e3a\u786e\u5b9a\u95ee\u9898\u800c\u91c7\u53d6\u7684\u8bca\u65ad\u6b65\u9aa4\u3002 \u63cf\u8ff0\u6700\u8fd1\u505a\u8fc7\u4ec0\u4e48\u53ef\u80fd\u76f8\u5173\u7684\u786c\u4ef6\u6216\u8f6f\u4ef6\u53d8\u66f4\u3002 \u5c3d\u53ef\u80fd\u7684\u63d0\u4f9b\u4e00\u4e2a\u53ef\u4ee5 \u91cd\u73b0\u8fd9\u4e2a\u95ee\u9898\u7684\u53ef\u63a7\u73af\u5883 \u7684\u65b9\u6cd5\u3002 \u5c3d\u91cf\u53bb\u63e3\u6d4b\u4e00\u4e2a\u9ed1\u5ba2\u4f1a\u600e\u6837\u53cd\u95ee\u4f60\uff0c\u5728\u4f60\u63d0\u95ee\u4e4b\u524d\u9884\u5148\u5c06\u9ed1\u5ba2\u4eec\u53ef\u80fd\u9047\u5230\u7684\u95ee\u9898\u56de\u7b54\u4e00\u904d\u3002 \u4ee5\u4e0a\u51e0\u70b9\u4e2d\uff0c\u5f53\u4f60\u62a5\u544a\u7684\u662f\u4f60\u8ba4\u4e3a\u53ef\u80fd\u5728\u4ee3\u7801\u4e2d\u7684\u95ee\u9898\u65f6\uff0c\u7ed9\u9ed1\u5ba2\u4e00\u4e2a\u53ef\u4ee5\u91cd\u73b0\u4f60\u7684\u95ee\u9898\u7684\u73af\u5883\u5c24\u5176\u91cd\u8981\u3002\u5f53\u4f60\u8fd9\u4e48\u505a\u65f6\uff0c\u4f60\u5f97\u5230\u6709\u6548\u7684\u56de\u7b54\u7684\u673a\u4f1a\u548c\u901f\u5ea6\u90fd\u4f1a\u5927\u5927\u7684\u63d0\u5347\u3002 Simon Tatham \u5199\u8fc7\u4e00\u7bc7\u540d\u4e3a\u300a\u5982\u4f55\u6709\u6548\u7684\u62a5\u544a Bug\u300b\u7684\u51fa\u8272\u6587\u7ae0\u3002\u5f3a\u529b\u63a8\u8350\u4f60\u4e5f\u8bfb\u4e00\u8bfb\u3002 \u8bdd\u4e0d\u5728\u591a\u800c\u5728\u7cbe \u4f60\u9700\u8981\u63d0\u4f9b\u7cbe\u786e\u6709\u5185\u5bb9\u7684\u4fe1\u606f\u3002\u8fd9\u5e76\u4e0d\u662f\u8981\u6c42\u4f60\u7b80\u5355\u7684\u628a\u6210\u5806\u7684\u51fa\u9519\u4ee3\u7801\u6216\u8005\u8d44\u6599\u5b8c\u5168\u8f6c\u5f55\u5230\u4f60\u7684\u63d0\u95ee\u4e2d\u3002\u5982\u679c\u4f60\u6709\u5e9e\u5927\u800c\u590d\u6742\u7684\u6d4b\u8bd5\u6837\u4f8b\u80fd\u91cd\u73b0\u7a0b\u5e8f\u6302\u6389\u7684\u60c5\u5883\uff0c\u5c3d\u91cf\u5c06\u5b83\u526a\u88c1\u5f97\u8d8a\u5c0f\u8d8a\u597d\u3002 \u8fd9\u6837\u505a\u7684\u7528\u5904\u81f3\u5c11\u6709\u4e09\u70b9\u3002 \u7b2c\u4e00\uff0c\u8868\u73b0\u51fa\u4f60\u4e3a\u7b80\u5316\u95ee\u9898\u4ed8\u51fa\u4e86\u52aa\u529b\uff0c\u8fd9\u53ef\u4ee5\u4f7f\u4f60\u5f97\u5230\u56de\u7b54\u7684\u673a\u4f1a\u589e\u52a0\uff1b \u7b2c\u4e8c\uff0c\u7b80\u5316\u95ee\u9898\u4f7f\u4f60\u66f4\u6709\u53ef\u80fd\u5f97\u5230\u6709\u7528\u7684\u7b54\u6848\uff1b \u7b2c\u4e09\uff0c\u5728\u7cbe\u70bc\u4f60\u7684 bug \u62a5\u544a\u7684\u8fc7\u7a0b\u4e2d\uff0c\u4f60\u5f88\u53ef\u80fd\u5c31\u81ea\u5df1\u627e\u5230\u4e86\u89e3\u51b3\u65b9\u6cd5\u6216\u6743\u5b9c\u4e4b\u8ba1\u3002 \u522b\u52a8\u8f84\u58f0\u79f0\u627e\u5230 Bug \u5f53\u4f60\u5728\u4f7f\u7528\u8f6f\u4ef6\u4e2d\u9047\u5230\u95ee\u9898\uff0c\u9664\u975e\u4f60\u975e\u5e38\u3001\u975e\u5e38\u7684\u6709\u6839\u636e\uff0c\u4e0d\u8981\u52a8\u8f84\u58f0\u79f0\u627e\u5230\u4e86 Bug\u3002\u63d0\u793a\uff1a\u9664\u975e\u4f60\u80fd\u63d0\u4f9b\u89e3\u51b3\u95ee\u9898\u7684\u6e90\u4ee3\u7801\u8865\u4e01\uff0c\u6216\u8005\u63d0\u4f9b\u56de\u5f52\u6d4b\u8bd5\u6765\u8868\u660e\u524d\u4e00\u7248\u672c\u4e2d\u884c\u4e3a\u4e0d\u6b63\u786e\uff0c\u5426\u5219\u4f60\u90fd\u591a\u534a\u4e0d\u591f\u5b8c\u5168\u786e\u4fe1\u3002\u8fd9\u540c\u6837\u9002\u7528\u5728\u7f51\u9875\u548c\u6587\u4ef6\uff0c\u5982\u679c\u4f60\uff08\u58f0\u79f0\uff09\u53d1\u73b0\u4e86\u6587\u4ef6\u7684Bug\uff0c\u4f60\u5e94\u8be5\u80fd\u63d0\u4f9b\u76f8\u5e94\u4f4d\u7f6e\u7684\u4fee\u6b63\u6216\u66ff\u4ee3\u6587\u4ef6\u3002 \u8bf7\u8bb0\u5f97\uff0c\u8fd8\u6709\u8bb8\u591a\u5176\u5b83\u4f7f\u7528\u8005\u6ca1\u9047\u5230\u4f60\u53d1\u73b0\u7684\u95ee\u9898\uff0c\u5426\u5219\u4f60\u5728\u9605\u8bfb\u6587\u4ef6\u6216\u641c\u7d22\u7f51\u9875\u65f6\u5c31\u5e94\u8be5\u53d1\u73b0\u4e86\uff08\u4f60\u5728\u62b1\u6028\u524d\u5df2\u7ecf\u505a\u4e86\u8fd9\u4e9b\uff0c\u662f\u5427\uff1f\uff09\u3002\u8fd9\u4e5f\u610f\u5473\u7740\u5f88\u6709\u53ef\u80fd\u662f\u4f60\u5f04\u9519\u4e86\u800c\u4e0d\u662f\u8f6f\u4ef6\u672c\u8eab\u6709\u95ee\u9898\u3002 \u7f16\u5199\u8f6f\u4ef6\u7684\u4eba\u603b\u662f\u975e\u5e38\u8f9b\u82e6\u5730\u4f7f\u5b83\u5c3d\u53ef\u80fd\u5b8c\u7f8e\u3002\u5982\u679c\u4f60\u58f0\u79f0\u627e\u5230\u4e86 Bug\uff0c\u4e5f\u5c31\u662f\u5728\u8d28\u7591\u4ed6\u4eec\u7684\u80fd\u529b\uff0c\u5373\u4f7f\u4f60\u662f\u5bf9\u7684\uff0c\u4e5f\u6709\u53ef\u80fd\u4f1a\u5192\u72af\u5230\u5176\u4e2d\u67d0\u90e8\u5206\u4eba\u3002\u5f53\u4f60\u5728\u6807\u9898\u4e2d\u56b7\u56b7\u7740\u6709Bug\u65f6\uff0c\u8fd9\u5c24\u5176\u4e25\u91cd\u3002 \u63d0\u95ee\u65f6\uff0c\u5373\u4f7f\u4f60\u79c1\u4e0b\u975e\u5e38\u786e\u4fe1\u5df2\u7ecf\u53d1\u73b0\u4e00\u4e2a\u771f\u6b63\u7684 Bug\uff0c\u6700\u597d\u5199\u5f97\u50cf\u662f\u4f60\u505a\u9519\u4e86\u4ec0\u4e48\u3002\u5982\u679c\u771f\u7684\u6709 Bug\uff0c\u4f60\u4f1a\u5728\u56de\u590d\u4e2d\u770b\u5230\u8fd9\u70b9\u3002\u8fd9\u6837\u505a\u7684\u8bdd\uff0c\u5982\u679c\u771f\u6709 Bug\uff0c\u7ef4\u62a4\u8005\u5c31\u4f1a\u5411\u4f60\u9053\u6b49\uff0c\u8fd9\u603b\u6bd4\u4f60\u60f9\u607c\u522b\u4eba\u7136\u540e\u6b20\u522b\u4eba\u4e00\u4e2a\u9053\u6b49\u8981\u597d\u4e00\u70b9\u3002 \u4f4e\u58f0\u4e0b\u6c14\u4e0d\u80fd\u4ee3\u66ff\u4f60\u7684\u529f\u8bfe \u6709\u4e9b\u4eba\u660e\u767d\u4ed6\u4eec\u4e0d\u8be5\u7c97\u9c81\u6216\u50b2\u6162\u7684\u63d0\u95ee\u5e76\u8981\u6c42\u5f97\u5230\u7b54\u590d\uff0c\u4f46\u4ed6\u4eec\u9009\u62e9\u53e6\u4e00\u4e2a\u6781\u7aef \u2014\u2014 \u4f4e\u58f0\u4e0b\u6c14\uff1a \u6211\u77e5\u9053\u6211\u53ea\u662f\u4e2a\u53ef\u60b2\u7684\u65b0\u624b\uff0c\u4e00\u4e2a\u64b8\u745f\uff0c\u4f46... \u3002\u8fd9\u65e2\u4f7f\u4eba\u56f0\u6270\uff0c\u4e5f\u6ca1\u6709\u7528\uff0c\u5c24\u5176\u662f\u4f34\u968f\u7740\u4e0e\u5b9e\u9645\u95ee\u9898\u542b\u7cca\u4e0d\u6e05\u7684\u63cf\u8ff0\u65f6\u66f4\u4ee4\u4eba\u53cd\u611f\u3002 \u522b\u7528\u539f\u59cb\u7075\u957f\u7c7b\u52a8\u7269\u7684\u628a\u620f\u6765\u6d6a\u8d39\u4f60\u6211\u7684\u65f6\u95f4\u3002\u53d6\u800c\u4ee3\u4e4b\u7684\u662f\uff0c\u5c3d\u53ef\u80fd\u6e05\u695a\u5730\u63cf\u8ff0\u80cc\u666f\u6761\u4ef6\u548c\u4f60\u7684\u95ee\u9898\u60c5\u51b5\u3002\u8fd9\u6bd4\u4f4e\u58f0\u4e0b\u6c14\u66f4\u597d\u5730\u5b9a\u4f4d\u4e86\u4f60\u7684\u4f4d\u7f6e\u3002 \u6709\u65f6\u7f51\u9875\u8bba\u575b\u4f1a\u8bbe\u6709\u4e13\u4e3a\u65b0\u624b\u63d0\u95ee\u7684\u7248\u9762\uff0c\u5982\u679c\u4f60\u771f\u7684\u8ba4\u4e3a\u9047\u5230\u4e86\u521d\u5b66\u8005\u7684\u95ee\u9898\uff0c\u5230\u90a3\u53bb\u5c31\u662f\u4e86\uff0c\u4f46\u4e00\u6837\u522b\u90a3\u4e48\u4f4e\u58f0\u4e0b\u6c14\u3002 \u63cf\u8ff0\u95ee\u9898\u75c7\u72b6\u800c\u975e\u4f60\u7684\u731c\u6d4b \u544a\u8bc9\u9ed1\u5ba2\u4eec\u4f60\u8ba4\u4e3a\u95ee\u9898\u662f\u600e\u6837\u9020\u6210\u7684\u5e76\u6ca1\u4ec0\u4e48\u5e2e\u52a9\u3002\uff08\u5982\u679c\u4f60\u7684\u63a8\u65ad\u5982\u6b64\u6709\u6548\uff0c\u8fd8\u7528\u5411\u522b\u4eba\u6c42\u52a9\u5417\uff1f\uff09\uff0c\u56e0\u6b64\u8981\u786e\u4fe1\u4f60\u539f\u539f\u672c\u672c\u544a\u8bc9\u4e86\u4ed6\u4eec\u95ee\u9898\u7684\u75c7\u72b6\uff0c\u800c\u4e0d\u662f\u4f60\u7684\u89e3\u91ca\u548c\u7406\u8bba\uff1b\u8ba9\u9ed1\u5ba2\u4eec\u6765\u63a8\u6d4b\u548c\u8bca\u65ad\u3002\u5982\u679c\u4f60\u8ba4\u4e3a\u9648\u8ff0\u81ea\u5df1\u7684\u731c\u6d4b\u5f88\u91cd\u8981\uff0c\u6e05\u695a\u5730\u8bf4\u660e\u8fd9\u53ea\u662f\u4f60\u7684\u731c\u6d4b\uff0c\u5e76\u63cf\u8ff0\u4e3a\u4ec0\u4e48\u5b83\u4eec\u4e0d\u8d77\u4f5c\u7528\u3002 \u8822\u95ee\u9898 \u6211\u5728\u7f16\u8bd1\u5185\u6838\u65f6\u63a5\u8fde\u9047\u5230 SIG11 \u9519\u8bef\uff0c \u6211\u6000\u7591\u67d0\u6761\u98de\u7ebf\u642d\u5728\u4e3b\u677f\u7684\u8d70\u7ebf\u4e0a\u4e86\uff0c\u8fd9\u79cd\u60c5\u51b5\u5e94\u8be5\u600e\u6837\u68c0\u67e5\u6700\u597d\uff1f \u806a\u660e\u95ee\u9898 \u6211\u7684\u7ec4\u88c5\u7535\u8111\u662f FIC-PA2007 \u4e3b\u673a\u677f\u642d\u8f7d AMD K6/233 CPU\uff08\u5a01\u76db Apollo VP2 \u82af\u7247\u7ec4\uff09\uff0c 256MB Corsair PC133 SDRAM \u5185\u5b58\uff0c\u5728\u7f16\u8bd1\u5185\u6838\u65f6\uff0c\u4ece\u5f00\u673a 20 \u5206\u949f\u4ee5\u540e\u5c31\u9891\u9891\u4ea7\u751f SIG11 \u9519\u8bef\uff0c \u4f46\u662f\u5728\u5934 20 \u5206\u949f\u5185\u4ece\u6ca1\u53d1\u751f\u8fc7\u76f8\u540c\u7684\u95ee\u9898\u3002\u91cd\u65b0\u542f\u52a8\u4e5f\u6ca1\u6709\u7528\uff0c\u4f46\u662f\u5173\u673a\u4e00\u665a\u4e0a\u5c31\u53c8\u80fd\u5de5\u4f5c 20 \u5206\u949f\u3002 \u6240\u6709\u5185\u5b58\u90fd\u6362\u8fc7\u4e86\uff0c\u6ca1\u6709\u6548\u679c\u3002\u76f8\u5173\u90e8\u5206\u7684\u6807\u51c6\u7f16\u8bd1\u8bb0\u5f55\u5982\u4e0b\u2026\u3002 \u7531\u4e8e\u4ee5\u4e0a\u8fd9\u70b9\u4f3c\u4e4e\u8ba9\u8bb8\u591a\u4eba\u89c9\u5f97\u96be\u4ee5\u914d\u5408\uff0c\u8fd9\u91cc\u6709\u53e5\u8bdd\u53ef\u4ee5\u63d0\u9192\u4f60\uff1a \u6240\u6709\u7684\u8bca\u65ad\u4e13\u5bb6\u90fd\u6765\u81ea\u5bc6\u82cf\u91cc\u5dde\u3002 \u7f8e\u56fd\u56fd\u52a1\u9662\u7684\u5b98\u65b9\u5ea7\u53f3\u94ed\u5219\u662f\uff1a \u8ba9\u6211\u770b\u770b \uff08\u51fa\u81ea\u56fd\u4f1a\u8bae\u5458 Willard D. Vandiver \u5728 1899 \u5e74\u65f6\u7684\u8bb2\u8bdd\uff1a \u6211\u6765\u81ea\u4e00\u4e2a\u51fa\u4ea7\u7389\u7c73\uff0c\u68c9\u82b1\uff0c\u725b\u84a1\u548c\u6c11\u4e3b\u515a\u4eba\u7684\u56fd\u5bb6\uff0c\u6ed4\u6ed4\u96c4\u8fa9\u65e2\u4e0d\u80fd\u8bf4\u670d\u6211\uff0c\u4e5f\u4e0d\u4f1a\u8ba9\u6211\u6ee1\u610f\u3002\u6211\u6765\u81ea\u5bc6\u82cf\u91cc\u5dde\uff0c\u4f60\u5fc5\u987b\u8ba9\u6211\u770b\u770b\u3002 \uff09 \u9488\u5bf9\u8bca\u65ad\u8005\u800c\u8a00\uff0c\u8fd9\u5e76\u4e0d\u662f\u4e00\u79cd\u6000\u7591\uff0c\u800c\u53ea\u662f\u4e00\u79cd\u771f\u5b9e\u800c\u6709\u7528\u7684\u9700\u6c42\uff0c\u4ee5\u4fbf\u8ba9\u4ed6\u4eec\u770b\u5230\u7684\u662f\u4e0e\u4f60\u770b\u5230\u7684\u539f\u59cb\u8bc1\u636e\u5c3d\u53ef\u80fd\u4e00\u81f4\u7684\u4e1c\u897f\uff0c\u800c\u4e0d\u662f\u4f60\u7684\u731c\u6d4b\u4e0e\u5f52\u7eb3\u7684\u7ed3\u8bba\u3002\u6240\u4ee5\uff0c\u5927\u65b9\u7684\u5c55\u793a\u7ed9\u6211\u4eec\u770b\u5427\uff01 \u6309\u53d1\u751f\u65f6\u95f4\u5148\u540e\u5217\u51fa\u95ee\u9898\u75c7\u72b6 \u95ee\u9898\u53d1\u751f\u524d\u7684\u4e00\u7cfb\u5217\u64cd\u4f5c\uff0c\u5f80\u5f80\u5c31\u662f\u5bf9\u627e\u51fa\u95ee\u9898\u6700\u6709\u5e2e\u52a9\u7684\u7ebf\u7d22\u3002\u56e0\u6b64\uff0c\u4f60\u7684\u8bf4\u660e\u91cc\u5e94\u8be5\u5305\u542b\u4f60\u7684\u64cd\u4f5c\u6b65\u9aa4\uff0c\u4ee5\u53ca\u673a\u5668\u548c\u8f6f\u4ef6\u7684\u53cd\u5e94\uff0c\u76f4\u5230\u95ee\u9898\u53d1\u751f\u3002\u5728\u547d\u4ee4\u884c\u5904\u7406\u7684\u60c5\u51b5\u4e0b\uff0c\u63d0\u4f9b\u4e00\u6bb5\u64cd\u4f5c\u8bb0\u5f55\uff08\u4f8b\u5982\u8fd0\u884c\u811a\u672c\u5de5\u5177\u6240\u751f\u6210\u7684\uff09\uff0c\u5e76\u5f15\u7528\u76f8\u5173\u7684\u82e5\u5e72\u884c\uff08\u5982 20 \u884c\uff09\u8bb0\u5f55\u4f1a\u975e\u5e38\u6709\u5e2e\u52a9\u3002 \u5982\u679c\u6302\u6389\u7684\u7a0b\u5e8f\u6709\u8bca\u65ad\u9009\u9879\uff08\u5982 -v \u7684\u8be6\u8ff0\u5f00\u5173\uff09\uff0c\u8bd5\u7740\u9009\u62e9\u8fd9\u4e9b\u80fd\u5728\u8bb0\u5f55\u4e2d\u589e\u52a0\u8c03\u8bd5\u4fe1\u606f\u7684\u9009\u9879\u3002\u8bb0\u4f4f\uff0c \u591a \u4e0d\u7b49\u4e8e \u597d \u3002\u8bd5\u7740\u9009\u53d6\u9002\u5f53\u7684\u8c03\u8bd5\u7ea7\u522b\u4ee5\u4fbf\u63d0\u4f9b\u6709\u7528\u7684\u4fe1\u606f\u800c\u4e0d\u662f\u8ba9\u8bfb\u8005\u6df9\u6ca1\u5728\u5783\u573e\u4e2d\u3002 \u5982\u679c\u4f60\u7684\u8bf4\u660e\u5f88\u957f\uff08\u5982\u8d85\u8fc7\u56db\u4e2a\u6bb5\u843d\uff09\uff0c\u5728\u5f00\u5934\u7b80\u8ff0\u95ee\u9898\uff0c\u63a5\u4e0b\u6765\u518d\u6309\u65f6\u95f4\u987a\u5e8f\u8be6\u8ff0\u4f1a\u6709\u6240\u5e2e\u52a9\u3002\u8fd9\u6837\u9ed1\u5ba2\u4eec\u5728\u8bfb\u4f60\u7684\u8bb0\u5f55\u65f6\u5c31\u77e5\u9053\u8be5\u6ce8\u610f\u54ea\u4e9b\u5185\u5bb9\u4e86\u3002 \u63cf\u8ff0\u76ee\u6807\u800c\u4e0d\u662f\u8fc7\u7a0b \u5982\u679c\u4f60\u60f3\u5f04\u6e05\u695a\u5982\u4f55\u505a\u67d0\u4e8b\uff08\u800c\u4e0d\u662f\u62a5\u544a\u4e00\u4e2a Bug\uff09\uff0c\u5728\u5f00\u5934\u5c31\u63cf\u8ff0\u4f60\u7684\u76ee\u6807\uff0c\u7136\u540e\u624d\u9648\u8ff0\u91cd\u73b0\u4f60\u6240\u5361\u4f4f\u7684\u7279\u5b9a\u6b65\u9aa4\u3002 \u7ecf\u5e38\u5bfb\u6c42\u6280\u672f\u5e2e\u52a9\u7684\u4eba\u5728\u5fc3\u4e2d\u6709\u4e2a\u66f4\u9ad8\u5c42\u6b21\u7684\u76ee\u6807\uff0c\u800c\u4ed6\u4eec\u5728\u81ea\u4ee5\u4e3a\u80fd\u8fbe\u5230\u76ee\u6807\u7684\u7279\u5b9a\u9053\u8def\u4e0a\u88ab\u5361\u4f4f\u4e86\uff0c\u7136\u540e\u8dd1\u6765\u95ee\u8be5\u600e\u4e48\u8d70\uff0c\u4f46\u6ca1\u6709\u610f\u8bc6\u5230\u8fd9\u6761\u8def\u672c\u8eab\u5c31\u6709\u95ee\u9898\u3002\u7ed3\u679c\u8981\u8d39\u5f88\u5927\u7684\u52b2\u624d\u80fd\u641e\u5b9a\u3002 \u8822\u95ee\u9898 \u6211\u600e\u6837\u624d\u80fd\u4ece\u67d0\u7ed8\u56fe\u7a0b\u5e8f\u7684\u989c\u8272\u9009\u62e9\u5668\u4e2d\u53d6\u5f97\u5341\u516d\u8fdb\u5236\u7684\u7684 RGB \u503c\uff1f \u806a\u660e\u95ee\u9898 \u6211\u6b63\u8bd5\u7740\u7528\u66ff\u6362\u4e00\u5e45\u56fe\u7247\u7684\u8272\u7801\uff08color table\uff09\u6210\u81ea\u5df1\u9009\u5b9a\u7684\u8272\u7801\uff0c\u6211\u73b0\u5728\u77e5\u9053\u7684\u552f\u4e00\u65b9\u6cd5\u662f\u7f16\u8f91\u6bcf\u4e2a\u8272\u7801\u533a\u5757\uff08table slot\uff09\uff0c \u4f46\u5374\u65e0\u6cd5\u4ece\u67d0\u7ed8\u56fe\u7a0b\u5e8f\u7684\u989c\u8272\u9009\u62e9\u5668\u53d6\u5f97\u5341\u516d\u8fdb\u5236\u7684\u7684 RGB \u503c\u3002 \u7b2c\u4e8c\u79cd\u63d0\u95ee\u6cd5\u6bd4\u8f83\u806a\u660e\uff0c\u4f60\u53ef\u80fd\u5f97\u5230\u50cf\u662f \u5efa\u8bae\u91c7\u7528\u53e6\u4e00\u4e2a\u66f4\u5408\u9002\u7684\u5de5\u5177 \u7684\u56de\u590d\u3002 \u522b\u8981\u6c42\u4f7f\u7528\u79c1\u4eba\u7535\u90ae\u56de\u590d \u9ed1\u5ba2\u4eec\u8ba4\u4e3a\u95ee\u9898\u7684\u89e3\u51b3\u8fc7\u7a0b\u5e94\u8be5\u516c\u5f00\u3001\u900f\u660e\uff0c\u6b64\u8fc7\u7a0b\u4e2d\u5982\u679c\u66f4\u6709\u7ecf\u9a8c\u7684\u4eba\u6ce8\u610f\u5230\u4e0d\u5b8c\u6574\u6216\u8005\u4e0d\u5f53\u4e4b\u5904\uff0c\u6700\u521d\u7684\u56de\u590d\u624d\u80fd\u591f\u3001\u4e5f\u5e94\u8be5\u88ab\u7ea0\u6b63\u3002\u540c\u65f6\uff0c\u4f5c\u4e3a\u63d0\u4f9b\u5e2e\u52a9\u8005\u53ef\u4ee5\u5f97\u5230\u4e00\u4e9b\u5956\u52b1\uff0c\u5956\u52b1\u5c31\u662f\u4ed6\u7684\u80fd\u529b\u548c\u5b66\u8bc6\u88ab\u5176\u4ed6\u540c\u884c\u770b\u5230\u3002 \u5f53\u4f60\u8981\u6c42\u79c1\u4e0b\u56de\u590d\u65f6\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u548c\u5956\u52b1\u90fd\u88ab\u4e2d\u6b62\u3002\u522b\u8fd9\u6837\u505a\uff0c\u8ba9\u56de\u590d\u8005\u6765\u51b3\u5b9a\u662f\u5426\u79c1\u4e0b\u56de\u7b54 \u2014\u2014 \u5982\u679c\u4ed6\u771f\u8fd9\u4e48\u505a\u4e86\uff0c\u901a\u5e38\u662f\u56e0\u4e3a\u4ed6\u8ba4\u4e3a\u95ee\u9898\u7f16\u5199\u592a\u5dee\u6216\u8005\u592a\u80a4\u6d45\uff0c\u4ee5\u81f3\u4e8e\u5bf9\u5176\u5b83\u4eba\u6ca1\u6709\u5174\u8da3\u3002 \u8fd9\u6761\u89c4\u5219\u5b58\u5728\u4e00\u6761\u6709\u9650\u7684\u4f8b\u5916\uff0c\u5982\u679c\u4f60\u786e\u4fe1\u63d0\u95ee\u53ef\u80fd\u4f1a\u5f15\u6765\u5927\u91cf\u96f7\u540c\u7684\u56de\u590d\u65f6\uff0c\u90a3\u4e48\u8fd9\u4e2a\u795e\u5947\u7684\u63d0\u95ee\u53e5\u4f1a\u662f \u5411\u6211\u53d1\u7535\u90ae\uff0c\u6211\u5c06\u4e3a\u8bba\u575b\u5f52\u7eb3\u8fd9\u4e9b\u56de\u590d \u3002\u8bd5\u7740\u5c06\u90ae\u4ef6\u5217\u8868\u6216\u65b0\u95fb\u7fa4\u7ec4\u4ece\u6d2a\u6c34\u822c\u7684\u96f7\u540c\u56de\u590d\u4e2d\u89e3\u6551\u51fa\u6765\u662f\u975e\u5e38\u6709\u793c\u8c8c\u7684 \u2014\u2014 \u4f46\u4f60\u5fc5\u987b\u4fe1\u5b88\u8bfa\u8a00\u3002 \u6e05\u695a\u660e\u786e\u7684\u8868\u8fbe\u4f60\u7684\u95ee\u9898\u4ee5\u53ca\u9700\u6c42 \u6f2b\u65e0\u8fb9\u9645\u7684\u63d0\u95ee\u662f\u8fd1\u4e4e\u65e0\u4f11\u65e0\u6b62\u7684\u65f6\u95f4\u9ed1\u6d1e\u3002\u6700\u6709\u53ef\u80fd\u7ed9\u4f60\u6709\u7528\u7b54\u6848\u7684\u4eba\u901a\u5e38\u4e5f\u6b63\u662f\u6700\u5fd9\u7684\u4eba\uff08\u4ed6\u4eec\u5fd9\u662f\u56e0\u4e3a\u8981\u4eb2\u81ea\u5b8c\u6210\u5927\u90e8\u5206\u5de5\u4f5c\uff09\u3002\u8fd9\u6837\u7684\u4eba\u5bf9\u65e0\u8282\u5236\u7684\u65f6\u95f4\u9ed1\u6d1e\u76f8\u5f53\u538c\u6076\uff0c\u6240\u4ee5\u4ed6\u4eec\u4e5f\u503e\u5411\u4e8e\u538c\u6076\u90a3\u4e9b\u6f2b\u65e0\u8fb9\u9645\u7684\u63d0\u95ee\u3002 \u5982\u679c\u4f60\u660e\u786e\u8868\u8ff0\u9700\u8981\u56de\u7b54\u8005\u505a\u4ec0\u4e48\uff08\u5982\u63d0\u4f9b\u6307\u70b9\u3001\u53d1\u9001\u4e00\u6bb5\u4ee3\u7801\u3001\u68c0\u67e5\u4f60\u7684\u8865\u4e01\u3001\u6216\u662f\u5176\u4ed6\u7b49\u7b49\uff09\uff0c\u5c31\u6700\u6709\u53ef\u80fd\u5f97\u5230\u6709\u7528\u7684\u7b54\u6848\u3002\u56e0\u4e3a\u8fd9\u4f1a\u5b9a\u51fa\u4e00\u4e2a\u65f6\u95f4\u548c\u7cbe\u529b\u7684\u4e0a\u9650\uff0c\u4fbf\u4e8e\u56de\u7b54\u8005\u80fd\u96c6\u4e2d\u7cbe\u529b\u6765\u5e2e\u4f60\u3002\u8fd9\u4e48\u505a\u5f88\u68d2\u3002 \u8981\u7406\u89e3\u4e13\u5bb6\u4eec\u6240\u5904\u7684\u4e16\u754c\uff0c\u8bf7\u628a\u4e13\u4e1a\u6280\u80fd\u60f3\u50cf\u4e3a\u5145\u88d5\u7684\u8d44\u6e90\uff0c\u800c\u56de\u590d\u7684\u65f6\u95f4\u5219\u662f\u7a00\u7f3a\u7684\u8d44\u6e90\u3002\u4f60\u8981\u6c42\u4ed6\u4eec\u5949\u732e\u7684\u65f6\u95f4\u8d8a\u5c11\uff0c\u4f60\u8d8a\u6709\u53ef\u80fd\u4ece\u771f\u6b63\u4e13\u4e1a\u800c\u4e14\u5f88\u5fd9\u7684\u4e13\u5bb6\u90a3\u91cc\u5f97\u5230\u89e3\u7b54\u3002 \u6240\u4ee5\uff0c\u754c\u5b9a\u4e00\u4e0b\u4f60\u7684\u95ee\u9898\uff0c\u4f7f\u4e13\u5bb6\u82b1\u5728\u8fa8\u8bc6\u4f60\u7684\u95ee\u9898\u548c\u56de\u7b54\u6240\u9700\u8981\u4ed8\u51fa\u7684\u65f6\u95f4\u51cf\u5230\u6700\u5c11\uff0c\u8fd9\u6280\u5de7\u5bf9\u4f60\u6709\u7528\u7b54\u6848\u76f8\u5f53\u6709\u5e2e\u52a9 \u2014\u2014 \u4f46\u8fd9\u6280\u5de7\u901a\u5e38\u548c\u7b80\u5316\u95ee\u9898\u6709\u6240\u533a\u522b\u3002\u56e0\u6b64\uff0c\u95ee \u6211\u60f3\u66f4\u597d\u7684\u7406\u89e3 X\uff0c\u53ef\u5426\u6307\u70b9\u4e00\u4e0b\u54ea\u6709\u597d\u4e00\u70b9\u8bf4\u660e\uff1f \u901a\u5e38\u6bd4\u95ee \u4f60\u80fd\u89e3\u91ca\u4e00\u4e0b X \u5417\uff1f \u66f4\u597d\u3002\u5982\u679c\u4f60\u7684\u4ee3\u7801\u4e0d\u80fd\u8fd0\u4f5c\uff0c\u901a\u5e38\u8bf7\u522b\u4eba\u770b\u770b\u54ea\u91cc\u6709\u95ee\u9898\uff0c\u6bd4\u8981\u6c42\u522b\u4eba\u66ff\u4f60\u6539\u6b63\u8981\u660e\u667a\u5f97\u591a\u3002 \u8be2\u95ee\u6709\u5173\u4ee3\u7801\u7684\u95ee\u9898\u65f6 \u522b\u8981\u6c42\u4ed6\u4eba\u5e2e\u4f60\u8c03\u8bd5\u6709\u95ee\u9898\u7684\u4ee3\u7801\uff0c\u4e0d\u63d0\u793a\u4e00\u4e0b\u5e94\u8be5\u4ece\u4f55\u5165\u624b\u3002\u5f20\u8d34\u51e0\u767e\u884c\u7684\u4ee3\u7801\uff0c\u7136\u540e\u8bf4\u4e00\u58f0\uff1a \u5b83\u4e0d\u80fd\u5de5\u4f5c \u4f1a\u8ba9\u4f60\u5b8c\u5168\u88ab\u5ffd\u7565\u3002\u53ea\u8d34\u51e0\u5341\u884c\u4ee3\u7801\uff0c\u7136\u540e\u8bf4\u4e00\u53e5\uff1a \u5728\u7b2c\u4e03\u884c\u4ee5\u540e\uff0c\u6211\u671f\u5f85\u5b83\u663e\u793a <x>\uff0c\u4f46\u5b9e\u9645\u51fa\u73b0\u7684\u662f <y> \u6bd4\u8f83\u6709\u53ef\u80fd\u8ba9\u4f60\u5f97\u5230\u56de\u5e94\u3002 \u6700\u6709\u6548\u63cf\u8ff0\u7a0b\u5e8f\u95ee\u9898\u7684\u65b9\u6cd5\u662f\u63d0\u4f9b\u6700\u7cbe\u7b80\u7684 Bug \u5c55\u793a\u6d4b\u8bd5\u7528\u4f8b\uff08bug-demonstrating test case\uff09\u3002\u4ec0\u4e48\u662f\u6700\u7cbe\u7b80\u7684\u6d4b\u8bd5\u7528\u4f8b\uff1f\u90a3\u662f\u95ee\u9898\u7684\u7f29\u5f71\uff1b\u4e00\u5c0f\u4e2a\u7a0b\u5e8f\u7247\u6bb5\u80fd\u521a\u597d\u5c55\u793a\u51fa\u7a0b\u5e8f\u7684\u5f02\u5e38\u884c\u4e3a\uff0c\u800c\u4e0d\u5305\u542b\u5176\u4ed6\u4ee4\u4eba\u5206\u6563\u6ce8\u610f\u529b\u7684\u5185\u5bb9\u3002\u600e\u4e48\u5236\u4f5c\u6700\u7cbe\u7b80\u7684\u6d4b\u8bd5\u7528\u4f8b\uff1f\u5982\u679c\u4f60\u77e5\u9053\u54ea\u4e00\u884c\u6216\u54ea\u4e00\u6bb5\u4ee3\u7801\u4f1a\u9020\u6210\u5f02\u5e38\u7684\u884c\u4e3a\uff0c\u590d\u5236\u4e0b\u6765\u5e76\u52a0\u5165\u8db3\u591f\u91cd\u73b0\u8fd9\u4e2a\u72b6\u51b5\u7684\u4ee3\u7801\uff08\u4f8b\u5982\uff0c\u8db3\u4ee5\u8ba9\u8fd9\u6bb5\u4ee3\u7801\u80fd\u88ab\u7f16\u8bd1/\u76f4\u8bd1/\u88ab\u5e94\u7528\u7a0b\u5e8f\u5904\u7406\uff09\u3002\u5982\u679c\u4f60\u65e0\u6cd5\u5c06\u95ee\u9898\u7f29\u51cf\u5230\u4e00\u4e2a\u7279\u5b9a\u533a\u5757\uff0c\u5c31\u590d\u5236\u4e00\u4efd\u4ee3\u7801\u5e76\u79fb\u9664\u4e0d\u5f71\u54cd\u4ea7\u751f\u95ee\u9898\u884c\u4e3a\u7684\u90e8\u5206\u3002\u603b\u4e4b\uff0c\u6d4b\u8bd5\u7528\u4f8b\u8d8a\u5c0f\u8d8a\u597d\uff08\u67e5\u770b\u8bdd\u4e0d\u5728\u591a\u800c\u5728\u7cbe\u4e00\u8282\uff09\u3002 \u4e00\u822c\u800c\u8a00\uff0c\u8981\u5f97\u5230\u4e00\u6bb5\u76f8\u5f53\u7cbe\u7b80\u7684\u6d4b\u8bd5\u7528\u4f8b\u5e76\u4e0d\u592a\u5bb9\u6613\uff0c\u4f46\u6c38\u8fdc\u5148\u5c1d\u8bd5\u8fd9\u6837\u505a\u7684\u662f\u79cd\u597d\u4e60\u60ef\u3002\u8fd9\u79cd\u65b9\u5f0f\u53ef\u4ee5\u5e2e\u52a9\u4f60\u4e86\u89e3\u5982\u4f55\u81ea\u884c\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898 \u2014\u2014 \u800c\u4e14\u5373\u4f7f\u4f60\u7684\u5c1d\u8bd5\u4e0d\u6210\u529f\uff0c\u9ed1\u5ba2\u4eec\u4e5f\u4f1a\u770b\u5230\u4f60\u5728\u5c1d\u8bd5\u53d6\u5f97\u7b54\u6848\u7684\u8fc7\u7a0b\u4e2d\u4ed8\u51fa\u4e86\u52aa\u529b\uff0c\u8fd9\u53ef\u4ee5\u8ba9\u4ed6\u4eec\u66f4\u613f\u610f\u4e0e\u4f60\u5408\u4f5c\u3002 \u5982\u679c\u4f60\u53ea\u662f\u60f3\u8ba9\u522b\u4eba\u5e2e\u5fd9\u5ba1\u67e5\uff08Review\uff09\u4e00\u4e0b\u4ee3\u7801\uff0c\u5728\u4fe1\u7684\u5f00\u5934\u5c31\u8981\u8bf4\u51fa\u6765\uff0c\u5e76\u4e14\u4e00\u5b9a\u8981\u63d0\u5230\u4f60\u8ba4\u4e3a\u54ea\u4e00\u90e8\u5206\u7279\u522b\u9700\u8981\u5173\u6ce8\u4ee5\u53ca\u4e3a\u4ec0\u4e48\u3002 \u522b\u628a\u81ea\u5df1\u5bb6\u5ead\u4f5c\u4e1a\u7684\u95ee\u9898\u8d34\u4e0a\u6765 \u9ed1\u5ba2\u4eec\u5f88\u64c5\u957f\u5206\u8fa8\u54ea\u4e9b\u95ee\u9898\u662f\u5bb6\u5ead\u4f5c\u4e1a\u5f0f\u7684\u95ee\u9898\uff1b\u56e0\u4e3a\u6211\u4eec\u4e2d\u7684\u5927\u591a\u6570\u90fd\u66fe\u81ea\u5df1\u89e3\u51b3\u8fd9\u7c7b\u95ee\u9898\u3002\u540c\u6837\uff0c\u8fd9\u4e9b\u95ee\u9898\u5f97\u7531\u4f60\u6765\u641e\u5b9a\uff0c\u4f60\u4f1a\u4ece\u4e2d\u5b66\u5230\u4e1c\u897f\u3002\u4f60\u53ef\u4ee5\u8981\u6c42\u7ed9\u70b9\u63d0\u793a\uff0c\u4f46\u522b\u8981\u6c42\u5f97\u5230\u5b8c\u6574\u7684\u89e3\u51b3\u65b9\u6848\u3002 \u5982\u679c\u4f60\u6000\u7591\u81ea\u5df1\u78b0\u5230\u4e86\u4e00\u4e2a\u5bb6\u5ead\u4f5c\u4e1a\u5f0f\u7684\u95ee\u9898\uff0c\u4f46\u4ecd\u7136\u65e0\u6cd5\u89e3\u51b3\uff0c\u8bd5\u8bd5\u5728\u4f7f\u7528\u8005\u7fa4\u7ec4\uff0c\u8bba\u575b\u6216\uff08\u6700\u540e\u4e00\u62db\uff09\u5728\u9879\u76ee\u7684\u4f7f\u7528\u8005\u90ae\u4ef6\u5217\u8868\u6216\u8bba\u575b\u4e2d\u63d0\u95ee\u3002\u5c3d\u7ba1\u9ed1\u5ba2\u4eec\u4f1a\u770b\u51fa\u6765\uff0c\u4f46\u4e00\u4e9b\u6709\u7ecf\u9a8c\u7684\u4f7f\u7528\u8005\u4e5f\u8bb8\u4ecd\u4f1a\u7ed9\u4f60\u4e00\u4e9b\u63d0\u793a\u3002 \u53bb\u6389\u65e0\u610f\u4e49\u7684\u63d0\u95ee\u53e5 \u907f\u514d\u7528\u65e0\u610f\u4e49\u7684\u8bdd\u7ed3\u675f\u63d0\u95ee\uff0c\u4f8b\u5982 \u6709\u4eba\u80fd\u5e2e\u6211\u5417\uff1f \u6216\u8005 \u8fd9\u6709\u7b54\u6848\u5417\uff1f \u3002 \u9996\u5148\uff1a\u5982\u679c\u4f60\u5bf9\u95ee\u9898\u7684\u63cf\u8ff0\u4e0d\u662f\u5f88\u597d\uff0c\u8fd9\u6837\u95ee\u66f4\u662f\u753b\u86c7\u6dfb\u8db3\u3002 \u5176\u6b21\uff1a\u7531\u4e8e\u8fd9\u6837\u95ee\u662f\u753b\u86c7\u6dfb\u8db3\uff0c\u9ed1\u5ba2\u4eec\u4f1a\u5f88\u538c\u70e6\u4f60 \u2014\u2014 \u800c\u4e14\u901a\u5e38\u4f1a\u7528\u903b\u8f91\u4e0a\u6b63\u786e\uff0c\u4f46\u6beb\u65e0\u610f\u4e49\u7684\u56de\u7b54\u6765\u8868\u793a\u4ed6\u4eec\u7684\u8511\u89c6\uff0c \u4f8b\u5982\uff1a \u6ca1\u9519\uff0c\u6709\u4eba\u80fd\u5e2e\u4f60 \u6216\u8005 \u4e0d\uff0c\u6ca1\u7b54\u6848 \u3002 \u4e00\u822c\u6765\u8bf4\uff0c\u907f\u514d\u7528 \u662f\u6216\u5426 \u3001 \u5bf9\u6216\u9519 \u3001 \u6709\u6216\u6ca1\u6709 \u7c7b\u578b\u7684\u95ee\u53e5\uff0c\u9664\u975e\u4f60\u60f3\u5f97\u5230\u662f\u6216\u5426\u7c7b\u578b\u7684\u56de\u7b54\u3002 \u5373\u4f7f\u4f60\u5f88\u6025\u4e5f\u4e0d\u8981\u5728\u6807\u9898\u5199 \u7d27\u6025 \u8fd9\u662f\u4f60\u7684\u95ee\u9898\uff0c\u4e0d\u662f\u6211\u4eec\u7684\u3002\u5ba3\u79f0 \u7d27\u6025 \u6781\u6709\u53ef\u80fd\u4e8b\u4e0e\u613f\u8fdd\uff1a\u5927\u591a\u6570\u9ed1\u5ba2\u4f1a\u76f4\u63a5\u5220\u9664\u65e0\u793c\u548c\u81ea\u79c1\u5730\u4f01\u56fe\u5373\u65f6\u5f15\u8d77\u5173\u6ce8\u7684\u95ee\u9898\u3002\u66f4\u4e25\u91cd\u7684\u662f\uff0c \u7d27\u6025 \u8fd9\u4e2a\u5b57\uff08\u6216\u662f\u5176\u4ed6\u4f01\u56fe\u5f15\u8d77\u5173\u6ce8\u7684\u6807\u9898\uff09\u901a\u5e38\u4f1a\u88ab\u5783\u573e\u4fe1\u8fc7\u6ee4\u5668\u8fc7\u6ee4\u6389 \u2014\u2014 \u4f60\u5e0c\u671b\u80fd\u770b\u5230\u4f60\u95ee\u9898\u7684\u4eba\u53ef\u80fd\u6c38\u8fdc\u4e5f\u770b\u4e0d\u5230\u3002 \u6709\u534a\u4e2a\u4f8b\u5916\u7684\u60c5\u51b5\u662f\uff0c\u5982\u679c\u4f60\u662f\u5728\u4e00\u4e9b\u5f88\u9ad8\u8c03\uff0c\u4f1a\u4f7f\u9ed1\u5ba2\u4eec\u5174\u594b\u7684\u5730\u65b9\uff0c\u4e5f\u8bb8\u503c\u5f97\u8fd9\u6837\u53bb\u505a\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5982\u679c\u4f60\u6709\u65f6\u95f4\u538b\u529b\uff0c\u4e5f\u5f88\u6709\u793c\u8c8c\u5730\u63d0\u5230\u8fd9\u70b9\uff0c\u4eba\u4eec\u4e5f\u8bb8\u4f1a\u6709\u5174\u8da3\u56de\u7b54\u5feb\u4e00\u70b9\u3002 \u5f53\u7136\uff0c\u8fd9\u98ce\u9669\u5f88\u5927\uff0c\u56e0\u4e3a\u9ed1\u5ba2\u4eec\u5174\u594b\u7684\u70b9\u591a\u534a\u4e0e\u4f60\u7684\u4e0d\u540c\u3002\u8b6c\u5982\u4ece NASA \u56fd\u9645\u7a7a\u95f4\u7ad9\uff08International Space Station\uff09\u53d1\u8fd9\u6837\u7684\u6807\u9898\u6ca1\u6709\u95ee\u9898\uff0c\u4f46\u7528\u81ea\u6211\u611f\u89c9\u826f\u597d\u7684\u6148\u5584\u884c\u4e3a\u6216\u653f\u6cbb\u539f\u56e0\u53d1\u80af\u5b9a\u4e0d\u884c\u3002\u4e8b\u5b9e\u4e0a\uff0c\u5f20\u8d34\u8bf8\u5982 \u7d27\u6025\uff1a\u5e2e\u6211\u6551\u6551\u8fd9\u4e2a\u6bdb\u7ed2\u7ed2\u7684\u5c0f\u6d77\u8c79\uff01 \u80af\u5b9a\u8ba9\u4f60\u88ab\u9ed1\u5ba2\u5ffd\u7565\u6216\u60f9\u607c\u4ed6\u4eec\uff0c\u5373\u4f7f\u4ed6\u4eec\u8ba4\u4e3a\u6bdb\u7ed2\u7ed2\u7684\u5c0f\u6d77\u8c79\u5f88\u91cd\u8981\u3002 \u5982\u679c\u4f60\u89c9\u5f97\u8fd9\u70b9\u5f88\u4e0d\u53ef\u601d\u8bae\uff0c\u6700\u597d\u518d\u628a\u8fd9\u4efd\u6307\u5357\u5269\u4e0b\u7684\u5185\u5bb9\u591a\u8bfb\u51e0\u904d\uff0c\u76f4\u5230\u4f60\u5f04\u61c2\u4e86\u518d\u53d1\u6587\u3002 \u793c\u591a\u4eba\u4e0d\u602a\uff0c\u800c\u4e14\u6709\u65f6\u8fd8\u5f88\u6709\u5e2e\u52a9 \u5f6c\u5f6c\u6709\u793c\uff0c\u591a\u7528 \u8bf7 \u548c \u8c22\u8c22\u60a8\u7684\u5173\u6ce8 \uff0c\u6216 \u8c22\u8c22\u4f60\u7684\u5173\u7167 \u3002\u8ba9\u5927\u5bb6\u90fd\u77e5\u9053\u4f60\u5bf9\u4ed6\u4eec\u82b1\u65f6\u95f4\u514d\u8d39\u63d0\u4f9b\u5e2e\u52a9\u5fc3\u5b58\u611f\u6fc0\u3002 \u5766\u767d\u8bf4\uff0c\u8fd9\u4e00\u70b9\u5e76\u6ca1\u6709\u6bd4\u6e05\u6670\u3001\u6b63\u786e\u3001\u7cbe\u51c6\u5e76\u5408\u6cd5\u8bed\u6cd5\u548c\u907f\u514d\u4f7f\u7528\u4e13\u7528\u683c\u5f0f\u91cd\u8981\uff08\u4e5f\u4e0d\u80fd\u53d6\u800c\u4ee3\u4e4b\uff09\u3002\u9ed1\u5ba2\u4eec\u4e00\u822c\u5b81\u53ef\u8bfb\u6709\u70b9\u5510\u7a81\u4f46\u6280\u672f\u4e0a\u9c9c\u660e\u7684 Bug \u62a5\u544a\uff0c\u800c\u4e0d\u662f\u90a3\u79cd\u6709\u793c\u4f46\u542b\u7cca\u7684\u62a5\u544a\u3002\uff08\u5982\u679c\u8fd9\u70b9\u8ba9\u4f60\u4e0d\u89e3\uff0c\u8bb0\u4f4f\u6211\u4eec\u662f\u6309\u95ee\u9898\u80fd\u6559\u7ed9\u6211\u4eec\u4ec0\u4e48\u6765\u8bc4\u4ef7\u95ee\u9898\u7684\u4ef7\u503c\u7684\uff09 \u7136\u800c\uff0c\u5982\u679c\u4f60\u6709\u4e00\u4e32\u7684\u95ee\u9898\u5f85\u89e3\u51b3\uff0c\u5ba2\u6c14\u4e00\u70b9\u80af\u5b9a\u4f1a\u589e\u52a0\u4f60\u5f97\u5230\u6709\u7528\u56de\u5e94\u7684\u673a\u4f1a\u3002 \uff08\u6211\u4eec\u6ce8\u610f\u5230\uff0c\u81ea\u4ece\u672c\u6307\u5357\u53d1\u5e03\u540e\uff0c\u4ece\u8d44\u6df1\u9ed1\u5ba2\u90a3\u91cc\u5f97\u5230\u7684\u552f\u4e00\u4e25\u91cd\u7f3a\u9677\u53cd\u9988\uff0c\u5c31\u662f\u5bf9\u9884\u5148\u9053\u8c22\u8fd9\u4e00\u6761\u3002\u4e00\u4e9b\u9ed1\u5ba2\u89c9\u5f97\u5148\u8c22\u4e86\u610f\u5473\u7740\u4e8b\u540e\u5c31\u4e0d\u7528\u518d\u611f\u8c22\u4efb\u4f55\u4eba\u7684\u6697\u793a\u3002\u6211\u4eec\u7684\u5efa\u8bae\u662f\u8981\u4e48\u5148\u8bf4 \u5148\u8c22\u4e86 \uff0c\u7136\u540e\u4e8b\u540e\u518d\u5bf9\u56de\u590d\u8005\u8868\u793a\u611f\u8c22\uff0c\u6216\u8005\u6362\u79cd\u65b9\u5f0f\u8868\u8fbe\u611f\u6fc0\uff0c\u8b6c\u5982\u7528 \u8c22\u8c22\u4f60\u7684\u5173\u6ce8 \u6216 \u8c22\u8c22\u4f60\u7684\u5173\u7167 \u3002\uff09 \u95ee\u9898\u89e3\u51b3\u540e\uff0c\u52a0\u4e2a\u7b80\u77ed\u7684\u8865\u5145\u8bf4\u660e \u95ee\u9898\u89e3\u51b3\u540e\uff0c\u5411\u6240\u6709\u5e2e\u52a9\u8fc7\u4f60\u7684\u4eba\u53d1\u4e2a\u8bf4\u660e\uff0c\u8ba9\u4ed6\u4eec\u77e5\u9053\u95ee\u9898\u662f\u600e\u6837\u89e3\u51b3\u7684\uff0c\u5e76\u518d\u4e00\u6b21\u5411\u4ed6\u4eec\u8868\u793a\u611f\u8c22\u3002\u5982\u679c\u95ee\u9898\u5728\u65b0\u95fb\u7ec4\u6216\u8005\u90ae\u4ef6\u5217\u8868\u4e2d\u5f15\u8d77\u4e86\u5e7f\u6cdb\u5173\u6ce8\uff0c\u5e94\u8be5\u5728\u90a3\u91cc\u8d34\u4e00\u4e2a\u8bf4\u660e\u6bd4\u8f83\u6070\u5f53\u3002 \u6700\u7406\u60f3\u7684\u65b9\u5f0f\u662f\u5411\u6700\u521d\u63d0\u95ee\u7684\u8bdd\u9898\u56de\u590d\u6b64\u6d88\u606f\uff0c\u5e76\u5728\u6807\u9898\u4e2d\u5305\u542b \u5df2\u4fee\u6b63 \uff0c \u5df2\u89e3\u51b3 \u6216\u5176\u5b83\u540c\u7b49\u542b\u4e49\u7684\u660e\u663e\u6807\u8bb0\u3002\u5728\u4eba\u6765\u4eba\u5f80\u7684\u90ae\u4ef6\u5217\u8868\u91cc\uff0c\u4e00\u4e2a\u770b\u89c1\u8ba8\u8bba\u4e32 \u95ee\u9898 X \u548c \u95ee\u9898 X - \u5df2\u89e3\u51b3 \u7684\u6f5c\u5728\u56de\u590d\u8005\u5c31\u660e\u767d\u4e0d\u7528\u518d\u6d6a\u8d39\u65f6\u95f4\u4e86\uff08\u9664\u975e\u4ed6\u4e2a\u4eba\u89c9\u5f97\u95ee\u9898 X\u7684\u6709\u8da3\uff09\uff0c\u56e0\u6b64\u53ef\u4ee5\u5229\u7528\u6b64\u65f6\u95f4\u53bb\u89e3\u51b3\u5176\u5b83\u95ee\u9898\u3002 \u8865\u5145\u8bf4\u660e\u4e0d\u5fc5\u5f88\u957f\u6216\u662f\u5f88\u6df1\u5165\uff1b\u7b80\u5355\u7684\u4e00\u53e5 \u4f60\u597d\uff0c\u539f\u6765\u662f\u7f51\u7ebf\u51fa\u4e86\u95ee\u9898\uff01\u8c22\u8c22\u5927\u5bb6 \u2013 Bill \u6bd4\u4ec0\u4e48\u4e5f\u4e0d\u8bf4\u8981\u6765\u7684\u597d\u3002\u4e8b\u5b9e\u4e0a\uff0c\u9664\u975e\u7ed3\u8bba\u771f\u7684\u5f88\u6709\u6280\u672f\u542b\u91cf\uff0c\u5426\u5219\u7b80\u77ed\u53ef\u7231\u7684\u5c0f\u7ed3\u6bd4\u957f\u7bc7\u5927\u8bba\u66f4\u597d\u3002\u8bf4\u660e\u95ee\u9898\u662f\u600e\u6837\u89e3\u51b3\u7684\uff0c\u4f46\u5927\u53ef\u4e0d\u5fc5\u5c06\u89e3\u51b3\u95ee\u9898\u7684\u8fc7\u7a0b\u590d\u8ff0\u4e00\u904d\u3002 \u5bf9\u4e8e\u6709\u6df1\u5ea6\u7684\u95ee\u9898\uff0c\u5f20\u8d34\u8c03\u8bd5\u8bb0\u5f55\u7684\u6458\u8981\u662f\u6709\u5e2e\u52a9\u7684\u3002\u63cf\u8ff0\u95ee\u9898\u7684\u6700\u7ec8\u72b6\u6001\uff0c\u8bf4\u660e\u662f\u4ec0\u4e48\u89e3\u51b3\u4e86\u95ee\u9898\uff0c\u5728\u6b64\u4e4b\u540e\u624d\u6307\u660e\u53ef\u4ee5\u907f\u514d\u7684\u76f2\u70b9\u3002\u907f\u514d\u76f2\u70b9\u7684\u90e8\u5206\u5e94\u653e\u5728\u6b63\u786e\u7684\u89e3\u51b3\u65b9\u6848\u548c\u5176\u5b83\u603b\u7ed3\u6750\u6599\u4e4b\u540e\uff0c\u800c\u4e0d\u8981\u5c06\u6b64\u4fe1\u606f\u641e\u6210\u4fa6\u63a2\u63a8\u7406\u5c0f\u8bf4\u3002\u5217\u51fa\u90a3\u4e9b\u5e2e\u52a9\u8fc7\u4f60\u7684\u540d\u5b57\uff0c\u4f1a\u8ba9\u4f60\u4ea4\u5230\u66f4\u591a\u670b\u53cb\u3002 \u9664\u4e86\u6709\u793c\u8c8c\u548c\u6709\u5185\u6db5\u4ee5\u5916\uff0c\u8fd9\u79cd\u7c7b\u578b\u7684\u8865\u5145\u4e5f\u6709\u52a9\u4e8e\u4ed6\u4eba\u5728\u90ae\u4ef6\u5217\u8868/\u65b0\u95fb\u7fa4\u7ec4/\u8bba\u575b\u4e2d\u641c\u7d22\u5230\u771f\u6b63\u89e3\u51b3\u4f60\u95ee\u9898\u7684\u65b9\u6848\uff0c\u8ba9\u4ed6\u4eec\u4e5f\u4ece\u4e2d\u53d7\u76ca\u3002 \u81f3\u5c11\uff0c\u8fd9\u79cd\u8865\u5145\u6709\u52a9\u4e8e\u8ba9\u6bcf\u4f4d\u53c2\u4e0e\u534f\u52a9\u7684\u4eba\u56e0\u95ee\u9898\u7684\u89e3\u51b3\u800c\u4ece\u4e2d\u5f97\u5230\u6ee1\u8db3\u611f\u3002\u5982\u679c\u4f60\u81ea\u5df1\u4e0d\u662f\u6280\u672f\u4e13\u5bb6\u6216\u8005\u9ed1\u5ba2\uff0c\u90a3\u5c31\u76f8\u4fe1\u6211\u4eec\uff0c\u8fd9\u79cd\u611f\u89c9\u5bf9\u4e8e\u90a3\u4e9b\u4f60\u5411\u4ed6\u4eec\u6c42\u52a9\u7684\u5927\u5e08\u6216\u8005\u4e13\u5bb6\u800c\u8a00\uff0c\u662f\u975e\u5e38\u91cd\u8981\u7684\u3002\u95ee\u9898\u60ac\u800c\u672a\u51b3\u4f1a\u8ba9\u4eba\u7070\u5fc3\uff1b\u9ed1\u5ba2\u4eec\u6e34\u671b\u770b\u5230\u95ee\u9898\u88ab\u89e3\u51b3\u3002\u597d\u4eba\u6709\u597d\u62a5\uff0c\u6ee1\u8db3\u4ed6\u4eec\u7684\u6e34\u671b\uff0c\u4f60\u4f1a\u5728\u4e0b\u6b21\u63d0\u95ee\u65f6\u5c1d\u5230\u751c\u5934\u3002 \u601d\u8003\u4e00\u4e0b\u600e\u6837\u624d\u80fd\u907f\u514d\u4ed6\u4eba\u5c06\u6765\u4e5f\u9047\u5230\u7c7b\u4f3c\u7684\u95ee\u9898\uff0c\u81ea\u95ee\u5199\u4e00\u4efd\u6587\u4ef6\u6216\u52a0\u4e2a\u5e38\u89c1\u95ee\u9898\uff08FAQ\uff09\u4f1a\u4e0d\u4f1a\u6709\u5e2e\u52a9\u3002\u5982\u679c\u662f\u7684\u8bdd\u5c31\u5c06\u5b83\u4eec\u53d1\u7ed9\u7ef4\u62a4\u8005\u3002 \u5728\u9ed1\u5ba2\u4e2d\uff0c\u8fd9\u79cd\u826f\u597d\u7684\u540e\u7ee7\u884c\u52a8\u5b9e\u9645\u4e0a\u6bd4\u4f20\u7edf\u7684\u793c\u8282\u66f4\u4e3a\u91cd\u8981\uff0c\u4e5f\u662f\u4f60\u5982\u4f55\u900f\u8fc7\u5584\u5f85\u4ed6\u4eba\u800c\u8d62\u5f97\u58f0\u8a89\u7684\u65b9\u5f0f\uff0c\u8fd9\u662f\u975e\u5e38\u6709\u4ef7\u503c\u7684\u8d44\u4ea7\u3002","title":"\u5f53\u4f60\u5728\u63d0\u95ee\u65f6"},{"location":"misc/how_to_ask_questions_the_smart_way/when_you_ask/#_1","text":"\u5c0f\u5fc3\u9009\u62e9\u4f60\u8981\u63d0\u95ee\u7684\u573a\u5408\u3002\u5982\u679c\u4f60\u505a\u4e86\u4e0b\u8ff0\u7684\u4e8b\u60c5\uff0c\u4f60\u5f88\u53ef\u80fd\u88ab\u5ffd\u7565\u6389\u6216\u8005\u88ab\u770b\u4f5c\u5931\u8d25\u8005\uff1a \u5728\u4e0e\u4e3b\u9898\u4e0d\u5408\u7684\u8bba\u575b\u4e0a\u8d34\u51fa\u4f60\u7684\u95ee\u9898\u3002 \u5728\u63a2\u8ba8\u8fdb\u9636\u6280\u672f\u95ee\u9898\u7684\u8bba\u575b\u5f20\u8d34\u975e\u5e38\u521d\u7ea7\u7684\u95ee\u9898\uff1b\u53cd\u4e4b\u4ea6\u7136\u3002 \u5728\u592a\u591a\u7684\u4e0d\u540c\u65b0\u95fb\u7fa4\u7ec4\u4e0a\u91cd\u590d\u8f6c\u8d34\u540c\u6837\u7684\u95ee\u9898\uff08cross-post\uff09\u3002 \u5411\u65e2\u975e\u719f\u4eba\u4e5f\u6ca1\u6709\u4e49\u52a1\u89e3\u51b3\u4f60\u95ee\u9898\u7684\u4eba\u53d1\u9001\u79c1\u4eba\u7535\u90ae\u3002 \u9ed1\u5ba2\u4f1a\u5254\u9664\u6389\u90a3\u4e9b\u641e\u9519\u573a\u5408\u7684\u95ee\u9898\uff0c\u4ee5\u4fdd\u62a4\u4ed6\u4eec\u6c9f\u901a\u7684\u6e20\u9053\u4e0d\u88ab\u65e0\u5173\u7684\u4e1c\u897f\u6df9\u6ca1\u3002\u4f60\u4e0d\u4f1a\u60f3\u8ba9\u8fd9\u79cd\u4e8b\u53d1\u751f\u5728\u81ea\u5df1\u8eab\u4e0a\u7684\u3002 \u56e0\u6b64\uff0c\u7b2c\u4e00\u6b65\u662f\u627e\u5230\u5bf9\u7684\u8bba\u575b\u3002\u518d\u8bf4\u4e00\u6b21\uff0cGoogle \u548c\u5176\u5b83\u641c\u7d22\u5f15\u64ce\u8fd8\u662f\u4f60\u7684\u670b\u53cb\uff0c\u7528\u5b83\u4eec\u6765\u627e\u5230\u4e0e\u4f60\u906d\u9047\u5230\u56f0\u96be\u7684\u8f6f\u786c\u4ef6\u95ee\u9898\u6700\u76f8\u5173\u7684\u7f51\u7ad9\u3002\u901a\u5e38\u90a3\u513f\u90fd\u6709\u5e38\u89c1\u95ee\u9898\uff08FAQ\uff09\u3001\u90ae\u4ef6\u5217\u8868\u53ca\u76f8\u5173\u8bf4\u660e\u6587\u4ef6\u7684\u94fe\u63a5\u3002\u5982\u679c\u4f60\u7684\u52aa\u529b\uff08\u5305\u62ec\u9605\u8bfb FAQ\uff09\u90fd\u6ca1\u6709\u7ed3\u679c\uff0c\u7f51\u7ad9\u4e0a\u4e5f\u8bb8\u8fd8\u6709\u62a5\u544a Bug\uff08Bug-reporting\uff09\u7684\u6d41\u7a0b\u6216\u94fe\u63a5\uff0c\u5982\u679c\u662f\u8fd9\u6837\uff0c\u94fe\u8fc7\u53bb\u770b\u770b\u3002 \u5411\u964c\u751f\u7684\u4eba\u6216\u8bba\u575b\u53d1\u9001\u90ae\u4ef6\u6700\u53ef\u80fd\u662f\u98ce\u9669\u6700\u5927\u7684\u4e8b\u60c5\u3002\u4e3e\u4f8b\u6765\u8bf4\uff0c\u522b\u5047\u8bbe\u4e00\u4e2a\u63d0\u4f9b\u4e30\u5bcc\u5185\u5bb9\u7684\u7f51\u9875\u7684\u4f5c\u8005\u4f1a\u60f3\u5145\u5f53\u4f60\u7684\u514d\u8d39\u987e\u95ee\u3002\u4e0d\u8981\u5bf9\u4f60\u7684\u95ee\u9898\u662f\u5426\u4f1a\u53d7\u5230\u6b22\u8fce\u505a\u592a\u4e50\u89c2\u7684\u4f30\u8ba1 -- \u5982\u679c\u4f60\u4e0d\u786e\u5b9a\uff0c\u90a3\u5c31\u5411\u522b\u5904\u53d1\u9001\uff0c\u6216\u8005\u538b\u6839\u522b\u53d1\u3002 \u5728\u9009\u62e9\u8bba\u575b\u3001\u65b0\u95fb\u7fa4\u7ec4\u6216\u90ae\u4ef6\u5217\u8868\u65f6\uff0c\u522b\u592a\u76f8\u4fe1\u540d\u5b57\uff0c\u5148\u770b\u770b FAQ \u6216\u8005\u8bb8\u53ef\u4e66\u4ee5\u5f04\u6e05\u695a\u4f60\u7684\u95ee\u9898\u662f\u5426\u5207\u9898\u3002\u53d1\u6587\u524d\u5148\u7ffb\u7ffb\u5df2\u6709\u7684\u8bdd\u9898\uff0c\u8fd9\u6837\u53ef\u4ee5\u8ba9\u4f60\u611f\u53d7\u4e00\u4e0b\u90a3\u91cc\u7684\u6587\u5316\u3002\u4e8b\u5b9e\u4e0a\uff0c\u4e8b\u5148\u5728\u65b0\u95fb\u7ec4\u6216\u90ae\u4ef6\u5217\u8868\u7684\u5386\u53f2\u8bb0\u5f55\u4e2d\u641c\u7d22\u4e0e\u4f60\u95ee\u9898\u76f8\u5173\u7684\u5173\u952e\u8bcd\u662f\u4e2a\u6781\u597d\u7684\u4e3b\u610f\uff0c\u4e5f\u8bb8\u8fd9\u6837\u5c31\u627e\u5230\u7b54\u6848\u4e86\u3002\u5373\u4f7f\u6ca1\u6709\uff0c\u4e5f\u80fd\u5e2e\u52a9\u4f60\u5f52\u7eb3\u51fa\u66f4\u597d\u7684\u95ee\u9898\u3002 \u522b\u50cf\u673a\u5173\u67aa\u4f3c\u7684\u4e00\u6b21\"\u626b\u5c04\"\u6240\u6709\u7684\u5e2e\u52a9\u6e20\u9053\uff0c\u8fd9\u5c31\u50cf\u5927\u558a\u5927\u53eb\u4e00\u6837\u4f1a\u4f7f\u4eba\u4e0d\u5feb\u3002\u8981\u4e00\u4e2a\u4e00\u4e2a\u5730\u6765\u3002 \u641e\u6e05\u695a\u4f60\u7684\u4e3b\u9898\uff01\u6700\u5178\u578b\u7684\u9519\u8bef\u4e4b\u4e00\u662f\u5728\u67d0\u79cd\u81f4\u529b\u4e8e\u8de8\u5e73\u53f0\u53ef\u79fb\u690d\u7684\u8bed\u8a00\u3001\u5957\u4ef6\u6216\u5de5\u5177\u7684\u8bba\u575b\u4e2d\u63d0\u5173\u4e8e Unix \u6216 Windows \u64cd\u4f5c\u7cfb\u7edf\u7a0b\u5e8f\u754c\u9762\u7684\u95ee\u9898\u3002\u5982\u679c\u4f60\u4e0d\u660e\u767d\u4e3a\u4ec0\u4e48\u8fd9\u662f\u5927\u9519\uff0c\u6700\u597d\u5728\u641e\u6e05\u695a\u8fd9\u4e4b\u95f4\u5dee\u5f02\u4e4b\u524d\u4ec0\u4e48\u4e5f\u522b\u95ee\u3002 \u4e00\u822c\u6765\u8bf4\uff0c\u5728\u4ed4\u7ec6\u6311\u9009\u7684\u516c\u5171\u8bba\u575b\u4e2d\u63d0\u95ee\uff0c\u4f1a\u6bd4\u5728\u79c1\u6709\u8bba\u575b\u4e2d\u63d0\u540c\u6837\u7684\u95ee\u9898\u66f4\u5bb9\u6613\u5f97\u5230\u6709\u7528\u7684\u56de\u7b54\u3002\u6709\u51e0\u4e2a\u7406\u7531\u53ef\u4ee5\u652f\u6301\u8fd9\u70b9\uff0c\u4e00\u662f\u770b\u6f5c\u5728\u7684\u56de\u590d\u8005\u6709\u591a\u5c11\uff0c\u4e8c\u662f\u770b\u89c2\u4f17\u6709\u591a\u5c11\u3002\u9ed1\u5ba2\u8f83\u613f\u610f\u56de\u7b54\u90a3\u4e9b\u80fd\u5e2e\u52a9\u5230\u8bb8\u591a\u4eba\u7684\u95ee\u9898\u3002 \u53ef\u4ee5\u7406\u89e3\u7684\u662f\uff0c\u8001\u7ec3\u7684\u9ed1\u5ba2\u548c\u4e00\u4e9b\u70ed\u95e8\u8f6f\u4ef6\u7684\u4f5c\u8005\u6b63\u5728\u63a5\u53d7\u8fc7\u591a\u7684\u9519\u53d1\u4fe1\u606f\u3002\u5c31\u50cf\u90a3\u6839\u6700\u540e\u538b\u57ae\u9a86\u9a7c\u80cc\u7684\u7a3b\u8349\u4e00\u6837\uff0c\u4f60\u7684\u52a0\u5165\u4e5f\u6709\u53ef\u80fd\u4f7f\u60c5\u51b5\u8d70\u5411\u6781\u7aef \u2014\u2014 \u5df2\u7ecf\u597d\u51e0\u6b21\u4e86\uff0c\u4e00\u4e9b\u70ed\u95e8\u8f6f\u4ef6\u7684\u4f5c\u8005\u4ece\u81ea\u5df1\u8f6f\u4ef6\u7684\u652f\u6301\u4e2d\u62bd\u8eab\u51fa\u6765\uff0c\u56e0\u4e3a\u4f34\u968f\u800c\u6765\u6d8c\u5165\u5176\u79c1\u4eba\u90ae\u7bb1\u7684\u65e0\u7528\u90ae\u4ef6\u53d8\u5f97\u65e0\u6cd5\u5fcd\u53d7\u3002","title":"\u614e\u9009\u63d0\u95ee\u7684\u8bba\u575b"},{"location":"misc/how_to_ask_questions_the_smart_way/when_you_ask/#stack-overflow","text":"\u641c\u7d22\uff0c\u7136\u540e \u5728 Stack Exchange \u95ee\u3002 \u8fd1\u5e74\u6765\uff0cStack Exchange community \u793e\u533a\u5df2\u7ecf\u6210\u4e3a\u56de\u7b54\u6280\u672f\u53ca\u5176\u4ed6\u95ee\u9898\u7684\u4e3b\u8981\u6e20\u9053\uff0c\u5c24\u5176\u662f\u90a3\u4e9b\u5f00\u653e\u6e90\u7801\u7684\u9879\u76ee\u3002 \u56e0\u4e3a Google \u7d22\u5f15\u662f\u5373\u65f6\u7684\uff0c\u5728\u770b Stack Exchange \u4e4b\u524d\u5148\u5728 Google \u641c\u7d22\u3002\u6709\u5f88\u9ad8\u7684\u673a\u7387\u67d0\u4eba\u5df2\u7ecf\u95ee\u4e86\u4e00\u4e2a\u7c7b\u4f3c\u7684\u95ee\u9898\uff0c\u800c\u4e14 Stack Exchange \u7f51\u7ad9\u4eec\u5f80\u5f80\u4f1a\u662f\u641c\u7d22\u7ed3\u679c\u4e2d\u6700\u524d\u9762\u51e0\u4e2a\u3002\u5982\u679c\u4f60\u5728 Google \u4e0a\u6ca1\u6709\u627e\u5230\u4efb\u4f55\u7b54\u6848\uff0c\u4f60\u518d\u5230\u7279\u5b9a\u76f8\u5173\u4e3b\u9898\u7684\u7f51\u7ad9\u53bb\u627e\u3002\u7528\u6807\u7b7e\uff08Tag\uff09\u641c\u7d22\u80fd\u8ba9\u4f60\u66f4\u7f29\u5c0f\u4f60\u7684\u641c\u7d22\u7ed3\u679c\u3002 Stack Exchange \u5df2\u7ecf\u6210\u957f\u5230 \u8d85\u8fc7\u4e00\u767e\u4e2a\u7f51\u7ad9 \uff0c\u4ee5\u4e0b\u662f\u6700\u5e38\u7528\u7684\u51e0\u4e2a\u7ad9\uff1a Super User \u662f\u95ee\u4e00\u4e9b\u901a\u7528\u7684\u7535\u8111\u95ee\u9898\uff0c\u5982\u679c\u4f60\u7684\u95ee\u9898\u8ddf\u4ee3\u7801\u6216\u662f\u5199\u7a0b\u5e8f\u65e0\u5173\uff0c\u53ea\u662f\u4e00\u4e9b\u7f51\u7edc\u8fde\u7ebf\u4e4b\u7c7b\u7684\uff0c\u8bf7\u5230\u8fd9\u91cc\u3002 Stack Overflow \u662f\u95ee\u5199\u7a0b\u5e8f\u6709\u5173\u7684\u95ee\u9898\u3002 Server Fault \u662f\u95ee\u670d\u52a1\u5668\u548c\u7f51\u7ba1\u76f8\u5173\u7684\u95ee\u9898\u3002","title":"Stack Overflow"},{"location":"misc/how_to_ask_questions_the_smart_way/when_you_ask/#irc","text":"\u672c\u5730\u7684\u4f7f\u7528\u8005\u7fa4\u7ec4\uff08user group\uff09\uff0c\u6216\u8005\u4f60\u6240\u7528\u7684 Linux \u53d1\u884c\u7248\u672c\u4e5f\u8bb8\u6b63\u5728\u5ba3\u4f20\u4ed6\u4eec\u7684\u7f51\u9875\u8bba\u575b\u6216 IRC \u9891\u9053\uff0c\u5e76\u63d0\u4f9b\u65b0\u624b\u5e2e\u52a9\uff08\u5728\u4e00\u4e9b\u975e\u82f1\u8bed\u56fd\u5bb6\uff0c\u65b0\u624b\u8bba\u575b\u5f88\u53ef\u80fd\u8fd8\u662f\u90ae\u4ef6\u5217\u8868\uff09\uff0c \u8fd9\u4e9b\u5730\u65b9\u662f\u5f00\u59cb\u63d0\u95ee\u7684\u597d\u9996\u9009\uff0c\u7279\u522b\u662f\u5f53\u4f60\u89c9\u5f97\u9047\u5230\u7684\u4e5f\u8bb8\u53ea\u662f\u76f8\u5bf9\u7b80\u5355\u6216\u8005\u5f88\u666e\u901a\u7684\u95ee\u9898\u65f6\u3002\u6709\u5e7f\u544a\u8d5e\u52a9\u7684 IRC \u9891\u9053\u662f\u516c\u5f00\u6b22\u8fce\u63d0\u95ee\u7684\u5730\u65b9\uff0c\u901a\u5e38\u53ef\u4ee5\u5373\u65f6\u5f97\u5230\u56de\u5e94\u3002 \u4e8b\u5b9e\u4e0a\uff0c\u5982\u679c\u7a0b\u5e8f\u51fa\u7684\u95ee\u9898\u53ea\u53d1\u751f\u5728\u7279\u5b9a Linux \u53d1\u884c\u7248\u63d0\u4f9b\u7684\u7248\u672c\uff08\u8fd9\u5f88\u5e38\u89c1\uff09\uff0c\u6700\u597d\u5148\u53bb\u8be5\u53d1\u884c\u7248\u7684\u8bba\u575b\u6216\u90ae\u4ef6\u5217\u8868\u4e2d\u63d0\u95ee\uff0c\u518d\u5230\u7a0b\u5e8f\u672c\u8eab\u7684\u8bba\u575b\u6216\u90ae\u4ef6\u5217\u8868\u63d0\u95ee\u3002\uff08\u5426\u5219\uff09\u8be5\u9879\u76ee\u7684\u9ed1\u5ba2\u53ef\u80fd\u4ec5\u4ec5\u56de\u590d \"\u7528\u6211\u4eec\u7684\u7248\u672c\"\u3002 \u5728\u4efb\u4f55\u8bba\u575b\u53d1\u6587\u4ee5\u524d\uff0c\u5148\u786e\u8ba4\u4e00\u4e0b\u6709\u6ca1\u6709\u641c\u7d22\u529f\u80fd\u3002\u5982\u679c\u6709\uff0c\u5c31\u8bd5\u7740\u641c\u7d22\u4e00\u4e0b\u95ee\u9898\u7684\u51e0\u4e2a\u5173\u952e\u8bcd\uff0c\u4e5f\u8bb8\u8fd9\u4f1a\u6709\u5e2e\u52a9\u3002\u5982\u679c\u5728\u6b64\u4e4b\u524d\u4f60\u5df2\u505a\u8fc7\u901a\u7528\u7684\u7f51\u9875\u641c\u7d22\uff08\u4f60\u4e5f\u8be5\u8fd9\u6837\u505a\uff09\uff0c\u8fd8\u662f\u518d\u641c\u7d22\u4e00\u4e0b\u8bba\u575b\uff0c\u641c\u7d22\u5f15\u64ce\u6709\u53ef\u80fd\u6ca1\u6765\u5f97\u53ca\u7d22\u5f15\u6b64\u8bba\u575b\u7684\u5168\u90e8\u5185\u5bb9\u3002 \u901a\u8fc7\u8bba\u575b\u6216 IRC \u9891\u9053\u6765\u63d0\u4f9b\u4f7f\u7528\u8005\u652f\u6301\u670d\u52a1\u6709\u589e\u957f\u7684\u8d8b\u52bf\uff0c\u7535\u5b50\u90ae\u4ef6\u5219\u5927\u591a\u4e3a\u9879\u76ee\u5f00\u53d1\u8005\u95f4\u7684\u4ea4\u6d41\u800c\u4fdd\u7559\u3002\u6240\u4ee5\u6700\u597d\u5148\u5728\u8bba\u575b\u6216 IRC \u4e2d\u5bfb\u6c42\u4e0e\u8be5\u9879\u76ee\u76f8\u5173\u7684\u534f\u52a9\u3002 \u5728\u4f7f\u7528 IRC \u7684\u65f6\u5019\uff0c\u9996\u5148\u6700\u597d\u4e0d\u8981\u53d1\u5e03\u5f88\u957f\u7684\u95ee\u9898\u63cf\u8ff0\uff0c\u6709\u4e9b\u4eba\u79f0\u4e4b\u4e3a\u9891\u9053\u6d2a\u6c34\u3002\u6700\u597d\u901a\u8fc7\u4e00\u53e5\u8bdd\u7684\u95ee\u9898\u63cf\u8ff0\u6765\u5f00\u59cb\u804a\u5929\u3002","title":"\u7f51\u7ad9\u548c IRC \u8bba\u575b"},{"location":"misc/how_to_ask_questions_the_smart_way/when_you_ask/#_2","text":"\u5f53\u67d0\u4e2a\u9879\u76ee\u63d0\u4f9b\u5f00\u53d1\u8005\u90ae\u4ef6\u5217\u8868\u65f6\uff0c\u8981\u5411\u5217\u8868\u800c\u4e0d\u662f\u5176\u4e2d\u7684\u4e2a\u522b\u6210\u5458\u63d0\u95ee\uff0c\u5373\u4f7f\u4f60\u786e\u4fe1\u4ed6\u80fd\u6700\u597d\u5730\u56de\u7b54\u4f60\u7684\u95ee\u9898\u3002\u67e5\u4e00\u67e5\u9879\u76ee\u7684\u6587\u4ef6\u548c\u9996\u9875\uff0c\u627e\u5230\u9879\u76ee\u7684\u90ae\u4ef6\u5217\u8868\u5e76\u4f7f\u7528\u5b83\u3002\u6709\u51e0\u4e2a\u5f88\u597d\u7684\u7406\u7531\u652f\u6301\u6211\u4eec\u91c7\u7528\u8fd9\u79cd\u529e\u6cd5\uff1a \u4efb\u4f55\u597d\u5230\u9700\u8981\u5411\u4e2a\u522b\u5f00\u53d1\u8005\u63d0\u51fa\u7684\u95ee\u9898\uff0c\u4e5f\u5c06\u5bf9\u6574\u4e2a\u9879\u76ee\u7fa4\u7ec4\u6709\u76ca\u3002\u53cd\u4e4b\uff0c\u5982\u679c\u4f60\u8ba4\u4e3a\u81ea\u5df1\u7684\u95ee\u9898\u5bf9\u6574\u4e2a\u9879\u76ee\u7fa4\u7ec4\u6765\u8bf4\u592a\u611a\u8822\uff0c\u4e5f\u4e0d\u80fd\u6210\u4e3a\u9a9a\u6270\u4e2a\u522b\u5f00\u53d1\u8005\u7684\u7406\u7531\u3002 \u5411\u5217\u8868\u63d0\u95ee\u53ef\u4ee5\u5206\u6563\u5f00\u53d1\u8005\u7684\u8d1f\u62c5\uff0c\u4e2a\u522b\u5f00\u53d1\u8005\uff08\u5c24\u5176\u662f\u9879\u76ee\u9886\u5bfc\u4eba\uff09\u4e5f\u8bb8\u592a\u5fd9\u4ee5\u81f3\u4e8e\u6ca1\u6cd5\u56de\u7b54\u4f60\u7684\u95ee\u9898\u3002 \u5927\u591a\u6570\u90ae\u4ef6\u5217\u8868\u90fd\u4f1a\u88ab\u5b58\u6863\uff0c\u90a3\u4e9b\u88ab\u5b58\u6863\u7684\u5185\u5bb9\u5c06\u88ab\u641c\u7d22\u5f15\u64ce\u7d22\u5f15\u3002\u5982\u679c\u4f60\u5411\u5217\u8868\u63d0\u95ee\u5e76\u5f97\u5230\u89e3\u7b54\uff0c\u5c06\u6765\u5176\u5b83\u4eba\u53ef\u4ee5\u901a\u8fc7\u7f51\u9875\u641c\u7d22\u627e\u5230\u4f60\u7684\u95ee\u9898\u548c\u7b54\u6848\uff0c\u4e5f\u5c31\u4e0d\u7528\u518d\u6b21\u53d1\u95ee\u4e86\u3002 \u5982\u679c\u67d0\u4e9b\u95ee\u9898\u7ecf\u5e38\u88ab\u95ee\u5230\uff0c\u5f00\u53d1\u8005\u53ef\u4ee5\u5229\u7528\u6b64\u4fe1\u606f\u6765\u6539\u8fdb\u8bf4\u660e\u6587\u4ef6\u6216\u8f6f\u4ef6\u672c\u8eab\uff0c\u4ee5\u4f7f\u5176\u66f4\u6e05\u695a\u3002\u5982\u679c\u53ea\u662f\u79c1\u4e0b\u63d0\u95ee\uff0c\u5c31\u6ca1\u6709\u4eba\u80fd\u770b\u5230\u6700\u5e38\u89c1\u95ee\u9898\u7684\u5b8c\u6574\u573a\u666f\u3002 \u5982\u679c\u4e00\u4e2a\u9879\u76ee\u65e2\u6709\"\u4f7f\u7528\u8005\" \u4e5f\u6709\"\u5f00\u53d1\u8005\"\uff08\u6216\"\u9ed1\u5ba2\"\uff09\u90ae\u4ef6\u5217\u8868\u6216\u8bba\u575b\uff0c\u800c\u4f60\u53c8\u4e0d\u4f1a\u52a8\u5230\u90a3\u4e9b\u6e90\u4ee3\u7801\uff0c\u90a3\u4e48\u5c31\u5411\"\u4f7f\u7528\u8005\"\u5217\u8868\u6216\u8bba\u575b\u63d0\u95ee\u3002\u4e0d\u8981\u5047\u8bbe\u81ea\u5df1\u4f1a\u5728\u5f00\u53d1\u8005\u5217\u8868\u4e2d\u53d7\u5230\u6b22\u8fce\uff0c\u90a3\u4e9b\u4eba\u591a\u534a\u4f1a\u5c06\u4f60\u7684\u63d0\u95ee\u89c6\u4e3a\u5e72\u6270\u4ed6\u4eec\u5f00\u53d1\u7684\u566a\u97f3\u3002 \u7136\u800c\uff0c\u5982\u679c\u4f60 \u786e\u4fe1 \u4f60\u7684\u95ee\u9898\u5f88\u7279\u522b\uff0c\u800c\u4e14\u5728\"\u4f7f\u7528\u8005\" \u5217\u8868\u6216\u8bba\u575b\u4e2d\u51e0\u5929\u90fd\u6ca1\u6709\u56de\u590d\uff0c\u53ef\u4ee5\u8bd5\u8bd5\u524d\u5f80\"\u5f00\u53d1\u8005\"\u5217\u8868\u6216\u8bba\u575b\u53d1\u95ee\u3002\u5efa\u8bae\u4f60\u5728\u5f20\u8d34\u524d\u6700\u597d\u5148\u6697\u5730\u91cc\u89c2\u5bdf\u51e0\u5929\u4ee5\u4e86\u89e3\u90a3\u91cc\u7684\u884c\u4e8b\u65b9\u5f0f\uff08\u4e8b\u5b9e\u4e0a\u8fd9\u662f\u53c2\u4e0e\u4efb\u4f55\u79c1\u6709\u6216\u534a\u79c1\u6709\u5217\u8868\u7684\u597d\u4e3b\u610f\uff09 \u5982\u679c\u4f60\u627e\u4e0d\u5230\u4e00\u4e2a\u9879\u76ee\u7684\u90ae\u4ef6\u5217\u8868\uff0c\u800c\u53ea\u80fd\u67e5\u5230\u9879\u76ee\u7ef4\u62a4\u8005\u7684\u7535\u5b50\u90ae\u4ef6\u5730\u5740\uff0c\u5c3d\u7ba1\u5411\u4ed6\u53d1\u4fe1\u3002\u5373\u4f7f\u662f\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u4e5f\u522b\u5047\u8bbe\uff08\u9879\u76ee\uff09\u90ae\u4ef6\u5217\u8868\u4e0d\u5b58\u5728\u3002\u5728\u4f60\u7684\u7535\u5b50\u90ae\u4ef6\u4e2d\uff0c\u8bf7\u9648\u8ff0\u4f60\u5df2\u7ecf\u8bd5\u8fc7\u4f46\u6ca1\u6709\u627e\u5230\u5408\u9002\u7684\u90ae\u4ef6\u5217\u8868\uff0c\u4e5f\u63d0\u53ca\u4f60\u4e0d\u53cd\u5bf9\u5c06\u81ea\u5df1\u7684\u90ae\u4ef6\u8f6c\u53d1\u7ed9\u4ed6\u4eba\uff08\u8bb8\u591a\u4eba\u8ba4\u4e3a\uff0c\u5373\u4f7f\u6ca1\u4ec0\u4e48\u79d8\u5bc6\uff0c\u79c1\u4eba\u7535\u5b50\u90ae\u4ef6\u4e5f\u4e0d\u5e94\u8be5\u88ab\u516c\u5f00\u3002\u901a\u8fc7\u5141\u8bb8\u5c06\u4f60\u7684\u7535\u5b50\u90ae\u4ef6\u8f6c\u53d1\u4ed6\u4eba\uff0c\u4f60\u7ed9\u4e86\u76f8\u5e94\u4eba\u5458\u5904\u7f6e\u4f60\u90ae\u4ef6\u7684\u9009\u62e9\uff09\u3002","title":"\u4f7f\u7528\u9879\u76ee\u90ae\u4ef6\u5217\u8868"},{"location":"misc/how_to_ask_questions_the_smart_way/when_you_ask/#_3","text":"\u5728\u90ae\u4ef6\u5217\u8868\u3001\u65b0\u95fb\u7fa4\u7ec4\u6216\u8bba\u575b\u4e2d\uff0c\u5927\u7ea6 50 \u5b57\u4ee5\u5185\u7684\u6807\u9898\u662f\u6293\u4f4f\u8d44\u6df1\u4e13\u5bb6\u6ce8\u610f\u529b\u7684\u597d\u673a\u4f1a\u3002\u522b\u7528\u558b\u558b\u4e0d\u4f11\u7684 \u5e2e\u5e2e\u5fd9 \u3001 \u8dea\u6c42 \u3001 \u6025 \uff08\u66f4\u522b\u8bf4 \u6551\u547d\u554a\uff01\uff01\uff01\uff01 \u8fd9\u6837\u8ba9\u4eba\u53cd\u611f\u7684\u8bdd\uff0c\u7528\u8fd9\u79cd\u6807\u9898\u4f1a\u88ab\u6761\u4ef6\u53cd\u5c04\u5f0f\u5730\u5ffd\u7565\uff09\u6765\u6d6a\u8d39\u8fd9\u4e2a\u673a\u4f1a\u3002\u4e0d\u8981\u5984\u60f3\u7528\u4f60\u7684\u75db\u82e6\u7a0b\u5ea6\u6765\u6253\u52a8\u6211\u4eec\uff0c\u800c\u5e94\u8be5\u662f\u5728\u8fd9\u70b9\u7a7a\u95f4\u4e2d\u4f7f\u7528\u6781\u7b80\u5355\u627c\u8981\u7684\u63cf\u8ff0\u65b9\u5f0f\u6765\u63d0\u51fa\u95ee\u9898\u3002 \u4e00\u4e2a\u597d\u6807\u9898\u8303\u4f8b\u662f \u76ee\u6807 \u2014\u2014 \u5dee\u5f02\u5f0f \u7684\u63cf\u8ff0\uff0c\u8bb8\u591a\u6280\u672f\u652f\u6301\u7ec4\u7ec7\u5c31\u662f\u8fd9\u6837\u505a\u7684\u3002\u5728\u76ee\u6807\u90e8\u5206\u6307\u51fa\u662f\u54ea\u4e00\u4e2a\u6216\u54ea\u4e00\u7ec4\u4e1c\u897f\u6709\u95ee\u9898\uff0c\u5728 \u5dee\u5f02 \u90e8\u5206\u5219\u63cf\u8ff0\u4e0e\u671f\u671b\u7684\u884c\u4e3a\u4e0d\u4e00\u81f4\u7684\u5730\u65b9\u3002 \u8822\u95ee\u9898\uff1a\u6551\u547d\u554a\uff01\u6211\u7684\u7b14\u8bb0\u672c\u7535\u8111\u4e0d\u80fd\u6b63\u5e38\u663e\u793a\u4e86\uff01 \u806a\u660e\u95ee\u9898\uff1aX.org 6.8.1 \u7684\u9f20\u6807\u5149\u6807\u4f1a\u53d8\u5f62\uff0c\u67d0\u724c\u663e\u5361 MV1005 \u82af\u7247\u7ec4\u3002 \u66f4\u806a\u660e\u95ee\u9898\uff1aX.org 6.8.1 \u7684\u9f20\u6807\u5149\u6807\uff0c\u5728\u67d0\u724c\u663e\u5361 MV1005 \u82af\u7247\u7ec4\u73af\u5883\u4e0b - \u4f1a\u53d8\u5f62\u3002 \u7f16\u5199 \u76ee\u6807 \u2014\u2014 \u5dee\u5f02 \u5f0f\u63cf\u8ff0\u7684\u8fc7\u7a0b\u6709\u52a9\u4e8e\u4f60\u7ec4\u7ec7\u5bf9\u95ee\u9898\u7684\u7ec6\u81f4\u601d\u8003\u3002\u662f\u4ec0\u4e48\u88ab\u5f71\u54cd\u4e86\uff1f \u4ec5\u4ec5\u662f\u9f20\u6807\u5149\u6807\u6216\u8005\u8fd8\u6709\u5176\u5b83\u56fe\u5f62\uff1f\u53ea\u5728 X.org \u7684 X \u7248\u4e2d\u51fa\u73b0\uff1f\u6216\u53ea\u662f\u51fa\u73b0\u5728 6.8.1 \u7248\u4e2d\uff1f \u662f\u9488\u5bf9\u67d0\u724c\u663e\u5361\u82af\u7247\u7ec4\uff1f\u6216\u8005\u53ea\u662f\u5176\u4e2d\u7684 MV1005 \u578b\u53f7\uff1f \u4e00\u4e2a\u9ed1\u5ba2\u53ea\u9700\u7784\u4e00\u773c\u5c31\u80fd\u591f\u7acb\u5373\u660e\u767d\u4f60\u7684\u73af\u5883\u548c\u4f60\u9047\u5230\u7684\u95ee\u9898\u3002 \u603b\u800c\u8a00\u4e4b\uff0c\u8bf7\u60f3\u50cf\u4e00\u4e0b\u4f60\u6b63\u5728\u4e00\u4e2a\u53ea\u663e\u793a\u6807\u9898\u7684\u5b58\u6863\u8ba8\u8bba\u4e32\uff08Thread\uff09\u7d22\u5f15\u4e2d\u67e5\u5bfb\u3002\u8ba9\u4f60\u7684\u6807\u9898\u66f4\u597d\u5730\u53cd\u6620\u95ee\u9898\uff0c\u53ef\u4f7f\u4e0b\u4e00\u4e2a\u641c\u7d22\u7c7b\u4f3c\u95ee\u9898\u7684\u4eba\u80fd\u591f\u5173\u6ce8\u8fd9\u4e2a\u8ba8\u8bba\u4e32\uff0c\u800c\u4e0d\u7528\u518d\u6b21\u63d0\u95ee\u76f8\u540c\u7684\u95ee\u9898\u3002 \u5982\u679c\u4f60\u60f3\u5728\u56de\u590d\u4e2d\u63d0\u51fa\u95ee\u9898\uff0c\u8bb0\u5f97\u8981\u4fee\u6539\u5185\u5bb9\u6807\u9898\uff0c\u4ee5\u8868\u660e\u4f60\u662f\u5728\u95ee\u4e00\u4e2a\u95ee\u9898\uff0c \u4e00\u4e2a\u770b\u8d77\u6765\u50cf Re: \u6d4b\u8bd5 \u6216\u8005 Re: \u65b0 bug \u7684\u6807\u9898\u5f88\u96be\u5f15\u8d77\u8db3\u591f\u91cd\u89c6\u3002\u53e6\u5916\uff0c\u5728\u4e0d\u5f71\u54cd\u8fde\u8d2f\u6027\u4e4b\u4e0b\uff0c\u9002\u5f53\u5f15\u7528\u5e76\u5220\u51cf\u524d\u6587\u7684\u5185\u5bb9\uff0c\u80fd\u7ed9\u65b0\u6765\u7684\u8bfb\u8005\u7559\u4e0b\u7ebf\u7d22\u3002 \u5bf9\u4e8e\u8ba8\u8bba\u4e32\uff0c\u4e0d\u8981\u76f4\u63a5\u70b9\u51fb\u56de\u590d\u6765\u5f00\u59cb\u4e00\u4e2a\u5168\u65b0\u7684\u8ba8\u8bba\u4e32\uff0c\u8fd9\u5c06\u9650\u5236\u4f60\u7684\u89c2\u4f17\u3002\u56e0\u4e3a\u6709\u4e9b\u90ae\u4ef6\u9605\u8bfb\u7a0b\u5e8f\uff0c\u6bd4\u5982 mutt \uff0c\u5141\u8bb8\u4f7f\u7528\u8005\u6309\u8ba8\u8bba\u4e32\u6392\u5e8f\u5e76\u901a\u8fc7\u6298\u53e0\u8ba8\u8bba\u4e32\u6765\u9690\u85cf\u6d88\u606f\uff0c\u8fd9\u6837\u505a\u7684\u4eba\u6c38\u8fdc\u770b\u4e0d\u5230\u4f60\u53d1\u7684\u6d88\u606f\u3002 \u4ec5\u4ec5\u6539\u53d8\u6807\u9898\u8fd8\u4e0d\u591f\u3002mutt \u548c\u5176\u5b83\u4e00\u4e9b\u90ae\u4ef6\u9605\u8bfb\u7a0b\u5e8f\u8fd8\u4f1a\u68c0\u67e5\u90ae\u4ef6\u6807\u9898\u4ee5\u5916\u7684\u5176\u5b83\u4fe1\u606f\uff0c\u4ee5\u4fbf\u4e3a\u5176\u6307\u5b9a\u8ba8\u8bba\u4e32\u3002\u6240\u4ee5\u5b81\u53ef\u53d1\u4e00\u4e2a\u5168\u65b0\u7684\u90ae\u4ef6\u3002 \u5728\u7f51\u9875\u8bba\u575b\u4e0a\uff0c\u597d\u7684\u63d0\u95ee\u65b9\u5f0f\u7a0d\u6709\u4e0d\u540c\uff0c\u56e0\u4e3a\u8ba8\u8bba\u4e32\u4e0e\u7279\u5b9a\u7684\u4fe1\u606f\u7d27\u5bc6\u7ed3\u5408\uff0c\u5e76\u4e14\u901a\u5e38\u5728\u8ba8\u8bba\u4e32\u5916\u5c31\u770b\u4e0d\u5230\u91cc\u9762\u7684\u5185\u5bb9\uff0c\u6545\u901a\u8fc7\u56de\u590d\u63d0\u95ee\uff0c\u800c\u975e\u6539\u53d8\u6807\u9898\u662f\u53ef\u63a5\u53d7\u7684\u3002\u4e0d\u662f\u6240\u6709\u8bba\u575b\u90fd\u5141\u8bb8\u5728\u56de\u590d\u4e2d\u51fa\u73b0\u5206\u79bb\u7684\u6807\u9898\uff0c\u800c\u4e14\u8fd9\u6837\u505a\u4e86\u57fa\u672c\u4e0a\u6ca1\u6709\u4eba\u4f1a\u53bb\u770b\u3002\u4e0d\u8fc7\uff0c\u901a\u8fc7\u56de\u590d\u63d0\u95ee\uff0c\u8fd9\u672c\u8eab\u5c31\u662f\u66a7\u6627\u7684\u505a\u6cd5\uff0c\u56e0\u4e3a\u5b83\u4eec\u53ea\u4f1a\u88ab\u6b63\u5728\u67e5\u770b\u8be5\u6807\u9898\u7684\u4eba\u8bfb\u5230\u3002\u6240\u4ee5\uff0c\u9664\u975e\u4f60\u53ea\u60f3\u5728\u8be5\u8ba8\u8bba\u4e32\u5f53\u524d\u6d3b\u8dc3\u7684\u4eba\u7fa4\u4e2d\u63d0\u95ee\uff0c\u4e0d\u7136\u8fd8\u662f\u53e6\u8d77\u7089\u7076\u6bd4\u8f83\u597d\u3002","title":"\u4f7f\u7528\u6709\u610f\u4e49\u4e14\u63cf\u8ff0\u660e\u786e\u7684\u6807\u9898"},{"location":"misc/how_to_ask_questions_the_smart_way/when_you_ask/#_4","text":"\u4ee5 \u8bf7\u5c06\u4f60\u7684\u56de\u590d\u53d1\u9001\u5230\u2026\u2026 \u6765\u7ed3\u675f\u4f60\u7684\u95ee\u9898\u591a\u534a\u4f1a\u4f7f\u4f60\u5f97\u4e0d\u5230\u56de\u7b54\u3002\u5982\u679c\u4f60\u89c9\u5f97\u82b1\u51e0\u79d2\u949f\u5728\u90ae\u4ef6\u5ba2\u6237\u7aef\u8bbe\u7f6e\u4e00\u4e0b\u56de\u590d\u5730\u5740\u90fd\u9ebb\u70e6\uff0c\u6211\u4eec\u4e5f\u89c9\u5f97\u82b1\u51e0\u79d2\u949f\u601d\u8003\u4f60\u7684\u95ee\u9898\u66f4\u9ebb\u70e6\u3002\u5982\u679c\u4f60\u7684\u90ae\u4ef6\u7a0b\u5e8f\u4e0d\u652f\u6301\u8fd9\u6837\u505a\uff0c \u6362\u4e2a\u597d\u70b9\u7684 \uff1b\u5982\u679c\u662f\u64cd\u4f5c\u7cfb\u7edf\u4e0d\u652f\u6301\u8fd9\u79cd\u90ae\u4ef6\u7a0b\u5e8f\uff0c\u4e5f\u6362\u4e2a\u597d\u70b9\u7684\u3002 \u5728\u8bba\u575b\uff0c\u8981\u6c42\u901a\u8fc7\u7535\u5b50\u90ae\u4ef6\u56de\u590d\u662f\u975e\u5e38\u65e0\u793c\u7684\uff0c\u9664\u975e\u4f60\u8ba4\u4e3a\u56de\u590d\u7684\u4fe1\u606f\u53ef\u80fd\u6bd4\u8f83\u654f\u611f\uff08\u6709\u4eba\u4f1a\u4e3a\u4e86\u67d0\u4e9b\u672a\u77e5\u7684\u539f\u56e0\uff0c\u53ea\u8ba9\u4f60\u800c\u4e0d\u662f\u6574\u4e2a\u8bba\u575b\u77e5\u9053\u7b54\u6848\uff09\u3002\u5982\u679c\u4f60\u53ea\u662f\u60f3\u5728\u6709\u4eba\u56de\u590d\u8ba8\u8bba\u4e32\u65f6\u5f97\u5230\u7535\u5b50\u90ae\u4ef6\u63d0\u9192\uff0c\u53ef\u4ee5\u8981\u6c42\u7f51\u9875\u8bba\u575b\u53d1\u9001\u7ed9\u4f60\u3002\u51e0\u4e4e\u6240\u6709\u8bba\u575b\u90fd\u652f\u6301\u8bf8\u5982 \u8ffd\u8e2a\u6b64\u8ba8\u8bba\u4e32 \u3001 \u6709\u56de\u590d\u65f6\u53d1\u9001\u90ae\u4ef6\u63d0\u9192 \u7b49\u529f\u80fd\u3002","title":"\u4f7f\u95ee\u9898\u5bb9\u6613\u56de\u590d"},{"location":"misc/how_to_ask_questions_the_smart_way/when_you_ask/#_5","text":"\u6211\u4eec\u4ece\u7ecf\u9a8c\u4e2d\u53d1\u73b0\uff0c\u7c97\u5fc3\u7684\u63d0\u95ee\u8005\u901a\u5e38\u4e5f\u4f1a\u7c97\u5fc3\u7684\u5199\u7a0b\u5e8f\u4e0e\u601d\u8003\uff08\u6211\u6562\u6253\u5305\u7968\uff09\u3002\u56de\u7b54\u7c97\u5fc3\u5927\u610f\u8005\u7684\u95ee\u9898\u5f88\u4e0d\u503c\u5f97\uff0c\u6211\u4eec\u5b81\u613f\u628a\u65f6\u95f4\u8017\u5728\u522b\u5904\u3002 \u6b63\u786e\u7684\u62fc\u5199\u3001\u6807\u70b9\u7b26\u53f7\u548c\u5927\u5c0f\u5199\u662f\u5f88\u91cd\u8981\u7684\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u5982\u679c\u4f60\u89c9\u5f97\u8fd9\u6837\u505a\u5f88\u9ebb\u70e6\uff0c\u4e0d\u60f3\u5728\u4e4e\u8fd9\u4e9b\uff0c\u90a3\u6211\u4eec\u4e5f\u89c9\u5f97\u9ebb\u70e6\uff0c\u4e0d\u60f3\u5728\u4e4e\u4f60\u7684\u63d0\u95ee\u3002\u82b1\u70b9\u989d\u5916\u7684\u7cbe\u529b\u659f\u914c\u4e00\u4e0b\u5b57\u53e5\uff0c\u7528\u4e0d\u7740\u592a\u50f5\u786c\u4e0e\u6b63\u5f0f \u2014\u2014 \u4e8b\u5b9e\u4e0a\uff0c\u9ed1\u5ba2\u6587\u5316\u5f88\u770b\u91cd\u80fd\u51c6\u786e\u5730\u4f7f\u7528\u975e\u6b63\u5f0f\u3001\u4fda\u8bed\u548c\u5e7d\u9ed8\u7684\u8bed\u53e5\u3002\u4f46\u5b83\u5fc5\u987b\u5f88\u51c6\u786e\uff0c\u800c\u4e14\u6709\u8ff9\u8c61\u8868\u660e\u4f60\u662f\u5728\u601d\u8003\u548c\u5173\u6ce8\u95ee\u9898\u3002 \u6b63\u786e\u5730\u62fc\u5199\u3001\u4f7f\u7528\u6807\u70b9\u548c\u5927\u5c0f\u5199\uff0c\u4e0d\u8981\u5c06 its \u6df7\u6dc6\u4e3a it's \uff0c loose \u641e\u6210 lose \u6216\u8005\u5c06 discrete \u5f04\u6210 discreet \u3002\u4e0d\u8981\u5168\u90e8\u7528\u5927\u5199\uff0c\u8fd9\u4f1a\u88ab\u89c6\u4e3a\u65e0\u793c\u7684\u5927\u58f0\u56b7\u56b7\uff08\u5168\u90e8\u5c0f\u5199\u4e5f\u597d\u4e0d\u5230\u54ea\u53bb\uff0c\u56e0\u4e3a\u4e0d\u6613\u9605\u8bfb\u3002 Alan Cox \u4e5f\u8bb8\u53ef\u4ee5\u8fd9\u6837\u505a\uff0c\u4f46\u4f60\u4e0d\u884c\uff09\u3002 \u66f4\u767d\u8bdd\u7684\u8bf4\uff0c\u5982\u679c\u4f60\u5199\u5f97\u50cf\u662f\u4e2a\u534a\u6587\u76f2[\u8bd1\u6ce8\uff1a\u5c0f\u767d]\uff0c\u90a3\u591a\u534a\u5f97\u4e0d\u5230\u7406\u776c\u3002\u4e5f\u4e0d\u8981\u4f7f\u7528\u5373\u65f6\u901a\u4fe1\u4e2d\u7684\u7b80\u5199\u6216\u706b\u661f\u6587\uff0c\u5982\u5c06 \u7684 \u7b80\u5316\u4e3a d \u4f1a\u4f7f\u4f60\u770b\u8d77\u6765\u50cf\u4e00\u4e2a\u4e3a\u4e86\u5c11\u6253\u51e0\u4e2a\u952e\u800c\u7701\u5b57\u7684\u5c0f\u767d\u3002\u66f4\u7cdf\u7684\u662f\uff0c\u5982\u679c\u50cf\u4e2a\u5c0f\u5b69\u4f3c\u5730\u9b3c\u753b\u7b26\u90a3\u7edd\u5bf9\u662f\u5728\u627e\u6b7b\uff0c\u53ef\u4ee5\u80af\u5b9a\u6ca1\u4eba\u4f1a\u7406\u4f60\uff08\u6216\u8005\u6700\u591a\u662f\u7ed9\u4f60\u4e00\u5927\u5806\u6307\u8d23\u4e0e\u6316\u82e6\uff09\u3002 \u5982\u679c\u5728\u4f7f\u7528\u975e\u6bcd\u8bed\u7684\u8bba\u575b\u63d0\u95ee\uff0c\u4f60\u53ef\u4ee5\u72af\u70b9\u62fc\u5199\u548c\u8bed\u6cd5\u4e0a\u7684\u5c0f\u9519\uff0c\u4f46\u51b3\u4e0d\u80fd\u5728\u601d\u8003\u4e0a\u9a6c\u864e\uff08\u6ca1\u9519\uff0c\u6211\u4eec\u901a\u5e38\u80fd\u5f04\u6e05\u4e24\u8005\u7684\u5206\u522b\uff09\u3002\u540c\u65f6\uff0c\u9664\u975e\u4f60\u77e5\u9053\u56de\u590d\u8005\u4f7f\u7528\u7684\u8bed\u8a00\uff0c\u5426\u5219\u8bf7\u4f7f\u7528\u82f1\u8bed\u4e66\u5199\u3002\u7e41\u5fd9\u7684\u9ed1\u5ba2\u4e00\u822c\u4f1a\u76f4\u63a5\u5220\u9664\u7528\u4ed6\u4eec\u770b\u4e0d\u61c2\u8bed\u8a00\u5199\u7684\u6d88\u606f\u3002\u5728\u7f51\u7edc\u4e0a\u82f1\u8bed\u662f\u901a\u7528\u8bed\u8a00\uff0c\u7528\u82f1\u8bed\u4e66\u5199\u53ef\u4ee5\u5c06\u4f60\u7684\u95ee\u9898\u5728\u5c1a\u672a\u88ab\u9605\u8bfb\u5c31\u88ab\u76f4\u63a5\u5220\u9664\u7684\u53ef\u80fd\u6027\u964d\u5230\u6700\u4f4e\u3002 \u5982\u679c\u82f1\u6587\u662f\u4f60\u7684\u5916\u8bed\uff08Second language\uff09\uff0c\u63d0\u793a\u6f5c\u5728\u56de\u590d\u8005\u4f60\u6709\u6f5c\u5728\u7684\u8bed\u8a00\u56f0\u96be\u662f\u5f88\u597d\u7684\uff1a [\u8bd1\u6ce8\uff1a\u4ee5\u4e0b\u9644\u4e0a\u539f\u6587\u4ee5\u4f9b\u4f7f\u7528] English is not my native language; please excuse typing errors. \u82f1\u6587\u4e0d\u662f\u6211\u7684\u6bcd\u8bed\uff0c\u8bf7\u539f\u8c05\u6211\u7684\u9519\u5b57\u6216\u8bed\u6cd5\u3002 If you speak $LANGUAGE, please email/PM me; I may need assistance translating my question. \u5982\u679c\u4f60\u8bf4\u67d0\u8bed\u8a00\uff0c\u8bf7\u5bc4\u4fe1/\u79c1\u8baf\u7ed9\u6211\uff1b\u6211\u9700\u8981\u6709\u4eba\u534f\u52a9\u6211\u7ffb\u8bd1\u6211\u7684\u95ee\u9898\u3002 I am familiar with the technical terms, but some slang expressions and idioms are difficult for me. \u6211\u5bf9\u6280\u672f\u540d\u8bcd\u5f88\u719f\u6089\uff0c\u4f46\u5bf9\u4e8e\u4fd7\u8bed\u6216\u662f\u7279\u522b\u7528\u6cd5\u6bd4\u8f83\u4e0d\u751a\u4e86\u89e3\u3002 I've posted my question in $LANGUAGE and English. I'll be glad to translate responses, if you only use one or the other. \u6211\u628a\u6211\u7684\u95ee\u9898\u7528\u67d0\u8bed\u8a00\u548c\u82f1\u6587\u5199\u51fa\u6765\uff0c\u5982\u679c\u4f60\u53ea\u7528\u4e00\u79cd\u8bed\u8a00\u56de\u7b54\uff0c\u6211\u4f1a\u4e50\u610f\u5c06\u5176\u7ffb\u8bd1\u6210\u53e6\u4e00\u79cd\u3002","title":"\u7528\u6e05\u6670\u3001\u6b63\u786e\u3001\u7cbe\u51c6\u5e76\u8bed\u6cd5\u6b63\u786e\u7684\u8bed\u53e5"},{"location":"misc/how_to_ask_questions_the_smart_way/when_you_ask/#_6","text":"\u5982\u679c\u4f60\u4eba\u4e3a\u5730\u5c06\u95ee\u9898\u641e\u5f97\u96be\u4ee5\u9605\u8bfb\uff0c\u5b83\u591a\u534a\u4f1a\u88ab\u5ffd\u7565\uff0c\u4eba\u4eec\u66f4\u613f\u8bfb\u6613\u61c2\u7684\u95ee\u9898\uff0c\u6240\u4ee5\uff1a \u4f7f\u7528\u7eaf\u6587\u5b57\u800c\u4e0d\u662f HTML ( \u5173\u95ed HTML \u5e76\u4e0d\u96be\uff09\u3002 \u4f7f\u7528 MIME \u9644\u4ef6\u901a\u5e38\u662f\u53ef\u4ee5\u7684\uff0c\u524d\u63d0\u662f\u771f\u6b63\u6709\u5185\u5bb9\uff08\u8b6c\u5982\u9644\u5e26\u7684\u6e90\u4ee3\u7801\u6216 patch\uff09\uff0c\u800c\u4e0d\u4ec5\u4ec5\u662f\u90ae\u4ef6\u7a0b\u5e8f\u751f\u6210\u7684\u6a21\u677f\uff08\u8b6c\u5982\u53ea\u662f\u4fe1\u4ef6\u5185\u5bb9\u7684\u62f7\u8d1d\uff09\u3002 \u4e0d\u8981\u53d1\u9001\u4e00\u6bb5\u6587\u5b57\u53ea\u662f\u4e00\u884c\u53e5\u5b50\u4f46\u81ea\u52a8\u6362\u884c\u540e\u4f1a\u53d8\u6210\u591a\u884c\u7684\u90ae\u4ef6\uff08\u8fd9\u4f7f\u5f97\u56de\u590d\u90e8\u5206\u5185\u5bb9\u975e\u5e38\u56f0\u96be\uff09\u3002\u8bbe\u60f3\u4f60\u7684\u8bfb\u8005\u662f\u5728 80 \u4e2a\u5b57\u7b26\u5bbd\u7684\u7ec8\u7aef\u673a\u4e0a\u9605\u8bfb\u90ae\u4ef6\uff0c\u6700\u597d\u8bbe\u7f6e\u4f60\u7684\u6362\u884c\u5206\u5272\u70b9\u5c0f\u4e8e 80 \u5b57\u3002 \u4f46\u662f\uff0c\u5bf9\u4e00\u4e9b\u7279\u6b8a\u7684\u6587\u4ef6\u4e0d\u8981\u8bbe\u7f6e\u56fa\u5b9a\u5bbd\u5ea6\uff08\u8b6c\u5982\u65e5\u5fd7\u6863\u6848\u62f7\u8d1d\u6216\u4f1a\u8bdd\u8bb0\u5f55\uff09\u3002\u6570\u636e\u5e94\u8be5\u539f\u6837\u5305\u542b\uff0c\u8ba9\u56de\u590d\u8005\u6709\u4fe1\u5fc3\u4ed6\u4eec\u770b\u5230\u7684\u662f\u548c\u4f60\u770b\u5230\u7684\u4e00\u6837\u7684\u4e1c\u897f\u3002 \u5728\u82f1\u8bed\u8bba\u575b\u4e2d\uff0c\u4e0d\u8981\u4f7f\u7528 Quoted-Printable MIME \u7f16\u7801\u53d1\u9001\u6d88\u606f\u3002\u8fd9\u79cd\u7f16\u7801\u5bf9\u4e8e\u5f20\u8d34\u975e ASCII \u8bed\u8a00\u53ef\u80fd\u662f\u5fc5\u987b\u7684\uff0c\u4f46\u5f88\u591a\u90ae\u4ef6\u7a0b\u5e8f\u5e76\u4e0d\u652f\u6301\u8fd9\u79cd\u7f16\u7801\u3002\u5f53\u5b83\u4eec\u5904\u7406\u6362\u884c\u65f6\uff0c\u90a3\u4e9b\u6587\u672c\u4e2d\u56db\u5904\u6563\u5e03\u7684=20\u7b26\u53f7\u65e2\u96be\u770b\u4e5f\u5206\u6563\u6ce8\u610f\u529b\uff0c\u751a\u81f3\u6709\u53ef\u80fd\u7834\u574f\u5185\u5bb9\u7684\u8bed\u610f\u3002 \u7edd\u5bf9\uff0c\u6c38\u8fdc\u4e0d\u8981\u6307\u671b\u9ed1\u5ba2\u4eec\u9605\u8bfb\u4f7f\u7528\u5c01\u95ed\u683c\u5f0f\u7f16\u5199\u7684\u6587\u6863\uff0c\u50cf\u5fae\u8f6f\u516c\u53f8\u7684 Word \u6216 Excel \u6587\u4ef6\u7b49\u3002\u5927\u591a\u6570\u9ed1\u5ba2\u5bf9\u6b64\u7684\u53cd\u5e94\u5c31\u50cf\u6709\u4eba\u5c06\u8fd8\u5728\u5192\u70ed\u6c14\u7684\u732a\u7caa\u5012\u5728\u4f60\u5bb6\u95e8\u53e3\u65f6\u4f60\u7684\u53cd\u5e94\u4e00\u6837\u3002\u5373\u4fbf\u4ed6\u4eec\u80fd\u591f\u5904\u7406\uff0c\u4ed6\u4eec\u4e5f\u5f88\u538c\u6076\u8fd9\u4e48\u505a\u3002 \u5982\u679c\u4f60\u4ece\u4f7f\u7528 Windows \u7684\u7535\u8111\u53d1\u9001\u7535\u5b50\u90ae\u4ef6\uff0c\u5173\u95ed\u5fae\u8f6f\u611a\u8822\u7684 \u667a\u80fd\u5f15\u53f7 \u529f\u80fd \uff08\u4ece[\u9009\u9879] > [\u6821\u8ba2] > [\u81ea\u52a8\u6821\u6b63\u9009\u9879]\uff0c\u52fe\u9009\u6389\u667a\u80fd\u5f15\u53f7\u5355\u9009\u6846\uff09\uff0c\u4ee5\u514d\u5728\u4f60\u7684\u90ae\u4ef6\u4e2d\u5230\u5904\u6563\u5e03\u5783\u573e\u5b57\u7b26\u3002 \u5728\u8bba\u575b\uff0c\u52ff\u6ee5\u7528\u8868\u60c5\u7b26\u53f7\u548cHTML\u529f\u80fd\uff08\u5f53\u5b83\u4eec\u63d0\u4f9b\u65f6\uff09\u3002\u4e00\u4e24\u4e2a\u8868\u60c5\u7b26\u53f7\u901a\u5e38\u6ca1\u6709\u95ee\u9898\uff0c\u4f46\u82b1\u54e8\u7684\u5f69\u8272\u6587\u672c\u503e\u5411\u4e8e\u4f7f\u4eba\u8ba4\u4e3a\u4f60\u662f\u4e2a\u65e0\u80fd\u4e4b\u8f88\u3002\u8fc7\u6ee5\u5730\u4f7f\u7528\u8868\u60c5\u7b26\u53f7\u3001\u8272\u5f69\u548c\u5b57\u4f53\u4f1a\u4f7f\u4f60\u770b\u6765\u50cf\u4e2a\u50bb\u7b11\u7684\u5c0f\u59d1\u5a18\u3002\u8fd9\u901a\u5e38\u4e0d\u662f\u4e2a\u597d\u4e3b\u610f\uff0c\u9664\u975e\u4f60\u53ea\u662f\u5bf9\u6027\u800c\u4e0d\u662f\u5bf9\u7b54\u6848\u611f\u5174\u8da3\u3002 \u5982\u679c\u4f60\u4f7f\u7528\u56fe\u5f62\u7528\u6237\u754c\u9762\u7684\u90ae\u4ef6\u7a0b\u5e8f\uff08\u5982\u5fae\u8f6f\u516c\u53f8\u7684 Outlook \u6216\u8005\u5176\u5b83\u7c7b\u4f3c\u7684\uff09\uff0c\u6ce8\u610f\u5b83\u4eec\u7684\u9ed8\u8ba4\u8bbe\u7f6e\u4e0d\u4e00\u5b9a\u6ee1\u8db3\u8fd9\u4e9b\u8981\u6c42\u3002\u5927\u591a\u6570\u8fd9\u7c7b\u7a0b\u5e8f\u6709\u57fa\u4e8e\u9009\u5355\u7684\u67e5\u770b\u6e90\u4ee3\u7801\u547d\u4ee4\uff0c\u7528\u5b83\u6765\u68c0\u67e5\u53d1\u9001\u6587\u4ef6\u5939\u4e2d\u7684\u90ae\u4ef6\uff0c\u4ee5\u786e\u4fdd\u53d1\u9001\u7684\u662f\u7eaf\u6587\u672c\u6587\u4ef6\u540c\u65f6\u6ca1\u6709\u4e00\u4e9b\u5947\u602a\u7684\u5b57\u7b26\u3002","title":"\u4f7f\u7528\u6613\u4e8e\u8bfb\u53d6\u4e14\u6807\u51c6\u7684\u6587\u4ef6\u683c\u5f0f\u53d1\u9001\u95ee\u9898"},{"location":"misc/how_to_ask_questions_the_smart_way/when_you_ask/#_7","text":"\u4ed4\u7ec6\u3001\u6e05\u695a\u5730\u63cf\u8ff0\u4f60\u7684\u95ee\u9898\u6216 Bug \u7684\u75c7\u72b6\u3002 \u63cf\u8ff0\u95ee\u9898\u53d1\u751f\u7684\u73af\u5883\uff08\u673a\u5668\u914d\u7f6e\u3001\u64cd\u4f5c\u7cfb\u7edf\u3001\u5e94\u7528\u7a0b\u5e8f\u3001\u4ee5\u53ca\u76f8\u5173\u7684\u4fe1\u606f\uff09\uff0c\u63d0\u4f9b\u7ecf\u9500\u5546\u7684\u53d1\u884c\u7248\u548c\u7248\u672c\u53f7\uff08\u5982\uff1a Fedora Core 4 \u3001 Slackware 9.1 \u7b49\uff09\u3002 \u63cf\u8ff0\u5728\u63d0\u95ee\u524d\u4f60\u662f\u600e\u6837\u53bb\u7814\u7a76\u548c\u7406\u89e3\u8fd9\u4e2a\u95ee\u9898\u7684\u3002 \u63cf\u8ff0\u5728\u63d0\u95ee\u524d\u4e3a\u786e\u5b9a\u95ee\u9898\u800c\u91c7\u53d6\u7684\u8bca\u65ad\u6b65\u9aa4\u3002 \u63cf\u8ff0\u6700\u8fd1\u505a\u8fc7\u4ec0\u4e48\u53ef\u80fd\u76f8\u5173\u7684\u786c\u4ef6\u6216\u8f6f\u4ef6\u53d8\u66f4\u3002 \u5c3d\u53ef\u80fd\u7684\u63d0\u4f9b\u4e00\u4e2a\u53ef\u4ee5 \u91cd\u73b0\u8fd9\u4e2a\u95ee\u9898\u7684\u53ef\u63a7\u73af\u5883 \u7684\u65b9\u6cd5\u3002 \u5c3d\u91cf\u53bb\u63e3\u6d4b\u4e00\u4e2a\u9ed1\u5ba2\u4f1a\u600e\u6837\u53cd\u95ee\u4f60\uff0c\u5728\u4f60\u63d0\u95ee\u4e4b\u524d\u9884\u5148\u5c06\u9ed1\u5ba2\u4eec\u53ef\u80fd\u9047\u5230\u7684\u95ee\u9898\u56de\u7b54\u4e00\u904d\u3002 \u4ee5\u4e0a\u51e0\u70b9\u4e2d\uff0c\u5f53\u4f60\u62a5\u544a\u7684\u662f\u4f60\u8ba4\u4e3a\u53ef\u80fd\u5728\u4ee3\u7801\u4e2d\u7684\u95ee\u9898\u65f6\uff0c\u7ed9\u9ed1\u5ba2\u4e00\u4e2a\u53ef\u4ee5\u91cd\u73b0\u4f60\u7684\u95ee\u9898\u7684\u73af\u5883\u5c24\u5176\u91cd\u8981\u3002\u5f53\u4f60\u8fd9\u4e48\u505a\u65f6\uff0c\u4f60\u5f97\u5230\u6709\u6548\u7684\u56de\u7b54\u7684\u673a\u4f1a\u548c\u901f\u5ea6\u90fd\u4f1a\u5927\u5927\u7684\u63d0\u5347\u3002 Simon Tatham \u5199\u8fc7\u4e00\u7bc7\u540d\u4e3a\u300a\u5982\u4f55\u6709\u6548\u7684\u62a5\u544a Bug\u300b\u7684\u51fa\u8272\u6587\u7ae0\u3002\u5f3a\u529b\u63a8\u8350\u4f60\u4e5f\u8bfb\u4e00\u8bfb\u3002","title":"\u7cbe\u786e\u5730\u63cf\u8ff0\u95ee\u9898\u5e76\u8a00\u4e4b\u6709\u7269"},{"location":"misc/how_to_ask_questions_the_smart_way/when_you_ask/#_8","text":"\u4f60\u9700\u8981\u63d0\u4f9b\u7cbe\u786e\u6709\u5185\u5bb9\u7684\u4fe1\u606f\u3002\u8fd9\u5e76\u4e0d\u662f\u8981\u6c42\u4f60\u7b80\u5355\u7684\u628a\u6210\u5806\u7684\u51fa\u9519\u4ee3\u7801\u6216\u8005\u8d44\u6599\u5b8c\u5168\u8f6c\u5f55\u5230\u4f60\u7684\u63d0\u95ee\u4e2d\u3002\u5982\u679c\u4f60\u6709\u5e9e\u5927\u800c\u590d\u6742\u7684\u6d4b\u8bd5\u6837\u4f8b\u80fd\u91cd\u73b0\u7a0b\u5e8f\u6302\u6389\u7684\u60c5\u5883\uff0c\u5c3d\u91cf\u5c06\u5b83\u526a\u88c1\u5f97\u8d8a\u5c0f\u8d8a\u597d\u3002 \u8fd9\u6837\u505a\u7684\u7528\u5904\u81f3\u5c11\u6709\u4e09\u70b9\u3002 \u7b2c\u4e00\uff0c\u8868\u73b0\u51fa\u4f60\u4e3a\u7b80\u5316\u95ee\u9898\u4ed8\u51fa\u4e86\u52aa\u529b\uff0c\u8fd9\u53ef\u4ee5\u4f7f\u4f60\u5f97\u5230\u56de\u7b54\u7684\u673a\u4f1a\u589e\u52a0\uff1b \u7b2c\u4e8c\uff0c\u7b80\u5316\u95ee\u9898\u4f7f\u4f60\u66f4\u6709\u53ef\u80fd\u5f97\u5230\u6709\u7528\u7684\u7b54\u6848\uff1b \u7b2c\u4e09\uff0c\u5728\u7cbe\u70bc\u4f60\u7684 bug \u62a5\u544a\u7684\u8fc7\u7a0b\u4e2d\uff0c\u4f60\u5f88\u53ef\u80fd\u5c31\u81ea\u5df1\u627e\u5230\u4e86\u89e3\u51b3\u65b9\u6cd5\u6216\u6743\u5b9c\u4e4b\u8ba1\u3002","title":"\u8bdd\u4e0d\u5728\u591a\u800c\u5728\u7cbe"},{"location":"misc/how_to_ask_questions_the_smart_way/when_you_ask/#bug","text":"\u5f53\u4f60\u5728\u4f7f\u7528\u8f6f\u4ef6\u4e2d\u9047\u5230\u95ee\u9898\uff0c\u9664\u975e\u4f60\u975e\u5e38\u3001\u975e\u5e38\u7684\u6709\u6839\u636e\uff0c\u4e0d\u8981\u52a8\u8f84\u58f0\u79f0\u627e\u5230\u4e86 Bug\u3002\u63d0\u793a\uff1a\u9664\u975e\u4f60\u80fd\u63d0\u4f9b\u89e3\u51b3\u95ee\u9898\u7684\u6e90\u4ee3\u7801\u8865\u4e01\uff0c\u6216\u8005\u63d0\u4f9b\u56de\u5f52\u6d4b\u8bd5\u6765\u8868\u660e\u524d\u4e00\u7248\u672c\u4e2d\u884c\u4e3a\u4e0d\u6b63\u786e\uff0c\u5426\u5219\u4f60\u90fd\u591a\u534a\u4e0d\u591f\u5b8c\u5168\u786e\u4fe1\u3002\u8fd9\u540c\u6837\u9002\u7528\u5728\u7f51\u9875\u548c\u6587\u4ef6\uff0c\u5982\u679c\u4f60\uff08\u58f0\u79f0\uff09\u53d1\u73b0\u4e86\u6587\u4ef6\u7684Bug\uff0c\u4f60\u5e94\u8be5\u80fd\u63d0\u4f9b\u76f8\u5e94\u4f4d\u7f6e\u7684\u4fee\u6b63\u6216\u66ff\u4ee3\u6587\u4ef6\u3002 \u8bf7\u8bb0\u5f97\uff0c\u8fd8\u6709\u8bb8\u591a\u5176\u5b83\u4f7f\u7528\u8005\u6ca1\u9047\u5230\u4f60\u53d1\u73b0\u7684\u95ee\u9898\uff0c\u5426\u5219\u4f60\u5728\u9605\u8bfb\u6587\u4ef6\u6216\u641c\u7d22\u7f51\u9875\u65f6\u5c31\u5e94\u8be5\u53d1\u73b0\u4e86\uff08\u4f60\u5728\u62b1\u6028\u524d\u5df2\u7ecf\u505a\u4e86\u8fd9\u4e9b\uff0c\u662f\u5427\uff1f\uff09\u3002\u8fd9\u4e5f\u610f\u5473\u7740\u5f88\u6709\u53ef\u80fd\u662f\u4f60\u5f04\u9519\u4e86\u800c\u4e0d\u662f\u8f6f\u4ef6\u672c\u8eab\u6709\u95ee\u9898\u3002 \u7f16\u5199\u8f6f\u4ef6\u7684\u4eba\u603b\u662f\u975e\u5e38\u8f9b\u82e6\u5730\u4f7f\u5b83\u5c3d\u53ef\u80fd\u5b8c\u7f8e\u3002\u5982\u679c\u4f60\u58f0\u79f0\u627e\u5230\u4e86 Bug\uff0c\u4e5f\u5c31\u662f\u5728\u8d28\u7591\u4ed6\u4eec\u7684\u80fd\u529b\uff0c\u5373\u4f7f\u4f60\u662f\u5bf9\u7684\uff0c\u4e5f\u6709\u53ef\u80fd\u4f1a\u5192\u72af\u5230\u5176\u4e2d\u67d0\u90e8\u5206\u4eba\u3002\u5f53\u4f60\u5728\u6807\u9898\u4e2d\u56b7\u56b7\u7740\u6709Bug\u65f6\uff0c\u8fd9\u5c24\u5176\u4e25\u91cd\u3002 \u63d0\u95ee\u65f6\uff0c\u5373\u4f7f\u4f60\u79c1\u4e0b\u975e\u5e38\u786e\u4fe1\u5df2\u7ecf\u53d1\u73b0\u4e00\u4e2a\u771f\u6b63\u7684 Bug\uff0c\u6700\u597d\u5199\u5f97\u50cf\u662f\u4f60\u505a\u9519\u4e86\u4ec0\u4e48\u3002\u5982\u679c\u771f\u7684\u6709 Bug\uff0c\u4f60\u4f1a\u5728\u56de\u590d\u4e2d\u770b\u5230\u8fd9\u70b9\u3002\u8fd9\u6837\u505a\u7684\u8bdd\uff0c\u5982\u679c\u771f\u6709 Bug\uff0c\u7ef4\u62a4\u8005\u5c31\u4f1a\u5411\u4f60\u9053\u6b49\uff0c\u8fd9\u603b\u6bd4\u4f60\u60f9\u607c\u522b\u4eba\u7136\u540e\u6b20\u522b\u4eba\u4e00\u4e2a\u9053\u6b49\u8981\u597d\u4e00\u70b9\u3002","title":"\u522b\u52a8\u8f84\u58f0\u79f0\u627e\u5230 Bug"},{"location":"misc/how_to_ask_questions_the_smart_way/when_you_ask/#_9","text":"\u6709\u4e9b\u4eba\u660e\u767d\u4ed6\u4eec\u4e0d\u8be5\u7c97\u9c81\u6216\u50b2\u6162\u7684\u63d0\u95ee\u5e76\u8981\u6c42\u5f97\u5230\u7b54\u590d\uff0c\u4f46\u4ed6\u4eec\u9009\u62e9\u53e6\u4e00\u4e2a\u6781\u7aef \u2014\u2014 \u4f4e\u58f0\u4e0b\u6c14\uff1a \u6211\u77e5\u9053\u6211\u53ea\u662f\u4e2a\u53ef\u60b2\u7684\u65b0\u624b\uff0c\u4e00\u4e2a\u64b8\u745f\uff0c\u4f46... \u3002\u8fd9\u65e2\u4f7f\u4eba\u56f0\u6270\uff0c\u4e5f\u6ca1\u6709\u7528\uff0c\u5c24\u5176\u662f\u4f34\u968f\u7740\u4e0e\u5b9e\u9645\u95ee\u9898\u542b\u7cca\u4e0d\u6e05\u7684\u63cf\u8ff0\u65f6\u66f4\u4ee4\u4eba\u53cd\u611f\u3002 \u522b\u7528\u539f\u59cb\u7075\u957f\u7c7b\u52a8\u7269\u7684\u628a\u620f\u6765\u6d6a\u8d39\u4f60\u6211\u7684\u65f6\u95f4\u3002\u53d6\u800c\u4ee3\u4e4b\u7684\u662f\uff0c\u5c3d\u53ef\u80fd\u6e05\u695a\u5730\u63cf\u8ff0\u80cc\u666f\u6761\u4ef6\u548c\u4f60\u7684\u95ee\u9898\u60c5\u51b5\u3002\u8fd9\u6bd4\u4f4e\u58f0\u4e0b\u6c14\u66f4\u597d\u5730\u5b9a\u4f4d\u4e86\u4f60\u7684\u4f4d\u7f6e\u3002 \u6709\u65f6\u7f51\u9875\u8bba\u575b\u4f1a\u8bbe\u6709\u4e13\u4e3a\u65b0\u624b\u63d0\u95ee\u7684\u7248\u9762\uff0c\u5982\u679c\u4f60\u771f\u7684\u8ba4\u4e3a\u9047\u5230\u4e86\u521d\u5b66\u8005\u7684\u95ee\u9898\uff0c\u5230\u90a3\u53bb\u5c31\u662f\u4e86\uff0c\u4f46\u4e00\u6837\u522b\u90a3\u4e48\u4f4e\u58f0\u4e0b\u6c14\u3002","title":"\u4f4e\u58f0\u4e0b\u6c14\u4e0d\u80fd\u4ee3\u66ff\u4f60\u7684\u529f\u8bfe"},{"location":"misc/how_to_ask_questions_the_smart_way/when_you_ask/#_10","text":"\u544a\u8bc9\u9ed1\u5ba2\u4eec\u4f60\u8ba4\u4e3a\u95ee\u9898\u662f\u600e\u6837\u9020\u6210\u7684\u5e76\u6ca1\u4ec0\u4e48\u5e2e\u52a9\u3002\uff08\u5982\u679c\u4f60\u7684\u63a8\u65ad\u5982\u6b64\u6709\u6548\uff0c\u8fd8\u7528\u5411\u522b\u4eba\u6c42\u52a9\u5417\uff1f\uff09\uff0c\u56e0\u6b64\u8981\u786e\u4fe1\u4f60\u539f\u539f\u672c\u672c\u544a\u8bc9\u4e86\u4ed6\u4eec\u95ee\u9898\u7684\u75c7\u72b6\uff0c\u800c\u4e0d\u662f\u4f60\u7684\u89e3\u91ca\u548c\u7406\u8bba\uff1b\u8ba9\u9ed1\u5ba2\u4eec\u6765\u63a8\u6d4b\u548c\u8bca\u65ad\u3002\u5982\u679c\u4f60\u8ba4\u4e3a\u9648\u8ff0\u81ea\u5df1\u7684\u731c\u6d4b\u5f88\u91cd\u8981\uff0c\u6e05\u695a\u5730\u8bf4\u660e\u8fd9\u53ea\u662f\u4f60\u7684\u731c\u6d4b\uff0c\u5e76\u63cf\u8ff0\u4e3a\u4ec0\u4e48\u5b83\u4eec\u4e0d\u8d77\u4f5c\u7528\u3002","title":"\u63cf\u8ff0\u95ee\u9898\u75c7\u72b6\u800c\u975e\u4f60\u7684\u731c\u6d4b"},{"location":"misc/how_to_ask_questions_the_smart_way/when_you_ask/#_11","text":"\u6211\u5728\u7f16\u8bd1\u5185\u6838\u65f6\u63a5\u8fde\u9047\u5230 SIG11 \u9519\u8bef\uff0c \u6211\u6000\u7591\u67d0\u6761\u98de\u7ebf\u642d\u5728\u4e3b\u677f\u7684\u8d70\u7ebf\u4e0a\u4e86\uff0c\u8fd9\u79cd\u60c5\u51b5\u5e94\u8be5\u600e\u6837\u68c0\u67e5\u6700\u597d\uff1f","title":"\u8822\u95ee\u9898"},{"location":"misc/how_to_ask_questions_the_smart_way/when_you_ask/#_12","text":"\u6211\u7684\u7ec4\u88c5\u7535\u8111\u662f FIC-PA2007 \u4e3b\u673a\u677f\u642d\u8f7d AMD K6/233 CPU\uff08\u5a01\u76db Apollo VP2 \u82af\u7247\u7ec4\uff09\uff0c 256MB Corsair PC133 SDRAM \u5185\u5b58\uff0c\u5728\u7f16\u8bd1\u5185\u6838\u65f6\uff0c\u4ece\u5f00\u673a 20 \u5206\u949f\u4ee5\u540e\u5c31\u9891\u9891\u4ea7\u751f SIG11 \u9519\u8bef\uff0c \u4f46\u662f\u5728\u5934 20 \u5206\u949f\u5185\u4ece\u6ca1\u53d1\u751f\u8fc7\u76f8\u540c\u7684\u95ee\u9898\u3002\u91cd\u65b0\u542f\u52a8\u4e5f\u6ca1\u6709\u7528\uff0c\u4f46\u662f\u5173\u673a\u4e00\u665a\u4e0a\u5c31\u53c8\u80fd\u5de5\u4f5c 20 \u5206\u949f\u3002 \u6240\u6709\u5185\u5b58\u90fd\u6362\u8fc7\u4e86\uff0c\u6ca1\u6709\u6548\u679c\u3002\u76f8\u5173\u90e8\u5206\u7684\u6807\u51c6\u7f16\u8bd1\u8bb0\u5f55\u5982\u4e0b\u2026\u3002 \u7531\u4e8e\u4ee5\u4e0a\u8fd9\u70b9\u4f3c\u4e4e\u8ba9\u8bb8\u591a\u4eba\u89c9\u5f97\u96be\u4ee5\u914d\u5408\uff0c\u8fd9\u91cc\u6709\u53e5\u8bdd\u53ef\u4ee5\u63d0\u9192\u4f60\uff1a \u6240\u6709\u7684\u8bca\u65ad\u4e13\u5bb6\u90fd\u6765\u81ea\u5bc6\u82cf\u91cc\u5dde\u3002 \u7f8e\u56fd\u56fd\u52a1\u9662\u7684\u5b98\u65b9\u5ea7\u53f3\u94ed\u5219\u662f\uff1a \u8ba9\u6211\u770b\u770b \uff08\u51fa\u81ea\u56fd\u4f1a\u8bae\u5458 Willard D. Vandiver \u5728 1899 \u5e74\u65f6\u7684\u8bb2\u8bdd\uff1a \u6211\u6765\u81ea\u4e00\u4e2a\u51fa\u4ea7\u7389\u7c73\uff0c\u68c9\u82b1\uff0c\u725b\u84a1\u548c\u6c11\u4e3b\u515a\u4eba\u7684\u56fd\u5bb6\uff0c\u6ed4\u6ed4\u96c4\u8fa9\u65e2\u4e0d\u80fd\u8bf4\u670d\u6211\uff0c\u4e5f\u4e0d\u4f1a\u8ba9\u6211\u6ee1\u610f\u3002\u6211\u6765\u81ea\u5bc6\u82cf\u91cc\u5dde\uff0c\u4f60\u5fc5\u987b\u8ba9\u6211\u770b\u770b\u3002 \uff09 \u9488\u5bf9\u8bca\u65ad\u8005\u800c\u8a00\uff0c\u8fd9\u5e76\u4e0d\u662f\u4e00\u79cd\u6000\u7591\uff0c\u800c\u53ea\u662f\u4e00\u79cd\u771f\u5b9e\u800c\u6709\u7528\u7684\u9700\u6c42\uff0c\u4ee5\u4fbf\u8ba9\u4ed6\u4eec\u770b\u5230\u7684\u662f\u4e0e\u4f60\u770b\u5230\u7684\u539f\u59cb\u8bc1\u636e\u5c3d\u53ef\u80fd\u4e00\u81f4\u7684\u4e1c\u897f\uff0c\u800c\u4e0d\u662f\u4f60\u7684\u731c\u6d4b\u4e0e\u5f52\u7eb3\u7684\u7ed3\u8bba\u3002\u6240\u4ee5\uff0c\u5927\u65b9\u7684\u5c55\u793a\u7ed9\u6211\u4eec\u770b\u5427\uff01","title":"\u806a\u660e\u95ee\u9898"},{"location":"misc/how_to_ask_questions_the_smart_way/when_you_ask/#_13","text":"\u95ee\u9898\u53d1\u751f\u524d\u7684\u4e00\u7cfb\u5217\u64cd\u4f5c\uff0c\u5f80\u5f80\u5c31\u662f\u5bf9\u627e\u51fa\u95ee\u9898\u6700\u6709\u5e2e\u52a9\u7684\u7ebf\u7d22\u3002\u56e0\u6b64\uff0c\u4f60\u7684\u8bf4\u660e\u91cc\u5e94\u8be5\u5305\u542b\u4f60\u7684\u64cd\u4f5c\u6b65\u9aa4\uff0c\u4ee5\u53ca\u673a\u5668\u548c\u8f6f\u4ef6\u7684\u53cd\u5e94\uff0c\u76f4\u5230\u95ee\u9898\u53d1\u751f\u3002\u5728\u547d\u4ee4\u884c\u5904\u7406\u7684\u60c5\u51b5\u4e0b\uff0c\u63d0\u4f9b\u4e00\u6bb5\u64cd\u4f5c\u8bb0\u5f55\uff08\u4f8b\u5982\u8fd0\u884c\u811a\u672c\u5de5\u5177\u6240\u751f\u6210\u7684\uff09\uff0c\u5e76\u5f15\u7528\u76f8\u5173\u7684\u82e5\u5e72\u884c\uff08\u5982 20 \u884c\uff09\u8bb0\u5f55\u4f1a\u975e\u5e38\u6709\u5e2e\u52a9\u3002 \u5982\u679c\u6302\u6389\u7684\u7a0b\u5e8f\u6709\u8bca\u65ad\u9009\u9879\uff08\u5982 -v \u7684\u8be6\u8ff0\u5f00\u5173\uff09\uff0c\u8bd5\u7740\u9009\u62e9\u8fd9\u4e9b\u80fd\u5728\u8bb0\u5f55\u4e2d\u589e\u52a0\u8c03\u8bd5\u4fe1\u606f\u7684\u9009\u9879\u3002\u8bb0\u4f4f\uff0c \u591a \u4e0d\u7b49\u4e8e \u597d \u3002\u8bd5\u7740\u9009\u53d6\u9002\u5f53\u7684\u8c03\u8bd5\u7ea7\u522b\u4ee5\u4fbf\u63d0\u4f9b\u6709\u7528\u7684\u4fe1\u606f\u800c\u4e0d\u662f\u8ba9\u8bfb\u8005\u6df9\u6ca1\u5728\u5783\u573e\u4e2d\u3002 \u5982\u679c\u4f60\u7684\u8bf4\u660e\u5f88\u957f\uff08\u5982\u8d85\u8fc7\u56db\u4e2a\u6bb5\u843d\uff09\uff0c\u5728\u5f00\u5934\u7b80\u8ff0\u95ee\u9898\uff0c\u63a5\u4e0b\u6765\u518d\u6309\u65f6\u95f4\u987a\u5e8f\u8be6\u8ff0\u4f1a\u6709\u6240\u5e2e\u52a9\u3002\u8fd9\u6837\u9ed1\u5ba2\u4eec\u5728\u8bfb\u4f60\u7684\u8bb0\u5f55\u65f6\u5c31\u77e5\u9053\u8be5\u6ce8\u610f\u54ea\u4e9b\u5185\u5bb9\u4e86\u3002","title":"\u6309\u53d1\u751f\u65f6\u95f4\u5148\u540e\u5217\u51fa\u95ee\u9898\u75c7\u72b6"},{"location":"misc/how_to_ask_questions_the_smart_way/when_you_ask/#_14","text":"\u5982\u679c\u4f60\u60f3\u5f04\u6e05\u695a\u5982\u4f55\u505a\u67d0\u4e8b\uff08\u800c\u4e0d\u662f\u62a5\u544a\u4e00\u4e2a Bug\uff09\uff0c\u5728\u5f00\u5934\u5c31\u63cf\u8ff0\u4f60\u7684\u76ee\u6807\uff0c\u7136\u540e\u624d\u9648\u8ff0\u91cd\u73b0\u4f60\u6240\u5361\u4f4f\u7684\u7279\u5b9a\u6b65\u9aa4\u3002 \u7ecf\u5e38\u5bfb\u6c42\u6280\u672f\u5e2e\u52a9\u7684\u4eba\u5728\u5fc3\u4e2d\u6709\u4e2a\u66f4\u9ad8\u5c42\u6b21\u7684\u76ee\u6807\uff0c\u800c\u4ed6\u4eec\u5728\u81ea\u4ee5\u4e3a\u80fd\u8fbe\u5230\u76ee\u6807\u7684\u7279\u5b9a\u9053\u8def\u4e0a\u88ab\u5361\u4f4f\u4e86\uff0c\u7136\u540e\u8dd1\u6765\u95ee\u8be5\u600e\u4e48\u8d70\uff0c\u4f46\u6ca1\u6709\u610f\u8bc6\u5230\u8fd9\u6761\u8def\u672c\u8eab\u5c31\u6709\u95ee\u9898\u3002\u7ed3\u679c\u8981\u8d39\u5f88\u5927\u7684\u52b2\u624d\u80fd\u641e\u5b9a\u3002","title":"\u63cf\u8ff0\u76ee\u6807\u800c\u4e0d\u662f\u8fc7\u7a0b"},{"location":"misc/how_to_ask_questions_the_smart_way/when_you_ask/#_15","text":"\u6211\u600e\u6837\u624d\u80fd\u4ece\u67d0\u7ed8\u56fe\u7a0b\u5e8f\u7684\u989c\u8272\u9009\u62e9\u5668\u4e2d\u53d6\u5f97\u5341\u516d\u8fdb\u5236\u7684\u7684 RGB \u503c\uff1f","title":"\u8822\u95ee\u9898"},{"location":"misc/how_to_ask_questions_the_smart_way/when_you_ask/#_16","text":"\u6211\u6b63\u8bd5\u7740\u7528\u66ff\u6362\u4e00\u5e45\u56fe\u7247\u7684\u8272\u7801\uff08color table\uff09\u6210\u81ea\u5df1\u9009\u5b9a\u7684\u8272\u7801\uff0c\u6211\u73b0\u5728\u77e5\u9053\u7684\u552f\u4e00\u65b9\u6cd5\u662f\u7f16\u8f91\u6bcf\u4e2a\u8272\u7801\u533a\u5757\uff08table slot\uff09\uff0c \u4f46\u5374\u65e0\u6cd5\u4ece\u67d0\u7ed8\u56fe\u7a0b\u5e8f\u7684\u989c\u8272\u9009\u62e9\u5668\u53d6\u5f97\u5341\u516d\u8fdb\u5236\u7684\u7684 RGB \u503c\u3002 \u7b2c\u4e8c\u79cd\u63d0\u95ee\u6cd5\u6bd4\u8f83\u806a\u660e\uff0c\u4f60\u53ef\u80fd\u5f97\u5230\u50cf\u662f \u5efa\u8bae\u91c7\u7528\u53e6\u4e00\u4e2a\u66f4\u5408\u9002\u7684\u5de5\u5177 \u7684\u56de\u590d\u3002","title":"\u806a\u660e\u95ee\u9898"},{"location":"misc/how_to_ask_questions_the_smart_way/when_you_ask/#_17","text":"\u9ed1\u5ba2\u4eec\u8ba4\u4e3a\u95ee\u9898\u7684\u89e3\u51b3\u8fc7\u7a0b\u5e94\u8be5\u516c\u5f00\u3001\u900f\u660e\uff0c\u6b64\u8fc7\u7a0b\u4e2d\u5982\u679c\u66f4\u6709\u7ecf\u9a8c\u7684\u4eba\u6ce8\u610f\u5230\u4e0d\u5b8c\u6574\u6216\u8005\u4e0d\u5f53\u4e4b\u5904\uff0c\u6700\u521d\u7684\u56de\u590d\u624d\u80fd\u591f\u3001\u4e5f\u5e94\u8be5\u88ab\u7ea0\u6b63\u3002\u540c\u65f6\uff0c\u4f5c\u4e3a\u63d0\u4f9b\u5e2e\u52a9\u8005\u53ef\u4ee5\u5f97\u5230\u4e00\u4e9b\u5956\u52b1\uff0c\u5956\u52b1\u5c31\u662f\u4ed6\u7684\u80fd\u529b\u548c\u5b66\u8bc6\u88ab\u5176\u4ed6\u540c\u884c\u770b\u5230\u3002 \u5f53\u4f60\u8981\u6c42\u79c1\u4e0b\u56de\u590d\u65f6\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u548c\u5956\u52b1\u90fd\u88ab\u4e2d\u6b62\u3002\u522b\u8fd9\u6837\u505a\uff0c\u8ba9\u56de\u590d\u8005\u6765\u51b3\u5b9a\u662f\u5426\u79c1\u4e0b\u56de\u7b54 \u2014\u2014 \u5982\u679c\u4ed6\u771f\u8fd9\u4e48\u505a\u4e86\uff0c\u901a\u5e38\u662f\u56e0\u4e3a\u4ed6\u8ba4\u4e3a\u95ee\u9898\u7f16\u5199\u592a\u5dee\u6216\u8005\u592a\u80a4\u6d45\uff0c\u4ee5\u81f3\u4e8e\u5bf9\u5176\u5b83\u4eba\u6ca1\u6709\u5174\u8da3\u3002 \u8fd9\u6761\u89c4\u5219\u5b58\u5728\u4e00\u6761\u6709\u9650\u7684\u4f8b\u5916\uff0c\u5982\u679c\u4f60\u786e\u4fe1\u63d0\u95ee\u53ef\u80fd\u4f1a\u5f15\u6765\u5927\u91cf\u96f7\u540c\u7684\u56de\u590d\u65f6\uff0c\u90a3\u4e48\u8fd9\u4e2a\u795e\u5947\u7684\u63d0\u95ee\u53e5\u4f1a\u662f \u5411\u6211\u53d1\u7535\u90ae\uff0c\u6211\u5c06\u4e3a\u8bba\u575b\u5f52\u7eb3\u8fd9\u4e9b\u56de\u590d \u3002\u8bd5\u7740\u5c06\u90ae\u4ef6\u5217\u8868\u6216\u65b0\u95fb\u7fa4\u7ec4\u4ece\u6d2a\u6c34\u822c\u7684\u96f7\u540c\u56de\u590d\u4e2d\u89e3\u6551\u51fa\u6765\u662f\u975e\u5e38\u6709\u793c\u8c8c\u7684 \u2014\u2014 \u4f46\u4f60\u5fc5\u987b\u4fe1\u5b88\u8bfa\u8a00\u3002","title":"\u522b\u8981\u6c42\u4f7f\u7528\u79c1\u4eba\u7535\u90ae\u56de\u590d"},{"location":"misc/how_to_ask_questions_the_smart_way/when_you_ask/#_18","text":"\u6f2b\u65e0\u8fb9\u9645\u7684\u63d0\u95ee\u662f\u8fd1\u4e4e\u65e0\u4f11\u65e0\u6b62\u7684\u65f6\u95f4\u9ed1\u6d1e\u3002\u6700\u6709\u53ef\u80fd\u7ed9\u4f60\u6709\u7528\u7b54\u6848\u7684\u4eba\u901a\u5e38\u4e5f\u6b63\u662f\u6700\u5fd9\u7684\u4eba\uff08\u4ed6\u4eec\u5fd9\u662f\u56e0\u4e3a\u8981\u4eb2\u81ea\u5b8c\u6210\u5927\u90e8\u5206\u5de5\u4f5c\uff09\u3002\u8fd9\u6837\u7684\u4eba\u5bf9\u65e0\u8282\u5236\u7684\u65f6\u95f4\u9ed1\u6d1e\u76f8\u5f53\u538c\u6076\uff0c\u6240\u4ee5\u4ed6\u4eec\u4e5f\u503e\u5411\u4e8e\u538c\u6076\u90a3\u4e9b\u6f2b\u65e0\u8fb9\u9645\u7684\u63d0\u95ee\u3002 \u5982\u679c\u4f60\u660e\u786e\u8868\u8ff0\u9700\u8981\u56de\u7b54\u8005\u505a\u4ec0\u4e48\uff08\u5982\u63d0\u4f9b\u6307\u70b9\u3001\u53d1\u9001\u4e00\u6bb5\u4ee3\u7801\u3001\u68c0\u67e5\u4f60\u7684\u8865\u4e01\u3001\u6216\u662f\u5176\u4ed6\u7b49\u7b49\uff09\uff0c\u5c31\u6700\u6709\u53ef\u80fd\u5f97\u5230\u6709\u7528\u7684\u7b54\u6848\u3002\u56e0\u4e3a\u8fd9\u4f1a\u5b9a\u51fa\u4e00\u4e2a\u65f6\u95f4\u548c\u7cbe\u529b\u7684\u4e0a\u9650\uff0c\u4fbf\u4e8e\u56de\u7b54\u8005\u80fd\u96c6\u4e2d\u7cbe\u529b\u6765\u5e2e\u4f60\u3002\u8fd9\u4e48\u505a\u5f88\u68d2\u3002 \u8981\u7406\u89e3\u4e13\u5bb6\u4eec\u6240\u5904\u7684\u4e16\u754c\uff0c\u8bf7\u628a\u4e13\u4e1a\u6280\u80fd\u60f3\u50cf\u4e3a\u5145\u88d5\u7684\u8d44\u6e90\uff0c\u800c\u56de\u590d\u7684\u65f6\u95f4\u5219\u662f\u7a00\u7f3a\u7684\u8d44\u6e90\u3002\u4f60\u8981\u6c42\u4ed6\u4eec\u5949\u732e\u7684\u65f6\u95f4\u8d8a\u5c11\uff0c\u4f60\u8d8a\u6709\u53ef\u80fd\u4ece\u771f\u6b63\u4e13\u4e1a\u800c\u4e14\u5f88\u5fd9\u7684\u4e13\u5bb6\u90a3\u91cc\u5f97\u5230\u89e3\u7b54\u3002 \u6240\u4ee5\uff0c\u754c\u5b9a\u4e00\u4e0b\u4f60\u7684\u95ee\u9898\uff0c\u4f7f\u4e13\u5bb6\u82b1\u5728\u8fa8\u8bc6\u4f60\u7684\u95ee\u9898\u548c\u56de\u7b54\u6240\u9700\u8981\u4ed8\u51fa\u7684\u65f6\u95f4\u51cf\u5230\u6700\u5c11\uff0c\u8fd9\u6280\u5de7\u5bf9\u4f60\u6709\u7528\u7b54\u6848\u76f8\u5f53\u6709\u5e2e\u52a9 \u2014\u2014 \u4f46\u8fd9\u6280\u5de7\u901a\u5e38\u548c\u7b80\u5316\u95ee\u9898\u6709\u6240\u533a\u522b\u3002\u56e0\u6b64\uff0c\u95ee \u6211\u60f3\u66f4\u597d\u7684\u7406\u89e3 X\uff0c\u53ef\u5426\u6307\u70b9\u4e00\u4e0b\u54ea\u6709\u597d\u4e00\u70b9\u8bf4\u660e\uff1f \u901a\u5e38\u6bd4\u95ee \u4f60\u80fd\u89e3\u91ca\u4e00\u4e0b X \u5417\uff1f \u66f4\u597d\u3002\u5982\u679c\u4f60\u7684\u4ee3\u7801\u4e0d\u80fd\u8fd0\u4f5c\uff0c\u901a\u5e38\u8bf7\u522b\u4eba\u770b\u770b\u54ea\u91cc\u6709\u95ee\u9898\uff0c\u6bd4\u8981\u6c42\u522b\u4eba\u66ff\u4f60\u6539\u6b63\u8981\u660e\u667a\u5f97\u591a\u3002","title":"\u6e05\u695a\u660e\u786e\u7684\u8868\u8fbe\u4f60\u7684\u95ee\u9898\u4ee5\u53ca\u9700\u6c42"},{"location":"misc/how_to_ask_questions_the_smart_way/when_you_ask/#_19","text":"\u522b\u8981\u6c42\u4ed6\u4eba\u5e2e\u4f60\u8c03\u8bd5\u6709\u95ee\u9898\u7684\u4ee3\u7801\uff0c\u4e0d\u63d0\u793a\u4e00\u4e0b\u5e94\u8be5\u4ece\u4f55\u5165\u624b\u3002\u5f20\u8d34\u51e0\u767e\u884c\u7684\u4ee3\u7801\uff0c\u7136\u540e\u8bf4\u4e00\u58f0\uff1a \u5b83\u4e0d\u80fd\u5de5\u4f5c \u4f1a\u8ba9\u4f60\u5b8c\u5168\u88ab\u5ffd\u7565\u3002\u53ea\u8d34\u51e0\u5341\u884c\u4ee3\u7801\uff0c\u7136\u540e\u8bf4\u4e00\u53e5\uff1a \u5728\u7b2c\u4e03\u884c\u4ee5\u540e\uff0c\u6211\u671f\u5f85\u5b83\u663e\u793a <x>\uff0c\u4f46\u5b9e\u9645\u51fa\u73b0\u7684\u662f <y> \u6bd4\u8f83\u6709\u53ef\u80fd\u8ba9\u4f60\u5f97\u5230\u56de\u5e94\u3002 \u6700\u6709\u6548\u63cf\u8ff0\u7a0b\u5e8f\u95ee\u9898\u7684\u65b9\u6cd5\u662f\u63d0\u4f9b\u6700\u7cbe\u7b80\u7684 Bug \u5c55\u793a\u6d4b\u8bd5\u7528\u4f8b\uff08bug-demonstrating test case\uff09\u3002\u4ec0\u4e48\u662f\u6700\u7cbe\u7b80\u7684\u6d4b\u8bd5\u7528\u4f8b\uff1f\u90a3\u662f\u95ee\u9898\u7684\u7f29\u5f71\uff1b\u4e00\u5c0f\u4e2a\u7a0b\u5e8f\u7247\u6bb5\u80fd\u521a\u597d\u5c55\u793a\u51fa\u7a0b\u5e8f\u7684\u5f02\u5e38\u884c\u4e3a\uff0c\u800c\u4e0d\u5305\u542b\u5176\u4ed6\u4ee4\u4eba\u5206\u6563\u6ce8\u610f\u529b\u7684\u5185\u5bb9\u3002\u600e\u4e48\u5236\u4f5c\u6700\u7cbe\u7b80\u7684\u6d4b\u8bd5\u7528\u4f8b\uff1f\u5982\u679c\u4f60\u77e5\u9053\u54ea\u4e00\u884c\u6216\u54ea\u4e00\u6bb5\u4ee3\u7801\u4f1a\u9020\u6210\u5f02\u5e38\u7684\u884c\u4e3a\uff0c\u590d\u5236\u4e0b\u6765\u5e76\u52a0\u5165\u8db3\u591f\u91cd\u73b0\u8fd9\u4e2a\u72b6\u51b5\u7684\u4ee3\u7801\uff08\u4f8b\u5982\uff0c\u8db3\u4ee5\u8ba9\u8fd9\u6bb5\u4ee3\u7801\u80fd\u88ab\u7f16\u8bd1/\u76f4\u8bd1/\u88ab\u5e94\u7528\u7a0b\u5e8f\u5904\u7406\uff09\u3002\u5982\u679c\u4f60\u65e0\u6cd5\u5c06\u95ee\u9898\u7f29\u51cf\u5230\u4e00\u4e2a\u7279\u5b9a\u533a\u5757\uff0c\u5c31\u590d\u5236\u4e00\u4efd\u4ee3\u7801\u5e76\u79fb\u9664\u4e0d\u5f71\u54cd\u4ea7\u751f\u95ee\u9898\u884c\u4e3a\u7684\u90e8\u5206\u3002\u603b\u4e4b\uff0c\u6d4b\u8bd5\u7528\u4f8b\u8d8a\u5c0f\u8d8a\u597d\uff08\u67e5\u770b\u8bdd\u4e0d\u5728\u591a\u800c\u5728\u7cbe\u4e00\u8282\uff09\u3002 \u4e00\u822c\u800c\u8a00\uff0c\u8981\u5f97\u5230\u4e00\u6bb5\u76f8\u5f53\u7cbe\u7b80\u7684\u6d4b\u8bd5\u7528\u4f8b\u5e76\u4e0d\u592a\u5bb9\u6613\uff0c\u4f46\u6c38\u8fdc\u5148\u5c1d\u8bd5\u8fd9\u6837\u505a\u7684\u662f\u79cd\u597d\u4e60\u60ef\u3002\u8fd9\u79cd\u65b9\u5f0f\u53ef\u4ee5\u5e2e\u52a9\u4f60\u4e86\u89e3\u5982\u4f55\u81ea\u884c\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898 \u2014\u2014 \u800c\u4e14\u5373\u4f7f\u4f60\u7684\u5c1d\u8bd5\u4e0d\u6210\u529f\uff0c\u9ed1\u5ba2\u4eec\u4e5f\u4f1a\u770b\u5230\u4f60\u5728\u5c1d\u8bd5\u53d6\u5f97\u7b54\u6848\u7684\u8fc7\u7a0b\u4e2d\u4ed8\u51fa\u4e86\u52aa\u529b\uff0c\u8fd9\u53ef\u4ee5\u8ba9\u4ed6\u4eec\u66f4\u613f\u610f\u4e0e\u4f60\u5408\u4f5c\u3002 \u5982\u679c\u4f60\u53ea\u662f\u60f3\u8ba9\u522b\u4eba\u5e2e\u5fd9\u5ba1\u67e5\uff08Review\uff09\u4e00\u4e0b\u4ee3\u7801\uff0c\u5728\u4fe1\u7684\u5f00\u5934\u5c31\u8981\u8bf4\u51fa\u6765\uff0c\u5e76\u4e14\u4e00\u5b9a\u8981\u63d0\u5230\u4f60\u8ba4\u4e3a\u54ea\u4e00\u90e8\u5206\u7279\u522b\u9700\u8981\u5173\u6ce8\u4ee5\u53ca\u4e3a\u4ec0\u4e48\u3002","title":"\u8be2\u95ee\u6709\u5173\u4ee3\u7801\u7684\u95ee\u9898\u65f6"},{"location":"misc/how_to_ask_questions_the_smart_way/when_you_ask/#_20","text":"\u9ed1\u5ba2\u4eec\u5f88\u64c5\u957f\u5206\u8fa8\u54ea\u4e9b\u95ee\u9898\u662f\u5bb6\u5ead\u4f5c\u4e1a\u5f0f\u7684\u95ee\u9898\uff1b\u56e0\u4e3a\u6211\u4eec\u4e2d\u7684\u5927\u591a\u6570\u90fd\u66fe\u81ea\u5df1\u89e3\u51b3\u8fd9\u7c7b\u95ee\u9898\u3002\u540c\u6837\uff0c\u8fd9\u4e9b\u95ee\u9898\u5f97\u7531\u4f60\u6765\u641e\u5b9a\uff0c\u4f60\u4f1a\u4ece\u4e2d\u5b66\u5230\u4e1c\u897f\u3002\u4f60\u53ef\u4ee5\u8981\u6c42\u7ed9\u70b9\u63d0\u793a\uff0c\u4f46\u522b\u8981\u6c42\u5f97\u5230\u5b8c\u6574\u7684\u89e3\u51b3\u65b9\u6848\u3002 \u5982\u679c\u4f60\u6000\u7591\u81ea\u5df1\u78b0\u5230\u4e86\u4e00\u4e2a\u5bb6\u5ead\u4f5c\u4e1a\u5f0f\u7684\u95ee\u9898\uff0c\u4f46\u4ecd\u7136\u65e0\u6cd5\u89e3\u51b3\uff0c\u8bd5\u8bd5\u5728\u4f7f\u7528\u8005\u7fa4\u7ec4\uff0c\u8bba\u575b\u6216\uff08\u6700\u540e\u4e00\u62db\uff09\u5728\u9879\u76ee\u7684\u4f7f\u7528\u8005\u90ae\u4ef6\u5217\u8868\u6216\u8bba\u575b\u4e2d\u63d0\u95ee\u3002\u5c3d\u7ba1\u9ed1\u5ba2\u4eec\u4f1a\u770b\u51fa\u6765\uff0c\u4f46\u4e00\u4e9b\u6709\u7ecf\u9a8c\u7684\u4f7f\u7528\u8005\u4e5f\u8bb8\u4ecd\u4f1a\u7ed9\u4f60\u4e00\u4e9b\u63d0\u793a\u3002","title":"\u522b\u628a\u81ea\u5df1\u5bb6\u5ead\u4f5c\u4e1a\u7684\u95ee\u9898\u8d34\u4e0a\u6765"},{"location":"misc/how_to_ask_questions_the_smart_way/when_you_ask/#_21","text":"\u907f\u514d\u7528\u65e0\u610f\u4e49\u7684\u8bdd\u7ed3\u675f\u63d0\u95ee\uff0c\u4f8b\u5982 \u6709\u4eba\u80fd\u5e2e\u6211\u5417\uff1f \u6216\u8005 \u8fd9\u6709\u7b54\u6848\u5417\uff1f \u3002 \u9996\u5148\uff1a\u5982\u679c\u4f60\u5bf9\u95ee\u9898\u7684\u63cf\u8ff0\u4e0d\u662f\u5f88\u597d\uff0c\u8fd9\u6837\u95ee\u66f4\u662f\u753b\u86c7\u6dfb\u8db3\u3002 \u5176\u6b21\uff1a\u7531\u4e8e\u8fd9\u6837\u95ee\u662f\u753b\u86c7\u6dfb\u8db3\uff0c\u9ed1\u5ba2\u4eec\u4f1a\u5f88\u538c\u70e6\u4f60 \u2014\u2014 \u800c\u4e14\u901a\u5e38\u4f1a\u7528\u903b\u8f91\u4e0a\u6b63\u786e\uff0c\u4f46\u6beb\u65e0\u610f\u4e49\u7684\u56de\u7b54\u6765\u8868\u793a\u4ed6\u4eec\u7684\u8511\u89c6\uff0c \u4f8b\u5982\uff1a \u6ca1\u9519\uff0c\u6709\u4eba\u80fd\u5e2e\u4f60 \u6216\u8005 \u4e0d\uff0c\u6ca1\u7b54\u6848 \u3002 \u4e00\u822c\u6765\u8bf4\uff0c\u907f\u514d\u7528 \u662f\u6216\u5426 \u3001 \u5bf9\u6216\u9519 \u3001 \u6709\u6216\u6ca1\u6709 \u7c7b\u578b\u7684\u95ee\u53e5\uff0c\u9664\u975e\u4f60\u60f3\u5f97\u5230\u662f\u6216\u5426\u7c7b\u578b\u7684\u56de\u7b54\u3002","title":"\u53bb\u6389\u65e0\u610f\u4e49\u7684\u63d0\u95ee\u53e5"},{"location":"misc/how_to_ask_questions_the_smart_way/when_you_ask/#_22","text":"\u8fd9\u662f\u4f60\u7684\u95ee\u9898\uff0c\u4e0d\u662f\u6211\u4eec\u7684\u3002\u5ba3\u79f0 \u7d27\u6025 \u6781\u6709\u53ef\u80fd\u4e8b\u4e0e\u613f\u8fdd\uff1a\u5927\u591a\u6570\u9ed1\u5ba2\u4f1a\u76f4\u63a5\u5220\u9664\u65e0\u793c\u548c\u81ea\u79c1\u5730\u4f01\u56fe\u5373\u65f6\u5f15\u8d77\u5173\u6ce8\u7684\u95ee\u9898\u3002\u66f4\u4e25\u91cd\u7684\u662f\uff0c \u7d27\u6025 \u8fd9\u4e2a\u5b57\uff08\u6216\u662f\u5176\u4ed6\u4f01\u56fe\u5f15\u8d77\u5173\u6ce8\u7684\u6807\u9898\uff09\u901a\u5e38\u4f1a\u88ab\u5783\u573e\u4fe1\u8fc7\u6ee4\u5668\u8fc7\u6ee4\u6389 \u2014\u2014 \u4f60\u5e0c\u671b\u80fd\u770b\u5230\u4f60\u95ee\u9898\u7684\u4eba\u53ef\u80fd\u6c38\u8fdc\u4e5f\u770b\u4e0d\u5230\u3002 \u6709\u534a\u4e2a\u4f8b\u5916\u7684\u60c5\u51b5\u662f\uff0c\u5982\u679c\u4f60\u662f\u5728\u4e00\u4e9b\u5f88\u9ad8\u8c03\uff0c\u4f1a\u4f7f\u9ed1\u5ba2\u4eec\u5174\u594b\u7684\u5730\u65b9\uff0c\u4e5f\u8bb8\u503c\u5f97\u8fd9\u6837\u53bb\u505a\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5982\u679c\u4f60\u6709\u65f6\u95f4\u538b\u529b\uff0c\u4e5f\u5f88\u6709\u793c\u8c8c\u5730\u63d0\u5230\u8fd9\u70b9\uff0c\u4eba\u4eec\u4e5f\u8bb8\u4f1a\u6709\u5174\u8da3\u56de\u7b54\u5feb\u4e00\u70b9\u3002 \u5f53\u7136\uff0c\u8fd9\u98ce\u9669\u5f88\u5927\uff0c\u56e0\u4e3a\u9ed1\u5ba2\u4eec\u5174\u594b\u7684\u70b9\u591a\u534a\u4e0e\u4f60\u7684\u4e0d\u540c\u3002\u8b6c\u5982\u4ece NASA \u56fd\u9645\u7a7a\u95f4\u7ad9\uff08International Space Station\uff09\u53d1\u8fd9\u6837\u7684\u6807\u9898\u6ca1\u6709\u95ee\u9898\uff0c\u4f46\u7528\u81ea\u6211\u611f\u89c9\u826f\u597d\u7684\u6148\u5584\u884c\u4e3a\u6216\u653f\u6cbb\u539f\u56e0\u53d1\u80af\u5b9a\u4e0d\u884c\u3002\u4e8b\u5b9e\u4e0a\uff0c\u5f20\u8d34\u8bf8\u5982 \u7d27\u6025\uff1a\u5e2e\u6211\u6551\u6551\u8fd9\u4e2a\u6bdb\u7ed2\u7ed2\u7684\u5c0f\u6d77\u8c79\uff01 \u80af\u5b9a\u8ba9\u4f60\u88ab\u9ed1\u5ba2\u5ffd\u7565\u6216\u60f9\u607c\u4ed6\u4eec\uff0c\u5373\u4f7f\u4ed6\u4eec\u8ba4\u4e3a\u6bdb\u7ed2\u7ed2\u7684\u5c0f\u6d77\u8c79\u5f88\u91cd\u8981\u3002 \u5982\u679c\u4f60\u89c9\u5f97\u8fd9\u70b9\u5f88\u4e0d\u53ef\u601d\u8bae\uff0c\u6700\u597d\u518d\u628a\u8fd9\u4efd\u6307\u5357\u5269\u4e0b\u7684\u5185\u5bb9\u591a\u8bfb\u51e0\u904d\uff0c\u76f4\u5230\u4f60\u5f04\u61c2\u4e86\u518d\u53d1\u6587\u3002","title":"\u5373\u4f7f\u4f60\u5f88\u6025\u4e5f\u4e0d\u8981\u5728\u6807\u9898\u5199\u7d27\u6025"},{"location":"misc/how_to_ask_questions_the_smart_way/when_you_ask/#_23","text":"\u5f6c\u5f6c\u6709\u793c\uff0c\u591a\u7528 \u8bf7 \u548c \u8c22\u8c22\u60a8\u7684\u5173\u6ce8 \uff0c\u6216 \u8c22\u8c22\u4f60\u7684\u5173\u7167 \u3002\u8ba9\u5927\u5bb6\u90fd\u77e5\u9053\u4f60\u5bf9\u4ed6\u4eec\u82b1\u65f6\u95f4\u514d\u8d39\u63d0\u4f9b\u5e2e\u52a9\u5fc3\u5b58\u611f\u6fc0\u3002 \u5766\u767d\u8bf4\uff0c\u8fd9\u4e00\u70b9\u5e76\u6ca1\u6709\u6bd4\u6e05\u6670\u3001\u6b63\u786e\u3001\u7cbe\u51c6\u5e76\u5408\u6cd5\u8bed\u6cd5\u548c\u907f\u514d\u4f7f\u7528\u4e13\u7528\u683c\u5f0f\u91cd\u8981\uff08\u4e5f\u4e0d\u80fd\u53d6\u800c\u4ee3\u4e4b\uff09\u3002\u9ed1\u5ba2\u4eec\u4e00\u822c\u5b81\u53ef\u8bfb\u6709\u70b9\u5510\u7a81\u4f46\u6280\u672f\u4e0a\u9c9c\u660e\u7684 Bug \u62a5\u544a\uff0c\u800c\u4e0d\u662f\u90a3\u79cd\u6709\u793c\u4f46\u542b\u7cca\u7684\u62a5\u544a\u3002\uff08\u5982\u679c\u8fd9\u70b9\u8ba9\u4f60\u4e0d\u89e3\uff0c\u8bb0\u4f4f\u6211\u4eec\u662f\u6309\u95ee\u9898\u80fd\u6559\u7ed9\u6211\u4eec\u4ec0\u4e48\u6765\u8bc4\u4ef7\u95ee\u9898\u7684\u4ef7\u503c\u7684\uff09 \u7136\u800c\uff0c\u5982\u679c\u4f60\u6709\u4e00\u4e32\u7684\u95ee\u9898\u5f85\u89e3\u51b3\uff0c\u5ba2\u6c14\u4e00\u70b9\u80af\u5b9a\u4f1a\u589e\u52a0\u4f60\u5f97\u5230\u6709\u7528\u56de\u5e94\u7684\u673a\u4f1a\u3002 \uff08\u6211\u4eec\u6ce8\u610f\u5230\uff0c\u81ea\u4ece\u672c\u6307\u5357\u53d1\u5e03\u540e\uff0c\u4ece\u8d44\u6df1\u9ed1\u5ba2\u90a3\u91cc\u5f97\u5230\u7684\u552f\u4e00\u4e25\u91cd\u7f3a\u9677\u53cd\u9988\uff0c\u5c31\u662f\u5bf9\u9884\u5148\u9053\u8c22\u8fd9\u4e00\u6761\u3002\u4e00\u4e9b\u9ed1\u5ba2\u89c9\u5f97\u5148\u8c22\u4e86\u610f\u5473\u7740\u4e8b\u540e\u5c31\u4e0d\u7528\u518d\u611f\u8c22\u4efb\u4f55\u4eba\u7684\u6697\u793a\u3002\u6211\u4eec\u7684\u5efa\u8bae\u662f\u8981\u4e48\u5148\u8bf4 \u5148\u8c22\u4e86 \uff0c\u7136\u540e\u4e8b\u540e\u518d\u5bf9\u56de\u590d\u8005\u8868\u793a\u611f\u8c22\uff0c\u6216\u8005\u6362\u79cd\u65b9\u5f0f\u8868\u8fbe\u611f\u6fc0\uff0c\u8b6c\u5982\u7528 \u8c22\u8c22\u4f60\u7684\u5173\u6ce8 \u6216 \u8c22\u8c22\u4f60\u7684\u5173\u7167 \u3002\uff09","title":"\u793c\u591a\u4eba\u4e0d\u602a\uff0c\u800c\u4e14\u6709\u65f6\u8fd8\u5f88\u6709\u5e2e\u52a9"},{"location":"misc/how_to_ask_questions_the_smart_way/when_you_ask/#_24","text":"\u95ee\u9898\u89e3\u51b3\u540e\uff0c\u5411\u6240\u6709\u5e2e\u52a9\u8fc7\u4f60\u7684\u4eba\u53d1\u4e2a\u8bf4\u660e\uff0c\u8ba9\u4ed6\u4eec\u77e5\u9053\u95ee\u9898\u662f\u600e\u6837\u89e3\u51b3\u7684\uff0c\u5e76\u518d\u4e00\u6b21\u5411\u4ed6\u4eec\u8868\u793a\u611f\u8c22\u3002\u5982\u679c\u95ee\u9898\u5728\u65b0\u95fb\u7ec4\u6216\u8005\u90ae\u4ef6\u5217\u8868\u4e2d\u5f15\u8d77\u4e86\u5e7f\u6cdb\u5173\u6ce8\uff0c\u5e94\u8be5\u5728\u90a3\u91cc\u8d34\u4e00\u4e2a\u8bf4\u660e\u6bd4\u8f83\u6070\u5f53\u3002 \u6700\u7406\u60f3\u7684\u65b9\u5f0f\u662f\u5411\u6700\u521d\u63d0\u95ee\u7684\u8bdd\u9898\u56de\u590d\u6b64\u6d88\u606f\uff0c\u5e76\u5728\u6807\u9898\u4e2d\u5305\u542b \u5df2\u4fee\u6b63 \uff0c \u5df2\u89e3\u51b3 \u6216\u5176\u5b83\u540c\u7b49\u542b\u4e49\u7684\u660e\u663e\u6807\u8bb0\u3002\u5728\u4eba\u6765\u4eba\u5f80\u7684\u90ae\u4ef6\u5217\u8868\u91cc\uff0c\u4e00\u4e2a\u770b\u89c1\u8ba8\u8bba\u4e32 \u95ee\u9898 X \u548c \u95ee\u9898 X - \u5df2\u89e3\u51b3 \u7684\u6f5c\u5728\u56de\u590d\u8005\u5c31\u660e\u767d\u4e0d\u7528\u518d\u6d6a\u8d39\u65f6\u95f4\u4e86\uff08\u9664\u975e\u4ed6\u4e2a\u4eba\u89c9\u5f97\u95ee\u9898 X\u7684\u6709\u8da3\uff09\uff0c\u56e0\u6b64\u53ef\u4ee5\u5229\u7528\u6b64\u65f6\u95f4\u53bb\u89e3\u51b3\u5176\u5b83\u95ee\u9898\u3002 \u8865\u5145\u8bf4\u660e\u4e0d\u5fc5\u5f88\u957f\u6216\u662f\u5f88\u6df1\u5165\uff1b\u7b80\u5355\u7684\u4e00\u53e5 \u4f60\u597d\uff0c\u539f\u6765\u662f\u7f51\u7ebf\u51fa\u4e86\u95ee\u9898\uff01\u8c22\u8c22\u5927\u5bb6 \u2013 Bill \u6bd4\u4ec0\u4e48\u4e5f\u4e0d\u8bf4\u8981\u6765\u7684\u597d\u3002\u4e8b\u5b9e\u4e0a\uff0c\u9664\u975e\u7ed3\u8bba\u771f\u7684\u5f88\u6709\u6280\u672f\u542b\u91cf\uff0c\u5426\u5219\u7b80\u77ed\u53ef\u7231\u7684\u5c0f\u7ed3\u6bd4\u957f\u7bc7\u5927\u8bba\u66f4\u597d\u3002\u8bf4\u660e\u95ee\u9898\u662f\u600e\u6837\u89e3\u51b3\u7684\uff0c\u4f46\u5927\u53ef\u4e0d\u5fc5\u5c06\u89e3\u51b3\u95ee\u9898\u7684\u8fc7\u7a0b\u590d\u8ff0\u4e00\u904d\u3002 \u5bf9\u4e8e\u6709\u6df1\u5ea6\u7684\u95ee\u9898\uff0c\u5f20\u8d34\u8c03\u8bd5\u8bb0\u5f55\u7684\u6458\u8981\u662f\u6709\u5e2e\u52a9\u7684\u3002\u63cf\u8ff0\u95ee\u9898\u7684\u6700\u7ec8\u72b6\u6001\uff0c\u8bf4\u660e\u662f\u4ec0\u4e48\u89e3\u51b3\u4e86\u95ee\u9898\uff0c\u5728\u6b64\u4e4b\u540e\u624d\u6307\u660e\u53ef\u4ee5\u907f\u514d\u7684\u76f2\u70b9\u3002\u907f\u514d\u76f2\u70b9\u7684\u90e8\u5206\u5e94\u653e\u5728\u6b63\u786e\u7684\u89e3\u51b3\u65b9\u6848\u548c\u5176\u5b83\u603b\u7ed3\u6750\u6599\u4e4b\u540e\uff0c\u800c\u4e0d\u8981\u5c06\u6b64\u4fe1\u606f\u641e\u6210\u4fa6\u63a2\u63a8\u7406\u5c0f\u8bf4\u3002\u5217\u51fa\u90a3\u4e9b\u5e2e\u52a9\u8fc7\u4f60\u7684\u540d\u5b57\uff0c\u4f1a\u8ba9\u4f60\u4ea4\u5230\u66f4\u591a\u670b\u53cb\u3002 \u9664\u4e86\u6709\u793c\u8c8c\u548c\u6709\u5185\u6db5\u4ee5\u5916\uff0c\u8fd9\u79cd\u7c7b\u578b\u7684\u8865\u5145\u4e5f\u6709\u52a9\u4e8e\u4ed6\u4eba\u5728\u90ae\u4ef6\u5217\u8868/\u65b0\u95fb\u7fa4\u7ec4/\u8bba\u575b\u4e2d\u641c\u7d22\u5230\u771f\u6b63\u89e3\u51b3\u4f60\u95ee\u9898\u7684\u65b9\u6848\uff0c\u8ba9\u4ed6\u4eec\u4e5f\u4ece\u4e2d\u53d7\u76ca\u3002 \u81f3\u5c11\uff0c\u8fd9\u79cd\u8865\u5145\u6709\u52a9\u4e8e\u8ba9\u6bcf\u4f4d\u53c2\u4e0e\u534f\u52a9\u7684\u4eba\u56e0\u95ee\u9898\u7684\u89e3\u51b3\u800c\u4ece\u4e2d\u5f97\u5230\u6ee1\u8db3\u611f\u3002\u5982\u679c\u4f60\u81ea\u5df1\u4e0d\u662f\u6280\u672f\u4e13\u5bb6\u6216\u8005\u9ed1\u5ba2\uff0c\u90a3\u5c31\u76f8\u4fe1\u6211\u4eec\uff0c\u8fd9\u79cd\u611f\u89c9\u5bf9\u4e8e\u90a3\u4e9b\u4f60\u5411\u4ed6\u4eec\u6c42\u52a9\u7684\u5927\u5e08\u6216\u8005\u4e13\u5bb6\u800c\u8a00\uff0c\u662f\u975e\u5e38\u91cd\u8981\u7684\u3002\u95ee\u9898\u60ac\u800c\u672a\u51b3\u4f1a\u8ba9\u4eba\u7070\u5fc3\uff1b\u9ed1\u5ba2\u4eec\u6e34\u671b\u770b\u5230\u95ee\u9898\u88ab\u89e3\u51b3\u3002\u597d\u4eba\u6709\u597d\u62a5\uff0c\u6ee1\u8db3\u4ed6\u4eec\u7684\u6e34\u671b\uff0c\u4f60\u4f1a\u5728\u4e0b\u6b21\u63d0\u95ee\u65f6\u5c1d\u5230\u751c\u5934\u3002 \u601d\u8003\u4e00\u4e0b\u600e\u6837\u624d\u80fd\u907f\u514d\u4ed6\u4eba\u5c06\u6765\u4e5f\u9047\u5230\u7c7b\u4f3c\u7684\u95ee\u9898\uff0c\u81ea\u95ee\u5199\u4e00\u4efd\u6587\u4ef6\u6216\u52a0\u4e2a\u5e38\u89c1\u95ee\u9898\uff08FAQ\uff09\u4f1a\u4e0d\u4f1a\u6709\u5e2e\u52a9\u3002\u5982\u679c\u662f\u7684\u8bdd\u5c31\u5c06\u5b83\u4eec\u53d1\u7ed9\u7ef4\u62a4\u8005\u3002 \u5728\u9ed1\u5ba2\u4e2d\uff0c\u8fd9\u79cd\u826f\u597d\u7684\u540e\u7ee7\u884c\u52a8\u5b9e\u9645\u4e0a\u6bd4\u4f20\u7edf\u7684\u793c\u8282\u66f4\u4e3a\u91cd\u8981\uff0c\u4e5f\u662f\u4f60\u5982\u4f55\u900f\u8fc7\u5584\u5f85\u4ed6\u4eba\u800c\u8d62\u5f97\u58f0\u8a89\u7684\u65b9\u5f0f\uff0c\u8fd9\u662f\u975e\u5e38\u6709\u4ef7\u503c\u7684\u8d44\u4ea7\u3002","title":"\u95ee\u9898\u89e3\u51b3\u540e\uff0c\u52a0\u4e2a\u7b80\u77ed\u7684\u8865\u5145\u8bf4\u660e"},{"location":"misc/wsl/install/","text":"\u7a81\u7136\u95f4\u53d1\u73b0\u5b50\u7cfb\u7edf\u8fd9\u79cd\u65b0\u9c9c\u4e1c\u897f\uff0c\u6545\u5199\u7bc7\u7b14\u8bb0\u6574\u7406\u4e00\u4e0b \u57fa\u4e8ewindows10 1.\u542f\u52a8Windows Subsystem for Linux \u5f00\u59cbWSL\u4e4b\u65c5\u7684\u7b2c\u4e00\u6b65\u662f \u542f\u52a8Windows Subsystem for Linux\u529f\u80fd \uff0c\u6709\u4e24\u79cd\u65b9\u6cd5\u5b9e\u73b0\uff1a (1)\u901a\u8fc7\u547d\u4ee4\u884c \u4ee5 \u7ba1\u7406\u5458 \u8eab\u4efd\u6253\u5f00 PowerShell \u3002\u53f3\u952e\u5355\u51fb\u5c4f\u5e55\u5de6\u4e0b\u89d2 \u201c\u5f00\u59cb\u201d \u83dc\u5355\uff0c\u627e\u5230\u201cWindows PowerShell(\u7ba1\u7406\u5458)\u201d\u5e76\u6253\u5f00 \u590d\u5236\u4ee5\u4e0b\u547d\u4ee4\u5e76\u8fd0\u884c 1 Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Windows-Subsystem-Linux \u5b89\u88c5\u5b8c\u6210\u540e\u91cd\u542f\u7535\u8111~ (2)\u901a\u8fc7\u63a7\u5236\u9762\u677f \u6253\u5f00\u5c4f\u5e55\u5de6\u4e0b\u89d2\u201cCortana\u641c\u7d22\u6846\u201d\u8f93\u5165\u201ccontrol panel\u201d\u641c\u7d22\u5e76\u6253\u5f00\u641c\u7d22\u7ed3\u679c\u4e2d\u7684\u201c\u63a7\u5236\u9762\u677f\u201d \u627e\u5230\u542f\u7528\u6216\u5173\u95edWindows\u529f\u80fd\uff0c\u5982\u56fe\u6240\u793a\uff0c\u6253\u5f00\u201c\u7a0b\u5e8f\u201d\u2014\u2014\u201c\u542f\u7528\u6216\u5173\u95edWindows\u529f\u80fd\u201d\uff0c\u627e\u5230\u5e76\u52fe\u9009\u201c\u9002\u7528\u4e8eLinux\u7684Windows\u5b50\u7cfb\u7edf\u201d\uff0c\u70b9\u51fb\u201c\u786e\u5b9a\u201d\u3002 \u5b89\u88c5\u5b8c\u6210\u540e\u91cd\u542f\u7535\u8111~ 2.\u901a\u8fc7\u5e94\u7528\u5546\u5e97\u5b89\u88c5Linux\u53d1\u884c\u7248 \u6253\u5f00Win10 \u5e94\u7528\u5546\u5e97 \u641c\u7d22\u4f60\u559c\u6b22\u7684Linux\u53d1\u884c\u7248\u5e76\u5b89\u88c5\u3002\u76ee\u524d\uff0cWSL\u652f\u6301 Ubuntu \uff0c Kali Linux \uff0c GNU \uff0c OpenSUSE \u7b49\u53d1\u884c\u7248\u3002 \u4ee5\u5b89\u88c5 Ubuntu \u4e3a\u4f8b\uff0c\u5b89\u88c5\u5b8c\u6210\u540e\u641c\u7d22\u5e76\u6253\u5f00 Ubuntu \u6267\u884c\u540e\u7eed\u5b89\u88c5\u3002 \u5b89\u88c5\u5b8c\u6210\u540e\u6309\u63d0\u793a\u8f93\u5165\u9ed8\u8ba4\u7528\u6237\u540d\u3001\u5bc6\u7801\u3002 \u5728\u8fd9\u91cc\u65f6\uff0c\u5728\u8f93\u5165\u7528\u6237\u540d\u3001\u5bc6\u7801\u65f6\u6211\u5c06\u5b89\u88c5\u7a97\u53e3\u76f4\u63a5\u5173\u95ed(\u624d\u4e0d\u4f1a\u8bf4\u662f\u56e0\u4e3a\u70b9\u9519\u4e86\u5462\uff01)\uff0c\u7ed3\u679c\uff0c\u518d\u6b21\u6253\u5f00\u5c31\u76f4\u63a5\u662froot\uff0c\u7b97\u662f\u8bef\u6253\u8bef\u649e\uff1f\u53cd\u6b63\u4ee5\u540e\u6253\u5f00\u90fd\u662froot\u6743\u9650\uff0c\u6709\u3001\u5f3a0.0 \u800c\u5728\u8fd9\u91cc\u4e5f\u51fa\u73b0\u4e86\u4e00\u4e2a\u95ee\u9898\uff0c\u6211\u60f3\u88c5\u7684\u4e1c\u897f\u592a\u591a\u4e86\uff0cC\u76d8\u4e0d\u591f\u7528\u548b\u529e\uff1f\u8f6f\u94fe\u63a5\u5230\u975e\u7cfb\u7edf\u76d8\u5457\uff01","title":"\u5b89\u88c5"},{"location":"misc/wsl/install/#1windows-subsystem-for-linux","text":"\u5f00\u59cbWSL\u4e4b\u65c5\u7684\u7b2c\u4e00\u6b65\u662f \u542f\u52a8Windows Subsystem for Linux\u529f\u80fd \uff0c\u6709\u4e24\u79cd\u65b9\u6cd5\u5b9e\u73b0\uff1a","title":"1.\u542f\u52a8Windows Subsystem for Linux"},{"location":"misc/wsl/install/#1","text":"\u4ee5 \u7ba1\u7406\u5458 \u8eab\u4efd\u6253\u5f00 PowerShell \u3002\u53f3\u952e\u5355\u51fb\u5c4f\u5e55\u5de6\u4e0b\u89d2 \u201c\u5f00\u59cb\u201d \u83dc\u5355\uff0c\u627e\u5230\u201cWindows PowerShell(\u7ba1\u7406\u5458)\u201d\u5e76\u6253\u5f00 \u590d\u5236\u4ee5\u4e0b\u547d\u4ee4\u5e76\u8fd0\u884c 1 Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Windows-Subsystem-Linux \u5b89\u88c5\u5b8c\u6210\u540e\u91cd\u542f\u7535\u8111~","title":"(1)\u901a\u8fc7\u547d\u4ee4\u884c"},{"location":"misc/wsl/install/#2","text":"\u6253\u5f00\u5c4f\u5e55\u5de6\u4e0b\u89d2\u201cCortana\u641c\u7d22\u6846\u201d\u8f93\u5165\u201ccontrol panel\u201d\u641c\u7d22\u5e76\u6253\u5f00\u641c\u7d22\u7ed3\u679c\u4e2d\u7684\u201c\u63a7\u5236\u9762\u677f\u201d \u627e\u5230\u542f\u7528\u6216\u5173\u95edWindows\u529f\u80fd\uff0c\u5982\u56fe\u6240\u793a\uff0c\u6253\u5f00\u201c\u7a0b\u5e8f\u201d\u2014\u2014\u201c\u542f\u7528\u6216\u5173\u95edWindows\u529f\u80fd\u201d\uff0c\u627e\u5230\u5e76\u52fe\u9009\u201c\u9002\u7528\u4e8eLinux\u7684Windows\u5b50\u7cfb\u7edf\u201d\uff0c\u70b9\u51fb\u201c\u786e\u5b9a\u201d\u3002 \u5b89\u88c5\u5b8c\u6210\u540e\u91cd\u542f\u7535\u8111~","title":"(2)\u901a\u8fc7\u63a7\u5236\u9762\u677f"},{"location":"misc/wsl/install/#2linux","text":"\u6253\u5f00Win10 \u5e94\u7528\u5546\u5e97 \u641c\u7d22\u4f60\u559c\u6b22\u7684Linux\u53d1\u884c\u7248\u5e76\u5b89\u88c5\u3002\u76ee\u524d\uff0cWSL\u652f\u6301 Ubuntu \uff0c Kali Linux \uff0c GNU \uff0c OpenSUSE \u7b49\u53d1\u884c\u7248\u3002 \u4ee5\u5b89\u88c5 Ubuntu \u4e3a\u4f8b\uff0c\u5b89\u88c5\u5b8c\u6210\u540e\u641c\u7d22\u5e76\u6253\u5f00 Ubuntu \u6267\u884c\u540e\u7eed\u5b89\u88c5\u3002 \u5b89\u88c5\u5b8c\u6210\u540e\u6309\u63d0\u793a\u8f93\u5165\u9ed8\u8ba4\u7528\u6237\u540d\u3001\u5bc6\u7801\u3002 \u5728\u8fd9\u91cc\u65f6\uff0c\u5728\u8f93\u5165\u7528\u6237\u540d\u3001\u5bc6\u7801\u65f6\u6211\u5c06\u5b89\u88c5\u7a97\u53e3\u76f4\u63a5\u5173\u95ed(\u624d\u4e0d\u4f1a\u8bf4\u662f\u56e0\u4e3a\u70b9\u9519\u4e86\u5462\uff01)\uff0c\u7ed3\u679c\uff0c\u518d\u6b21\u6253\u5f00\u5c31\u76f4\u63a5\u662froot\uff0c\u7b97\u662f\u8bef\u6253\u8bef\u649e\uff1f\u53cd\u6b63\u4ee5\u540e\u6253\u5f00\u90fd\u662froot\u6743\u9650\uff0c\u6709\u3001\u5f3a0.0 \u800c\u5728\u8fd9\u91cc\u4e5f\u51fa\u73b0\u4e86\u4e00\u4e2a\u95ee\u9898\uff0c\u6211\u60f3\u88c5\u7684\u4e1c\u897f\u592a\u591a\u4e86\uff0cC\u76d8\u4e0d\u591f\u7528\u548b\u529e\uff1f\u8f6f\u94fe\u63a5\u5230\u975e\u7cfb\u7edf\u76d8\u5457\uff01","title":"2.\u901a\u8fc7\u5e94\u7528\u5546\u5e97\u5b89\u88c5Linux\u53d1\u884c\u7248"},{"location":"misc/wsl/mklink/","text":"mklink : \u672c\u8d28\u4e0a\u662f\u4e00\u4e2a\u521b\u5efa\u94fe\u63a5\u7684\u5de5\u5177\uff0c\u8fd9\u91cc\u4f7f\u7528mklink \u6b3a\u9a97\u7cfb\u7edf\uff0c\u4f7f\u7cfb\u7edf\u8bef\u4ee5\u4e3a\u8fd8\u662f\u5b89\u88c5\u5728\u4e86C\u76d8 \u8fc1\u79fb 1.\u5b9a\u4f4dLinux\u5b50\u7cfb\u7edf\u7684\u6587\u4ef6\u7cfb\u7edf\u4f4d\u7f6e \u6b63\u5e38\u662f\uff1a C:\\Users\\xxxx\\AppData\\Local\\Packages\\CanonicalGroupLimited.UbuntuonWindows (_xxxxxxx)(xxxxx\u53ef\u80fd\u6709\u4e5f\u53ef\u80fd\u6ca1\u6709\uff0c\u53cd\u6b63\u6211\u662f\u6709(79rhkp1fndgsc)) \u76f4\u63a5\u7c97\u66b4\u7684\u65b9\u6cd5\u7684\u662f\uff1a\u5148\u88c5\u4e00\u904dLinux\u5b50\u7cfb\u7edf\uff0c\u5728 C:\\Users\\xxxx\\AppData\\Local\\Packages\\ \u4e0b\u67e5\u770b\u5e26\u6709\u7c7b\u4f3c CanonicalGroupLimited.UbuntuonWindows \u5b57\u773c\u7684\u65b0\u6587\u4ef6\u5939\uff0c\u8bb0\u4e0b\u5b83\u7684\u540d\u5b57 2.\u5f00\u59cb\u8fc1\u79fb (1)\u5148\u5378\u8f7dLinux\u5b50\u7cfb\u7edf \u3002 \u5378\u8f7d\u7684\u539f\u56e0\u5728\u4e8eLinux\u5b50\u7cfb\u7edf\u4e0b\u7684\u6587\u4ef6\u7cfb\u7edf\u7684\u6743\u9650\u66f4\u6539\u5341\u5206\u590d\u6742\uff0c\u8fd9\u91cc\u9762\u7684\u4e00\u4e9b\u6587\u4ef6\u4e0d\u5c5e\u4e8eWindows\u4e0b\u7684\u7ba1\u7406\u5458\u7528\u6237\u6240\u6709\uff0c\u4e5f\u4e0d\u5c5e\u4e8e\u4f60\u7684\u7528\u6237\uff0c\u5b83\u5c31\u662fLinux\u4e0b\u7528\u6237\u6240\u6709\u7684\uff0c\u4f7f\u7528\u4e00\u822c\u7684\u4fee\u6539\u6743\u9650\u6587\u4ef6\u65b9\u6cd5\u5f88\u5bb9\u6613\u51fa\u95ee\u9898\u3002\u56e0\u6b64\u8fd8\u662f\u63a8\u8350\u5148\u5907\u4efd\u540e\u518d\u5378\u8f7d\u3002 (2)\u521b\u5efa\u8f6f\u94fe\u63a5 \u4f7f\u7528\u7ba1\u7406\u5458\u6253\u5f00 cmd \uff0c \u8f93\u5165\u4e0b\u9762\u7684\u547d\u4ee4\uff1a 1 > mklink / j C : \\ Users \\ XXXX \\ AppData \\ Local \\ Packages \\ CanonicalGroupLimited . UbuntuonWindows_79rhkp1fndgsc D : \\ WSL - ubuntu \\ D:\\WSL-ubuntu\\ \u5373\u975e\u7cfb\u7edf\u76d8\u7684\u4f4d\u7f6e (3) \u521b\u5efa\u6210\u529f\u540e\u518d\u6253\u5f00\u5e94\u7528\u5546\u5e97\uff0c\u5b89\u88c5Linux\u5b50\u7cfb\u7edf (4) \u95ee\u9898\uff01 \u5728\u8fd9\u91cc\u6211\u82b1\u4e86\u5f88\u957f\u7684\u65f6\u95f4\u67e5\u6587\u6863\u5bfb\u6c42\u89e3\u51b3\u65b9\u6cd5\uff0c\u7ed3\u679c\u90fd\u662f\u4e9b\u7b80\u5355\u95ee\u98980.0.... \u95ee\u98981 \uff1a \u51fa\u73b0\u5b50\u7cfb\u7edf\u65e0\u6cd5\u5b89\u88c5\uff0c\u9519\u8bef\u4ee3\u78010x80070005 \u95ee\u9898\u51fa\u73b0\u5728\u6587\u4ef6\u6743\u9650\u4e0a\u3002\u89e3\u51b3\u65b9\u6cd5\uff1a \u5bf9\u7740\u4f60\u975e\u7cfb\u7edf\u76d8\u7684\u50a8\u5b58\u6587\u4ef6\u5939\uff0c\u53f3\u952e->\u5c5e\u6027->\u5b89\u5168->\u7f16\u8f91->\u8bbe\u7f6e\u5b8c\u5168\u63a7\u5236\uff0c\u5373\u53ef\u89e3\u51b3\u3002 \u6216\uff1aicacls D:\\WSL-ubuntu /grant \"\u4f60\u7684\u7528\u6237\u540d:(OI)(CI)(F)\" \u95ee\u98982\uff1a\u5b89\u88c5\u542f\u52a8\u5b50\u7cfb\u7edf\u540e\uff0c\u5361\u5728installing..... \u8fd9\u91cc\u95ee\u9898\u51fa\u73b0\u5728LxssManager\u670d\u52a1\u4e0a\u3002 Lxss Manager \u670d\u52a1\u652f\u6301\u8fd0\u884c\u672c\u673a ELF \u4e8c\u8fdb\u5236\u6587\u4ef6\u3002\u8be5\u670d\u52a1\u63d0\u4f9b\u5728 Windows \u4e0a\u8fd0\u884c ELF \u4e8c\u8fdb\u5236\u6587\u4ef6\u6240\u9700\u7684\u57fa\u7840\u7ed3\u6784\u3002\u5982\u679c\u505c\u6b62\u6216\u7981\u7528\u8be5\u670d\u52a1\uff0c\u8fd9\u4e9b\u4e8c\u8fdb\u5236\u6587\u4ef6\u5c06\u4e0d\u518d\u8fd0\u884c\u3002 \u89e3\u51b3\u65b9\u6cd5\uff1a\u91cd\u542f\u7535\u8111->\u6b64\u7535\u8111->\u53f3\u952e->\u7ba1\u7406->\u670d\u52a1->\u627e\u5230 LxssManager ->\u542f\u52a8 \u8fc1\u79fb\u603b\u7ed3 \u540c\u6837\u7684\u9053\u7406\uff0c\u4f7f\u7528 mklink \u5de5\u5177\u53ef\u4ee5\u5c06\u5176\u4ed6\u5927\u6587\u4ef6\u8fc1\u79fb\u5230\u975e\u7cfb\u7edf\u76d8\u540e\u518d\u521b\u9020\u8f6f\u94fe\u63a5\uff0c\u7528\u4e8e\u51cf\u5c0fC\u76d8\u8d1f\u62c5\u662f\u5f88\u4e0d\u9519\u7684\u3002\u63a5\u4e0b\u6765\u5f00\u59cb\u6298\u817e\u4f18\u53160.0...","title":"mklink\u8f6f\u94fe\u63a5\u5230\u975e\u7cfb\u7edf\u76d8"},{"location":"misc/wsl/mklink/#_1","text":"","title":"\u8fc1\u79fb"},{"location":"misc/wsl/mklink/#1linux","text":"\u6b63\u5e38\u662f\uff1a C:\\Users\\xxxx\\AppData\\Local\\Packages\\CanonicalGroupLimited.UbuntuonWindows (_xxxxxxx)(xxxxx\u53ef\u80fd\u6709\u4e5f\u53ef\u80fd\u6ca1\u6709\uff0c\u53cd\u6b63\u6211\u662f\u6709(79rhkp1fndgsc)) \u76f4\u63a5\u7c97\u66b4\u7684\u65b9\u6cd5\u7684\u662f\uff1a\u5148\u88c5\u4e00\u904dLinux\u5b50\u7cfb\u7edf\uff0c\u5728 C:\\Users\\xxxx\\AppData\\Local\\Packages\\ \u4e0b\u67e5\u770b\u5e26\u6709\u7c7b\u4f3c CanonicalGroupLimited.UbuntuonWindows \u5b57\u773c\u7684\u65b0\u6587\u4ef6\u5939\uff0c\u8bb0\u4e0b\u5b83\u7684\u540d\u5b57","title":"1.\u5b9a\u4f4dLinux\u5b50\u7cfb\u7edf\u7684\u6587\u4ef6\u7cfb\u7edf\u4f4d\u7f6e"},{"location":"misc/wsl/mklink/#2","text":"","title":"2.\u5f00\u59cb\u8fc1\u79fb"},{"location":"misc/wsl/mklink/#1linux_1","text":"\u5378\u8f7d\u7684\u539f\u56e0\u5728\u4e8eLinux\u5b50\u7cfb\u7edf\u4e0b\u7684\u6587\u4ef6\u7cfb\u7edf\u7684\u6743\u9650\u66f4\u6539\u5341\u5206\u590d\u6742\uff0c\u8fd9\u91cc\u9762\u7684\u4e00\u4e9b\u6587\u4ef6\u4e0d\u5c5e\u4e8eWindows\u4e0b\u7684\u7ba1\u7406\u5458\u7528\u6237\u6240\u6709\uff0c\u4e5f\u4e0d\u5c5e\u4e8e\u4f60\u7684\u7528\u6237\uff0c\u5b83\u5c31\u662fLinux\u4e0b\u7528\u6237\u6240\u6709\u7684\uff0c\u4f7f\u7528\u4e00\u822c\u7684\u4fee\u6539\u6743\u9650\u6587\u4ef6\u65b9\u6cd5\u5f88\u5bb9\u6613\u51fa\u95ee\u9898\u3002\u56e0\u6b64\u8fd8\u662f\u63a8\u8350\u5148\u5907\u4efd\u540e\u518d\u5378\u8f7d\u3002","title":"(1)\u5148\u5378\u8f7dLinux\u5b50\u7cfb\u7edf\u3002"},{"location":"misc/wsl/mklink/#2_1","text":"\u4f7f\u7528\u7ba1\u7406\u5458\u6253\u5f00 cmd \uff0c \u8f93\u5165\u4e0b\u9762\u7684\u547d\u4ee4\uff1a 1 > mklink / j C : \\ Users \\ XXXX \\ AppData \\ Local \\ Packages \\ CanonicalGroupLimited . UbuntuonWindows_79rhkp1fndgsc D : \\ WSL - ubuntu \\ D:\\WSL-ubuntu\\ \u5373\u975e\u7cfb\u7edf\u76d8\u7684\u4f4d\u7f6e","title":"(2)\u521b\u5efa\u8f6f\u94fe\u63a5"},{"location":"misc/wsl/mklink/#3linux","text":"","title":"(3)\u521b\u5efa\u6210\u529f\u540e\u518d\u6253\u5f00\u5e94\u7528\u5546\u5e97\uff0c\u5b89\u88c5Linux\u5b50\u7cfb\u7edf"},{"location":"misc/wsl/mklink/#4","text":"\u5728\u8fd9\u91cc\u6211\u82b1\u4e86\u5f88\u957f\u7684\u65f6\u95f4\u67e5\u6587\u6863\u5bfb\u6c42\u89e3\u51b3\u65b9\u6cd5\uff0c\u7ed3\u679c\u90fd\u662f\u4e9b\u7b80\u5355\u95ee\u98980.0....","title":"(4)\u95ee\u9898\uff01"},{"location":"misc/wsl/mklink/#1-0x80070005","text":"\u95ee\u9898\u51fa\u73b0\u5728\u6587\u4ef6\u6743\u9650\u4e0a\u3002\u89e3\u51b3\u65b9\u6cd5\uff1a \u5bf9\u7740\u4f60\u975e\u7cfb\u7edf\u76d8\u7684\u50a8\u5b58\u6587\u4ef6\u5939\uff0c\u53f3\u952e->\u5c5e\u6027->\u5b89\u5168->\u7f16\u8f91->\u8bbe\u7f6e\u5b8c\u5168\u63a7\u5236\uff0c\u5373\u53ef\u89e3\u51b3\u3002 \u6216\uff1aicacls D:\\WSL-ubuntu /grant \"\u4f60\u7684\u7528\u6237\u540d:(OI)(CI)(F)\"","title":"\u95ee\u98981\uff1a \u51fa\u73b0\u5b50\u7cfb\u7edf\u65e0\u6cd5\u5b89\u88c5\uff0c\u9519\u8bef\u4ee3\u78010x80070005"},{"location":"misc/wsl/mklink/#2installing","text":"\u8fd9\u91cc\u95ee\u9898\u51fa\u73b0\u5728LxssManager\u670d\u52a1\u4e0a\u3002 Lxss Manager \u670d\u52a1\u652f\u6301\u8fd0\u884c\u672c\u673a ELF \u4e8c\u8fdb\u5236\u6587\u4ef6\u3002\u8be5\u670d\u52a1\u63d0\u4f9b\u5728 Windows \u4e0a\u8fd0\u884c ELF \u4e8c\u8fdb\u5236\u6587\u4ef6\u6240\u9700\u7684\u57fa\u7840\u7ed3\u6784\u3002\u5982\u679c\u505c\u6b62\u6216\u7981\u7528\u8be5\u670d\u52a1\uff0c\u8fd9\u4e9b\u4e8c\u8fdb\u5236\u6587\u4ef6\u5c06\u4e0d\u518d\u8fd0\u884c\u3002 \u89e3\u51b3\u65b9\u6cd5\uff1a\u91cd\u542f\u7535\u8111->\u6b64\u7535\u8111->\u53f3\u952e->\u7ba1\u7406->\u670d\u52a1->\u627e\u5230 LxssManager ->\u542f\u52a8","title":"\u95ee\u98982\uff1a\u5b89\u88c5\u542f\u52a8\u5b50\u7cfb\u7edf\u540e\uff0c\u5361\u5728installing....."},{"location":"misc/wsl/mklink/#_2","text":"\u540c\u6837\u7684\u9053\u7406\uff0c\u4f7f\u7528 mklink \u5de5\u5177\u53ef\u4ee5\u5c06\u5176\u4ed6\u5927\u6587\u4ef6\u8fc1\u79fb\u5230\u975e\u7cfb\u7edf\u76d8\u540e\u518d\u521b\u9020\u8f6f\u94fe\u63a5\uff0c\u7528\u4e8e\u51cf\u5c0fC\u76d8\u8d1f\u62c5\u662f\u5f88\u4e0d\u9519\u7684\u3002\u63a5\u4e0b\u6765\u5f00\u59cb\u6298\u817e\u4f18\u53160.0...","title":"\u8fc1\u79fb\u603b\u7ed3"},{"location":"misc/wsl/optimization/","text":"1.\u66f4\u6362apt\u6e90 \u56e0\u4e3aLinux\u5b50\u7cfb\u7edf\u7684apt\u6e90\u4f7f\u7528\u7684\u662f\u5b98\u65b9\u6e90\uff0c\u9700\u8981\u8fde\u63a5\u5230\u56fd\u5916\u7684\u670d\u52a1\u5668\u3002\u6240\u4ee5\u5b89\u88c5\u4e00\u4e9b\u8f6f\u4ef6\u65f6\u4e0b\u8f7d\u4f1a\u5f88\u6162\uff0c\u6211\u4eec\u53ef\u4ee5\u6539\u7528\u56fd\u5185\u7684\u955c\u50cfapt\u6e90\u3002 \u56fd\u5185\u7684\u955c\u50cf\u6e90\u4e3b\u8981\u6709\uff1a \u963f\u91cc\u6e90 1 2 3 4 5 6 7 8 9 10 deb http://mirrors.aliyun.com/ubuntu/ trusty main restricted universe multiverse deb http://mirrors.aliyun.com/ubuntu/ trusty-security main restricted universe multiverse deb http://mirrors.aliyun.com/ubuntu/ trusty-updates main restricted universe multiverse deb http://mirrors.aliyun.com/ubuntu/ trusty-proposed main restricted universe multiverse deb http://mirrors.aliyun.com/ubuntu/ trusty-backports main restricted universe multiverse deb-src http://mirrors.aliyun.com/ubuntu/ trusty main restricted universe multiverse deb-src http://mirrors.aliyun.com/ubuntu/ trusty-security main restricted universe multiverse deb-src http://mirrors.aliyun.com/ubuntu/ trusty-updates main restricted universe multiverse deb-src http://mirrors.aliyun.com/ubuntu/ trusty-proposed main restricted universe multiverse deb-src http://mirrors.aliyun.com/ubuntu/ trusty-backports main restricted universe multiverse \u4e2d\u79d1\u5927\u6e90 1 2 3 4 deb https://mirrors.ustc.edu.cn/ubuntu/ xenial main restricted universe multiverse deb https://mirrors.ustc.edu.cn/ubuntu/ xenial-updates main restricted universe multiverse deb https://mirrors.ustc.edu.cn/ubuntu/ xenial-backports main restricted universe multiverse deb https://mirrors.ustc.edu.cn/ubuntu/ xenial-security main restricted universe multiverse \u7f51\u6613\u6e90 1 2 3 4 5 6 7 8 9 10 deb http://mirrors.163.com/ubuntu/ wily main restricted universe multiverse deb http://mirrors.163.com/ubuntu/ wily-security main restricted universe multiverse deb http://mirrors.163.com/ubuntu/ wily-updates main restricted universe multiverse deb http://mirrors.163.com/ubuntu/ wily-proposed main restricted universe multiverse deb http://mirrors.163.com/ubuntu/ wily-backports main restricted universe multiverse deb-src http://mirrors.163.com/ubuntu/ wily main restricted universe multiverse deb-src http://mirrors.163.com/ubuntu/ wily-security main restricted universe multiverse deb-src http://mirrors.163.com/ubuntu/ wily-updates main restricted universe multiverse deb-src http://mirrors.163.com/ubuntu/ wily-proposed main restricted universe multiverse deb-src http://mirrors.163.com/ubuntu/ wily-backports main restricted universe multiver \u4e2a\u4eba\u89c9\u5f97\u79d1\u5927\u6e90\u597d\u7528\u70b90.0 \u5148\u8fdb\u884c\u4e00\u4e0b\u5907\u4efd\u3002 1 $ sudo cp /etc/apt/sources.list /etc/apt/sources.list.bak \u7136\u540e 1 $ sudo nano /etc/apt/sources.list \u9009\u62e9\u4e00\u4e2a\u6e90\u6dfb\u52a0\u5230\u6587\u4ef6\u6700\u524d\u9762\u6216\u76f4\u63a5\u66ff\u6362\u6389\u539f\u6587\u4ef6\u3002 [Ctrl+o \u5199\u5165 Ctrl+x \u9000\u51fa Ctrl+k \u5220\u9664\u6574\u884c\uff0c\u5927\u6982\u5c31\u7528\u5230\u8fd9\u4ee8\u5427] \u4fdd\u5b58\u540e\u8fd0\u884c 1 2 $ sudo apt-get update $ sudp apt-get upgrade 2.\u7ec8\u7aef\u7684\u7f8e\u5316 win10\u4e0b\u53ef\u6709\u3001\u4e11\u4e86\u3002\u63a8\u8350\u5927\u5bb6\u4e00\u4e2a\u5f00\u6e90\u8f6f\u4ef6cmder\uff0c\u53ef\u4ee5\u5b8c\u7f8e\u89e3\u51b3\u8fd9\u4e00\u95ee\u9898\u3002\u8fd9\u4e2a\u8f6f\u4ef6\u540c\u6837\u53ef\u4ee5\u5728 \u5b98\u7f51 \u4e0a\u4e0b\u8f7d\u5230\uff0c\u800c\u4e14\u662f\u514d\u5b89\u88c5\u3002\u9009\u62e9\u4e0b\u8f7dmini\u7248\u5373\u53ef\uff0c\u56e0\u4e3abash\u6211\u4eec\u5df2\u7ecf\u6709\u4e86\u561b\uff01 \u8d34\u5f20\u6211\u4fee\u6539\u540e\u7684\u56fe0.0\uff0c\u662f\u4e0d\u662f\u597d\u770b\u5f88\u591a\u3002 \u6253\u5f00cmder\u76f4\u63a5\u8fdb\u5165\u7684\u662fcmd\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u8bbe\u7f6e\u4e2d\u66f4\u6539\u5b83\u7684startup\u65b9\u5f0f\uff0c\u9009\u62e9command line \uff0c\u586b\u5165 bash -cur_console:p \u3002 \u4fdd\u5b58\u8bbe\u7f6e\uff0c\u4e0b\u6b21\u6253\u5f00\u65f6\u5c31\u76f4\u63a5\u8fdb\u5165Linux\u5b50\u7cfb\u7edf\u4e86\u3002 \u8fd8\u53ef\u4ee5\u5728colors\u9009\u9879\u4e2d\u9009\u62e9\u81ea\u5df1\u559c\u6b22\u7684\u4e3b\u9898\uff0c\u5728transparency\u4e2d\u66f4\u6539\u4e3b\u754c\u9762\u7684\u900f\u660e\u5ea6\u3002 \u800c\u4e14cmder\u8fd8\u6709\u5206\u5c4f\u529f\u80fd\u3002\u8fd9\u4e9b\u529f\u80fd\u8bf7\u81ea\u884c\u53d1\u63980.0 3.\u4fbf\u6377\u6253\u5f00\u65b9\u5f0f\uff01 \u6211\u4eec\u53ef\u4ee5\u5c06cmder\u6dfb\u52a0\u8fdbwin10\u7684\u73af\u5883\u53d8\u91cf\u4e2d\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u50cf\u5728Linux\u7cfb\u7edf\u4e2d\u90a3\u6837\uff0c\u5728\u4efb\u610f\u6587\u4ef6\u76ee\u5f55\u4e0b\u76f4\u63a5\u53f3\u952e\u6253\u5f00cmder\u5e76\u8fdb\u5165\u5f53\u524d\u8def\u5f84\u4e86\u3002 \u6bd4\u5982\u5728\u684c\u9762\u70b9\u51fb\u53f3\u952e\uff0c\u9009\u62e9cmder here\uff0c\u8fd9\u6837\u6253\u5f00cmder\u5c31\u53ef\u4ee5\u76f4\u63a5\u8fdb\u5165\u684c\u9762\u7684\u8def\u5f84\u4e86\u3002 \u8bbe\u7f6e\u73af\u5883\u53d8\u91cf\u7684\u5177\u4f53\u65b9\u6cd5\u662f\uff0c\u4f9d\u6b21\u8fdb\u5165\u63a7\u5236\u9762\u677f->\u7cfb\u7edf\u548c\u5b89\u5168->\u7cfb\u7edf->\u9ad8\u7ea7->\u73af\u5883\u53d8\u91cf->\u7f16\u8f91\u7cfb\u7edf\u73af\u5883\u53d8\u91cfPath->\u65b0\u5efa->\u628acmder\u8def\u5f84\u6dfb\u52a0\u8fdb\u6765\uff0c\u4fdd\u5b58\u4e4b\u540e\u5c31\u53ef\u4ee5\u7528win+R\u7684\u65b9\u5f0f\u6253\u5f00cmder\u4e86\u3002 \u63a5\u4e0b\u6765\uff0c\u4ee5\u7ba1\u7406\u5458\u65b9\u5f0f\u6253\u5f00cmd\uff0c\u8f93\u5165\u547d\u4ee4 Cmder.exe /REGISTER ALL \u3002\u4e4b\u540e\u5c31\u53ef\u4ee5\u76f4\u63a5\u5728\u53f3\u952e\u4e2d\u6253\u5f00cmder\u4e86\uff01 4.\u5b89\u88c5zsh\u548con-my-zsh shell\u7684\u7c7b\u578b\u6709\u5f88\u591a\u79cd\uff0clinux\u4e0b\u9ed8\u8ba4\u7684\u662fbash\uff0c\u867d\u7136bash\u7684\u529f\u80fd\u5df2\u7ecf\u5f88\u5f3a\u5927\uff0c\u4f46\u5bf9\u4e8e\u4ee5\u61d2\u60f0\u4e3a\u7f8e\u5fb7\u7684\u7a0b\u5e8f\u5458\u6765\u8bf4\uff0cbash\u7684\u63d0\u793a\u529f\u80fd\u4e0d\u591f\u5f3a\u5927\uff0c\u754c\u9762\u4e5f\u4e0d\u591f\u70ab\uff0c\u5e76\u975e\u7406\u60f3\u5de5\u5177\u3002 \u800czsh\u7684\u529f\u80fd\u6781\u5176\u5f3a\u5927\uff0c\u53ea\u662f\u914d\u7f6e\u8fc7\u4e8e\u590d\u6742\uff0c\u8d77\u521d\u53ea\u6709\u6781\u5ba2\u624d\u5728\u7528\u3002\u540e\u6765\uff0c\u6709\u4e2a\u7a77\u6781\u65e0\u804a\u7684\u7a0b\u5e8f\u5458\u53ef\u80fd\u662f\u5b9e\u5728\u770b\u4e0d\u4e0b\u53bb\u5e7f\u5927\u733f\u53cb\u4e00\u76f4\u53ea\u80fd\u4f7f\u7528\u5355\u8c03\u7684bash, \u4e8e\u662f\u4ed6\u521b\u5efa\u4e86\u4e00\u4e2a\u540d\u4e3a oh-my-zsh \u7684\u5f00\u6e90\u9879\u76ee\uff0cthen\uff0c\u6211\u8fd9\u79cd\u849f\u84bb\u4e5f\u80fd\u7528\u4e0azsh\u4e86\u3002 (1)\u5b89\u88c5zsh 1 2 sudo aptitude update sudo aptitude install zsh \uff082\uff09\u8bbe zsh \u4e3a\u9ed8\u8ba4shell 1 chsh - s / bin / zsh \uff083\uff09\u5168\u81ea\u52a8\u5b89\u88c5on-my-zsh 1 wget https : // github . com / robbyrussell / oh - my - zsh / raw / master / tools / install . sh - O - | sh zsh\u4e3b\u9898 \u901a\u8fc7\u5982\u4e0b\u547d\u4ee4\u53ef\u4ee5\u67e5\u770b\u53ef\u7528\u7684 Theme \uff1a 1 # ls ~/ . oh - my - zsh / themes \u5982\u4f55\u4fee\u6539zsh\u4e3b\u9898\u5462\uff1f \u7f16\u8f91 ~/.zshrc \u6587\u4ef6\uff0c\u5c06 ZSH_THEME=\"candy\" ,\u5c06candy\u4fee\u6539\u4e3a\u4f60\u9700\u60f3\u8981\u7684\u4e3b\u9898\u3002 \u4f46\u7531\u4e8e\u4e3b\u9898\u6ca1\u6709\u663e\u793a\u5b8c\u6574\u8def\u5f84\uff0c\u8981\u505a\u4ee5\u4e0b\u4fee\u6539(\u4ee5robbyrussell)\u4e3a\u4f8b\uff1a 1 nano ~/ . oh - my - zsh / themes / robbyrussell . zsh - theme %c\u4fee\u6539\u4e3a[$PWD] 1 source ~/ . zshrc \u91cd\u542f\u5373\u53ef\u663e\u793a\u5b8c\u6574\u8def\u5f84 zsh\u6269\u5c55 \u5728 ~/.zshrc \u4e2d\u627e\u5230 plugins \u5173\u952e\u5b57\uff0c\u5c31\u53ef\u4ee5\u81ea\u5b9a\u4e49\u542f\u7528\u7684\u63d2\u4ef6\u4e86\uff0c\u7cfb\u7edf\u9ed8\u8ba4\u52a0\u8f7d git \u3002 git\u63d2\u4ef6 \u547d\u4ee4\u5185\u5bb9\u53ef\u4ee5\u53c2\u8003 cat ~/.oh-my-zsh/plugins/git/git.plugin.zsh \u3002 \u5e38\u7528\u7684\uff1a \u7b80\u5199 \u5b8c\u6574 gapa git add --patch gc! git commit -v --amend gcl git clone --recursive gclean git reset --hard && git clean -dfx gcm git checkout master gcmsg git commit -m gco git checkout gd git diff gdca git diff --cached gp git push grbc git rebase --continue gst git status gup git pull --rebase \u5b8c\u6574\u5217\u8868\uff1a https://github.com/robbyrussell/oh-my-zsh/wiki/Plugin:git extract \u89e3\u538b\u6587\u4ef6\u7528\u7684\uff0c\u6240\u6709\u7684\u538b\u7f29\u6587\u4ef6\uff0c\u90fd\u53ef\u4ee5\u76f4\u63a5 x filename \uff0c\u4e0d\u7528\u8bb0\u5fc6\u53c2\u6570 \u5f53\u7136\uff0c\u5982\u679c\u4f60\u60f3\u8981\u7528 tar \u547d\u4ee4\uff0c\u53ef\u4ee5\u4f7f\u7528 tar - \u52a0 tab \u952e\uff0czsh\u4f1a\u5217\u51fa\u53c2\u6570\u7684\u542b\u4e49\u3002 autojump \u6309\u7167 \u5b98\u65b9\u6587\u6863 \u4ecb\u7ecd\uff0c\u9700\u8981\u7528\u5982\u4e0b\u547d\u4ee4\u5b89\u88c5\uff1a 1 2 3 git clone https : // github . com / wting / autojump cd autojump . / install . py or . / uninstall . py \u5b89\u88c5\u597d\u4e4b\u540e\uff0c\u9700\u8981\u5728 ~/.zshrc \u4e2d\u914d\u7f6e\u4e00\u4e0b\uff0c\u5728\u672b\u5c3e\u6dfb\u52a0\u4e00\u884c\uff1a 1 [[ - s / root / . autojump / etc / profile . d / autojump . sh ]] && source / root / . autojump / etc / profile . d / autojump . sh \u5b89\u88c5\u597d\u4e4b\u540e\uff0c\u8bb0\u5f97 source ~/.zshrc \uff0c\u7136\u540e\u4f60\u5c31\u53ef\u4ee5\u901a\u8fc7 j+\u76ee\u5f55\u540d \u5feb\u901f\u8fdb\u884c\u76ee\u5f55\u8df3\u8f6c\u3002\u652f\u6301\u76ee\u5f55\u540d\u7684\u6a21\u7cca\u5339\u914d\u548c\u81ea\u52a8\u8865\u5168\u3002 j -stat \uff1a\u53ef\u4ee5\u67e5\u770b\u5386\u53f2\u8def\u5f84\u5e93 zsh-autosuggestions zsh-autosuggestions 1 git clone git : // github . com / zsh - users / zsh - autosuggestions $ ZSH_CUSTOM / plugins / zsh - autosuggestions \u5728 ~/.zshrc \u4e2d\u914d\u7f6e 1 plugins = ( \u5176\u4ed6\u7684\u63d2\u4ef6 zsh - autosuggestions ) \u56e0\u4e3a\u7bad\u5934 \u2192 \u4e0d\u592a\u65b9\u4fbf\uff0c\u5728 .zshrc \u4e2d\u81ea\u5b9a\u4e49\u8865\u5168\u5feb\u6377\u952e\u4e3a\u9017\u53f7\uff0c\u4f46\u662f\u53c8\u4e00\u6b21\u9047\u5230\u4e86\u9700\u8981\u8f93\u5165\u9017\u53f7\u7684\u60c5\u51b5\uff0c\u6240\u4ee5\uff0c\u5e76\u4e0d\u592a\u63a8\u8350\u5982\u4e0b\u4fee\u6539\uff1a 1 bindkey ',' autosuggest - accept zsh-syntax-highlighting zsh-syntax-highlighting 1 git clone https : // github . com / zsh - users / zsh - syntax - highlighting . git $ { ZSH_CUSTOM :- ~/.oh - my - zsh / custom } / plugins / zsh - syntax - highlighting ~/.zshrc \u6587\u4ef6\u4e2d\u914d\u7f6e\uff1a 1 plugins = ( \u5176\u4ed6\u7684\u63d2\u4ef6 zsh - syntax - highlighting ) git-open git-open \u63d2\u4ef6\u53ef\u4ee5\u5728\u4f60git\u9879\u76ee\u4e0b\u6253\u5f00\u8fdc\u7a0b\u4ed3\u5e93\u6d4f\u89c8\u9879\u76ee\u3002 1 git clone https : // github . com / paulirish / git - open . git $ ZSH_CUSTOM / plugins / git - open bat bat \u4ee3\u66ff cat cat \u67d0\u4e2a\u6587\u4ef6\uff0c\u53ef\u4ee5\u5728\u7ec8\u7aef\u76f4\u63a5\u8f93\u51fa\u6587\u4ef6\u5185\u5bb9\uff0c bat \u76f8\u6bd4 cat \u589e\u52a0\u4e86\u884c\u53f7\u548c\u989c\u8272\u9ad8\u4eae 1 2 wget https : // github . com / sharkdp / bat / releases / download / v0 . 11 . 0 / bat_0 . 11 . 0 _amd64 . deb dpkg - i bat_0 . 11 . 0 _amd64 . deb \u7248\u672c\u53f7\u53ef\u53bb https://github.com/sharkdp/bat/releases \u81ea\u884c\u67e5\u770b0.0 \u5e38\u7528\u5feb\u6377\u952e \u547d\u4ee4\u5386\u53f2\u8bb0\u5f55 \u4e00\u65e6\u5728 shell \u6572\u5165\u6b63\u786e\u547d\u4ee4\u5e76\u80fd\u6267\u884c\u540e\uff0cshell \u5c31\u4f1a\u5b58\u50a8\u4f60\u6240\u6572\u5165\u547d\u4ee4\u7684\u5386\u53f2\u8bb0\u5f55\uff08\u5b58\u653e\u5728 ~/.zsh_history \u6587\u4ef6\u4e2d\uff09\uff0c\u65b9\u4fbf\u518d\u6b21\u8fd0\u884c\u4e4b\u524d\u7684\u547d\u4ee4\u3002\u53ef\u4ee5\u6309\u65b9\u5411\u952e\u2191\u548c\u2193\u6765\u67e5\u770b\u4e4b\u524d\u6267\u884c\u8fc7\u7684\u547d\u4ee4 \u53ef\u4ee5\u7528 r \u6765\u6267\u884c\u4e0a\u4e00\u6761\u547d\u4ee4 \u4f7f\u7528 ctrl-r \u6765\u641c\u7d22\u547d\u4ee4\u5386\u53f2\u8bb0\u5f55 \u547d\u4ee4\u522b\u540d \u53ef\u4ee5\u7b80\u5316\u547d\u4ee4\u8f93\u5165\uff0c\u5728 .zshrc \u4e2d\u6dfb\u52a0 alias shortcut='this is the origin command' \u4e00\u884c\u5c31\u76f8\u5f53\u4e8e\u6dfb\u52a0\u4e86\u522b\u540d \u5728\u547d\u4ee4\u884c\u4e2d\u8f93\u5165 alias \u53ef\u4ee5\u67e5\u770b\u6240\u6709\u7684\u547d\u4ee4\u522b\u540d \u4f7f\u7528\u6280\u5de7 \u8fde\u6309\u4e24\u6b21Tab\u4f1a\u5217\u51fa\u6240\u6709\u7684\u8865\u5168\u5217\u8868\u5e76\u76f4\u63a5\u5f00\u59cb\u9009\u62e9\uff0c\u8865\u5168\u9879\u53ef\u4ee5\u4f7f\u7528 ctrl+n/p/f/b\u4e0a\u4e0b\u5de6\u53f3\u5207\u6362 \u667a\u80fd\u8df3\u8f6c\uff0c\u5b89\u88c5\u4e86 autojump \u4e4b\u540e\uff0czsh \u4f1a\u81ea\u52a8\u8bb0\u5f55\u4f60\u8bbf\u95ee\u8fc7\u7684\u76ee\u5f55\uff0c\u901a\u8fc7 j \u76ee\u5f55\u540d \u53ef\u4ee5\u76f4\u63a5\u8fdb\u884c\u76ee\u5f55\u8df3\u8f6c\uff0c\u800c\u4e14\u76ee\u5f55\u540d\u652f\u6301\u6a21\u7cca\u5339\u914d\u548c\u81ea\u52a8\u8865\u5168\uff0c\u4f8b\u5982\u4f60\u8bbf\u95ee\u8fc7 hadoop-1.0.0 \u76ee\u5f55\uff0c\u8f93\u5165j hado \u5373\u53ef\u6b63\u786e\u8df3\u8f6c\u3002j --stat \u53ef\u4ee5\u770b\u4f60\u7684\u5386\u53f2\u8def\u5f84\u5e93\u3002 \u547d\u4ee4\u9009\u9879\u8865\u5168\u3002\u5728zsh\u4e2d\u53ea\u9700\u8981\u952e\u5165 tar - \u5c31\u4f1a\u5217\u51fa\u6240\u6709\u7684\u9009\u9879\u548c\u5e2e\u52a9\u8bf4\u660e \u5728\u5f53\u524d\u76ee\u5f55\u4e0b\u8f93\u5165 .. \u6216 ... \uff0c\u6216\u76f4\u63a5\u8f93\u5165\u5f53\u524d\u76ee\u5f55\u540d\u90fd\u53ef\u4ee5\u8df3\u8f6c\uff0c\u4f60\u751a\u81f3\u4e0d\u518d\u9700\u8981\u8f93\u5165 cd \u547d\u4ee4\u4e86\u3002\u5728\u4f60\u77e5\u9053\u8def\u5f84\u7684\u60c5\u51b5\u4e0b\uff0c\u6bd4\u5982 /usr/local/bin \u4f60\u53ef\u4ee5\u8f93\u5165 cd /u/l/b \u7136\u540e\u6309\u8fdb\u884c\u8865\u5168\u5feb\u901f\u8f93\u5165 \u76ee\u5f55\u6d4f\u89c8\u548c\u8df3\u8f6c\uff1a\u8f93\u5165 d\uff0c\u5373\u53ef\u5217\u51fa\u4f60\u5728\u8fd9\u4e2a\u4f1a\u8bdd\u91cc\u8bbf\u95ee\u7684\u76ee\u5f55\u5217\u8868\uff0c\u8f93\u5165\u5217\u8868\u524d\u7684\u5e8f\u53f7\uff0c\u5373\u53ef\u76f4\u63a5\u8df3\u8f6c\u3002 \u547d\u4ee4\u53c2\u6570\u8865\u5168\u3002\u952e\u5165 kill <tab> \u5c31\u4f1a\u5217\u51fa\u6240\u6709\u7684\u8fdb\u7a0b\u540d\u548c\u5bf9\u5e94\u7684\u8fdb\u7a0b\u53f7 \u66f4\u667a\u80fd\u7684\u5386\u53f2\u547d\u4ee4\u3002\u5728\u7528\u6216\u8005\u65b9\u5411\u4e0a\u952e\u67e5\u627e\u5386\u53f2\u547d\u4ee4\u65f6\uff0czsh\u652f\u6301\u9650\u5236\u67e5\u627e\u3002\u6bd4\u5982\uff0c\u8f93\u5165ls,\u7136\u540e\u518d\u6309\u65b9\u5411\u4e0a\u952e\uff0c\u5219\u53ea\u4f1a\u67e5\u627e\u7528\u8fc7\u7684ls\u547d\u4ee4\u3002\u800c\u6b64\u65f6\u4f7f\u7528\u5219\u4f1a\u4ecd\u7136\u6309\u4e4b\u524d\u7684\u65b9\u5f0f\u67e5\u627e\uff0c\u5ffd\u7565 ls \u591a\u4e2a\u7ec8\u7aef\u4f1a\u8bdd\u5171\u4eab\u5386\u53f2\u8bb0\u5f55 \u901a\u914d\u7b26\u641c\u7d22\uff1a ls -l **/*.sh \uff0c\u53ef\u4ee5\u9012\u5f52\u663e\u793a\u5f53\u524d\u76ee\u5f55\u4e0b\u7684 shell \u6587\u4ef6\uff0c\u6587\u4ef6\u5c11\u65f6\u53ef\u4ee5\u4ee3\u66ff find \u3002\u4f7f\u7528 **/ \u6765\u9012\u5f52\u641c\u7d22 \u6269\u5c55\u73af\u5883\u53d8\u91cf\uff0c\u8f93\u5165\u73af\u5883\u53d8\u91cf\u7136\u540e\u6309 \u5c31\u53ef\u4ee5\u8f6c\u6362\u6210\u8868\u8fbe\u7684\u503c \u5728 .zshrc \u4e2d\u6dfb\u52a0 setopt HIST_IGNORE_DUPS \u53ef\u4ee5\u6d88\u9664\u91cd\u590d\u8bb0\u5f55\uff0c\u4e5f\u53ef\u4ee5\u5229\u7528 sort -t \";\" -k 2 -u ~/.zsh_history | sort -o ~/.zsh_history \u624b\u52a8\u6e05\u9664","title":"\u5b50\u7cfb\u7edf\u4f18\u5316"},{"location":"misc/wsl/optimization/#1apt","text":"\u56e0\u4e3aLinux\u5b50\u7cfb\u7edf\u7684apt\u6e90\u4f7f\u7528\u7684\u662f\u5b98\u65b9\u6e90\uff0c\u9700\u8981\u8fde\u63a5\u5230\u56fd\u5916\u7684\u670d\u52a1\u5668\u3002\u6240\u4ee5\u5b89\u88c5\u4e00\u4e9b\u8f6f\u4ef6\u65f6\u4e0b\u8f7d\u4f1a\u5f88\u6162\uff0c\u6211\u4eec\u53ef\u4ee5\u6539\u7528\u56fd\u5185\u7684\u955c\u50cfapt\u6e90\u3002 \u56fd\u5185\u7684\u955c\u50cf\u6e90\u4e3b\u8981\u6709\uff1a \u963f\u91cc\u6e90 1 2 3 4 5 6 7 8 9 10 deb http://mirrors.aliyun.com/ubuntu/ trusty main restricted universe multiverse deb http://mirrors.aliyun.com/ubuntu/ trusty-security main restricted universe multiverse deb http://mirrors.aliyun.com/ubuntu/ trusty-updates main restricted universe multiverse deb http://mirrors.aliyun.com/ubuntu/ trusty-proposed main restricted universe multiverse deb http://mirrors.aliyun.com/ubuntu/ trusty-backports main restricted universe multiverse deb-src http://mirrors.aliyun.com/ubuntu/ trusty main restricted universe multiverse deb-src http://mirrors.aliyun.com/ubuntu/ trusty-security main restricted universe multiverse deb-src http://mirrors.aliyun.com/ubuntu/ trusty-updates main restricted universe multiverse deb-src http://mirrors.aliyun.com/ubuntu/ trusty-proposed main restricted universe multiverse deb-src http://mirrors.aliyun.com/ubuntu/ trusty-backports main restricted universe multiverse \u4e2d\u79d1\u5927\u6e90 1 2 3 4 deb https://mirrors.ustc.edu.cn/ubuntu/ xenial main restricted universe multiverse deb https://mirrors.ustc.edu.cn/ubuntu/ xenial-updates main restricted universe multiverse deb https://mirrors.ustc.edu.cn/ubuntu/ xenial-backports main restricted universe multiverse deb https://mirrors.ustc.edu.cn/ubuntu/ xenial-security main restricted universe multiverse \u7f51\u6613\u6e90 1 2 3 4 5 6 7 8 9 10 deb http://mirrors.163.com/ubuntu/ wily main restricted universe multiverse deb http://mirrors.163.com/ubuntu/ wily-security main restricted universe multiverse deb http://mirrors.163.com/ubuntu/ wily-updates main restricted universe multiverse deb http://mirrors.163.com/ubuntu/ wily-proposed main restricted universe multiverse deb http://mirrors.163.com/ubuntu/ wily-backports main restricted universe multiverse deb-src http://mirrors.163.com/ubuntu/ wily main restricted universe multiverse deb-src http://mirrors.163.com/ubuntu/ wily-security main restricted universe multiverse deb-src http://mirrors.163.com/ubuntu/ wily-updates main restricted universe multiverse deb-src http://mirrors.163.com/ubuntu/ wily-proposed main restricted universe multiverse deb-src http://mirrors.163.com/ubuntu/ wily-backports main restricted universe multiver \u4e2a\u4eba\u89c9\u5f97\u79d1\u5927\u6e90\u597d\u7528\u70b90.0 \u5148\u8fdb\u884c\u4e00\u4e0b\u5907\u4efd\u3002 1 $ sudo cp /etc/apt/sources.list /etc/apt/sources.list.bak \u7136\u540e 1 $ sudo nano /etc/apt/sources.list \u9009\u62e9\u4e00\u4e2a\u6e90\u6dfb\u52a0\u5230\u6587\u4ef6\u6700\u524d\u9762\u6216\u76f4\u63a5\u66ff\u6362\u6389\u539f\u6587\u4ef6\u3002 [Ctrl+o \u5199\u5165 Ctrl+x \u9000\u51fa Ctrl+k \u5220\u9664\u6574\u884c\uff0c\u5927\u6982\u5c31\u7528\u5230\u8fd9\u4ee8\u5427] \u4fdd\u5b58\u540e\u8fd0\u884c 1 2 $ sudo apt-get update $ sudp apt-get upgrade","title":"1.\u66f4\u6362apt\u6e90"},{"location":"misc/wsl/optimization/#2","text":"win10\u4e0b\u53ef\u6709\u3001\u4e11\u4e86\u3002\u63a8\u8350\u5927\u5bb6\u4e00\u4e2a\u5f00\u6e90\u8f6f\u4ef6cmder\uff0c\u53ef\u4ee5\u5b8c\u7f8e\u89e3\u51b3\u8fd9\u4e00\u95ee\u9898\u3002\u8fd9\u4e2a\u8f6f\u4ef6\u540c\u6837\u53ef\u4ee5\u5728 \u5b98\u7f51 \u4e0a\u4e0b\u8f7d\u5230\uff0c\u800c\u4e14\u662f\u514d\u5b89\u88c5\u3002\u9009\u62e9\u4e0b\u8f7dmini\u7248\u5373\u53ef\uff0c\u56e0\u4e3abash\u6211\u4eec\u5df2\u7ecf\u6709\u4e86\u561b\uff01 \u8d34\u5f20\u6211\u4fee\u6539\u540e\u7684\u56fe0.0\uff0c\u662f\u4e0d\u662f\u597d\u770b\u5f88\u591a\u3002 \u6253\u5f00cmder\u76f4\u63a5\u8fdb\u5165\u7684\u662fcmd\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u8bbe\u7f6e\u4e2d\u66f4\u6539\u5b83\u7684startup\u65b9\u5f0f\uff0c\u9009\u62e9command line \uff0c\u586b\u5165 bash -cur_console:p \u3002 \u4fdd\u5b58\u8bbe\u7f6e\uff0c\u4e0b\u6b21\u6253\u5f00\u65f6\u5c31\u76f4\u63a5\u8fdb\u5165Linux\u5b50\u7cfb\u7edf\u4e86\u3002 \u8fd8\u53ef\u4ee5\u5728colors\u9009\u9879\u4e2d\u9009\u62e9\u81ea\u5df1\u559c\u6b22\u7684\u4e3b\u9898\uff0c\u5728transparency\u4e2d\u66f4\u6539\u4e3b\u754c\u9762\u7684\u900f\u660e\u5ea6\u3002 \u800c\u4e14cmder\u8fd8\u6709\u5206\u5c4f\u529f\u80fd\u3002\u8fd9\u4e9b\u529f\u80fd\u8bf7\u81ea\u884c\u53d1\u63980.0","title":"2.\u7ec8\u7aef\u7684\u7f8e\u5316"},{"location":"misc/wsl/optimization/#3","text":"\u6211\u4eec\u53ef\u4ee5\u5c06cmder\u6dfb\u52a0\u8fdbwin10\u7684\u73af\u5883\u53d8\u91cf\u4e2d\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u50cf\u5728Linux\u7cfb\u7edf\u4e2d\u90a3\u6837\uff0c\u5728\u4efb\u610f\u6587\u4ef6\u76ee\u5f55\u4e0b\u76f4\u63a5\u53f3\u952e\u6253\u5f00cmder\u5e76\u8fdb\u5165\u5f53\u524d\u8def\u5f84\u4e86\u3002 \u6bd4\u5982\u5728\u684c\u9762\u70b9\u51fb\u53f3\u952e\uff0c\u9009\u62e9cmder here\uff0c\u8fd9\u6837\u6253\u5f00cmder\u5c31\u53ef\u4ee5\u76f4\u63a5\u8fdb\u5165\u684c\u9762\u7684\u8def\u5f84\u4e86\u3002 \u8bbe\u7f6e\u73af\u5883\u53d8\u91cf\u7684\u5177\u4f53\u65b9\u6cd5\u662f\uff0c\u4f9d\u6b21\u8fdb\u5165\u63a7\u5236\u9762\u677f->\u7cfb\u7edf\u548c\u5b89\u5168->\u7cfb\u7edf->\u9ad8\u7ea7->\u73af\u5883\u53d8\u91cf->\u7f16\u8f91\u7cfb\u7edf\u73af\u5883\u53d8\u91cfPath->\u65b0\u5efa->\u628acmder\u8def\u5f84\u6dfb\u52a0\u8fdb\u6765\uff0c\u4fdd\u5b58\u4e4b\u540e\u5c31\u53ef\u4ee5\u7528win+R\u7684\u65b9\u5f0f\u6253\u5f00cmder\u4e86\u3002 \u63a5\u4e0b\u6765\uff0c\u4ee5\u7ba1\u7406\u5458\u65b9\u5f0f\u6253\u5f00cmd\uff0c\u8f93\u5165\u547d\u4ee4 Cmder.exe /REGISTER ALL \u3002\u4e4b\u540e\u5c31\u53ef\u4ee5\u76f4\u63a5\u5728\u53f3\u952e\u4e2d\u6253\u5f00cmder\u4e86\uff01","title":"3.\u4fbf\u6377\u6253\u5f00\u65b9\u5f0f\uff01"},{"location":"misc/wsl/optimization/#4zshon-my-zsh","text":"shell\u7684\u7c7b\u578b\u6709\u5f88\u591a\u79cd\uff0clinux\u4e0b\u9ed8\u8ba4\u7684\u662fbash\uff0c\u867d\u7136bash\u7684\u529f\u80fd\u5df2\u7ecf\u5f88\u5f3a\u5927\uff0c\u4f46\u5bf9\u4e8e\u4ee5\u61d2\u60f0\u4e3a\u7f8e\u5fb7\u7684\u7a0b\u5e8f\u5458\u6765\u8bf4\uff0cbash\u7684\u63d0\u793a\u529f\u80fd\u4e0d\u591f\u5f3a\u5927\uff0c\u754c\u9762\u4e5f\u4e0d\u591f\u70ab\uff0c\u5e76\u975e\u7406\u60f3\u5de5\u5177\u3002 \u800czsh\u7684\u529f\u80fd\u6781\u5176\u5f3a\u5927\uff0c\u53ea\u662f\u914d\u7f6e\u8fc7\u4e8e\u590d\u6742\uff0c\u8d77\u521d\u53ea\u6709\u6781\u5ba2\u624d\u5728\u7528\u3002\u540e\u6765\uff0c\u6709\u4e2a\u7a77\u6781\u65e0\u804a\u7684\u7a0b\u5e8f\u5458\u53ef\u80fd\u662f\u5b9e\u5728\u770b\u4e0d\u4e0b\u53bb\u5e7f\u5927\u733f\u53cb\u4e00\u76f4\u53ea\u80fd\u4f7f\u7528\u5355\u8c03\u7684bash, \u4e8e\u662f\u4ed6\u521b\u5efa\u4e86\u4e00\u4e2a\u540d\u4e3a oh-my-zsh \u7684\u5f00\u6e90\u9879\u76ee\uff0cthen\uff0c\u6211\u8fd9\u79cd\u849f\u84bb\u4e5f\u80fd\u7528\u4e0azsh\u4e86\u3002 (1)\u5b89\u88c5zsh 1 2 sudo aptitude update sudo aptitude install zsh \uff082\uff09\u8bbe zsh \u4e3a\u9ed8\u8ba4shell 1 chsh - s / bin / zsh \uff083\uff09\u5168\u81ea\u52a8\u5b89\u88c5on-my-zsh 1 wget https : // github . com / robbyrussell / oh - my - zsh / raw / master / tools / install . sh - O - | sh","title":"4.\u5b89\u88c5zsh\u548con-my-zsh"},{"location":"misc/wsl/optimization/#zsh","text":"\u901a\u8fc7\u5982\u4e0b\u547d\u4ee4\u53ef\u4ee5\u67e5\u770b\u53ef\u7528\u7684 Theme \uff1a 1 # ls ~/ . oh - my - zsh / themes \u5982\u4f55\u4fee\u6539zsh\u4e3b\u9898\u5462\uff1f \u7f16\u8f91 ~/.zshrc \u6587\u4ef6\uff0c\u5c06 ZSH_THEME=\"candy\" ,\u5c06candy\u4fee\u6539\u4e3a\u4f60\u9700\u60f3\u8981\u7684\u4e3b\u9898\u3002 \u4f46\u7531\u4e8e\u4e3b\u9898\u6ca1\u6709\u663e\u793a\u5b8c\u6574\u8def\u5f84\uff0c\u8981\u505a\u4ee5\u4e0b\u4fee\u6539(\u4ee5robbyrussell)\u4e3a\u4f8b\uff1a 1 nano ~/ . oh - my - zsh / themes / robbyrussell . zsh - theme %c\u4fee\u6539\u4e3a[$PWD] 1 source ~/ . zshrc \u91cd\u542f\u5373\u53ef\u663e\u793a\u5b8c\u6574\u8def\u5f84","title":"zsh\u4e3b\u9898"},{"location":"misc/wsl/optimization/#zsh_1","text":"\u5728 ~/.zshrc \u4e2d\u627e\u5230 plugins \u5173\u952e\u5b57\uff0c\u5c31\u53ef\u4ee5\u81ea\u5b9a\u4e49\u542f\u7528\u7684\u63d2\u4ef6\u4e86\uff0c\u7cfb\u7edf\u9ed8\u8ba4\u52a0\u8f7d git \u3002","title":"zsh\u6269\u5c55"},{"location":"misc/wsl/optimization/#git","text":"\u547d\u4ee4\u5185\u5bb9\u53ef\u4ee5\u53c2\u8003 cat ~/.oh-my-zsh/plugins/git/git.plugin.zsh \u3002 \u5e38\u7528\u7684\uff1a \u7b80\u5199 \u5b8c\u6574 gapa git add --patch gc! git commit -v --amend gcl git clone --recursive gclean git reset --hard && git clean -dfx gcm git checkout master gcmsg git commit -m gco git checkout gd git diff gdca git diff --cached gp git push grbc git rebase --continue gst git status gup git pull --rebase \u5b8c\u6574\u5217\u8868\uff1a https://github.com/robbyrussell/oh-my-zsh/wiki/Plugin:git","title":"git\u63d2\u4ef6"},{"location":"misc/wsl/optimization/#extract","text":"\u89e3\u538b\u6587\u4ef6\u7528\u7684\uff0c\u6240\u6709\u7684\u538b\u7f29\u6587\u4ef6\uff0c\u90fd\u53ef\u4ee5\u76f4\u63a5 x filename \uff0c\u4e0d\u7528\u8bb0\u5fc6\u53c2\u6570 \u5f53\u7136\uff0c\u5982\u679c\u4f60\u60f3\u8981\u7528 tar \u547d\u4ee4\uff0c\u53ef\u4ee5\u4f7f\u7528 tar - \u52a0 tab \u952e\uff0czsh\u4f1a\u5217\u51fa\u53c2\u6570\u7684\u542b\u4e49\u3002","title":"extract"},{"location":"misc/wsl/optimization/#autojump","text":"\u6309\u7167 \u5b98\u65b9\u6587\u6863 \u4ecb\u7ecd\uff0c\u9700\u8981\u7528\u5982\u4e0b\u547d\u4ee4\u5b89\u88c5\uff1a 1 2 3 git clone https : // github . com / wting / autojump cd autojump . / install . py or . / uninstall . py \u5b89\u88c5\u597d\u4e4b\u540e\uff0c\u9700\u8981\u5728 ~/.zshrc \u4e2d\u914d\u7f6e\u4e00\u4e0b\uff0c\u5728\u672b\u5c3e\u6dfb\u52a0\u4e00\u884c\uff1a 1 [[ - s / root / . autojump / etc / profile . d / autojump . sh ]] && source / root / . autojump / etc / profile . d / autojump . sh \u5b89\u88c5\u597d\u4e4b\u540e\uff0c\u8bb0\u5f97 source ~/.zshrc \uff0c\u7136\u540e\u4f60\u5c31\u53ef\u4ee5\u901a\u8fc7 j+\u76ee\u5f55\u540d \u5feb\u901f\u8fdb\u884c\u76ee\u5f55\u8df3\u8f6c\u3002\u652f\u6301\u76ee\u5f55\u540d\u7684\u6a21\u7cca\u5339\u914d\u548c\u81ea\u52a8\u8865\u5168\u3002 j -stat \uff1a\u53ef\u4ee5\u67e5\u770b\u5386\u53f2\u8def\u5f84\u5e93","title":"autojump"},{"location":"misc/wsl/optimization/#zsh-autosuggestions","text":"zsh-autosuggestions 1 git clone git : // github . com / zsh - users / zsh - autosuggestions $ ZSH_CUSTOM / plugins / zsh - autosuggestions \u5728 ~/.zshrc \u4e2d\u914d\u7f6e 1 plugins = ( \u5176\u4ed6\u7684\u63d2\u4ef6 zsh - autosuggestions ) \u56e0\u4e3a\u7bad\u5934 \u2192 \u4e0d\u592a\u65b9\u4fbf\uff0c\u5728 .zshrc \u4e2d\u81ea\u5b9a\u4e49\u8865\u5168\u5feb\u6377\u952e\u4e3a\u9017\u53f7\uff0c\u4f46\u662f\u53c8\u4e00\u6b21\u9047\u5230\u4e86\u9700\u8981\u8f93\u5165\u9017\u53f7\u7684\u60c5\u51b5\uff0c\u6240\u4ee5\uff0c\u5e76\u4e0d\u592a\u63a8\u8350\u5982\u4e0b\u4fee\u6539\uff1a 1 bindkey ',' autosuggest - accept","title":"zsh-autosuggestions"},{"location":"misc/wsl/optimization/#zsh-syntax-highlighting","text":"zsh-syntax-highlighting 1 git clone https : // github . com / zsh - users / zsh - syntax - highlighting . git $ { ZSH_CUSTOM :- ~/.oh - my - zsh / custom } / plugins / zsh - syntax - highlighting ~/.zshrc \u6587\u4ef6\u4e2d\u914d\u7f6e\uff1a 1 plugins = ( \u5176\u4ed6\u7684\u63d2\u4ef6 zsh - syntax - highlighting )","title":"zsh-syntax-highlighting"},{"location":"misc/wsl/optimization/#git-open","text":"git-open \u63d2\u4ef6\u53ef\u4ee5\u5728\u4f60git\u9879\u76ee\u4e0b\u6253\u5f00\u8fdc\u7a0b\u4ed3\u5e93\u6d4f\u89c8\u9879\u76ee\u3002 1 git clone https : // github . com / paulirish / git - open . git $ ZSH_CUSTOM / plugins / git - open","title":"git-open"},{"location":"misc/wsl/optimization/#bat","text":"bat \u4ee3\u66ff cat cat \u67d0\u4e2a\u6587\u4ef6\uff0c\u53ef\u4ee5\u5728\u7ec8\u7aef\u76f4\u63a5\u8f93\u51fa\u6587\u4ef6\u5185\u5bb9\uff0c bat \u76f8\u6bd4 cat \u589e\u52a0\u4e86\u884c\u53f7\u548c\u989c\u8272\u9ad8\u4eae 1 2 wget https : // github . com / sharkdp / bat / releases / download / v0 . 11 . 0 / bat_0 . 11 . 0 _amd64 . deb dpkg - i bat_0 . 11 . 0 _amd64 . deb \u7248\u672c\u53f7\u53ef\u53bb https://github.com/sharkdp/bat/releases \u81ea\u884c\u67e5\u770b0.0","title":"bat"},{"location":"misc/wsl/optimization/#_1","text":"\u547d\u4ee4\u5386\u53f2\u8bb0\u5f55 \u4e00\u65e6\u5728 shell \u6572\u5165\u6b63\u786e\u547d\u4ee4\u5e76\u80fd\u6267\u884c\u540e\uff0cshell \u5c31\u4f1a\u5b58\u50a8\u4f60\u6240\u6572\u5165\u547d\u4ee4\u7684\u5386\u53f2\u8bb0\u5f55\uff08\u5b58\u653e\u5728 ~/.zsh_history \u6587\u4ef6\u4e2d\uff09\uff0c\u65b9\u4fbf\u518d\u6b21\u8fd0\u884c\u4e4b\u524d\u7684\u547d\u4ee4\u3002\u53ef\u4ee5\u6309\u65b9\u5411\u952e\u2191\u548c\u2193\u6765\u67e5\u770b\u4e4b\u524d\u6267\u884c\u8fc7\u7684\u547d\u4ee4 \u53ef\u4ee5\u7528 r \u6765\u6267\u884c\u4e0a\u4e00\u6761\u547d\u4ee4 \u4f7f\u7528 ctrl-r \u6765\u641c\u7d22\u547d\u4ee4\u5386\u53f2\u8bb0\u5f55 \u547d\u4ee4\u522b\u540d \u53ef\u4ee5\u7b80\u5316\u547d\u4ee4\u8f93\u5165\uff0c\u5728 .zshrc \u4e2d\u6dfb\u52a0 alias shortcut='this is the origin command' \u4e00\u884c\u5c31\u76f8\u5f53\u4e8e\u6dfb\u52a0\u4e86\u522b\u540d \u5728\u547d\u4ee4\u884c\u4e2d\u8f93\u5165 alias \u53ef\u4ee5\u67e5\u770b\u6240\u6709\u7684\u547d\u4ee4\u522b\u540d","title":"\u5e38\u7528\u5feb\u6377\u952e"},{"location":"misc/wsl/optimization/#_2","text":"\u8fde\u6309\u4e24\u6b21Tab\u4f1a\u5217\u51fa\u6240\u6709\u7684\u8865\u5168\u5217\u8868\u5e76\u76f4\u63a5\u5f00\u59cb\u9009\u62e9\uff0c\u8865\u5168\u9879\u53ef\u4ee5\u4f7f\u7528 ctrl+n/p/f/b\u4e0a\u4e0b\u5de6\u53f3\u5207\u6362 \u667a\u80fd\u8df3\u8f6c\uff0c\u5b89\u88c5\u4e86 autojump \u4e4b\u540e\uff0czsh \u4f1a\u81ea\u52a8\u8bb0\u5f55\u4f60\u8bbf\u95ee\u8fc7\u7684\u76ee\u5f55\uff0c\u901a\u8fc7 j \u76ee\u5f55\u540d \u53ef\u4ee5\u76f4\u63a5\u8fdb\u884c\u76ee\u5f55\u8df3\u8f6c\uff0c\u800c\u4e14\u76ee\u5f55\u540d\u652f\u6301\u6a21\u7cca\u5339\u914d\u548c\u81ea\u52a8\u8865\u5168\uff0c\u4f8b\u5982\u4f60\u8bbf\u95ee\u8fc7 hadoop-1.0.0 \u76ee\u5f55\uff0c\u8f93\u5165j hado \u5373\u53ef\u6b63\u786e\u8df3\u8f6c\u3002j --stat \u53ef\u4ee5\u770b\u4f60\u7684\u5386\u53f2\u8def\u5f84\u5e93\u3002 \u547d\u4ee4\u9009\u9879\u8865\u5168\u3002\u5728zsh\u4e2d\u53ea\u9700\u8981\u952e\u5165 tar - \u5c31\u4f1a\u5217\u51fa\u6240\u6709\u7684\u9009\u9879\u548c\u5e2e\u52a9\u8bf4\u660e \u5728\u5f53\u524d\u76ee\u5f55\u4e0b\u8f93\u5165 .. \u6216 ... \uff0c\u6216\u76f4\u63a5\u8f93\u5165\u5f53\u524d\u76ee\u5f55\u540d\u90fd\u53ef\u4ee5\u8df3\u8f6c\uff0c\u4f60\u751a\u81f3\u4e0d\u518d\u9700\u8981\u8f93\u5165 cd \u547d\u4ee4\u4e86\u3002\u5728\u4f60\u77e5\u9053\u8def\u5f84\u7684\u60c5\u51b5\u4e0b\uff0c\u6bd4\u5982 /usr/local/bin \u4f60\u53ef\u4ee5\u8f93\u5165 cd /u/l/b \u7136\u540e\u6309\u8fdb\u884c\u8865\u5168\u5feb\u901f\u8f93\u5165 \u76ee\u5f55\u6d4f\u89c8\u548c\u8df3\u8f6c\uff1a\u8f93\u5165 d\uff0c\u5373\u53ef\u5217\u51fa\u4f60\u5728\u8fd9\u4e2a\u4f1a\u8bdd\u91cc\u8bbf\u95ee\u7684\u76ee\u5f55\u5217\u8868\uff0c\u8f93\u5165\u5217\u8868\u524d\u7684\u5e8f\u53f7\uff0c\u5373\u53ef\u76f4\u63a5\u8df3\u8f6c\u3002 \u547d\u4ee4\u53c2\u6570\u8865\u5168\u3002\u952e\u5165 kill <tab> \u5c31\u4f1a\u5217\u51fa\u6240\u6709\u7684\u8fdb\u7a0b\u540d\u548c\u5bf9\u5e94\u7684\u8fdb\u7a0b\u53f7 \u66f4\u667a\u80fd\u7684\u5386\u53f2\u547d\u4ee4\u3002\u5728\u7528\u6216\u8005\u65b9\u5411\u4e0a\u952e\u67e5\u627e\u5386\u53f2\u547d\u4ee4\u65f6\uff0czsh\u652f\u6301\u9650\u5236\u67e5\u627e\u3002\u6bd4\u5982\uff0c\u8f93\u5165ls,\u7136\u540e\u518d\u6309\u65b9\u5411\u4e0a\u952e\uff0c\u5219\u53ea\u4f1a\u67e5\u627e\u7528\u8fc7\u7684ls\u547d\u4ee4\u3002\u800c\u6b64\u65f6\u4f7f\u7528\u5219\u4f1a\u4ecd\u7136\u6309\u4e4b\u524d\u7684\u65b9\u5f0f\u67e5\u627e\uff0c\u5ffd\u7565 ls \u591a\u4e2a\u7ec8\u7aef\u4f1a\u8bdd\u5171\u4eab\u5386\u53f2\u8bb0\u5f55 \u901a\u914d\u7b26\u641c\u7d22\uff1a ls -l **/*.sh \uff0c\u53ef\u4ee5\u9012\u5f52\u663e\u793a\u5f53\u524d\u76ee\u5f55\u4e0b\u7684 shell \u6587\u4ef6\uff0c\u6587\u4ef6\u5c11\u65f6\u53ef\u4ee5\u4ee3\u66ff find \u3002\u4f7f\u7528 **/ \u6765\u9012\u5f52\u641c\u7d22 \u6269\u5c55\u73af\u5883\u53d8\u91cf\uff0c\u8f93\u5165\u73af\u5883\u53d8\u91cf\u7136\u540e\u6309 \u5c31\u53ef\u4ee5\u8f6c\u6362\u6210\u8868\u8fbe\u7684\u503c \u5728 .zshrc \u4e2d\u6dfb\u52a0 setopt HIST_IGNORE_DUPS \u53ef\u4ee5\u6d88\u9664\u91cd\u590d\u8bb0\u5f55\uff0c\u4e5f\u53ef\u4ee5\u5229\u7528 sort -t \";\" -k 2 -u ~/.zsh_history | sort -o ~/.zsh_history \u624b\u52a8\u6e05\u9664","title":"\u4f7f\u7528\u6280\u5de7"},{"location":"misc/wsl/questions/","text":"1.\u5b50\u7cfb\u7edf\u8fd0\u884c32\u4f4d\u7a0b\u5e8f\u95ee\u9898 1 2 3 4 sudo apt update sudo apt install lib32ncurses5 lib32z1 sudo apt install qemu - user - static sudo update - binfmts --install i386 /usr/bin/qemu-i386-static --magic '\\x7fELF\\x01\\x01\\x01\\x03\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x03\\x00\\x03\\x00\\x01\\x00\\x00\\x00' --mask '\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xfc\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xf8\\xff\\xff\\xff\\xff\\xff\\xff\\xff' 2.\u7531\u7b2c1\u4e2a\u95ee\u9898\u5f15\u53d1\u7684\u4f9d\u8d56\u5305\u95ee\u9898-aptitude \u5b89\u88c5 aptitude \u4e0e apt-get \u4e00\u6837\uff0c\u662f Debian \u53ca\u5176\u884d\u751f\u7cfb\u7edf\u4e2d\u529f\u80fd\u6781\u5176\u5f3a\u5927\u7684\u5305\u7ba1\u7406\u5de5\u5177\u3002\u4e0e apt-get \u4e0d\u540c\u7684\u662f\uff0captitude \u5728\u5904\u7406\u4f9d\u8d56\u95ee\u9898\u4e0a\u66f4\u4f73\u4e00\u4e9b\u3002\u4e3e\u4f8b\u6765\u8bf4\uff0captitude \u5728\u5220\u9664\u4e00\u4e2a\u5305\u65f6\uff0c\u4f1a\u540c\u65f6\u5220\u9664\u672c\u8eab\u6240\u4f9d\u8d56\u7684\u5305\u3002\u8fd9\u6837\uff0c\u7cfb\u7edf\u4e2d\u4e0d\u4f1a\u6b8b\u7559\u65e0\u7528\u7684\u5305\uff0c\u6574\u4e2a\u7cfb\u7edf\u66f4\u4e3a\u5e72\u51c0\uff1baptitude\u5728\u5b89\u88c5\u8f6f\u4ef6\u65f6\uff0c\u4f1a\u540c\u65f6\u5b89\u88c5/\u66f4\u65b0\u5176\u4f9d\u8d56\u5305\u3002 \u4e0d\u8fc7\u5728\u56fd\u5185\u6e90\u5b89\u88c5aptitude\u662f\u4f1a\u5c06apt\u5220\u9664\u7684\uff0c\u800c\u5220\u9664\u540e\u5c31\u627e\u4e0d\u5230\u5b89\u88c5\u6e90\u4e86\uff0c\u6240\u4ee5\u6211\u5b89\u88c5\u7684\u65f6\u5019\u662f\u7528\u7684Ubuntu\u81ea\u5e26\u6e90\u5b89\u88c5\u7684\uff0c\u5c31\u4e0d\u4f1a\u8986\u76d6apt\uff0c\u4e5f\u5c31\u662fapt\u548captitude\u5171\u5b58 \u4ee5\u4e0b\u662f\u5927\u4f6c(\u4e0d\u662f\u62110.0)\u603b\u7ed3\u7684\u4e00\u4e9b\u5e38\u7528 aptitude \u547d\u4ee4\uff0c\u4ec5\u4f9b\u53c2\u8003\u3002 aptitude update \u66f4\u65b0\u53ef\u7528\u7684\u5305\u5217\u8868 aptitude upgrade \u5347\u7ea7\u53ef\u7528\u7684\u5305 aptitude dist-upgrade \u5c06\u7cfb\u7edf\u5347\u7ea7\u5230\u65b0\u7684\u53d1\u884c\u7248 aptitude install pkgname \u5b89\u88c5\u5305 aptitude remove pkgname \u5220\u9664\u5305 aptitude purge pkgname \u5220\u9664\u5305\u53ca\u5176\u914d\u7f6e\u6587\u4ef6 aptitude search string \u641c\u7d22\u5305 aptitude show pkgname \u663e\u793a\u5305\u7684\u8be6\u7ec6\u4fe1\u606f aptitude clean \u5220\u9664\u4e0b\u8f7d\u7684\u5305\u6587\u4ef6 aptitude autoclean \u4ec5\u5220\u9664\u8fc7\u671f\u7684\u5305\u6587\u4ef6 aptitude\u8f6f\u4ef6\u5305\u5217\u8868\u4e2d\u7684\u8f6f\u4ef6\u5305\u72b6\u6001: v \u865a\u62df B \u635f\u574f u \u89e3\u5305 C \u9884\u914d\u7f6e H \u9884\u5b89\u88c5 c \u5378\u8f7d\u672a\u6e05\u9664 p \u6e05\u9664\u8f6f\u4ef6 i \u5df2\u7ecf\u5b89\u88c5 E \u5185\u90e8\u9519\u8bef \u5728aptitude\u8f6f\u4ef6\u5305\u5217\u8868\u4e2d\u7684\u8bf7\u6c42\u64cd\u4f5c: h \u4fdd\u6301 p \u6e05\u9664 d \u5220\u9664\uff08\u5378\u8f7d\uff09 B \u635f\u574f i \u5b89\u88c5 r \u91cd\u88c5 u \u5347\u7ea7 \u6709\u7684\u95ee\u9898 apt-get \u89e3\u51b3\u4e0d\u4e86\uff0c\u5fc5\u987b\u4f7f\u7528 aptitude \u89e3\u51b3\uff0c\u6709\u7684\u95ee\u9898\uff0c\u7528 aptitude \u89e3\u51b3\u4e0d\u4e86\uff0c\u5fc5\u987b\u4f7f\u7528 apt-get * aptitude \u89e3\u51b3\u5f97\u66f4\u597d\u7684\u5730\u65b9\uff1a install, remove, reinstall\uff08apt-get\u65e0\u6b64\u529f\u80fd\uff09, show\uff08apt-get\u65e0\u6b64\u529f\u80fd\uff09, search\uff08apt-get\u65e0\u6b64\u529f\u80fd\uff09, hold\uff08apt-get\u65e0\u6b64\u529f\u80fd\uff09, unhold\uff08apt-get\u65e0\u6b64\u529f\u80fd\uff09, * apt-get \u89e3\u51b3\u5f97\u66f4\u597d\u7684\u5730\u65b9\uff1a source\uff08aptitude\u65e0\u6b64\u529f\u80fd\uff09, build-dep \uff08\u4f4e\u7248\u672c\u7684aptitude\u6ca1\u6709build-dep\u529f\u80fd\uff09 apt-get \u8ddf aptitude \u6ca1\u4ec0\u4e48\u533a\u522b\u7684\u5730\u65b9\uff1aupdate, upgrade (apt-get upgrade=aptitude safe-upgrade, apt-get dist-upgrade=aptitude full-upgrgade) ### 3.GUI\u754c\u9762\u65e0\u6cd5\u94fe\u63a5 \u63d0\u793a 1 2 3 4 5 6 7 8 9 10 11 12 / usr / lib / python2 . 7 / dist - packages / gtk - 2.0 / gtk / __init__ . py : 57 : GtkWarning : could not open display warnings . warn ( str ( e ), _gtk . Warning ) Traceback ( most recent call last ): File \"/usr/bin/ccsm\" , line 94 , in < module > import ccm File \"/usr/lib/python2.7/dist-packages/ccm/__init__.py\" , line 1 , in < module > from ccm.Conflicts import * File \"/usr/lib/python2.7/dist-packages/ccm/Conflicts.py\" , line 26 , in < module > from ccm.Constants import * File \"/usr/lib/python2.7/dist-packages/ccm/Constants.py\" , line 30 , in < module > CurrentScreenNum = gtk . gdk . display_get_default () . get_default_screen () . get_number () AttributeError : 'NoneType' object has no attribute 'get_default_screen' \u65e0\u6cd5\u89e3\u51b3\u3002","title":"\u6742\u4e03\u6742\u516b\u95ee\u9898"},{"location":"misc/wsl/questions/#132","text":"1 2 3 4 sudo apt update sudo apt install lib32ncurses5 lib32z1 sudo apt install qemu - user - static sudo update - binfmts --install i386 /usr/bin/qemu-i386-static --magic '\\x7fELF\\x01\\x01\\x01\\x03\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x03\\x00\\x03\\x00\\x01\\x00\\x00\\x00' --mask '\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xfc\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xf8\\xff\\xff\\xff\\xff\\xff\\xff\\xff'","title":"1.\u5b50\u7cfb\u7edf\u8fd0\u884c32\u4f4d\u7a0b\u5e8f\u95ee\u9898"},{"location":"misc/wsl/questions/#21-aptitude","text":"aptitude \u4e0e apt-get \u4e00\u6837\uff0c\u662f Debian \u53ca\u5176\u884d\u751f\u7cfb\u7edf\u4e2d\u529f\u80fd\u6781\u5176\u5f3a\u5927\u7684\u5305\u7ba1\u7406\u5de5\u5177\u3002\u4e0e apt-get \u4e0d\u540c\u7684\u662f\uff0captitude \u5728\u5904\u7406\u4f9d\u8d56\u95ee\u9898\u4e0a\u66f4\u4f73\u4e00\u4e9b\u3002\u4e3e\u4f8b\u6765\u8bf4\uff0captitude \u5728\u5220\u9664\u4e00\u4e2a\u5305\u65f6\uff0c\u4f1a\u540c\u65f6\u5220\u9664\u672c\u8eab\u6240\u4f9d\u8d56\u7684\u5305\u3002\u8fd9\u6837\uff0c\u7cfb\u7edf\u4e2d\u4e0d\u4f1a\u6b8b\u7559\u65e0\u7528\u7684\u5305\uff0c\u6574\u4e2a\u7cfb\u7edf\u66f4\u4e3a\u5e72\u51c0\uff1baptitude\u5728\u5b89\u88c5\u8f6f\u4ef6\u65f6\uff0c\u4f1a\u540c\u65f6\u5b89\u88c5/\u66f4\u65b0\u5176\u4f9d\u8d56\u5305\u3002 \u4e0d\u8fc7\u5728\u56fd\u5185\u6e90\u5b89\u88c5aptitude\u662f\u4f1a\u5c06apt\u5220\u9664\u7684\uff0c\u800c\u5220\u9664\u540e\u5c31\u627e\u4e0d\u5230\u5b89\u88c5\u6e90\u4e86\uff0c\u6240\u4ee5\u6211\u5b89\u88c5\u7684\u65f6\u5019\u662f\u7528\u7684Ubuntu\u81ea\u5e26\u6e90\u5b89\u88c5\u7684\uff0c\u5c31\u4e0d\u4f1a\u8986\u76d6apt\uff0c\u4e5f\u5c31\u662fapt\u548captitude\u5171\u5b58 \u4ee5\u4e0b\u662f\u5927\u4f6c(\u4e0d\u662f\u62110.0)\u603b\u7ed3\u7684\u4e00\u4e9b\u5e38\u7528 aptitude \u547d\u4ee4\uff0c\u4ec5\u4f9b\u53c2\u8003\u3002 aptitude update \u66f4\u65b0\u53ef\u7528\u7684\u5305\u5217\u8868 aptitude upgrade \u5347\u7ea7\u53ef\u7528\u7684\u5305 aptitude dist-upgrade \u5c06\u7cfb\u7edf\u5347\u7ea7\u5230\u65b0\u7684\u53d1\u884c\u7248 aptitude install pkgname \u5b89\u88c5\u5305 aptitude remove pkgname \u5220\u9664\u5305 aptitude purge pkgname \u5220\u9664\u5305\u53ca\u5176\u914d\u7f6e\u6587\u4ef6 aptitude search string \u641c\u7d22\u5305 aptitude show pkgname \u663e\u793a\u5305\u7684\u8be6\u7ec6\u4fe1\u606f aptitude clean \u5220\u9664\u4e0b\u8f7d\u7684\u5305\u6587\u4ef6 aptitude autoclean \u4ec5\u5220\u9664\u8fc7\u671f\u7684\u5305\u6587\u4ef6 aptitude\u8f6f\u4ef6\u5305\u5217\u8868\u4e2d\u7684\u8f6f\u4ef6\u5305\u72b6\u6001: v \u865a\u62df B \u635f\u574f u \u89e3\u5305 C \u9884\u914d\u7f6e H \u9884\u5b89\u88c5 c \u5378\u8f7d\u672a\u6e05\u9664 p \u6e05\u9664\u8f6f\u4ef6 i \u5df2\u7ecf\u5b89\u88c5 E \u5185\u90e8\u9519\u8bef \u5728aptitude\u8f6f\u4ef6\u5305\u5217\u8868\u4e2d\u7684\u8bf7\u6c42\u64cd\u4f5c: h \u4fdd\u6301 p \u6e05\u9664 d \u5220\u9664\uff08\u5378\u8f7d\uff09 B \u635f\u574f i \u5b89\u88c5 r \u91cd\u88c5 u \u5347\u7ea7 \u6709\u7684\u95ee\u9898 apt-get \u89e3\u51b3\u4e0d\u4e86\uff0c\u5fc5\u987b\u4f7f\u7528 aptitude \u89e3\u51b3\uff0c\u6709\u7684\u95ee\u9898\uff0c\u7528 aptitude \u89e3\u51b3\u4e0d\u4e86\uff0c\u5fc5\u987b\u4f7f\u7528 apt-get * aptitude \u89e3\u51b3\u5f97\u66f4\u597d\u7684\u5730\u65b9\uff1a install, remove, reinstall\uff08apt-get\u65e0\u6b64\u529f\u80fd\uff09, show\uff08apt-get\u65e0\u6b64\u529f\u80fd\uff09, search\uff08apt-get\u65e0\u6b64\u529f\u80fd\uff09, hold\uff08apt-get\u65e0\u6b64\u529f\u80fd\uff09, unhold\uff08apt-get\u65e0\u6b64\u529f\u80fd\uff09, * apt-get \u89e3\u51b3\u5f97\u66f4\u597d\u7684\u5730\u65b9\uff1a source\uff08aptitude\u65e0\u6b64\u529f\u80fd\uff09, build-dep \uff08\u4f4e\u7248\u672c\u7684aptitude\u6ca1\u6709build-dep\u529f\u80fd\uff09 apt-get \u8ddf aptitude \u6ca1\u4ec0\u4e48\u533a\u522b\u7684\u5730\u65b9\uff1aupdate, upgrade (apt-get upgrade=aptitude safe-upgrade, apt-get dist-upgrade=aptitude full-upgrgade) ### 3.GUI\u754c\u9762\u65e0\u6cd5\u94fe\u63a5 \u63d0\u793a 1 2 3 4 5 6 7 8 9 10 11 12 / usr / lib / python2 . 7 / dist - packages / gtk - 2.0 / gtk / __init__ . py : 57 : GtkWarning : could not open display warnings . warn ( str ( e ), _gtk . Warning ) Traceback ( most recent call last ): File \"/usr/bin/ccsm\" , line 94 , in < module > import ccm File \"/usr/lib/python2.7/dist-packages/ccm/__init__.py\" , line 1 , in < module > from ccm.Conflicts import * File \"/usr/lib/python2.7/dist-packages/ccm/Conflicts.py\" , line 26 , in < module > from ccm.Constants import * File \"/usr/lib/python2.7/dist-packages/ccm/Constants.py\" , line 30 , in < module > CurrentScreenNum = gtk . gdk . display_get_default () . get_default_screen () . get_number () AttributeError : 'NoneType' object has no attribute 'get_default_screen' \u65e0\u6cd5\u89e3\u51b3\u3002","title":"2.\u7531\u7b2c1\u4e2a\u95ee\u9898\u5f15\u53d1\u7684\u4f9d\u8d56\u5305\u95ee\u9898-aptitude\u5b89\u88c5"},{"location":"misc/wsl/reference/","text":"\u53c2\u8003\u8d44\u6599\uff1a 1. https://onlycaptain.github.io/2018/09/30/Windows%E4%B8%8BLinux%E5%AD%90%E7%B3%BB%E7%BB%9F%E8%BF%81%E7%A7%BB%E5%88%B0%E9%9D%9E%E7%B3%BB%E7%BB%9F%E7%9B%98/ 2. https://zhuanlan.zhihu.com/WindowsSubsystemForLinux 3. https://www.jianshu.com/p/dc32a75e2de4 4. https://blog.csdn.net/shengerjianku/article/details/82290482 5. https://blog.csdn.net/yili_xie/article/details/4803314 6. https://segmentfault.com/a/1190000013612471","title":"\u53c2\u8003\u8d44\u6599"}]}